[
  {
    "id": 109145514,
    "slug": "shkqwao85pxqdcgl",
    "title": "JS 垃圾回收机制",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: JS垃圾回收机制<br />categories: JS<br />date: 2022-11-19<br />updated: 2022-11-19<br />tags: [JS,垃圾回收]<br />cover: https://img1.baidu.com/it/u=3556875364,2935983115&fm=253&fmt=auto&app=138&f=JPEG<br />--- <br />**内存溢出**：程序运行出现的错误，就像水杯，满了之后再加水就溢出了。同理，内存溢出就是程序运行所需的内存大于可用内存，就出现内存溢出错误。\n> 例子：写一个千万级别的循环，然后用浏览器打开，浏览器就会非常卡，甚至直接报错内存不足，崩溃了。不同浏览器有不同的表现。\n\n**产生原因**：内存溢出一般是**内存泄漏**造成的，占用的内存不需要用到了，但是没有及时释放。内存泄漏积累的多了轻则会系统性能，重则直接引起内存溢出系统崩溃。\n<a name=\"wPZ1Y\"></a>\n### 哪些场景会引发内存泄漏？\n\n1. 全局变量引起的内存泄漏：\n\n根据JS的垃圾回收机制，全局变量不会被回收，所以一些意外的、不需要的全局变量多了，没有释放，就造成了内存泄漏。\n\n2. [闭包](https://blog.csdn.net/qq_45479404/article/details/124843856)：\n\n内部的变量因为被闭包引用得不到释放，会造成内存泄漏。因此我们在开发过程中，尽量不要使用闭包。\n\n3. 计时器、回调、监听等事件没有移除：\n\n这些事件没有移除是一直存在的，一直存在没有被释放就会造成内存泄漏。\n\n4. 给DOM添加属性或方法：\t\n\n给DOM添加属性或方法等，也会造成变量引用得不到释放，造成内存泄漏。<br />最核心的：由于垃圾回收机制，全局变量或者是被全局变量引用，垃圾回收机制就无法回收。如果一些用完一次就不再使用的没有释放，那么积累的多了，就容易造成内存溢出。\n<a name=\"kKlPd\"></a>\n### JS 内存管理\n\n1. 分配给`使用者`所需的内存\n2. `使用者`拿到这些内存，并使用内存\n3. `使用者`不需要这些内存了，释放并归还给系统\n\n变量就是`使用者`。\n> JS数据类型分为；基本数据类型 和 引用数据类型。\n> - 基本数据类型：大小固定，值保存在`栈内存`中，可通过值直接访问。\n> - 引用数据类型：大小不固定（∵ 可加属性），`栈内存`中存着指针，指向`堆内存`中的对象空间， 通过引用来访问。\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png#averageHue=%23fcf9f8&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=356&id=ua3796757&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=885&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25990&status=done&style=none&taskId=uaadda59b-863b-401d-993c-56443f41c76&title=&width=885)\n\n- 栈内存的内存都是`操作系统自动分配和释放回收的`（由于栈内存所存的基础数据类型大小是固定的）\n- JS堆内存需要JS引擎手动释放这些内存（由于堆内存所存大小不固定，系统无法自动释放回收）\n<a name=\"IeeMt\"></a>\n### 为什么要进行垃圾回收？\n在Chrome中，V8被限制了内存的使用（64位约1.4G/1464MB，32位约0.7G/732MB）。<br />限制内存使用的原因：\n\n- 表层：V8最初为浏览器而设计，不太可能遇到用大量内存的场景\n- 深层：V8的垃圾回收机制的限制（如果清理大量的内存垃圾很耗时间，这样会引起JS线程暂时执行的时间，性能和应用直线下降）\n> 当我们的代码没有按照正确的写法时，会使得JS引擎的垃圾回收机制无法正确的对内存进行释放（内存泄漏），从而使得浏览器占用的内存不断增加，进而导致JS和应用、操作系统性能下降。\n\n<a name=\"Dj75r\"></a>\n### V8的垃圾回收算法\n<a name=\"JEhWy\"></a>\n#### 分代回收\n在JS中，对象存活周期分为两种情况：\n\n- 存活周期很短：经过一次垃圾回收后，就被释放回收掉。\n- 存活周期很长：经过多次垃圾回收后，还存在。\n\n产生问题：对于存活周期长的，多次回收都回收不掉，明知回收不掉，却还不断地去回收，不是很消耗性能吗？<br />对于此问题，V8做了**分代回收**的优化方法。即：**V8将堆分为两个空间，一个叫新生代，一个叫老生代。新生代是存放存活周期短对象的地方，老生代是存放存活周期长对象的地方。**\n> 新生代容量：1-8M。而老生代容量很大。对于这两块区域，V8分别做了**不同的垃圾回收器和不同的垃圾回收算法**，以致于更高效地进行垃圾回收。\n> - 副垃圾回收器 + Scavenge 算法：主要负责新生代的垃圾回收\n> - 主垃圾回收器 + Mark-Sweep && Mark-Compact 算法\n\n<a name=\"liInW\"></a>\n##### 新生代\n在JS中，任何对象的声明分配到的内存，将会先放到新生代中，而因为大部分对象在内存中存活的周期很短，所以需要一个效率非常高的算法。在新生代中，主要使用Scavenge算法进行垃圾回收，Scavenge算法是一个典型的牺牲空间换取时间的复制算法，在占用空间不大的场景上非常适用。<br />Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，工作方式也很简单，就是将from-space中存活的活动对象复制到to-space中，并将这些对象的内存有序排列起来，然后将from-space中的非活动对象的内存进行释放，完成后，将from space和to space进行互换，这样可以使得新生代中的这两块区域可以重复利用。<br />具体步骤：\n\n1. 标记活动对象和非活动对象\n2. 复制from-space的活动对象到to-space中并进行排序\n3. 清除from-space中的非活动对象\n4. 将 from-space和to-space进行角色互换，以便下一次的Scavenge算法垃圾回收\n> 垃圾回收器如何知道哪些是活动对象，哪些是非活动对象呢？\n> - 从初始的根对象（window或global）的指针开始，向下搜索子节点，子节点就被搜索到了，说明该子节点的引用对象可达，并为其进行标记。\n> - 然后接着递归搜索，直到所有的子节点被遍历结束。\n> - 那么没有被遍历到的节点，就没有标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。\n\n💬 新生代中的对象什么时候变成老生代？<br />在新生代中，还进一步进行了细分。分为 nursery子代 和 intermediate子代 两个区域，一个对象第一次分配内存时会被分配到新生代中的nursery子代，如果经过下一次的垃圾回收这个对象还存在新生代中，这时，我们将此对象移动到intermedidate子代，在经过下一次垃圾回收，如果这个对象还在新生代中，副垃圾回收器 会将该对象移动到老生代中，这个移动的过程被称为**晋升**。\n<a name=\"jLe40\"></a>\n##### 老生代\n老生代空间：新生代空间的对象，身经百战后，留下来的老对象，成功晋升到了老生代中。<br />       由于这些对象都是经过多次回收过程但是没有被回收走的，都是一群生命力顽强、存活率高的对象，所以老生代中，回收算法不宜使用Scavenge算法。<br />原因：\n\n- Scavenge算法是复制算法，反复复制这些存活率高的对象，没有什么意义，效率极低。\n- Scavenge算法是以空间换时间的算法，老生代是内存很大的空间，如果使用Scavenge算法，空间资源非常浪费。\n\n因此，老生代里使用了Mark-Sweep算法（标记清理）和 Mark-Compact算法（标记整理）。<br />**Mark-Sweep（标记清理）**<br />Mark-Sweep分为两个阶段，标记和清理阶段，之前的Scavenge算法 也有标记和清理，但是Mark-Sweep算法跟Scavenge算法的区别是，后者需要复制再清理，前者不需要，Mark-Sweep直接标记活动对象和非活动对象之后，就直接执行清理了。\n\n- 标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记\n- 清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。\n\n**Mark-Compact（标记整理）**<br />Mark-Sweep算法执行垃圾回收之后，留下了很多零零散散的空位。坏处：如果此时进来了一个大对象，需要对此对象分配一个大内存，先从零零散散的空位中找位置，找了一圈，发现没有适合自己大小的空位，只好拼在了最后，这个寻找空位的过程是耗性能的，这也是Mark-Sweep算法的一个缺点。<br />Mark-Compact算法是Mark-Sweep算法的加强版，在Mark-Sweep算法的基础上，加上了`整理阶段`，每次清理完非活动对象，就会把剩下的活动对象，整理到内存的一侧，整理完成后，直接回收掉边界上的内存。 \n<a name=\"qXQ7q\"></a>\n#### 全停顿（Stop-The-World）\nJS代码的运行要用到JS引擎，垃圾回收也要用到JS引擎，如果这两者同时进行了，发生冲突了，怎么办？答案：垃圾回收优先于代码执行，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，成为全停顿。<br />由于新生代空间小，并且存活对象少，再配合Scavenge算法，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多时，停顿时间就会较长，使得页面出现了卡顿现象。\n<a name=\"LzlsH\"></a>\n#### Orinoco优化\norinoco是V8的垃圾回收器的项目代号，为了提升用户体验，解决全停顿问题，它提出了增量标记、懒性清理、并发、并行的优化方法。\n<a name=\"qJ8qA\"></a>\n##### 增量标记（Incremental marking）\n增量标记是在`标记`这个阶段进行了优化。<br />当垃圾少量时，不会做增量标记优化，但是当垃圾达到一定数量时，增量标记就会开启：标记一点，JS代码运行一段，从而提高效率。\n<a name=\"ySJcw\"></a>\n##### 惰性清理（Lazy sweeping）\n惰性清理针对`清除`阶段。在增量标记后，要进行清理非活动对象时，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就`延迟了清理`，让JS代码先执行，或者`只清理部分垃圾`，而不清理全部。这个优化就叫做`惰性清理`。<br />整理标记和惰性清理的出现，大大改善了`全停顿`的现象。但是产生了问题：增量`标记是标记一点，JS运行一段`。如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。<br />总结一下就是：标记和代码执行的穿插，有可能造成`对象引用改变，标记错误`现象。这就需要使用`写屏障`技术来记录这些引用关系的变化。\n<a name=\"TuPmj\"></a>\n##### 并发（Concurrent）\n并发式GC允许在垃圾回收时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JS代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行`写屏障`操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851619218-0efd0aee-9227-4585-9745-d95f8bcacd7c.png#averageHue=%23b5e19a&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=147&id=u0aee8473&margin=%5Bobject%20Object%5D&name=image.png&originHeight=147&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56932&status=done&style=none&taskId=u19ceca22-5e5e-4460-bade-47f1ebaf8b4&title=&width=718)\n<a name=\"VcQ3Z\"></a>\n##### 并行\n并行式GC运行主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851771272-d5454f1b-90b5-4cbd-83bb-8d1805c9bce1.png#averageHue=%23f6f6f6&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=139&id=ue342693c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=139&originWidth=608&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52245&status=done&style=none&taskId=ucd478771-10dc-4006-83a3-1f89d520c4e&title=&width=608)\n<a name=\"wEroB\"></a>\n### V8当前的垃圾回收机制\n2011年，V8应用了增量标记机制。2018年，Chrome64和Node.js V10启动`并发（Concurrent）`，同时在并发基础上添加`并行（Parallel）技术`，使得垃圾回收时间大幅度缩短。\n<a name=\"rvy9V\"></a>\n#### 副垃圾回收器\nV8在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从from-to复制到`space-to`时，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8在第一个线程对活动对象进行复制并且复制完成后，都必须去维护这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670852581283-0012ecbd-7021-4bfa-bf9b-64bd4ee61947.png#averageHue=%23f6f6f6&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=142&id=u33593aab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=142&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52347&status=done&style=none&taskId=u46c50273-8903-4249-a83f-795e67d5c8a&title=&width=614)\n<a name=\"wXu3d\"></a>\n#### 主垃圾回收器\nV8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在JS代码执行时，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JS代码修改时，`写屏障`技术在辅助线程在进行并发标记时进行追踪。<br />当并发标记完成或动态分配的内存达到极限时，主线程会执行最终的快速标记步骤，这时主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行check操作，确认操作完成后，某些辅助线程会进行清理内存操作，某些辅助线程会进行内存整理操作，由于都是并发的，并不会影响主线程JS代码的执行。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670891665363-ab526d91-530b-485d-a461-ebfd7da717ef.png#averageHue=%23eaf5dc&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=160&id=u97b0bb01&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=680&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66145&status=done&style=none&taskId=ua5f38ef3-e648-452a-bada-462d2332057&title=&width=680)\n<a name=\"jDgwF\"></a>\n### 问题及解答\n<a name=\"qFF42\"></a>\n#### 浏览器怎么进行垃圾回收？\n> 从三个点来回答什么是垃圾、如何捡垃圾、什么时候捡垃圾\n\n什么是垃圾？\n\n1. 不再需要，即为垃圾\n2. 全局变量随时可能用到，所以一定不是垃圾\n\n如何捡垃圾（遍历算法）？\n\n1. 标记空间中「可达」值\n   1. 从根节点（Root）出发，遍历所有的对象\n   2. 可以遍历到的对象，是可达的（reachable）\n   3. 没有遍历到的对象，不可达的（unreachable）\n2. 回收「不可达」的值所占据的内存\n3. 做内存整理\n\n什么时候捡垃圾？\n\n1. 前端有其特殊性，垃圾回收时会造成页面卡顿\n2. 分代收集、增量收集、闲时收集\n<a name=\"W65fb\"></a>\n#### 浏览器中不同类型变量的内存都是何时释放？\nJS中类型：值类型、引用类型\n\n- 引用类型\n   - 在没有引用之后，通过V8自动回收\n- 值类型\n   - 如果处于闭包的情况下，要等闭包没有引用才会被V8回收\n   - 非闭包的情况下，等待V8的新生代切换时回收\n<a name=\"VFWLI\"></a>\n#### 哪些情况会导致内存泄漏？如何避免？\n内存泄漏是指你「用不到」（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。\n> 以Vue为例，通常会有这些情况：\n> - 监听在window/body 等事件没有解绑\n> - 绑在EventBus的事件没有解绑\n> - Vuex的$store，watch了之后没有unwatch\n> - 使用第三方库创建，没有调用正确的销毁函数\n> \n**解决办法：**\n> - beforeDestory 中及时销毁\n> - 绑定了DOM/BOM对象addEventListener，removeEventListener。\n> - 观察者模式 $on，$off处理\n> - 如果组件中使用了定时器，应销毁处理\n> - 如果在mouted/created钩子中使用了第三方库初始化，对应的销毁\n> - 使用弱引用weakMap、weakSet。\n\n闭包会导致内存泄漏吗？\n> 不会。\n> 内存泄漏是指你用不到的（访问不到）的变量，依然占据着空间，不能被再次利用起来。\n> 闭包里面的变量就是我们需要的变量，不能说是内存泄漏。\n> 只是由于IE9之前的版本对JS对象和COM对象使用不同的垃圾收集，从而导致内存无法回收。这是IE的问题，不是闭包的问题。\n\n<a name=\"S4DlT\"></a>\n#### weakMap weakSet Map Set 有什么区别？\n在ES6中为我们新增了两个数据结构 WeakMap、WeakSet ，就是为了解决内存泄漏问题。<br />它的键名所引用的对象都是弱引用，就是垃圾回收机制遍历的时候不考虑该引用。<br />只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。<br />也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对就就会自动侠消失，不用手动删除引用。\n<a name=\"nUpTu\"></a>\n#### 简单了解浏览器的垃圾回收机制？\n浏览器怎么进行垃圾回收？\n\n- 思路：什么是垃圾、怎么收垃圾、什么时候收垃圾\n\n浏览器中不同类型变量的内存都是何时释放？\n\n- 思路：分为值类型、引用类型\n\n[哪些情况会导致内存泄漏？如何避免？](https://www.cnblogs.com/crazycode2/p/14747974.html)\n\n- 思路：内存泄漏是指你用不到（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。\n\nweakMap、weakSet、Set、Map有什么区别？\n\n- 思路：WeakMap、WeakSet弱引用，解决了内存泄漏问题\n\n\n",
    "body_draft": "--- <br />title: JS垃圾回收机制<br />categories: JS<br />date: 2022-11-19<br />updated: 2022-11-19<br />tags: [JS,垃圾回收]<br />cover: https://img1.baidu.com/it/u=3556875364,2935983115&fm=253&fmt=auto&app=138&f=JPEG<br />--- <br />**内存溢出**：程序运行出现的错误，就像水杯，满了之后再加水就溢出了。同理，内存溢出就是程序运行所需的内存大于可用内存，就出现内存溢出错误。\n> 例子：写一个千万级别的循环，然后用浏览器打开，浏览器就会非常卡，甚至直接报错内存不足，崩溃了。不同浏览器有不同的表现。\n\n**产生原因**：内存溢出一般是**内存泄漏**造成的，占用的内存不需要用到了，但是没有及时释放。内存泄漏积累的多了轻则会系统性能，重则直接引起内存溢出系统崩溃。\n<a name=\"wPZ1Y\"></a>\n### 哪些场景会引发内存泄漏？\n\n1. 全局变量引起的内存泄漏：\n\n根据JS的垃圾回收机制，全局变量不会被回收，所以一些意外的、不需要的全局变量多了，没有释放，就造成了内存泄漏。\n\n2. [闭包](https://blog.csdn.net/qq_45479404/article/details/124843856)：\n\n内部的变量因为被闭包引用得不到释放，会造成内存泄漏。因此我们在开发过程中，尽量不要使用闭包。\n\n3. 计时器、回调、监听等事件没有移除：\n\n这些事件没有移除是一直存在的，一直存在没有被释放就会造成内存泄漏。\n\n4. 给DOM添加属性或方法：\t\n\n给DOM添加属性或方法等，也会造成变量引用得不到释放，造成内存泄漏。<br />最核心的：由于垃圾回收机制，全局变量或者是被全局变量引用，垃圾回收机制就无法回收。如果一些用完一次就不再使用的没有释放，那么积累的多了，就容易造成内存溢出。\n<a name=\"kKlPd\"></a>\n### JS 内存管理\n\n1. 分配给`使用者`所需的内存\n2. `使用者`拿到这些内存，并使用内存\n3. `使用者`不需要这些内存了，释放并归还给系统\n\n变量就是`使用者`。\n> JS数据类型分为；基本数据类型 和 引用数据类型。\n> - 基本数据类型：大小固定，值保存在`栈内存`中，可通过值直接访问。\n> - 引用数据类型：大小不固定（∵ 可加属性），`栈内存`中存着指针，指向`堆内存`中的对象空间， 通过引用来访问。\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png#averageHue=%23fcf9f8&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=356&id=ua3796757&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=885&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25990&status=done&style=none&taskId=uaadda59b-863b-401d-993c-56443f41c76&title=&width=885)\n\n- 栈内存的内存都是`操作系统自动分配和释放回收的`（由于栈内存所存的基础数据类型大小是固定的）\n- JS堆内存需要JS引擎手动释放这些内存（由于堆内存所存大小不固定，系统无法自动释放回收）\n<a name=\"IeeMt\"></a>\n### 为什么要进行垃圾回收？\n在Chrome中，V8被限制了内存的使用（64位约1.4G/1464MB，32位约0.7G/732MB）。<br />限制内存使用的原因：\n\n- 表层：V8最初为浏览器而设计，不太可能遇到用大量内存的场景\n- 深层：V8的垃圾回收机制的限制（如果清理大量的内存垃圾很耗时间，这样会引起JS线程暂时执行的时间，性能和应用直线下降）\n> 当我们的代码没有按照正确的写法时，会使得JS引擎的垃圾回收机制无法正确的对内存进行释放（内存泄漏），从而使得浏览器占用的内存不断增加，进而导致JS和应用、操作系统性能下降。\n\n<a name=\"Dj75r\"></a>\n### V8的垃圾回收算法\n<a name=\"JEhWy\"></a>\n#### 分代回收\n在JS中，对象存活周期分为两种情况：\n\n- 存活周期很短：经过一次垃圾回收后，就被释放回收掉。\n- 存活周期很长：经过多次垃圾回收后，还存在。\n\n产生问题：对于存活周期长的，多次回收都回收不掉，明知回收不掉，却还不断地去回收，不是很消耗性能吗？<br />对于此问题，V8做了**分代回收**的优化方法。即：**V8将堆分为两个空间，一个叫新生代，一个叫老生代。新生代是存放存活周期短对象的地方，老生代是存放存活周期长对象的地方。**\n> 新生代容量：1-8M。而老生代容量很大。对于这两块区域，V8分别做了**不同的垃圾回收器和不同的垃圾回收算法**，以致于更高效地进行垃圾回收。\n> - 副垃圾回收器 + Scavenge 算法：主要负责新生代的垃圾回收\n> - 主垃圾回收器 + Mark-Sweep && Mark-Compact 算法\n\n<a name=\"liInW\"></a>\n##### 新生代\n在JS中，任何对象的声明分配到的内存，将会先放到新生代中，而因为大部分对象在内存中存活的周期很短，所以需要一个效率非常高的算法。在新生代中，主要使用Scavenge算法进行垃圾回收，Scavenge算法是一个典型的牺牲空间换取时间的复制算法，在占用空间不大的场景上非常适用。<br />Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，工作方式也很简单，就是将from-space中存活的活动对象复制到to-space中，并将这些对象的内存有序排列起来，然后将from-space中的非活动对象的内存进行释放，完成后，将from space和to space进行互换，这样可以使得新生代中的这两块区域可以重复利用。<br />具体步骤：\n\n1. 标记活动对象和非活动对象\n2. 复制from-space的活动对象到to-space中并进行排序\n3. 清除from-space中的非活动对象\n4. 将 from-space和to-space进行角色互换，以便下一次的Scavenge算法垃圾回收\n> 垃圾回收器如何知道哪些是活动对象，哪些是非活动对象呢？\n> - 从初始的根对象（window或global）的指针开始，向下搜索子节点，子节点就被搜索到了，说明该子节点的引用对象可达，并为其进行标记。\n> - 然后接着递归搜索，直到所有的子节点被遍历结束。\n> - 那么没有被遍历到的节点，就没有标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。\n\n💬 新生代中的对象什么时候变成老生代？<br />在新生代中，还进一步进行了细分。分为 nursery子代 和 intermediate子代 两个区域，一个对象第一次分配内存时会被分配到新生代中的nursery子代，如果经过下一次的垃圾回收这个对象还存在新生代中，这时，我们将此对象移动到intermedidate子代，在经过下一次垃圾回收，如果这个对象还在新生代中，副垃圾回收器 会将该对象移动到老生代中，这个移动的过程被称为**晋升**。\n<a name=\"jLe40\"></a>\n##### 老生代\n老生代空间：新生代空间的对象，身经百战后，留下来的老对象，成功晋升到了老生代中。<br />       由于这些对象都是经过多次回收过程但是没有被回收走的，都是一群生命力顽强、存活率高的对象，所以老生代中，回收算法不宜使用Scavenge算法。<br />原因：\n\n- Scavenge算法是复制算法，反复复制这些存活率高的对象，没有什么意义，效率极低。\n- Scavenge算法是以空间换时间的算法，老生代是内存很大的空间，如果使用Scavenge算法，空间资源非常浪费。\n\n因此，老生代里使用了Mark-Sweep算法（标记清理）和 Mark-Compact算法（标记整理）。<br />**Mark-Sweep（标记清理）**<br />Mark-Sweep分为两个阶段，标记和清理阶段，之前的Scavenge算法 也有标记和清理，但是Mark-Sweep算法跟Scavenge算法的区别是，后者需要复制再清理，前者不需要，Mark-Sweep直接标记活动对象和非活动对象之后，就直接执行清理了。\n\n- 标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记\n- 清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。\n\n**Mark-Compact（标记整理）**<br />Mark-Sweep算法执行垃圾回收之后，留下了很多零零散散的空位。坏处：如果此时进来了一个大对象，需要对此对象分配一个大内存，先从零零散散的空位中找位置，找了一圈，发现没有适合自己大小的空位，只好拼在了最后，这个寻找空位的过程是耗性能的，这也是Mark-Sweep算法的一个缺点。<br />Mark-Compact算法是Mark-Sweep算法的加强版，在Mark-Sweep算法的基础上，加上了`整理阶段`，每次清理完非活动对象，就会把剩下的活动对象，整理到内存的一侧，整理完成后，直接回收掉边界上的内存。 \n<a name=\"qXQ7q\"></a>\n#### 全停顿（Stop-The-World）\nJS代码的运行要用到JS引擎，垃圾回收也要用到JS引擎，如果这两者同时进行了，发生冲突了，怎么办？答案：垃圾回收优先于代码执行，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，成为全停顿。<br />由于新生代空间小，并且存活对象少，再配合Scavenge算法，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多时，停顿时间就会较长，使得页面出现了卡顿现象。\n<a name=\"LzlsH\"></a>\n#### Orinoco优化\norinoco是V8的垃圾回收器的项目代号，为了提升用户体验，解决全停顿问题，它提出了增量标记、懒性清理、并发、并行的优化方法。\n<a name=\"qJ8qA\"></a>\n##### 增量标记（Incremental marking）\n增量标记是在`标记`这个阶段进行了优化。<br />当垃圾少量时，不会做增量标记优化，但是当垃圾达到一定数量时，增量标记就会开启：标记一点，JS代码运行一段，从而提高效率。\n<a name=\"ySJcw\"></a>\n##### 惰性清理（Lazy sweeping）\n惰性清理针对`清除`阶段。在增量标记后，要进行清理非活动对象时，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就`延迟了清理`，让JS代码先执行，或者`只清理部分垃圾`，而不清理全部。这个优化就叫做`惰性清理`。<br />整理标记和惰性清理的出现，大大改善了`全停顿`的现象。但是产生了问题：增量`标记是标记一点，JS运行一段`。如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。<br />总结一下就是：标记和代码执行的穿插，有可能造成`对象引用改变，标记错误`现象。这就需要使用`写屏障`技术来记录这些引用关系的变化。\n<a name=\"TuPmj\"></a>\n##### 并发（Concurrent）\n并发式GC允许在垃圾回收时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JS代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行`写屏障`操作。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851619218-0efd0aee-9227-4585-9745-d95f8bcacd7c.png#averageHue=%23b5e19a&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=147&id=u0aee8473&margin=%5Bobject%20Object%5D&name=image.png&originHeight=147&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56932&status=done&style=none&taskId=u19ceca22-5e5e-4460-bade-47f1ebaf8b4&title=&width=718)\n<a name=\"VcQ3Z\"></a>\n##### 并行\n并行式GC运行主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851771272-d5454f1b-90b5-4cbd-83bb-8d1805c9bce1.png#averageHue=%23f6f6f6&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=139&id=ue342693c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=139&originWidth=608&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52245&status=done&style=none&taskId=ucd478771-10dc-4006-83a3-1f89d520c4e&title=&width=608)\n<a name=\"wEroB\"></a>\n### V8当前的垃圾回收机制\n2011年，V8应用了增量标记机制。2018年，Chrome64和Node.js V10启动`并发（Concurrent）`，同时在并发基础上添加`并行（Parallel）技术`，使得垃圾回收时间大幅度缩短。\n<a name=\"rvy9V\"></a>\n#### 副垃圾回收器\nV8在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从from-to复制到`space-to`时，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8在第一个线程对活动对象进行复制并且复制完成后，都必须去维护这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670852581283-0012ecbd-7021-4bfa-bf9b-64bd4ee61947.png#averageHue=%23f6f6f6&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=142&id=u33593aab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=142&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52347&status=done&style=none&taskId=u46c50273-8903-4249-a83f-795e67d5c8a&title=&width=614)\n<a name=\"wXu3d\"></a>\n#### 主垃圾回收器\nV8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在JS代码执行时，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JS代码修改时，`写屏障`技术在辅助线程在进行并发标记时进行追踪。<br />当并发标记完成或动态分配的内存达到极限时，主线程会执行最终的快速标记步骤，这时主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行check操作，确认操作完成后，某些辅助线程会进行清理内存操作，某些辅助线程会进行内存整理操作，由于都是并发的，并不会影响主线程JS代码的执行。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670891665363-ab526d91-530b-485d-a461-ebfd7da717ef.png#averageHue=%23eaf5dc&clientId=u8f053162-afe4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=160&id=u97b0bb01&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=680&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66145&status=done&style=none&taskId=ua5f38ef3-e648-452a-bada-462d2332057&title=&width=680)\n<a name=\"jDgwF\"></a>\n### 问题及解答\n<a name=\"qFF42\"></a>\n#### 浏览器怎么进行垃圾回收？\n> 从三个点来回答什么是垃圾、如何捡垃圾、什么时候捡垃圾\n\n什么是垃圾？\n\n1. 不再需要，即为垃圾\n2. 全局变量随时可能用到，所以一定不是垃圾\n\n如何捡垃圾（遍历算法）？\n\n1. 标记空间中「可达」值\n   1. 从根节点（Root）出发，遍历所有的对象\n   2. 可以遍历到的对象，是可达的（reachable）\n   3. 没有遍历到的对象，不可达的（unreachable）\n2. 回收「不可达」的值所占据的内存\n3. 做内存整理\n\n什么时候捡垃圾？\n\n1. 前端有其特殊性，垃圾回收时会造成页面卡顿\n2. 分代收集、增量收集、闲时收集\n<a name=\"W65fb\"></a>\n#### 浏览器中不同类型变量的内存都是何时释放？\nJS中类型：值类型、引用类型\n\n- 引用类型\n   - 在没有引用之后，通过V8自动回收\n- 值类型\n   - 如果处于闭包的情况下，要等闭包没有引用才会被V8回收\n   - 非闭包的情况下，等待V8的新生代切换时回收\n<a name=\"VFWLI\"></a>\n#### 哪些情况会导致内存泄漏？如何避免？\n内存泄漏是指你「用不到」（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。\n> 以Vue为例，通常会有这些情况：\n> - 监听在window/body 等事件没有解绑\n> - 绑在EventBus的事件没有解绑\n> - Vuex的$store，watch了之后没有unwatch\n> - 使用第三方库创建，没有调用正确的销毁函数\n> \n**解决办法：**\n> - beforeDestory 中及时销毁\n> - 绑定了DOM/BOM对象addEventListener，removeEventListener。\n> - 观察者模式 $on，$off处理\n> - 如果组件中使用了定时器，应销毁处理\n> - 如果在mouted/created钩子中使用了第三方库初始化，对应的销毁\n> - 使用弱引用weakMap、weakSet。\n\n闭包会导致内存泄漏吗？\n> 不会。\n> 内存泄漏是指你用不到的（访问不到）的变量，依然占据着空间，不能被再次利用起来。\n> 闭包里面的变量就是我们需要的变量，不能说是内存泄漏。\n> 只是由于IE9之前的版本对JS对象和COM对象使用不同的垃圾收集，从而导致内存无法回收。这是IE的问题，不是闭包的问题。\n\n<a name=\"S4DlT\"></a>\n#### weakMap weakSet Map Set 有什么区别？\n在ES6中为我们新增了两个数据结构 WeakMap、WeakSet ，就是为了解决内存泄漏问题。<br />它的键名所引用的对象都是弱引用，就是垃圾回收机制遍历的时候不考虑该引用。<br />只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。<br />也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对就就会自动侠消失，不用手动删除引用。\n<a name=\"nUpTu\"></a>\n#### 简单了解浏览器的垃圾回收机制？\n浏览器怎么进行垃圾回收？\n\n- 思路：什么是垃圾、怎么收垃圾、什么时候收垃圾\n\n浏览器中不同类型变量的内存都是何时释放？\n\n- 思路：分为值类型、引用类型\n\n[哪些情况会导致内存泄漏？如何避免？](https://www.cnblogs.com/crazycode2/p/14747974.html)\n\n- 思路：内存泄漏是指你用不到（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。\n\nweakMap、weakSet、Set、Map有什么区别？\n\n- 思路：WeakMap、WeakSet弱引用，解决了内存泄漏问题\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ub56dba7a\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: JS垃圾回收机制</span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: JS</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-19</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-19</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: [JS,垃圾回收]</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://img1.baidu.com/it/u=3556875364,2935983115&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"u4f6274d2\" class=\"ne-p\"><strong><span class=\"ne-text\">内存溢出</span></strong><span class=\"ne-text\">：程序运行出现的错误，就像水杯，满了之后再加水就溢出了。同理，内存溢出就是程序运行所需的内存大于可用内存，就出现内存溢出错误。</span></p><div class=\"ne-quote\"><p id=\"ua95b822b\" class=\"ne-p\"><span class=\"ne-text\">例子：写一个千万级别的循环，然后用浏览器打开，浏览器就会非常卡，甚至直接报错内存不足，崩溃了。不同浏览器有不同的表现。</span></p></div><p id=\"u6e2e6f1b\" class=\"ne-p\"><strong><span class=\"ne-text\">产生原因</span></strong><span class=\"ne-text\">：内存溢出一般是</span><strong><span class=\"ne-text\">内存泄漏</span></strong><span class=\"ne-text\">造成的，占用的内存不需要用到了，但是没有及时释放。内存泄漏积累的多了轻则会系统性能，重则直接引起内存溢出系统崩溃。</span></p><h3 id=\"wPZ1Y\"><span class=\"ne-text\">哪些场景会引发内存泄漏？</span></h3><ol class=\"ne-ol\"><li id=\"u5cde98f0\"><span class=\"ne-text\">全局变量引起的内存泄漏：</span></li></ol><p id=\"ufbb4e3f8\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">根据JS的垃圾回收机制，全局变量不会被回收，所以一些意外的、不需要的全局变量多了，没有释放，就造成了内存泄漏。</span></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ud43a09ff\"><a href=\"https://blog.csdn.net/qq_45479404/article/details/124843856\" data-href=\"https://blog.csdn.net/qq_45479404/article/details/124843856\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">闭包</span></a><span class=\"ne-text\">：</span></li></ol><p id=\"u4ac046e4\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">内部的变量因为被闭包引用得不到释放，会造成内存泄漏。因此我们在开发过程中，尽量不要使用闭包。</span></p><ol start=\"3\" class=\"ne-ol\"><li id=\"uec96a829\"><span class=\"ne-text\">计时器、回调、监听等事件没有移除：</span></li></ol><p id=\"u64fd1c5b\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">这些事件没有移除是一直存在的，一直存在没有被释放就会造成内存泄漏。</span></p><ol start=\"4\" class=\"ne-ol\"><li id=\"ueeb51a9b\"><span class=\"ne-text\">给DOM添加属性或方法：\t</span></li></ol><p id=\"u312e4569\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">给DOM添加属性或方法等，也会造成变量引用得不到释放，造成内存泄漏。</span></p><p id=\"u47e2614a\" class=\"ne-p\"><span class=\"ne-text\">最核心的：由于垃圾回收机制，全局变量或者是被全局变量引用，垃圾回收机制就无法回收。如果一些用完一次就不再使用的没有释放，那么积累的多了，就容易造成内存溢出。</span></p><h3 id=\"kKlPd\"><span class=\"ne-text\">JS 内存管理</span></h3><ol class=\"ne-ol\"><li id=\"u2d51b74e\"><span class=\"ne-text\">分配给</span><code class=\"ne-code\"><span class=\"ne-text\">使用者</span></code><span class=\"ne-text\">所需的内存</span></li><li id=\"ud4645620\"><code class=\"ne-code\"><span class=\"ne-text\">使用者</span></code><span class=\"ne-text\">拿到这些内存，并使用内存</span></li><li id=\"u25a22ce7\"><code class=\"ne-code\"><span class=\"ne-text\">使用者</span></code><span class=\"ne-text\">不需要这些内存了，释放并归还给系统</span></li></ol><p id=\"u53ffa780\" class=\"ne-p\"><span class=\"ne-text\">变量就是</span><code class=\"ne-code\"><span class=\"ne-text\">使用者</span></code><span class=\"ne-text\">。</span></p><div class=\"ne-quote\"><p id=\"ua5736794\" class=\"ne-p\"><span class=\"ne-text\">JS数据类型分为；基本数据类型 和 引用数据类型。</span></p><ul class=\"ne-ul\"><li id=\"ua9a98ef5\"><span class=\"ne-text\">基本数据类型：大小固定，值保存在</span><code class=\"ne-code\"><span class=\"ne-text\">栈内存</span></code><span class=\"ne-text\">中，可通过值直接访问。</span></li><li id=\"u27f918be\"><span class=\"ne-text\">引用数据类型：大小不固定（∵ 可加属性），</span><code class=\"ne-code\"><span class=\"ne-text\">栈内存</span></code><span class=\"ne-text\">中存着指针，指向</span><code class=\"ne-code\"><span class=\"ne-text\">堆内存</span></code><span class=\"ne-text\">中的对象空间， 通过引用来访问。</span></li></ul></div><p id=\"ue4ea5deb\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png\" width=\"885\" id=\"ua3796757\" class=\"ne-image\"></p><ul class=\"ne-ul\"><li id=\"ua18eff73\"><span class=\"ne-text\">栈内存的内存都是</span><code class=\"ne-code\"><span class=\"ne-text\">操作系统自动分配和释放回收的</span></code><span class=\"ne-text\">（由于栈内存所存的基础数据类型大小是固定的）</span></li><li id=\"ub9874fd6\"><span class=\"ne-text\">JS堆内存需要</span><span class=\"ne-text\" style=\"text-decoration: underline\">JS引擎手动释放这些内存</span><span class=\"ne-text\">（由于堆内存所存大小不固定，系统无法自动释放回收）</span></li></ul><h3 id=\"IeeMt\"><span class=\"ne-text\">为什么要进行垃圾回收？</span></h3><p id=\"ue26c8a5e\" class=\"ne-p\"><span class=\"ne-text\">在Chrome中，V8被限制了内存的使用（64位约1.4G/1464MB，32位约0.7G/732MB）。</span></p><p id=\"u168aee22\" class=\"ne-p\"><span class=\"ne-text\">限制内存使用的原因：</span></p><ul class=\"ne-ul\"><li id=\"ud8db7faf\"><span class=\"ne-text\">表层：V8最初为浏览器而设计，不太可能遇到用大量内存的场景</span></li><li id=\"u5b2bb204\"><span class=\"ne-text\">深层：V8的垃圾回收机制的限制（如果清理大量的内存垃圾很耗时间，这样会引起JS线程暂时执行的时间，性能和应用直线下降）</span></li></ul><div class=\"ne-quote\"><p id=\"ufd589c32\" class=\"ne-p\"><span class=\"ne-text\">当我们的代码没有按照正确的写法时，会使得JS引擎的垃圾回收机制无法正确的对内存进行释放（内存泄漏），从而使得浏览器占用的内存不断增加，进而导致JS和应用、操作系统性能下降。</span></p></div><h3 id=\"Dj75r\"><span class=\"ne-text\">V8的垃圾回收算法</span></h3><h4 id=\"JEhWy\"><span class=\"ne-text\">分代回收</span></h4><p id=\"ud35f2718\" class=\"ne-p\"><span class=\"ne-text\">在JS中，对象存活周期分为两种情况：</span></p><ul class=\"ne-ul\"><li id=\"ud0f1a5a8\"><span class=\"ne-text\">存活周期很短：经过一次垃圾回收后，就被释放回收掉。</span></li><li id=\"u58f4813a\"><span class=\"ne-text\">存活周期很长：经过多次垃圾回收后，还存在。</span></li></ul><p id=\"u7b4bfb4b\" class=\"ne-p\"><span class=\"ne-text\">产生问题：对于存活周期长的，多次回收都回收不掉，明知回收不掉，却还不断地去回收，不是很消耗性能吗？</span></p><p id=\"uae69cc01\" class=\"ne-p\"><span class=\"ne-text\">对于此问题，V8做了</span><strong><span class=\"ne-text\">分代回收</span></strong><span class=\"ne-text\">的优化方法。即：</span><strong><span class=\"ne-text\">V8将堆分为两个空间，一个叫新生代，一个叫老生代。新生代是存放存活周期短对象的地方，老生代是存放存活周期长对象的地方。</span></strong></p><div class=\"ne-quote\"><p id=\"u7d8c541c\" class=\"ne-p\"><span class=\"ne-text\">新生代容量：1-8M。而老生代容量很大。对于这两块区域，V8分别做了</span><strong><span class=\"ne-text\">不同的垃圾回收器和不同的垃圾回收算法</span></strong><span class=\"ne-text\">，以致于更高效地进行垃圾回收。</span></p><ul class=\"ne-ul\"><li id=\"u64fe2468\"><span class=\"ne-text\">副垃圾回收器 + Scavenge 算法：主要负责新生代的垃圾回收</span></li><li id=\"u82241c88\"><span class=\"ne-text\">主垃圾回收器 + Mark-Sweep &amp;&amp; Mark-Compact 算法</span></li></ul></div><h5 id=\"liInW\"><span class=\"ne-text\">新生代</span></h5><p id=\"u06f94cf3\" class=\"ne-p\"><span class=\"ne-text\">在JS中，任何对象的声明分配到的内存，将会先放到新生代中，而因为大部分对象在内存中存活的周期很短，所以需要一个效率非常高的算法。在新生代中，主要使用Scavenge算法进行垃圾回收，Scavenge算法是一个典型的牺牲空间换取时间的复制算法，在占用空间不大的场景上非常适用。</span></p><p id=\"u67c23c6a\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，工作方式也很简单，就是将from-space中存活的活动对象复制到to-space中，并将这些对象的内存有序排列起来，然后将from-space中的非活动对象的内存进行释放，完成后，将from space和to space进行互换，这样可以使得新生代中的这两块区域可以重复利用。</span></p><p id=\"u914a79d3\" class=\"ne-p\"><span class=\"ne-text\">具体步骤：</span></p><ol class=\"ne-ol\"><li id=\"ub8b8bdae\"><span class=\"ne-text\">标记活动对象和非活动对象</span></li><li id=\"u8bd7471c\"><span class=\"ne-text\">复制from-space的活动对象到to-space中并进行排序</span></li><li id=\"u9378e36c\"><span class=\"ne-text\">清除from-space中的非活动对象</span></li><li id=\"u7a1ddbdd\"><span class=\"ne-text\">将 from-space和to-space进行角色互换，以便下一次的Scavenge算法垃圾回收</span></li></ol><div class=\"ne-quote\"><p id=\"u24ba0a2b\" class=\"ne-p\"><span class=\"ne-text\">垃圾回收器如何知道哪些是活动对象，哪些是非活动对象呢？</span></p><ul class=\"ne-ul\"><li id=\"u1b48cf47\"><span class=\"ne-text\">从初始的根对象（window或global）的指针开始，向下搜索子节点，子节点就被搜索到了，说明该子节点的引用对象可达，并为其进行标记。</span></li><li id=\"ua0a7f0c3\"><span class=\"ne-text\">然后接着递归搜索，直到所有的子节点被遍历结束。</span></li><li id=\"u9f3e2021\"><span class=\"ne-text\">那么没有被遍历到的节点，就没有标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。</span></li></ul></div><p id=\"uba485d8b\" class=\"ne-p\"><span class=\"ne-text\">💬 新生代中的对象什么时候变成老生代？</span></p><p id=\"u4414a1b4\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">在新生代中，还进一步进行了细分。分为 nursery子代 和 intermediate子代 两个区域，一个对象第一次分配内存时会被分配到新生代中的nursery子代，如果经过下一次的垃圾回收这个对象还存在新生代中，这时，我们将此对象移动到intermedidate子代，在经过下一次垃圾回收，如果这个对象还在新生代中，副垃圾回收器 会将该对象移动到老生代中，这个移动的过程被称为</span><strong><span class=\"ne-text\">晋升</span></strong><span class=\"ne-text\">。</span></p><h5 id=\"jLe40\"><span class=\"ne-text\">老生代</span></h5><p id=\"uc417e20f\" class=\"ne-p\"><span class=\"ne-text\">老生代空间：新生代空间的对象，身经百战后，留下来的老对象，成功晋升到了老生代中。</span></p><p id=\"u1f262ef3\" class=\"ne-p\"><span class=\"ne-text\">       由于这些对象都是经过多次回收过程但是没有被回收走的，都是一群生命力顽强、存活率高的对象，所以老生代中，回收算法不宜使用Scavenge算法。</span></p><p id=\"u85625881\" class=\"ne-p\"><span class=\"ne-text\">原因：</span></p><ul class=\"ne-ul\"><li id=\"u9d48a41c\"><span class=\"ne-text\">Scavenge算法是复制算法，反复复制这些存活率高的对象，没有什么意义，效率极低。</span></li><li id=\"u4ad9ea13\"><span class=\"ne-text\">Scavenge算法是以空间换时间的算法，老生代是内存很大的空间，如果使用Scavenge算法，空间资源非常浪费。</span></li></ul><p id=\"uac3568ec\" class=\"ne-p\"><span class=\"ne-text\">因此，老生代里使用了Mark-Sweep算法（标记清理）和 Mark-Compact算法（标记整理）。</span></p><p id=\"u205e2b47\" class=\"ne-p\"><strong><span class=\"ne-text\">Mark-Sweep（标记清理）</span></strong></p><p id=\"u5efb97f5\" class=\"ne-p\"><span class=\"ne-text\">Mark-Sweep分为两个阶段，标记和清理阶段，之前的Scavenge算法 也有标记和清理，但是Mark-Sweep算法跟Scavenge算法的区别是，后者需要复制再清理，前者不需要，Mark-Sweep直接标记活动对象和非活动对象之后，就直接执行清理了。</span></p><ul class=\"ne-ul\"><li id=\"u45984a72\"><span class=\"ne-text\">标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记</span></li><li id=\"u329513d6\"><span class=\"ne-text\">清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。</span></li></ul><p id=\"u8b1bd8b7\" class=\"ne-p\"><strong><span class=\"ne-text\">Mark-Compact（标记整理）</span></strong></p><p id=\"u0d920ede\" class=\"ne-p\"><span class=\"ne-text\">Mark-Sweep算法执行垃圾回收之后，留下了很多零零散散的空位。坏处：如果此时进来了一个大对象，需要对此对象分配一个大内存，先从零零散散的空位中找位置，找了一圈，发现没有适合自己大小的空位，只好拼在了最后，这个寻找空位的过程是耗性能的，这也是Mark-Sweep算法的一个缺点。</span></p><p id=\"u04110e71\" class=\"ne-p\"><span class=\"ne-text\">Mark-Compact算法是Mark-Sweep算法的加强版，在Mark-Sweep算法的基础上，加上了</span><code class=\"ne-code\"><span class=\"ne-text\">整理阶段</span></code><span class=\"ne-text\">，每次清理完非活动对象，就会把剩下的活动对象，整理到内存的一侧，整理完成后，直接回收掉边界上的内存。 </span></p><h4 id=\"qXQ7q\"><span class=\"ne-text\">全停顿（Stop-The-World）</span></h4><p id=\"ube2afc62\" class=\"ne-p\"><span class=\"ne-text\">JS代码的运行要用到JS引擎，垃圾回收也要用到JS引擎，如果这两者同时进行了，发生冲突了，怎么办？答案：垃圾回收优先于代码执行，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，成为全停顿。</span></p><p id=\"u1f44fb33\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">由于新生代空间小，并且存活对象少，再配合Scavenge算法，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多时，停顿时间就会较长，使得页面出现了卡顿现象。</span></p><h4 id=\"LzlsH\"><span class=\"ne-text\">Orinoco优化</span></h4><p id=\"u94b11978\" class=\"ne-p\"><span class=\"ne-text\">orinoco是V8的垃圾回收器的项目代号，为了提升用户体验，解决全停顿问题，它提出了增量标记、懒性清理、并发、并行的优化方法。</span></p><h5 id=\"qJ8qA\"><span class=\"ne-text\">增量标记（Incremental marking）</span></h5><p id=\"u44b42023\" class=\"ne-p\"><span class=\"ne-text\">增量标记是在</span><code class=\"ne-code\"><span class=\"ne-text\">标记</span></code><span class=\"ne-text\">这个阶段进行了优化。</span></p><p id=\"uf5e9a333\" class=\"ne-p\"><span class=\"ne-text\">当垃圾少量时，不会做增量标记优化，但是当垃圾达到一定数量时，增量标记就会开启：标记一点，JS代码运行一段，从而提高效率。</span></p><h5 id=\"ySJcw\"><span class=\"ne-text\">惰性清理（Lazy sweeping）</span></h5><p id=\"ue8dbf9dd\" class=\"ne-p\"><span class=\"ne-text\">惰性清理针对</span><code class=\"ne-code\"><span class=\"ne-text\">清除</span></code><span class=\"ne-text\">阶段。在增量标记后，要进行清理非活动对象时，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就</span><code class=\"ne-code\"><span class=\"ne-text\">延迟了清理</span></code><span class=\"ne-text\">，让JS代码先执行，或者</span><code class=\"ne-code\"><span class=\"ne-text\">只清理部分垃圾</span></code><span class=\"ne-text\">，而不清理全部。这个优化就叫做</span><code class=\"ne-code\"><span class=\"ne-text\">惰性清理</span></code><span class=\"ne-text\">。</span></p><p id=\"ubafad1d7\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">整理标记和惰性清理的出现，大大改善了</span><code class=\"ne-code\"><span class=\"ne-text\">全停顿</span></code><span class=\"ne-text\">的现象。但是产生了问题：增量</span><code class=\"ne-code\"><span class=\"ne-text\">标记是标记一点，JS运行一段</span></code><span class=\"ne-text\">。如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。</span></p><p id=\"ube1cb08d\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">总结一下就是：标记和代码执行的穿插，有可能造成</span><code class=\"ne-code\"><span class=\"ne-text\">对象引用改变，标记错误</span></code><span class=\"ne-text\">现象。这就需要使用</span><code class=\"ne-code\"><span class=\"ne-text\">写屏障</span></code><span class=\"ne-text\">技术来记录这些引用关系的变化。</span></p><h5 id=\"TuPmj\"><span class=\"ne-text\">并发（Concurrent）</span></h5><p id=\"u3897d9e0\" class=\"ne-p\"><span class=\"ne-text\">并发式GC允许在垃圾回收时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JS代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行</span><code class=\"ne-code\"><span class=\"ne-text\">写屏障</span></code><span class=\"ne-text\">操作。</span></p><p id=\"ued1e3ddc\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851619218-0efd0aee-9227-4585-9745-d95f8bcacd7c.png\" width=\"718\" id=\"u0aee8473\" class=\"ne-image\"></p><h5 id=\"VcQ3Z\"><span class=\"ne-text\">并行</span></h5><p id=\"ua0460e40\" class=\"ne-p\"><span class=\"ne-text\">并行式GC运行主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。</span></p><p id=\"uef99213b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670851771272-d5454f1b-90b5-4cbd-83bb-8d1805c9bce1.png\" width=\"608\" id=\"ue342693c\" class=\"ne-image\"></p><h3 id=\"wEroB\"><span class=\"ne-text\">V8当前的垃圾回收机制</span></h3><p id=\"u06d6eebb\" class=\"ne-p\"><span class=\"ne-text\">2011年，V8应用了增量标记机制。2018年，Chrome64和Node.js V10启动</span><code class=\"ne-code\"><span class=\"ne-text\">并发（Concurrent）</span></code><span class=\"ne-text\">，同时在并发基础上添加</span><code class=\"ne-code\"><span class=\"ne-text\">并行（Parallel）技术</span></code><span class=\"ne-text\">，使得垃圾回收时间大幅度缩短。</span></p><h4 id=\"rvy9V\"><span class=\"ne-text\">副垃圾回收器</span></h4><p id=\"u69444266\" class=\"ne-p\"><span class=\"ne-text\">V8在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从from-to复制到</span><code class=\"ne-code\"><span class=\"ne-text\">space-to</span></code><span class=\"ne-text\">时，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8在第一个线程对活动对象进行复制并且复制完成后，都必须去维护这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。</span></p><p id=\"u297158e6\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670852581283-0012ecbd-7021-4bfa-bf9b-64bd4ee61947.png\" width=\"614\" id=\"u33593aab\" class=\"ne-image\"></p><h4 id=\"wXu3d\"><span class=\"ne-text\">主垃圾回收器</span></h4><p id=\"u6f92da7a\" class=\"ne-p\"><span class=\"ne-text\">V8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在JS代码执行时，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JS代码修改时，</span><code class=\"ne-code\"><span class=\"ne-text\">写屏障</span></code><span class=\"ne-text\">技术在辅助线程在进行并发标记时进行追踪。</span></p><p id=\"u3b599297\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">当并发标记完成或动态分配的内存达到极限时，主线程会执行最终的快速标记步骤，这时主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行check操作，确认操作完成后，某些辅助线程会进行清理内存操作，某些辅助线程会进行内存整理操作，由于都是并发的，并不会影响主线程JS代码的执行。</span></p><p id=\"u11df0571\" class=\"ne-p\" style=\"text-indent: 2em\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670891665363-ab526d91-530b-485d-a461-ebfd7da717ef.png\" width=\"680\" id=\"u97b0bb01\" class=\"ne-image\"></p><h3 id=\"jDgwF\"><span class=\"ne-text\">问题及解答</span></h3><h4 id=\"qFF42\"><span class=\"ne-text\">浏览器怎么进行垃圾回收？</span></h4><div class=\"ne-quote\"><p id=\"uf26deb91\" class=\"ne-p\"><span class=\"ne-text\">从三个点来回答什么是垃圾、如何捡垃圾、什么时候捡垃圾</span></p></div><p id=\"ua8c77cf9\" class=\"ne-p\"><span class=\"ne-text\">什么是垃圾？</span></p><ol class=\"ne-ol\"><li id=\"ubd6f031e\"><span class=\"ne-text\">不再需要，即为垃圾</span></li><li id=\"u4cccc6a2\"><span class=\"ne-text\">全局变量随时可能用到，所以一定不是垃圾</span></li></ol><p id=\"u8f50b29d\" class=\"ne-p\"><span class=\"ne-text\">如何捡垃圾（遍历算法）？</span></p><ol class=\"ne-ol\"><li id=\"uc08d22fd\"><span class=\"ne-text\">标记空间中</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px\">「可达」</span><span class=\"ne-text\">值</span></li></ol><ol class=\"ne-list-wrap\"><ol ne-level=\"1\" class=\"ne-ol\"><li id=\"ue0f25687\"><span class=\"ne-text\">从根节点（Root）出发，遍历所有的对象</span></li><li id=\"u49d927b0\"><span class=\"ne-text\">可以遍历到的对象，是可达的（reachable）</span></li><li id=\"u7f69f3d9\"><span class=\"ne-text\">没有遍历到的对象，不可达的（unreachable）</span></li></ol></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"ue0560bf9\"><span class=\"ne-text\">回收</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px\">「不可达」</span><span class=\"ne-text\">的值所占据的内存</span></li><li id=\"u2220cbbb\"><span class=\"ne-text\">做内存整理</span></li></ol><p id=\"u30755c38\" class=\"ne-p\"><span class=\"ne-text\">什么时候捡垃圾？</span></p><ol class=\"ne-ol\"><li id=\"u6c20c1ca\"><span class=\"ne-text\">前端有其特殊性，垃圾回收时会造成页面卡顿</span></li><li id=\"u0b458561\"><span class=\"ne-text\">分代收集、增量收集、闲时收集</span></li></ol><h4 id=\"W65fb\"><span class=\"ne-text\">浏览器中不同类型变量的内存都是何时释放？</span></h4><p id=\"uef7a70a2\" class=\"ne-p\"><span class=\"ne-text\">JS中类型：值类型、引用类型</span></p><ul class=\"ne-ul\"><li id=\"ua009e4a9\"><span class=\"ne-text\">引用类型</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u7d6fe898\"><span class=\"ne-text\">在没有引用之后，通过V8自动回收</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ubf7a332a\"><span class=\"ne-text\">值类型</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc104a1fb\"><span class=\"ne-text\">如果处于闭包的情况下，要等闭包没有引用才会被V8回收</span></li><li id=\"uefe43339\"><span class=\"ne-text\">非闭包的情况下，等待V8的新生代切换时回收</span></li></ul></ul><h4 id=\"VFWLI\"><span class=\"ne-text\">哪些情况会导致内存泄漏？如何避免？</span></h4><p id=\"u3a265273\" class=\"ne-p\"><span class=\"ne-text\">内存泄漏是指你</span><span class=\"ne-text\" style=\"font-size: 14px\">「用不到」</span><span class=\"ne-text\">（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></p><div class=\"ne-quote\"><p id=\"u8eb79b6b\" class=\"ne-p\"><span class=\"ne-text\">以Vue为例，通常会有这些情况：</span></p><ul class=\"ne-ul\"><li id=\"u0de7967b\"><span class=\"ne-text\">监听在window/body 等事件没有解绑</span></li><li id=\"ue9fa1e41\"><span class=\"ne-text\">绑在EventBus的事件没有解绑</span></li><li id=\"u29044860\"><span class=\"ne-text\">Vuex的$store，watch了之后没有unwatch</span></li><li id=\"u30ab7a49\"><span class=\"ne-text\">使用第三方库创建，没有调用正确的销毁函数</span></li></ul><p id=\"ue28b727f\" class=\"ne-p\"><strong><span class=\"ne-text\">解决办法：</span></strong></p><ul class=\"ne-ul\"><li id=\"ubf86f941\"><span class=\"ne-text\">beforeDestory 中及时销毁</span></li><li id=\"u5b4857d0\"><span class=\"ne-text\">绑定了DOM/BOM对象addEventListener，removeEventListener。</span></li><li id=\"u2c76ace4\"><span class=\"ne-text\">观察者模式 $on，$off处理</span></li><li id=\"u8ea8d227\"><span class=\"ne-text\">如果组件中使用了定时器，应销毁处理</span></li><li id=\"u30329e85\"><span class=\"ne-text\">如果在mouted/created钩子中使用了第三方库初始化，对应的销毁</span></li><li id=\"u25776ecd\"><span class=\"ne-text\">使用弱引用weakMap、weakSet。</span></li></ul></div><p id=\"u0450833b\" class=\"ne-p\"><span class=\"ne-text\">闭包会导致内存泄漏吗？</span></p><div class=\"ne-quote\"><p id=\"ua80fe0bd\" class=\"ne-p\"><span class=\"ne-text\">不会。</span></p><p id=\"u085717ba\" class=\"ne-p\"><span class=\"ne-text\">内存泄漏是指你用不到的（访问不到）的变量，依然占据着空间，不能被再次利用起来。</span></p><p id=\"u54d250fc\" class=\"ne-p\"><span class=\"ne-text\">闭包里面的变量就是我们需要的变量，不能说是内存泄漏。</span></p><p id=\"u707d2b30\" class=\"ne-p\"><span class=\"ne-text\">只是由于IE9之前的版本对JS对象和COM对象使用不同的垃圾收集，从而导致内存无法回收。这是IE的问题，不是闭包的问题。</span></p></div><h4 id=\"S4DlT\"><span class=\"ne-text\">weakMap weakSet Map Set 有什么区别？</span></h4><p id=\"uc0417685\" class=\"ne-p\"><span class=\"ne-text\">在ES6中为我们新增了两个数据结构 WeakMap、WeakSet ，就是为了解决内存泄漏问题。</span></p><p id=\"ue23552c6\" class=\"ne-p\"><span class=\"ne-text\">它的键名所引用的对象都是弱引用，就是垃圾回收机制遍历的时候不考虑该引用。</span></p><p id=\"ub6deca20\" class=\"ne-p\"><span class=\"ne-text\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。</span></p><p id=\"u3b9a252e\" class=\"ne-p\"><span class=\"ne-text\">也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对就就会自动侠消失，不用手动删除引用。</span></p><h4 id=\"nUpTu\"><span class=\"ne-text\">简单了解浏览器的垃圾回收机制？</span></h4><p id=\"uf6502ac5\" class=\"ne-p\"><span class=\"ne-text\">浏览器怎么进行垃圾回收？</span></p><ul class=\"ne-ul\"><li id=\"u20fe06ee\"><span class=\"ne-text\">思路：什么是垃圾、怎么收垃圾、什么时候收垃圾</span></li></ul><p id=\"u506a8667\" class=\"ne-p\"><span class=\"ne-text\">浏览器中不同类型变量的内存都是何时释放？</span></p><ul class=\"ne-ul\"><li id=\"u8601cbdb\"><span class=\"ne-text\">思路：分为值类型、引用类型</span></li></ul><p id=\"ufb6b550b\" class=\"ne-p\"><a href=\"https://www.cnblogs.com/crazycode2/p/14747974.html\" data-href=\"https://www.cnblogs.com/crazycode2/p/14747974.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">哪些情况会导致内存泄漏？如何避免？</span></a></p><ul class=\"ne-ul\"><li id=\"u84ad8c57\"><span class=\"ne-text\">思路：内存泄漏是指你用不到（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></li></ul><p id=\"ufa40c248\" class=\"ne-p\"><span class=\"ne-text\">weakMap、weakSet、Set、Map有什么区别？</span></p><ul class=\"ne-ul\"><li id=\"ue19652b2\"><span class=\"ne-text\">思路：WeakMap、WeakSet弱引用，解决了内存泄漏问题</span></li></ul><p id=\"u5aef46f2\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u1c5dc9d7\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"defaultFontsize\" content=\"19\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ub56dba7a\" id=\"ub56dba7a\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS垃圾回收机制</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-19</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-19</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [JS,垃圾回收]</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://img1.baidu.com/it/u=3556875364,2935983115&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><p data-lake-id=\"u4f6274d2\" id=\"u4f6274d2\"><strong><span data-lake-id=\"u11a3277a\" id=\"u11a3277a\">内存溢出</span></strong><span data-lake-id=\"u24b14f83\" id=\"u24b14f83\">：程序运行出现的错误，就像水杯，满了之后再加水就溢出了。同理，内存溢出就是程序运行所需的内存大于可用内存，就出现内存溢出错误。</span></p><blockquote data-lake-id=\"ud79c04fe\" id=\"ud79c04fe\"><p data-lake-id=\"ua95b822b\" id=\"ua95b822b\"><span data-lake-id=\"udffcaec8\" id=\"udffcaec8\">例子：写一个千万级别的循环，然后用浏览器打开，浏览器就会非常卡，甚至直接报错内存不足，崩溃了。不同浏览器有不同的表现。</span></p></blockquote><p data-lake-id=\"u6e2e6f1b\" id=\"u6e2e6f1b\"><strong><span data-lake-id=\"u8c5b1a54\" id=\"u8c5b1a54\">产生原因</span></strong><span data-lake-id=\"u67549950\" id=\"u67549950\">：内存溢出一般是</span><strong><span data-lake-id=\"u13d45d37\" id=\"u13d45d37\">内存泄漏</span></strong><span data-lake-id=\"u634158a2\" id=\"u634158a2\">造成的，占用的内存不需要用到了，但是没有及时释放。内存泄漏积累的多了轻则会系统性能，重则直接引起内存溢出系统崩溃。</span></p><h3 data-lake-id=\"wPZ1Y\" id=\"wPZ1Y\"><span data-lake-id=\"u30abf5be\" id=\"u30abf5be\">哪些场景会引发内存泄漏？</span></h3><ol list=\"ub84a81dc\"><li fid=\"udce2194e\" data-lake-id=\"u5cde98f0\" id=\"u5cde98f0\"><span data-lake-id=\"u1458e03c\" id=\"u1458e03c\">全局变量引起的内存泄漏：</span></li></ol><p data-lake-id=\"ufbb4e3f8\" id=\"ufbb4e3f8\" style=\"text-indent: 2em\"><span data-lake-id=\"u1bdc1281\" id=\"u1bdc1281\">根据JS的垃圾回收机制，全局变量不会被回收，所以一些意外的、不需要的全局变量多了，没有释放，就造成了内存泄漏。</span></p><ol list=\"u015cdcca\" start=\"2\"><li fid=\"u35c4cf7d\" data-lake-id=\"ud43a09ff\" id=\"ud43a09ff\"><a href=\"https://blog.csdn.net/qq_45479404/article/details/124843856\" target=\"_blank\" data-lake-id=\"uc4f2a8f8\" id=\"uc4f2a8f8\"><span data-lake-id=\"u13e1a24b\" id=\"u13e1a24b\">闭包</span></a><span data-lake-id=\"u10a6e58d\" id=\"u10a6e58d\">：</span></li></ol><p data-lake-id=\"u4ac046e4\" id=\"u4ac046e4\" style=\"text-indent: 2em\"><span data-lake-id=\"u64458ce9\" id=\"u64458ce9\">内部的变量因为被闭包引用得不到释放，会造成内存泄漏。因此我们在开发过程中，尽量不要使用闭包。</span></p><ol list=\"ub8232bf5\" start=\"3\"><li fid=\"ud35360ba\" data-lake-id=\"uec96a829\" id=\"uec96a829\"><span data-lake-id=\"u0b46d315\" id=\"u0b46d315\">计时器、回调、监听等事件没有移除：</span></li></ol><p data-lake-id=\"u64fd1c5b\" id=\"u64fd1c5b\" style=\"text-indent: 2em\"><span data-lake-id=\"u6107655d\" id=\"u6107655d\">这些事件没有移除是一直存在的，一直存在没有被释放就会造成内存泄漏。</span></p><ol list=\"uc3a326a8\" start=\"4\"><li fid=\"u4f206f0e\" data-lake-id=\"ueeb51a9b\" id=\"ueeb51a9b\"><span data-lake-id=\"u2f26e8f4\" id=\"u2f26e8f4\">给DOM添加属性或方法：\t</span></li></ol><p data-lake-id=\"u312e4569\" id=\"u312e4569\" style=\"text-indent: 2em\"><span data-lake-id=\"u12373ce1\" id=\"u12373ce1\">给DOM添加属性或方法等，也会造成变量引用得不到释放，造成内存泄漏。</span></p><p data-lake-id=\"u47e2614a\" id=\"u47e2614a\"><span data-lake-id=\"ud0a2a1a4\" id=\"ud0a2a1a4\">最核心的：由于垃圾回收机制，全局变量或者是被全局变量引用，垃圾回收机制就无法回收。如果一些用完一次就不再使用的没有释放，那么积累的多了，就容易造成内存溢出。</span></p><h3 data-lake-id=\"kKlPd\" id=\"kKlPd\"><span data-lake-id=\"u59c1b1bc\" id=\"u59c1b1bc\">JS 内存管理</span></h3><ol list=\"u260d4876\"><li fid=\"u31833161\" data-lake-id=\"u2d51b74e\" id=\"u2d51b74e\"><span data-lake-id=\"ue43611fd\" id=\"ue43611fd\">分配给</span><code data-lake-id=\"u425a4553\" id=\"u425a4553\"><span data-lake-id=\"u7b9fe0ef\" id=\"u7b9fe0ef\">使用者</span></code><span data-lake-id=\"ubd3c4fea\" id=\"ubd3c4fea\">所需的内存</span></li><li fid=\"u31833161\" data-lake-id=\"ud4645620\" id=\"ud4645620\"><code data-lake-id=\"u643bf0bf\" id=\"u643bf0bf\"><span data-lake-id=\"u13435bf3\" id=\"u13435bf3\">使用者</span></code><span data-lake-id=\"u84c4d34a\" id=\"u84c4d34a\">拿到这些内存，并使用内存</span></li><li fid=\"u31833161\" data-lake-id=\"u25a22ce7\" id=\"u25a22ce7\"><code data-lake-id=\"u79cf36b0\" id=\"u79cf36b0\"><span data-lake-id=\"u270b2faa\" id=\"u270b2faa\">使用者</span></code><span data-lake-id=\"uc039b1e7\" id=\"uc039b1e7\">不需要这些内存了，释放并归还给系统</span></li></ol><p data-lake-id=\"u53ffa780\" id=\"u53ffa780\"><span data-lake-id=\"ufd505f92\" id=\"ufd505f92\">变量就是</span><code data-lake-id=\"u536375d7\" id=\"u536375d7\"><span data-lake-id=\"u747c590d\" id=\"u747c590d\">使用者</span></code><span data-lake-id=\"ubd8ff3b4\" id=\"ubd8ff3b4\">。</span></p><blockquote data-lake-id=\"ue4a965a2\" id=\"ue4a965a2\"><p data-lake-id=\"ua5736794\" id=\"ua5736794\"><span data-lake-id=\"uf3164d51\" id=\"uf3164d51\">JS数据类型分为；基本数据类型 和 引用数据类型。</span></p><ul list=\"u0d91bb26\"><li fid=\"u3863542e\" data-lake-id=\"ua9a98ef5\" id=\"ua9a98ef5\"><span data-lake-id=\"uaa55f864\" id=\"uaa55f864\">基本数据类型：大小固定，值保存在</span><code data-lake-id=\"ub9388f9b\" id=\"ub9388f9b\"><span data-lake-id=\"u57f4b9be\" id=\"u57f4b9be\">栈内存</span></code><span data-lake-id=\"u8df15139\" id=\"u8df15139\">中，可通过值直接访问。</span></li><li fid=\"u3863542e\" data-lake-id=\"u27f918be\" id=\"u27f918be\"><span data-lake-id=\"ubf8b4835\" id=\"ubf8b4835\">引用数据类型：大小不固定（∵ 可加属性），</span><code data-lake-id=\"ub9458226\" id=\"ub9458226\"><span data-lake-id=\"u6fc55b30\" id=\"u6fc55b30\">栈内存</span></code><span data-lake-id=\"u5bae7e29\" id=\"u5bae7e29\">中存着指针，指向</span><code data-lake-id=\"u3b0fb1c9\" id=\"u3b0fb1c9\"><span data-lake-id=\"u9fdbd1f6\" id=\"u9fdbd1f6\">堆内存</span></code><span data-lake-id=\"ud0e9830f\" id=\"ud0e9830f\">中的对象空间， 通过引用来访问。</span></li></ul></blockquote><p data-lake-id=\"ue4ea5deb\" id=\"ue4ea5deb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png%22%2C%22taskId%22%3A%22uaadda59b-863b-401d-993c-56443f41c76%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A885%2C%22height%22%3A356%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25990%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A885%2C%22originHeight%22%3A356%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NUM%2020%20NUM%2020%20%7BNAME%3A'SCJ%5C%22%20%5C%22%E5%9B%9E%E6%94%B6%5C%22%20STR%20'SCJ'%20STR%20'SGJ'%20%7BNAME%3A%20'ROSE%20OBJ%20X100%20X100%20OBJ%20%E5%A0%86%20%E6%A0%88%20%E6%A0%88%20%E5%A0%86%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A49.849186%2C%22y%22%3A57.94245%2C%22width%22%3A74.48312%2C%22height%22%3A18.770329999999994%2C%22text%22%3A%22NUM%2020%22%7D%2C%7B%22x%22%3A529.0819%2C%22y%22%3A62.675472%2C%22width%22%3A74.25952999999993%2C%22height%22%3A19.295727999999997%2C%22text%22%3A%22NUM%2020%22%7D%2C%7B%22x%22%3A236.60805%2C%22y%22%3A69.320335%2C%22width%22%3A115.33305000000001%2C%22height%22%3A24.838875%2C%22text%22%3A%22%7BNAME%3A'SCJ%5C%22%22%7D%2C%7B%22x%22%3A708.8858%2C%22y%22%3A70.5669%2C%22width%22%3A118.11396000000002%2C%22height%22%3A39.24423%2C%22text%22%3A%22%5C%22%E5%9B%9E%E6%94%B6%5C%22%22%7D%2C%7B%22x%22%3A47.692856%2C%22y%22%3A136.71559%2C%22width%22%3A71.93167399999999%2C%22height%22%3A21.787350000000004%2C%22text%22%3A%22STR%20'SCJ'%22%7D%2C%7B%22x%22%3A527.5281%2C%22y%22%3A142.55089%2C%22width%22%3A70.13379999999995%2C%22height%22%3A19.475719999999995%2C%22text%22%3A%22STR%20'SGJ'%22%7D%2C%7B%22x%22%3A710.2427%2C%22y%22%3A234.50931%2C%22width%22%3A132.7994%2C%22height%22%3A24.881290000000007%2C%22text%22%3A%22%7BNAME%3A%20'ROSE%22%7D%2C%7B%22x%22%3A38.63273%2C%22y%22%3A235.32918%2C%22width%22%3A92.07005999999998%2C%22height%22%3A24.162239999999997%2C%22text%22%3A%22OBJ%20X100%22%7D%2C%7B%22x%22%3A562.9758%2C%22y%22%3A239.82497%2C%22width%22%3A46.85226%2C%22height%22%3A20.035289999999975%2C%22text%22%3A%22X100%22%7D%2C%7B%22x%22%3A519.92456%2C%22y%22%3A241.05284%2C%22width%22%3A31.17563999999993%2C%22height%22%3A21.12293999999997%2C%22text%22%3A%22OBJ%22%7D%2C%7B%22x%22%3A281.1011%2C%22y%22%3A324.07327%2C%22width%22%3A25.086250000000007%2C%22height%22%3A24.231359999999995%2C%22text%22%3A%22%E5%A0%86%22%7D%2C%7B%22x%22%3A70.99096%2C%22y%22%3A324.0386%2C%22width%22%3A24.852805000000004%2C%22height%22%3A25.206520000000012%2C%22text%22%3A%22%E6%A0%88%22%7D%2C%7B%22x%22%3A551.5016%2C%22y%22%3A329.4437%2C%22width%22%3A25.414699999999925%2C%22height%22%3A24.13190000000003%2C%22text%22%3A%22%E6%A0%88%22%7D%2C%7B%22x%22%3A749.61285%2C%22y%22%3A330.47018%2C%22width%22%3A25.952210000000036%2C%22height%22%3A23.223179999999957%2C%22text%22%3A%22%E5%A0%86%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcf9f8%22%2C%22id%22%3A%22ua3796757%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"udea4b6e6\"><li fid=\"ueb4abd9e\" data-lake-id=\"ua18eff73\" id=\"ua18eff73\"><span data-lake-id=\"u0c65efdd\" id=\"u0c65efdd\">栈内存的内存都是</span><code data-lake-id=\"u2a023396\" id=\"u2a023396\"><span data-lake-id=\"u5e6a1253\" id=\"u5e6a1253\">操作系统自动分配和释放回收的</span></code><span data-lake-id=\"u141ef14a\" id=\"u141ef14a\">（由于栈内存所存的基础数据类型大小是固定的）</span></li><li fid=\"ueb4abd9e\" data-lake-id=\"ub9874fd6\" id=\"ub9874fd6\"><span data-lake-id=\"uaed9e201\" id=\"uaed9e201\">JS堆内存需要</span><u><span data-lake-id=\"u409eca21\" id=\"u409eca21\">JS引擎手动释放这些内存</span></u><span data-lake-id=\"uae89f9be\" id=\"uae89f9be\">（由于堆内存所存大小不固定，系统无法自动释放回收）</span></li></ul><h3 data-lake-id=\"IeeMt\" id=\"IeeMt\"><span data-lake-id=\"u9e84395f\" id=\"u9e84395f\">为什么要进行垃圾回收？</span></h3><p data-lake-id=\"ue26c8a5e\" id=\"ue26c8a5e\"><span data-lake-id=\"ua5bf3524\" id=\"ua5bf3524\">在Chrome中，V8被限制了内存的使用（64位约1.4G/1464MB，32位约0.7G/732MB）。</span></p><p data-lake-id=\"u168aee22\" id=\"u168aee22\"><span data-lake-id=\"u01d20a0c\" id=\"u01d20a0c\">限制内存使用的原因：</span></p><ul list=\"u7a0a8909\"><li fid=\"ud21b5408\" data-lake-id=\"ud8db7faf\" id=\"ud8db7faf\"><span data-lake-id=\"u5f393045\" id=\"u5f393045\">表层：V8最初为浏览器而设计，不太可能遇到用大量内存的场景</span></li><li fid=\"ud21b5408\" data-lake-id=\"u5b2bb204\" id=\"u5b2bb204\"><span data-lake-id=\"ubd7c6bc8\" id=\"ubd7c6bc8\">深层：V8的垃圾回收机制的限制（如果清理大量的内存垃圾很耗时间，这样会引起JS线程暂时执行的时间，性能和应用直线下降）</span></li></ul><blockquote data-lake-id=\"u590725ff\" id=\"u590725ff\"><p data-lake-id=\"ufd589c32\" id=\"ufd589c32\"><span data-lake-id=\"u4bf94c94\" id=\"u4bf94c94\">当我们的代码没有按照正确的写法时，会使得JS引擎的垃圾回收机制无法正确的对内存进行释放（内存泄漏），从而使得浏览器占用的内存不断增加，进而导致JS和应用、操作系统性能下降。</span></p></blockquote><h3 data-lake-id=\"Dj75r\" id=\"Dj75r\"><span data-lake-id=\"u1177ef8d\" id=\"u1177ef8d\">V8的垃圾回收算法</span></h3><h4 data-lake-id=\"JEhWy\" id=\"JEhWy\"><span data-lake-id=\"u193a838a\" id=\"u193a838a\">分代回收</span></h4><p data-lake-id=\"ud35f2718\" id=\"ud35f2718\"><span data-lake-id=\"u9d0a86c4\" id=\"u9d0a86c4\">在JS中，对象存活周期分为两种情况：</span></p><ul list=\"u10716cba\"><li fid=\"u4d6f4cff\" data-lake-id=\"ud0f1a5a8\" id=\"ud0f1a5a8\"><span data-lake-id=\"u474e3d61\" id=\"u474e3d61\">存活周期很短：经过一次垃圾回收后，就被释放回收掉。</span></li><li fid=\"u4d6f4cff\" data-lake-id=\"u58f4813a\" id=\"u58f4813a\"><span data-lake-id=\"uff9ae711\" id=\"uff9ae711\">存活周期很长：经过多次垃圾回收后，还存在。</span></li></ul><p data-lake-id=\"u7b4bfb4b\" id=\"u7b4bfb4b\"><span data-lake-id=\"uee67855c\" id=\"uee67855c\">产生问题：对于存活周期长的，多次回收都回收不掉，明知回收不掉，却还不断地去回收，不是很消耗性能吗？</span></p><p data-lake-id=\"uae69cc01\" id=\"uae69cc01\"><span data-lake-id=\"uada6f1c1\" id=\"uada6f1c1\">对于此问题，V8做了</span><strong><span data-lake-id=\"u61bc8ac9\" id=\"u61bc8ac9\">分代回收</span></strong><span data-lake-id=\"u375374ea\" id=\"u375374ea\">的优化方法。即：</span><strong><span data-lake-id=\"u86ac96ff\" id=\"u86ac96ff\">V8将堆分为两个空间，一个叫新生代，一个叫老生代。新生代是存放存活周期短对象的地方，老生代是存放存活周期长对象的地方。</span></strong></p><blockquote data-lake-id=\"uce86f693\" id=\"uce86f693\"><p data-lake-id=\"u7d8c541c\" id=\"u7d8c541c\"><span data-lake-id=\"u20cca4be\" id=\"u20cca4be\">新生代容量：1-8M。而老生代容量很大。对于这两块区域，V8分别做了</span><strong><span data-lake-id=\"u8d4a2334\" id=\"u8d4a2334\">不同的垃圾回收器和不同的垃圾回收算法</span></strong><span data-lake-id=\"u3732644d\" id=\"u3732644d\">，以致于更高效地进行垃圾回收。</span></p><ul list=\"u6e6237ae\"><li fid=\"u21ceaefe\" data-lake-id=\"u64fe2468\" id=\"u64fe2468\"><span data-lake-id=\"ufa4ccc87\" id=\"ufa4ccc87\">副垃圾回收器 + Scavenge 算法：主要负责新生代的垃圾回收</span></li><li fid=\"u21ceaefe\" data-lake-id=\"u82241c88\" id=\"u82241c88\"><span data-lake-id=\"uc9f1b7f9\" id=\"uc9f1b7f9\">主垃圾回收器 + Mark-Sweep &amp;&amp; Mark-Compact 算法</span></li></ul></blockquote><h5 data-lake-id=\"liInW\" id=\"liInW\"><span data-lake-id=\"u7cd29c50\" id=\"u7cd29c50\">新生代</span></h5><p data-lake-id=\"u06f94cf3\" id=\"u06f94cf3\"><span data-lake-id=\"u329afa9b\" id=\"u329afa9b\">在JS中，任何对象的声明分配到的内存，将会先放到新生代中，而因为大部分对象在内存中存活的周期很短，所以需要一个效率非常高的算法。在新生代中，主要使用Scavenge算法进行垃圾回收，Scavenge算法是一个典型的牺牲空间换取时间的复制算法，在占用空间不大的场景上非常适用。</span></p><p data-lake-id=\"u67c23c6a\" id=\"u67c23c6a\" style=\"text-indent: 2em\"><span data-lake-id=\"uce110ef3\" id=\"uce110ef3\">Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，工作方式也很简单，就是将from-space中存活的活动对象复制到to-space中，并将这些对象的内存有序排列起来，然后将from-space中的非活动对象的内存进行释放，完成后，将from space和to space进行互换，这样可以使得新生代中的这两块区域可以重复利用。</span></p><p data-lake-id=\"u914a79d3\" id=\"u914a79d3\"><span data-lake-id=\"u47f0225c\" id=\"u47f0225c\">具体步骤：</span></p><ol list=\"udeea99d0\"><li fid=\"u30fe0781\" data-lake-id=\"ub8b8bdae\" id=\"ub8b8bdae\"><span data-lake-id=\"uc2b855fe\" id=\"uc2b855fe\">标记活动对象和非活动对象</span></li><li fid=\"u30fe0781\" data-lake-id=\"u8bd7471c\" id=\"u8bd7471c\"><span data-lake-id=\"u6628ccc7\" id=\"u6628ccc7\">复制from-space的活动对象到to-space中并进行排序</span></li><li fid=\"u30fe0781\" data-lake-id=\"u9378e36c\" id=\"u9378e36c\"><span data-lake-id=\"u6a700d6a\" id=\"u6a700d6a\">清除from-space中的非活动对象</span></li><li fid=\"u30fe0781\" data-lake-id=\"u7a1ddbdd\" id=\"u7a1ddbdd\"><span data-lake-id=\"udd906edb\" id=\"udd906edb\">将 from-space和to-space进行角色互换，以便下一次的Scavenge算法垃圾回收</span></li></ol><blockquote data-lake-id=\"uea533ef8\" id=\"uea533ef8\"><p data-lake-id=\"u24ba0a2b\" id=\"u24ba0a2b\"><span data-lake-id=\"u4d56717d\" id=\"u4d56717d\">垃圾回收器如何知道哪些是活动对象，哪些是非活动对象呢？</span></p><ul list=\"u0448bae4\"><li fid=\"u1d5f3bce\" data-lake-id=\"u1b48cf47\" id=\"u1b48cf47\"><span data-lake-id=\"uf96969ce\" id=\"uf96969ce\">从初始的根对象（window或global）的指针开始，向下搜索子节点，子节点就被搜索到了，说明该子节点的引用对象可达，并为其进行标记。</span></li><li fid=\"u1d5f3bce\" data-lake-id=\"ua0a7f0c3\" id=\"ua0a7f0c3\"><span data-lake-id=\"u318253e8\" id=\"u318253e8\">然后接着递归搜索，直到所有的子节点被遍历结束。</span></li><li fid=\"u1d5f3bce\" data-lake-id=\"u9f3e2021\" id=\"u9f3e2021\"><span data-lake-id=\"u1663e712\" id=\"u1663e712\">那么没有被遍历到的节点，就没有标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。</span></li></ul></blockquote><p data-lake-id=\"uba485d8b\" id=\"uba485d8b\"><span data-lake-id=\"uef44b07a\" id=\"uef44b07a\">💬 新生代中的对象什么时候变成老生代？</span></p><p data-lake-id=\"u4414a1b4\" id=\"u4414a1b4\" style=\"text-indent: 2em\"><span data-lake-id=\"u0a59e7d7\" id=\"u0a59e7d7\">在新生代中，还进一步进行了细分。分为 nursery子代 和 intermediate子代 两个区域，一个对象第一次分配内存时会被分配到新生代中的nursery子代，如果经过下一次的垃圾回收这个对象还存在新生代中，这时，我们将此对象移动到intermedidate子代，在经过下一次垃圾回收，如果这个对象还在新生代中，副垃圾回收器 会将该对象移动到老生代中，这个移动的过程被称为</span><strong><span data-lake-id=\"udaccf290\" id=\"udaccf290\">晋升</span></strong><span data-lake-id=\"u8e40b069\" id=\"u8e40b069\">。</span></p><h5 data-lake-id=\"jLe40\" id=\"jLe40\"><span data-lake-id=\"u56e0f256\" id=\"u56e0f256\">老生代</span></h5><p data-lake-id=\"uc417e20f\" id=\"uc417e20f\"><span data-lake-id=\"u1dbd565b\" id=\"u1dbd565b\">老生代空间：新生代空间的对象，身经百战后，留下来的老对象，成功晋升到了老生代中。</span></p><p data-lake-id=\"u1f262ef3\" id=\"u1f262ef3\"><span data-lake-id=\"u07b44c67\" id=\"u07b44c67\">       由于这些对象都是经过多次回收过程但是没有被回收走的，都是一群生命力顽强、存活率高的对象，所以老生代中，回收算法不宜使用Scavenge算法。</span></p><p data-lake-id=\"u85625881\" id=\"u85625881\"><span data-lake-id=\"u2259c2fc\" id=\"u2259c2fc\">原因：</span></p><ul list=\"ud8c0a627\"><li fid=\"u745b88ec\" data-lake-id=\"u9d48a41c\" id=\"u9d48a41c\"><span data-lake-id=\"ufd4c80e7\" id=\"ufd4c80e7\">Scavenge算法是复制算法，反复复制这些存活率高的对象，没有什么意义，效率极低。</span></li><li fid=\"u745b88ec\" data-lake-id=\"u4ad9ea13\" id=\"u4ad9ea13\"><span data-lake-id=\"u03bd6dcb\" id=\"u03bd6dcb\">Scavenge算法是以空间换时间的算法，老生代是内存很大的空间，如果使用Scavenge算法，空间资源非常浪费。</span></li></ul><p data-lake-id=\"uac3568ec\" id=\"uac3568ec\"><span data-lake-id=\"uaf20c0cc\" id=\"uaf20c0cc\">因此，老生代里使用了Mark-Sweep算法（标记清理）和 Mark-Compact算法（标记整理）。</span></p><p data-lake-id=\"u205e2b47\" id=\"u205e2b47\"><strong><span data-lake-id=\"u1d641bae\" id=\"u1d641bae\">Mark-Sweep（标记清理）</span></strong></p><p data-lake-id=\"u5efb97f5\" id=\"u5efb97f5\"><span data-lake-id=\"u91c15ada\" id=\"u91c15ada\">Mark-Sweep分为两个阶段，标记和清理阶段，之前的Scavenge算法 也有标记和清理，但是Mark-Sweep算法跟Scavenge算法的区别是，后者需要复制再清理，前者不需要，Mark-Sweep直接标记活动对象和非活动对象之后，就直接执行清理了。</span></p><ul list=\"u93cde815\"><li fid=\"u6e665952\" data-lake-id=\"u45984a72\" id=\"u45984a72\"><span data-lake-id=\"ub7110135\" id=\"ub7110135\">标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记</span></li><li fid=\"u6e665952\" data-lake-id=\"u329513d6\" id=\"u329513d6\"><span data-lake-id=\"u5d44c202\" id=\"u5d44c202\">清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。</span></li></ul><p data-lake-id=\"u8b1bd8b7\" id=\"u8b1bd8b7\"><strong><span data-lake-id=\"ucdd8c8d7\" id=\"ucdd8c8d7\">Mark-Compact（标记整理）</span></strong></p><p data-lake-id=\"u0d920ede\" id=\"u0d920ede\"><span data-lake-id=\"uf88139d2\" id=\"uf88139d2\">Mark-Sweep算法执行垃圾回收之后，留下了很多零零散散的空位。坏处：如果此时进来了一个大对象，需要对此对象分配一个大内存，先从零零散散的空位中找位置，找了一圈，发现没有适合自己大小的空位，只好拼在了最后，这个寻找空位的过程是耗性能的，这也是Mark-Sweep算法的一个缺点。</span></p><p data-lake-id=\"u04110e71\" id=\"u04110e71\"><span data-lake-id=\"u6f0f70c1\" id=\"u6f0f70c1\">Mark-Compact算法是Mark-Sweep算法的加强版，在Mark-Sweep算法的基础上，加上了</span><code data-lake-id=\"ub2079893\" id=\"ub2079893\"><span data-lake-id=\"u7af13c47\" id=\"u7af13c47\">整理阶段</span></code><span data-lake-id=\"ua3fb3ac9\" id=\"ua3fb3ac9\">，每次清理完非活动对象，就会把剩下的活动对象，整理到内存的一侧，整理完成后，直接回收掉边界上的内存。 </span></p><h4 data-lake-id=\"qXQ7q\" id=\"qXQ7q\"><span data-lake-id=\"uca173be1\" id=\"uca173be1\">全停顿（Stop-The-World）</span></h4><p data-lake-id=\"ube2afc62\" id=\"ube2afc62\"><span data-lake-id=\"u46fb2948\" id=\"u46fb2948\">JS代码的运行要用到JS引擎，垃圾回收也要用到JS引擎，如果这两者同时进行了，发生冲突了，怎么办？答案：垃圾回收优先于代码执行，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，成为全停顿。</span></p><p data-lake-id=\"u1f44fb33\" id=\"u1f44fb33\" style=\"text-indent: 2em\"><span data-lake-id=\"u10c85ec5\" id=\"u10c85ec5\">由于新生代空间小，并且存活对象少，再配合Scavenge算法，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多时，停顿时间就会较长，使得页面出现了卡顿现象。</span></p><h4 data-lake-id=\"LzlsH\" id=\"LzlsH\"><span data-lake-id=\"u235e2d9b\" id=\"u235e2d9b\">Orinoco优化</span></h4><p data-lake-id=\"u94b11978\" id=\"u94b11978\"><span data-lake-id=\"u2aa55ec5\" id=\"u2aa55ec5\">orinoco是V8的垃圾回收器的项目代号，为了提升用户体验，解决全停顿问题，它提出了增量标记、懒性清理、并发、并行的优化方法。</span></p><h5 data-lake-id=\"qJ8qA\" id=\"qJ8qA\"><span data-lake-id=\"ube2c6f6e\" id=\"ube2c6f6e\">增量标记（Incremental marking）</span></h5><p data-lake-id=\"u44b42023\" id=\"u44b42023\"><span data-lake-id=\"u4bb33729\" id=\"u4bb33729\">增量标记是在</span><code data-lake-id=\"u4331b9a4\" id=\"u4331b9a4\"><span data-lake-id=\"u0f32ee13\" id=\"u0f32ee13\">标记</span></code><span data-lake-id=\"ud8d2d7a5\" id=\"ud8d2d7a5\">这个阶段进行了优化。</span></p><p data-lake-id=\"uf5e9a333\" id=\"uf5e9a333\"><span data-lake-id=\"u72dddd2c\" id=\"u72dddd2c\">当垃圾少量时，不会做增量标记优化，但是当垃圾达到一定数量时，增量标记就会开启：标记一点，JS代码运行一段，从而提高效率。</span></p><h5 data-lake-id=\"ySJcw\" id=\"ySJcw\"><span data-lake-id=\"ufcc61208\" id=\"ufcc61208\">惰性清理（Lazy sweeping）</span></h5><p data-lake-id=\"ue8dbf9dd\" id=\"ue8dbf9dd\"><span data-lake-id=\"u5dac6e12\" id=\"u5dac6e12\">惰性清理针对</span><code data-lake-id=\"uf33a5412\" id=\"uf33a5412\"><span data-lake-id=\"u4c1f48ac\" id=\"u4c1f48ac\">清除</span></code><span data-lake-id=\"u32ad0a27\" id=\"u32ad0a27\">阶段。在增量标记后，要进行清理非活动对象时，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就</span><code data-lake-id=\"u3ca3d263\" id=\"u3ca3d263\"><span data-lake-id=\"uaf5cd11c\" id=\"uaf5cd11c\">延迟了清理</span></code><span data-lake-id=\"ue3b68b1b\" id=\"ue3b68b1b\">，让JS代码先执行，或者</span><code data-lake-id=\"u341b1744\" id=\"u341b1744\"><span data-lake-id=\"ud8cd3d3f\" id=\"ud8cd3d3f\">只清理部分垃圾</span></code><span data-lake-id=\"u11fe3166\" id=\"u11fe3166\">，而不清理全部。这个优化就叫做</span><code data-lake-id=\"ubeec2ac2\" id=\"ubeec2ac2\"><span data-lake-id=\"u4566d232\" id=\"u4566d232\">惰性清理</span></code><span data-lake-id=\"u430e47ab\" id=\"u430e47ab\">。</span></p><p data-lake-id=\"ubafad1d7\" id=\"ubafad1d7\" style=\"text-indent: 2em\"><span data-lake-id=\"u1f6c801b\" id=\"u1f6c801b\">整理标记和惰性清理的出现，大大改善了</span><code data-lake-id=\"u3d793081\" id=\"u3d793081\"><span data-lake-id=\"u62475ae8\" id=\"u62475ae8\">全停顿</span></code><span data-lake-id=\"u0f9b4395\" id=\"u0f9b4395\">的现象。但是产生了问题：增量</span><code data-lake-id=\"u45aa516f\" id=\"u45aa516f\"><span data-lake-id=\"u8559ff70\" id=\"u8559ff70\">标记是标记一点，JS运行一段</span></code><span data-lake-id=\"uee05c388\" id=\"uee05c388\">。如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。</span></p><p data-lake-id=\"ube1cb08d\" id=\"ube1cb08d\" style=\"text-indent: 2em\"><span data-lake-id=\"uf4bfaf39\" id=\"uf4bfaf39\">总结一下就是：标记和代码执行的穿插，有可能造成</span><code data-lake-id=\"u020b2b56\" id=\"u020b2b56\"><span data-lake-id=\"udfde4f94\" id=\"udfde4f94\">对象引用改变，标记错误</span></code><span data-lake-id=\"u8b3347bb\" id=\"u8b3347bb\">现象。这就需要使用</span><code data-lake-id=\"u64591b87\" id=\"u64591b87\"><span data-lake-id=\"u1a59ce6d\" id=\"u1a59ce6d\">写屏障</span></code><span data-lake-id=\"ud5f0ea04\" id=\"ud5f0ea04\">技术来记录这些引用关系的变化。</span></p><h5 data-lake-id=\"TuPmj\" id=\"TuPmj\"><span data-lake-id=\"u66c50f68\" id=\"u66c50f68\">并发（Concurrent）</span></h5><p data-lake-id=\"u3897d9e0\" id=\"u3897d9e0\"><span data-lake-id=\"u52a1fd23\" id=\"u52a1fd23\">并发式GC允许在垃圾回收时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JS代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行</span><code data-lake-id=\"uf95278db\" id=\"uf95278db\"><span data-lake-id=\"ue2ff70a0\" id=\"ue2ff70a0\">写屏障</span></code><span data-lake-id=\"ub91ae711\" id=\"ub91ae711\">操作。</span></p><p data-lake-id=\"ued1e3ddc\" id=\"ued1e3ddc\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670851619218-0efd0aee-9227-4585-9745-d95f8bcacd7c.png%22%2C%22taskId%22%3A%22u19ceca22-5e5e-4460-bade-47f1ebaf8b4%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A718%2C%22height%22%3A147%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A56932%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A718%2C%22originHeight%22%3A147%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20JS%20JS%20JS%20%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B%20GC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A518.2978%2C%22y%22%3A6.403%2C%22width%22%3A71.0915399999999%2C%22height%22%3A13.888992000000002%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A355.13663%2C%22y%22%3A6.6361527%2C%22width%22%3A70.84358999999995%2C%22height%22%3A14.469104300000001%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A244.60695%2C%22y%22%3A7.341826%2C%22width%22%3A70.62634999999997%2C%22height%22%3A13.232665999999998%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A511.00766%2C%22y%22%3A62.335815%2C%22width%22%3A21.408289999999965%2C%22height%22%3A16.434475000000006%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A326.68866%2C%22y%22%3A62.805073%2C%22width%22%3A22.071339999999964%2C%22height%22%3A16.210126999999993%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A209.93317%2C%22y%22%3A62.98647%2C%22width%22%3A20.16162%2C%22height%22%3A15.607550000000003%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A27.72673%2C%22y%22%3A63.23409%2C%22width%22%3A50.66001%2C%22height%22%3A15.531129999999997%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A18.213867%2C%22y%22%3A112.826996%2C%22width%22%3A68.70949300000001%2C%22height%22%3A18.384354000000016%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A270.15326%2C%22y%22%3A114.86365%2C%22width%22%3A24.49684000000002%2C%22height%22%3A14.056330000000003%2C%22text%22%3A%22GC%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23b5e19a%22%2C%22id%22%3A%22u0aee8473%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h5 data-lake-id=\"VcQ3Z\" id=\"VcQ3Z\"><span data-lake-id=\"u101402ee\" id=\"u101402ee\">并行</span></h5><p data-lake-id=\"ua0460e40\" id=\"ua0460e40\"><span data-lake-id=\"u04561708\" id=\"u04561708\">并行式GC运行主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。</span></p><p data-lake-id=\"uef99213b\" id=\"uef99213b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670851771272-d5454f1b-90b5-4cbd-83bb-8d1805c9bce1.png%22%2C%22taskId%22%3A%22ucd478771-10dc-4006-83a3-1f89d520c4e%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A608%2C%22height%22%3A139%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A52245%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A608%2C%22originHeight%22%3A139%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%20JS%20%E5%A4%8D%E5%88%B6%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%20%E5%A4%8D%E5%88%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A24.106985%2C%22y%22%3A9.381434%2C%22width%22%3A46.446355000000004%2C%22height%22%3A16.010916%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A260.74698%2C%22y%22%3A9.807495%2C%22width%22%3A97.11372%2C%22height%22%3A16.74852%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A407.33334%2C%22y%22%3A9.333336%2C%22width%22%3A22.720039999999983%2C%22height%22%3A17.614965%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A294.43375%2C%22y%22%3A55.91309%2C%22width%22%3A30.719720000000052%2C%22height%22%3A16.232619999999997%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A12.700244%2C%22y%22%3A55.850666%2C%22width%22%3A67.851826%2C%22height%22%3A15.496128000000006%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A10.309506%2C%22y%22%3A105.08276%2C%22width%22%3A71.105264%2C%22height%22%3A15.924114000000003%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%2C%7B%22x%22%3A295.03604%2C%22y%22%3A105.999%2C%22width%22%3A28.44702000000001%2C%22height%22%3A14.280320000000003%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22ue342693c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"wEroB\" id=\"wEroB\"><span data-lake-id=\"u3c8d3bdf\" id=\"u3c8d3bdf\">V8当前的垃圾回收机制</span></h3><p data-lake-id=\"u06d6eebb\" id=\"u06d6eebb\"><span data-lake-id=\"u78029936\" id=\"u78029936\">2011年，V8应用了增量标记机制。2018年，Chrome64和Node.js V10启动</span><code data-lake-id=\"u355331d5\" id=\"u355331d5\"><span data-lake-id=\"ued09ec0b\" id=\"ued09ec0b\">并发（Concurrent）</span></code><span data-lake-id=\"u23ad23fa\" id=\"u23ad23fa\">，同时在并发基础上添加</span><code data-lake-id=\"ue8b0e387\" id=\"ue8b0e387\"><span data-lake-id=\"u9b034d7a\" id=\"u9b034d7a\">并行（Parallel）技术</span></code><span data-lake-id=\"u6ee4949c\" id=\"u6ee4949c\">，使得垃圾回收时间大幅度缩短。</span></p><h4 data-lake-id=\"rvy9V\" id=\"rvy9V\"><span data-lake-id=\"u6fb22152\" id=\"u6fb22152\">副垃圾回收器</span></h4><p data-lake-id=\"u69444266\" id=\"u69444266\"><span data-lake-id=\"ude6f8f96\" id=\"ude6f8f96\">V8在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从from-to复制到</span><code data-lake-id=\"u94ad60b4\" id=\"u94ad60b4\"><span data-lake-id=\"u1b7a4b68\" id=\"u1b7a4b68\">space-to</span></code><span data-lake-id=\"u88d5c25f\" id=\"u88d5c25f\">时，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8在第一个线程对活动对象进行复制并且复制完成后，都必须去维护这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。</span></p><p data-lake-id=\"u297158e6\" id=\"u297158e6\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670852581283-0012ecbd-7021-4bfa-bf9b-64bd4ee61947.png%22%2C%22taskId%22%3A%22u46c50273-8903-4249-a83f-795e67d5c8a%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A614%2C%22height%22%3A142%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A52347%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A614%2C%22originHeight%22%3A142%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%20JS%20%E5%A4%8D%E5%88%B6%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%20%E5%A4%8D%E5%88%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A24.284567%2C%22y%22%3A8.10701%2C%22width%22%3A47.76761300000001%2C%22height%22%3A16.477707000000002%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A261.1071%2C%22y%22%3A8.693776%2C%22width%22%3A97.71956%2C%22height%22%3A15.960688999999999%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A409.35535%2C%22y%22%3A9.155507%2C%22width%22%3A20.897310000000004%2C%22height%22%3A16.500383%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A295.91223%2C%22y%22%3A54.80176%2C%22width%22%3A29.993669999999952%2C%22height%22%3A15.140569999999997%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A12.963719%2C%22y%22%3A54.817806%2C%22width%22%3A68.663041%2C%22height%22%3A15.837244000000005%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A12.00726%2C%22y%22%3A103.812416%2C%22width%22%3A70.69794999999999%2C%22height%22%3A15.520734000000004%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%2C%7B%22x%22%3A295.66864%2C%22y%22%3A103.939766%2C%22width%22%3A29.698730000000012%2C%22height%22%3A16.138813999999996%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22u33593aab%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"wXu3d\" id=\"wXu3d\"><span data-lake-id=\"udf022892\" id=\"udf022892\">主垃圾回收器</span></h4><p data-lake-id=\"u6f92da7a\" id=\"u6f92da7a\"><span data-lake-id=\"u272d142b\" id=\"u272d142b\">V8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在JS代码执行时，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JS代码修改时，</span><code data-lake-id=\"u63999d0a\" id=\"u63999d0a\"><span data-lake-id=\"u86bda28c\" id=\"u86bda28c\">写屏障</span></code><span data-lake-id=\"u52a941a6\" id=\"u52a941a6\">技术在辅助线程在进行并发标记时进行追踪。</span></p><p data-lake-id=\"u3b599297\" id=\"u3b599297\" style=\"text-indent: 2em\"><span data-lake-id=\"ue2e66fb8\" id=\"ue2e66fb8\">当并发标记完成或动态分配的内存达到极限时，主线程会执行最终的快速标记步骤，这时主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行check操作，确认操作完成后，某些辅助线程会进行清理内存操作，某些辅助线程会进行内存整理操作，由于都是并发的，并不会影响主线程JS代码的执行。</span></p><p data-lake-id=\"u11df0571\" id=\"u11df0571\" style=\"text-indent: 2em\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670891665363-ab526d91-530b-485d-a461-ebfd7da717ef.png%22%2C%22taskId%22%3A%22ua5f38ef3-e648-452a-bada-462d2332057%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A680%2C%22height%22%3A160%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A66145%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A680%2C%22originHeight%22%3A160%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20JS%20JS%20%E6%A0%87%E8%AE%B0%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E5%86%85%E5%AD%98%E6%95%B4%E7%90%86%20%E6%A0%87%E8%AE%B0%20%E5%86%85%E5%AD%98%E6%B8%85%E7%90%86%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A33.03638%2C%22y%22%3A15.195885%2C%22width%22%3A50.019749999999995%2C%22height%22%3A17.119114999999997%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A212.22484%2C%22y%22%3A16.182165%2C%22width%22%3A23.436399999999992%2C%22height%22%3A15.696908999999998%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A401.21948%2C%22y%22%3A17.290962%2C%22width%22%3A20.644200000000012%2C%22height%22%3A14.593924000000001%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A229.88173%2C%22y%22%3A65.92184%2C%22width%22%3A32.28113999999999%2C%22height%22%3A16.251289999999997%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%22%7D%2C%7B%22x%22%3A17.864382%2C%22y%22%3A65.89883%2C%22width%22%3A74.898763%2C%22height%22%3A18.681219999999996%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A334.0977%2C%22y%22%3A66.60388%2C%22width%22%3A64.33415000000002%2C%22height%22%3A16.507629999999992%2C%22text%22%3A%22%E5%86%85%E5%AD%98%E6%95%B4%E7%90%86%22%7D%2C%7B%22x%22%3A228.91518%2C%22y%22%3A119.97595%2C%22width%22%3A33.59330000000003%2C%22height%22%3A17.58068999999999%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%22%7D%2C%7B%22x%22%3A333.5789%2C%22y%22%3A120.04136%2C%22width%22%3A64.59252000000004%2C%22height%22%3A17.292149999999992%2C%22text%22%3A%22%E5%86%85%E5%AD%98%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A17.962547%2C%22y%22%3A119.83123%2C%22width%22%3A78.128913%2C%22height%22%3A17.705060000000003%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eaf5dc%22%2C%22id%22%3A%22u97b0bb01%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"jDgwF\" id=\"jDgwF\"><span data-lake-id=\"u50227514\" id=\"u50227514\">问题及解答</span></h3><h4 data-lake-id=\"qFF42\" id=\"qFF42\"><span data-lake-id=\"uf6b58e12\" id=\"uf6b58e12\">浏览器怎么进行垃圾回收？</span></h4><blockquote data-lake-id=\"u025b60fd\" id=\"u025b60fd\"><p data-lake-id=\"uf26deb91\" id=\"uf26deb91\"><span data-lake-id=\"u4b0eb259\" id=\"u4b0eb259\">从三个点来回答什么是垃圾、如何捡垃圾、什么时候捡垃圾</span></p></blockquote><p data-lake-id=\"ua8c77cf9\" id=\"ua8c77cf9\"><span data-lake-id=\"u2954cd6a\" id=\"u2954cd6a\">什么是垃圾？</span></p><ol list=\"u4520e8f6\"><li fid=\"uf3a70105\" data-lake-id=\"ubd6f031e\" id=\"ubd6f031e\"><span data-lake-id=\"u9c509b83\" id=\"u9c509b83\">不再需要，即为垃圾</span></li><li fid=\"uf3a70105\" data-lake-id=\"u4cccc6a2\" id=\"u4cccc6a2\"><span data-lake-id=\"u0de76a99\" id=\"u0de76a99\">全局变量随时可能用到，所以一定不是垃圾</span></li></ol><p data-lake-id=\"u8f50b29d\" id=\"u8f50b29d\"><span data-lake-id=\"u7728f052\" id=\"u7728f052\">如何捡垃圾（遍历算法）？</span></p><ol list=\"ucf934674\"><li fid=\"uc01026e3\" data-lake-id=\"uc08d22fd\" id=\"uc08d22fd\"><span data-lake-id=\"u8b885bd5\" id=\"u8b885bd5\">标记空间中</span><span data-lake-id=\"u9f9c0753\" id=\"u9f9c0753\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89)\">「可达」</span><span data-lake-id=\"u52c554a4\" id=\"u52c554a4\">值</span></li></ol><ol list=\"ucf934674\" data-lake-indent=\"1\"><li fid=\"uc01026e3\" data-lake-id=\"ue0f25687\" id=\"ue0f25687\"><span data-lake-id=\"u03801340\" id=\"u03801340\">从根节点（Root）出发，遍历所有的对象</span></li><li fid=\"uc01026e3\" data-lake-id=\"u49d927b0\" id=\"u49d927b0\"><span data-lake-id=\"u99878587\" id=\"u99878587\">可以遍历到的对象，是可达的（reachable）</span></li><li fid=\"uc01026e3\" data-lake-id=\"u7f69f3d9\" id=\"u7f69f3d9\"><span data-lake-id=\"ufa4615d6\" id=\"ufa4615d6\">没有遍历到的对象，不可达的（unreachable）</span></li></ol><ol list=\"ucf934674\" start=\"2\"><li fid=\"uc01026e3\" data-lake-id=\"ue0560bf9\" id=\"ue0560bf9\"><span data-lake-id=\"u38e6eaaf\" id=\"u38e6eaaf\">回收</span><span data-lake-id=\"u00c7ac50\" id=\"u00c7ac50\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89)\">「不可达」</span><span data-lake-id=\"uea983247\" id=\"uea983247\">的值所占据的内存</span></li><li fid=\"uc01026e3\" data-lake-id=\"u2220cbbb\" id=\"u2220cbbb\"><span data-lake-id=\"u68ccda49\" id=\"u68ccda49\">做内存整理</span></li></ol><p data-lake-id=\"u30755c38\" id=\"u30755c38\"><span data-lake-id=\"uffb2ae91\" id=\"uffb2ae91\">什么时候捡垃圾？</span></p><ol list=\"u0de72e4a\"><li fid=\"u9210a6b7\" data-lake-id=\"u6c20c1ca\" id=\"u6c20c1ca\"><span data-lake-id=\"u98145e6d\" id=\"u98145e6d\">前端有其特殊性，垃圾回收时会造成页面卡顿</span></li><li fid=\"u9210a6b7\" data-lake-id=\"u0b458561\" id=\"u0b458561\"><span data-lake-id=\"u151f6e9e\" id=\"u151f6e9e\">分代收集、增量收集、闲时收集</span></li></ol><h4 data-lake-id=\"W65fb\" id=\"W65fb\"><span data-lake-id=\"u44adabbd\" id=\"u44adabbd\">浏览器中不同类型变量的内存都是何时释放？</span></h4><p data-lake-id=\"uef7a70a2\" id=\"uef7a70a2\"><span data-lake-id=\"u575f017e\" id=\"u575f017e\">JS中类型：值类型、引用类型</span></p><ul list=\"u85362816\"><li fid=\"uad2bf249\" data-lake-id=\"ua009e4a9\" id=\"ua009e4a9\"><span data-lake-id=\"u86748593\" id=\"u86748593\">引用类型</span></li></ul><ul list=\"u85362816\" data-lake-indent=\"1\"><li fid=\"uad2bf249\" data-lake-id=\"u7d6fe898\" id=\"u7d6fe898\"><span data-lake-id=\"uccd6df97\" id=\"uccd6df97\">在没有引用之后，通过V8自动回收</span></li></ul><ul list=\"u85362816\" start=\"2\"><li fid=\"uad2bf249\" data-lake-id=\"ubf7a332a\" id=\"ubf7a332a\"><span data-lake-id=\"u5e678254\" id=\"u5e678254\">值类型</span></li></ul><ul list=\"u85362816\" data-lake-indent=\"1\"><li fid=\"uad2bf249\" data-lake-id=\"uc104a1fb\" id=\"uc104a1fb\"><span data-lake-id=\"u95a6e76c\" id=\"u95a6e76c\">如果处于闭包的情况下，要等闭包没有引用才会被V8回收</span></li><li fid=\"uad2bf249\" data-lake-id=\"uefe43339\" id=\"uefe43339\"><span data-lake-id=\"u97c5e952\" id=\"u97c5e952\">非闭包的情况下，等待V8的新生代切换时回收</span></li></ul><h4 data-lake-id=\"VFWLI\" id=\"VFWLI\"><span data-lake-id=\"u3ce3e17e\" id=\"u3ce3e17e\">哪些情况会导致内存泄漏？如何避免？</span></h4><p data-lake-id=\"u3a265273\" id=\"u3a265273\"><span data-lake-id=\"ua30d8e69\" id=\"ua30d8e69\">内存泄漏是指你</span><span data-lake-id=\"ub41b4993\" id=\"ub41b4993\" class=\"lake-fontsize-11\">「用不到」</span><span data-lake-id=\"u62f7ce0c\" id=\"u62f7ce0c\">（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></p><blockquote data-lake-id=\"uc06ba89b\" id=\"uc06ba89b\"><p data-lake-id=\"u8eb79b6b\" id=\"u8eb79b6b\"><span data-lake-id=\"ue0c35899\" id=\"ue0c35899\">以Vue为例，通常会有这些情况：</span></p><ul list=\"u908da993\"><li fid=\"ubb396913\" data-lake-id=\"u0de7967b\" id=\"u0de7967b\"><span data-lake-id=\"ua36661c7\" id=\"ua36661c7\">监听在window/body 等事件没有解绑</span></li><li fid=\"ubb396913\" data-lake-id=\"ue9fa1e41\" id=\"ue9fa1e41\"><span data-lake-id=\"u5dc9aa05\" id=\"u5dc9aa05\">绑在EventBus的事件没有解绑</span></li><li fid=\"ubb396913\" data-lake-id=\"u29044860\" id=\"u29044860\"><span data-lake-id=\"uc37501c1\" id=\"uc37501c1\">Vuex的$store，watch了之后没有unwatch</span></li><li fid=\"ubb396913\" data-lake-id=\"u30ab7a49\" id=\"u30ab7a49\"><span data-lake-id=\"u7e2063be\" id=\"u7e2063be\">使用第三方库创建，没有调用正确的销毁函数</span></li></ul><p data-lake-id=\"ue28b727f\" id=\"ue28b727f\"><strong><span data-lake-id=\"u52a9bc77\" id=\"u52a9bc77\">解决办法：</span></strong></p><ul list=\"ucca91c68\"><li fid=\"u15c0d10b\" data-lake-id=\"ubf86f941\" id=\"ubf86f941\"><span data-lake-id=\"ud0e908df\" id=\"ud0e908df\">beforeDestory 中及时销毁</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u5b4857d0\" id=\"u5b4857d0\"><span data-lake-id=\"uc1da7a90\" id=\"uc1da7a90\">绑定了DOM/BOM对象addEventListener，removeEventListener。</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u2c76ace4\" id=\"u2c76ace4\"><span data-lake-id=\"uaff06bbe\" id=\"uaff06bbe\">观察者模式 $on，$off处理</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u8ea8d227\" id=\"u8ea8d227\"><span data-lake-id=\"u10774bf9\" id=\"u10774bf9\">如果组件中使用了定时器，应销毁处理</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u30329e85\" id=\"u30329e85\"><span data-lake-id=\"uc8d57169\" id=\"uc8d57169\">如果在mouted/created钩子中使用了第三方库初始化，对应的销毁</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u25776ecd\" id=\"u25776ecd\"><span data-lake-id=\"ub7a5ada8\" id=\"ub7a5ada8\">使用弱引用weakMap、weakSet。</span></li></ul></blockquote><p data-lake-id=\"u0450833b\" id=\"u0450833b\"><span data-lake-id=\"u2a45ea03\" id=\"u2a45ea03\">闭包会导致内存泄漏吗？</span></p><blockquote data-lake-id=\"ua8bc9a00\" id=\"ua8bc9a00\"><p data-lake-id=\"ua80fe0bd\" id=\"ua80fe0bd\"><span data-lake-id=\"ua319ccd0\" id=\"ua319ccd0\">不会。</span></p><p data-lake-id=\"u085717ba\" id=\"u085717ba\"><span data-lake-id=\"u559063b9\" id=\"u559063b9\">内存泄漏是指你用不到的（访问不到）的变量，依然占据着空间，不能被再次利用起来。</span></p><p data-lake-id=\"u54d250fc\" id=\"u54d250fc\"><span data-lake-id=\"ubd0d2af5\" id=\"ubd0d2af5\">闭包里面的变量就是我们需要的变量，不能说是内存泄漏。</span></p><p data-lake-id=\"u707d2b30\" id=\"u707d2b30\"><span data-lake-id=\"u718841f7\" id=\"u718841f7\">只是由于IE9之前的版本对JS对象和COM对象使用不同的垃圾收集，从而导致内存无法回收。这是IE的问题，不是闭包的问题。</span></p></blockquote><h4 data-lake-id=\"S4DlT\" id=\"S4DlT\"><span data-lake-id=\"u3c1defbc\" id=\"u3c1defbc\">weakMap weakSet Map Set 有什么区别？</span></h4><p data-lake-id=\"uc0417685\" id=\"uc0417685\"><span data-lake-id=\"u6312494b\" id=\"u6312494b\">在ES6中为我们新增了两个数据结构 WeakMap、WeakSet ，就是为了解决内存泄漏问题。</span></p><p data-lake-id=\"ue23552c6\" id=\"ue23552c6\"><span data-lake-id=\"u595542eb\" id=\"u595542eb\">它的键名所引用的对象都是弱引用，就是垃圾回收机制遍历的时候不考虑该引用。</span></p><p data-lake-id=\"ub6deca20\" id=\"ub6deca20\"><span data-lake-id=\"u98cc071e\" id=\"u98cc071e\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。</span></p><p data-lake-id=\"u3b9a252e\" id=\"u3b9a252e\"><span data-lake-id=\"u5d48706a\" id=\"u5d48706a\">也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对就就会自动侠消失，不用手动删除引用。</span></p><h4 data-lake-id=\"nUpTu\" id=\"nUpTu\"><span data-lake-id=\"ufb766ea8\" id=\"ufb766ea8\">简单了解浏览器的垃圾回收机制？</span></h4><p data-lake-id=\"uf6502ac5\" id=\"uf6502ac5\"><span data-lake-id=\"ud280705a\" id=\"ud280705a\">浏览器怎么进行垃圾回收？</span></p><ul list=\"ub38298e9\"><li fid=\"ub2a2cec0\" data-lake-id=\"u20fe06ee\" id=\"u20fe06ee\"><span data-lake-id=\"uc9de903d\" id=\"uc9de903d\">思路：什么是垃圾、怎么收垃圾、什么时候收垃圾</span></li></ul><p data-lake-id=\"u506a8667\" id=\"u506a8667\"><span data-lake-id=\"u4e4ac535\" id=\"u4e4ac535\">浏览器中不同类型变量的内存都是何时释放？</span></p><ul list=\"u9ef59523\"><li fid=\"u27e1f018\" data-lake-id=\"u8601cbdb\" id=\"u8601cbdb\"><span data-lake-id=\"u62ec2be7\" id=\"u62ec2be7\">思路：分为值类型、引用类型</span></li></ul><p data-lake-id=\"ufb6b550b\" id=\"ufb6b550b\"><a href=\"https://www.cnblogs.com/crazycode2/p/14747974.html\" target=\"_blank\" data-lake-id=\"u3b1a5280\" id=\"u3b1a5280\"><span data-lake-id=\"u3aa70f3c\" id=\"u3aa70f3c\">哪些情况会导致内存泄漏？如何避免？</span></a></p><ul list=\"u8c94d3b2\"><li fid=\"u0d6d1a65\" data-lake-id=\"u84ad8c57\" id=\"u84ad8c57\"><span data-lake-id=\"u6d5f3b41\" id=\"u6d5f3b41\">思路：内存泄漏是指你用不到（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></li></ul><p data-lake-id=\"ufa40c248\" id=\"ufa40c248\"><span data-lake-id=\"uce23f173\" id=\"uce23f173\">weakMap、weakSet、Set、Map有什么区别？</span></p><ul list=\"u9b3fd0fe\"><li fid=\"u089fc18d\" data-lake-id=\"ue19652b2\" id=\"ue19652b2\"><span data-lake-id=\"u13a8e115\" id=\"u13a8e115\">思路：WeakMap、WeakSet弱引用，解决了内存泄漏问题</span></li></ul><p data-lake-id=\"u5aef46f2\" id=\"u5aef46f2\"><span data-lake-id=\"u2d6e200d\" id=\"u2d6e200d\">​</span><br></p><p data-lake-id=\"u1c5dc9d7\" id=\"u1c5dc9d7\"><span data-lake-id=\"u32a21438\" id=\"u32a21438\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"defaultFontsize\" content=\"19\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ub56dba7a\" id=\"ub56dba7a\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS垃圾回收机制</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-19</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-19</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [JS,垃圾回收]</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://img1.baidu.com/it/u=3556875364,2935983115&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><p data-lake-id=\"u4f6274d2\" id=\"u4f6274d2\"><strong><span data-lake-id=\"u11a3277a\" id=\"u11a3277a\">内存溢出</span></strong><span data-lake-id=\"u24b14f83\" id=\"u24b14f83\">：程序运行出现的错误，就像水杯，满了之后再加水就溢出了。同理，内存溢出就是程序运行所需的内存大于可用内存，就出现内存溢出错误。</span></p><blockquote data-lake-id=\"ud79c04fe\" id=\"ud79c04fe\"><p data-lake-id=\"ua95b822b\" id=\"ua95b822b\"><span data-lake-id=\"udffcaec8\" id=\"udffcaec8\">例子：写一个千万级别的循环，然后用浏览器打开，浏览器就会非常卡，甚至直接报错内存不足，崩溃了。不同浏览器有不同的表现。</span></p></blockquote><p data-lake-id=\"u6e2e6f1b\" id=\"u6e2e6f1b\"><strong><span data-lake-id=\"u8c5b1a54\" id=\"u8c5b1a54\">产生原因</span></strong><span data-lake-id=\"u67549950\" id=\"u67549950\">：内存溢出一般是</span><strong><span data-lake-id=\"u13d45d37\" id=\"u13d45d37\">内存泄漏</span></strong><span data-lake-id=\"u634158a2\" id=\"u634158a2\">造成的，占用的内存不需要用到了，但是没有及时释放。内存泄漏积累的多了轻则会系统性能，重则直接引起内存溢出系统崩溃。</span></p><h3 data-lake-id=\"wPZ1Y\" id=\"wPZ1Y\"><span data-lake-id=\"u30abf5be\" id=\"u30abf5be\">哪些场景会引发内存泄漏？</span></h3><ol list=\"ub84a81dc\"><li fid=\"udce2194e\" data-lake-id=\"u5cde98f0\" id=\"u5cde98f0\"><span data-lake-id=\"u1458e03c\" id=\"u1458e03c\">全局变量引起的内存泄漏：</span></li></ol><p data-lake-id=\"ufbb4e3f8\" id=\"ufbb4e3f8\" style=\"text-indent: 2em\"><span data-lake-id=\"u1bdc1281\" id=\"u1bdc1281\">根据JS的垃圾回收机制，全局变量不会被回收，所以一些意外的、不需要的全局变量多了，没有释放，就造成了内存泄漏。</span></p><ol list=\"u015cdcca\" start=\"2\"><li fid=\"u35c4cf7d\" data-lake-id=\"ud43a09ff\" id=\"ud43a09ff\"><a href=\"https://blog.csdn.net/qq_45479404/article/details/124843856\" target=\"_blank\" data-lake-id=\"uc4f2a8f8\" id=\"uc4f2a8f8\"><span data-lake-id=\"u13e1a24b\" id=\"u13e1a24b\">闭包</span></a><span data-lake-id=\"u10a6e58d\" id=\"u10a6e58d\">：</span></li></ol><p data-lake-id=\"u4ac046e4\" id=\"u4ac046e4\" style=\"text-indent: 2em\"><span data-lake-id=\"u64458ce9\" id=\"u64458ce9\">内部的变量因为被闭包引用得不到释放，会造成内存泄漏。因此我们在开发过程中，尽量不要使用闭包。</span></p><ol list=\"ub8232bf5\" start=\"3\"><li fid=\"ud35360ba\" data-lake-id=\"uec96a829\" id=\"uec96a829\"><span data-lake-id=\"u0b46d315\" id=\"u0b46d315\">计时器、回调、监听等事件没有移除：</span></li></ol><p data-lake-id=\"u64fd1c5b\" id=\"u64fd1c5b\" style=\"text-indent: 2em\"><span data-lake-id=\"u6107655d\" id=\"u6107655d\">这些事件没有移除是一直存在的，一直存在没有被释放就会造成内存泄漏。</span></p><ol list=\"uc3a326a8\" start=\"4\"><li fid=\"u4f206f0e\" data-lake-id=\"ueeb51a9b\" id=\"ueeb51a9b\"><span data-lake-id=\"u2f26e8f4\" id=\"u2f26e8f4\">给DOM添加属性或方法：\t</span></li></ol><p data-lake-id=\"u312e4569\" id=\"u312e4569\" style=\"text-indent: 2em\"><span data-lake-id=\"u12373ce1\" id=\"u12373ce1\">给DOM添加属性或方法等，也会造成变量引用得不到释放，造成内存泄漏。</span></p><p data-lake-id=\"u47e2614a\" id=\"u47e2614a\"><span data-lake-id=\"ud0a2a1a4\" id=\"ud0a2a1a4\">最核心的：由于垃圾回收机制，全局变量或者是被全局变量引用，垃圾回收机制就无法回收。如果一些用完一次就不再使用的没有释放，那么积累的多了，就容易造成内存溢出。</span></p><h3 data-lake-id=\"kKlPd\" id=\"kKlPd\"><span data-lake-id=\"u59c1b1bc\" id=\"u59c1b1bc\">JS 内存管理</span></h3><ol list=\"u260d4876\"><li fid=\"u31833161\" data-lake-id=\"u2d51b74e\" id=\"u2d51b74e\"><span data-lake-id=\"ue43611fd\" id=\"ue43611fd\">分配给</span><code data-lake-id=\"u425a4553\" id=\"u425a4553\"><span data-lake-id=\"u7b9fe0ef\" id=\"u7b9fe0ef\">使用者</span></code><span data-lake-id=\"ubd3c4fea\" id=\"ubd3c4fea\">所需的内存</span></li><li fid=\"u31833161\" data-lake-id=\"ud4645620\" id=\"ud4645620\"><code data-lake-id=\"u643bf0bf\" id=\"u643bf0bf\"><span data-lake-id=\"u13435bf3\" id=\"u13435bf3\">使用者</span></code><span data-lake-id=\"u84c4d34a\" id=\"u84c4d34a\">拿到这些内存，并使用内存</span></li><li fid=\"u31833161\" data-lake-id=\"u25a22ce7\" id=\"u25a22ce7\"><code data-lake-id=\"u79cf36b0\" id=\"u79cf36b0\"><span data-lake-id=\"u270b2faa\" id=\"u270b2faa\">使用者</span></code><span data-lake-id=\"uc039b1e7\" id=\"uc039b1e7\">不需要这些内存了，释放并归还给系统</span></li></ol><p data-lake-id=\"u53ffa780\" id=\"u53ffa780\"><span data-lake-id=\"ufd505f92\" id=\"ufd505f92\">变量就是</span><code data-lake-id=\"u536375d7\" id=\"u536375d7\"><span data-lake-id=\"u747c590d\" id=\"u747c590d\">使用者</span></code><span data-lake-id=\"ubd8ff3b4\" id=\"ubd8ff3b4\">。</span></p><blockquote data-lake-id=\"ue4a965a2\" id=\"ue4a965a2\"><p data-lake-id=\"ua5736794\" id=\"ua5736794\"><span data-lake-id=\"uf3164d51\" id=\"uf3164d51\">JS数据类型分为；基本数据类型 和 引用数据类型。</span></p><ul list=\"u0d91bb26\"><li fid=\"u3863542e\" data-lake-id=\"ua9a98ef5\" id=\"ua9a98ef5\"><span data-lake-id=\"uaa55f864\" id=\"uaa55f864\">基本数据类型：大小固定，值保存在</span><code data-lake-id=\"ub9388f9b\" id=\"ub9388f9b\"><span data-lake-id=\"u57f4b9be\" id=\"u57f4b9be\">栈内存</span></code><span data-lake-id=\"u8df15139\" id=\"u8df15139\">中，可通过值直接访问。</span></li><li fid=\"u3863542e\" data-lake-id=\"u27f918be\" id=\"u27f918be\"><span data-lake-id=\"ubf8b4835\" id=\"ubf8b4835\">引用数据类型：大小不固定（∵ 可加属性），</span><code data-lake-id=\"ub9458226\" id=\"ub9458226\"><span data-lake-id=\"u6fc55b30\" id=\"u6fc55b30\">栈内存</span></code><span data-lake-id=\"u5bae7e29\" id=\"u5bae7e29\">中存着指针，指向</span><code data-lake-id=\"u3b0fb1c9\" id=\"u3b0fb1c9\"><span data-lake-id=\"u9fdbd1f6\" id=\"u9fdbd1f6\">堆内存</span></code><span data-lake-id=\"ud0e9830f\" id=\"ud0e9830f\">中的对象空间， 通过引用来访问。</span></li></ul></blockquote><p data-lake-id=\"ue4ea5deb\" id=\"ue4ea5deb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png%22%2C%22taskId%22%3A%22uaadda59b-863b-401d-993c-56443f41c76%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A885%2C%22height%22%3A356%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25990%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A885%2C%22originHeight%22%3A356%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NUM%2020%20NUM%2020%20%7BNAME%3A'SCJ%5C%22%20%5C%22%E5%9B%9E%E6%94%B6%5C%22%20STR%20'SCJ'%20STR%20'SGJ'%20%7BNAME%3A%20'ROSE%20OBJ%20X100%20X100%20OBJ%20%E5%A0%86%20%E6%A0%88%20%E6%A0%88%20%E5%A0%86%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A49.849186%2C%22y%22%3A57.94245%2C%22width%22%3A74.48312%2C%22height%22%3A18.770329999999994%2C%22text%22%3A%22NUM%2020%22%7D%2C%7B%22x%22%3A529.0819%2C%22y%22%3A62.675472%2C%22width%22%3A74.25952999999993%2C%22height%22%3A19.295727999999997%2C%22text%22%3A%22NUM%2020%22%7D%2C%7B%22x%22%3A236.60805%2C%22y%22%3A69.320335%2C%22width%22%3A115.33305000000001%2C%22height%22%3A24.838875%2C%22text%22%3A%22%7BNAME%3A'SCJ%5C%22%22%7D%2C%7B%22x%22%3A708.8858%2C%22y%22%3A70.5669%2C%22width%22%3A118.11396000000002%2C%22height%22%3A39.24423%2C%22text%22%3A%22%5C%22%E5%9B%9E%E6%94%B6%5C%22%22%7D%2C%7B%22x%22%3A47.692856%2C%22y%22%3A136.71559%2C%22width%22%3A71.93167399999999%2C%22height%22%3A21.787350000000004%2C%22text%22%3A%22STR%20'SCJ'%22%7D%2C%7B%22x%22%3A527.5281%2C%22y%22%3A142.55089%2C%22width%22%3A70.13379999999995%2C%22height%22%3A19.475719999999995%2C%22text%22%3A%22STR%20'SGJ'%22%7D%2C%7B%22x%22%3A710.2427%2C%22y%22%3A234.50931%2C%22width%22%3A132.7994%2C%22height%22%3A24.881290000000007%2C%22text%22%3A%22%7BNAME%3A%20'ROSE%22%7D%2C%7B%22x%22%3A38.63273%2C%22y%22%3A235.32918%2C%22width%22%3A92.07005999999998%2C%22height%22%3A24.162239999999997%2C%22text%22%3A%22OBJ%20X100%22%7D%2C%7B%22x%22%3A562.9758%2C%22y%22%3A239.82497%2C%22width%22%3A46.85226%2C%22height%22%3A20.035289999999975%2C%22text%22%3A%22X100%22%7D%2C%7B%22x%22%3A519.92456%2C%22y%22%3A241.05284%2C%22width%22%3A31.17563999999993%2C%22height%22%3A21.12293999999997%2C%22text%22%3A%22OBJ%22%7D%2C%7B%22x%22%3A281.1011%2C%22y%22%3A324.07327%2C%22width%22%3A25.086250000000007%2C%22height%22%3A24.231359999999995%2C%22text%22%3A%22%E5%A0%86%22%7D%2C%7B%22x%22%3A70.99096%2C%22y%22%3A324.0386%2C%22width%22%3A24.852805000000004%2C%22height%22%3A25.206520000000012%2C%22text%22%3A%22%E6%A0%88%22%7D%2C%7B%22x%22%3A551.5016%2C%22y%22%3A329.4437%2C%22width%22%3A25.414699999999925%2C%22height%22%3A24.13190000000003%2C%22text%22%3A%22%E6%A0%88%22%7D%2C%7B%22x%22%3A749.61285%2C%22y%22%3A330.47018%2C%22width%22%3A25.952210000000036%2C%22height%22%3A23.223179999999957%2C%22text%22%3A%22%E5%A0%86%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcf9f8%22%2C%22id%22%3A%22ua3796757%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"udea4b6e6\"><li fid=\"ueb4abd9e\" data-lake-id=\"ua18eff73\" id=\"ua18eff73\"><span data-lake-id=\"u0c65efdd\" id=\"u0c65efdd\">栈内存的内存都是</span><code data-lake-id=\"u2a023396\" id=\"u2a023396\"><span data-lake-id=\"u5e6a1253\" id=\"u5e6a1253\">操作系统自动分配和释放回收的</span></code><span data-lake-id=\"u141ef14a\" id=\"u141ef14a\">（由于栈内存所存的基础数据类型大小是固定的）</span></li><li fid=\"ueb4abd9e\" data-lake-id=\"ub9874fd6\" id=\"ub9874fd6\"><span data-lake-id=\"uaed9e201\" id=\"uaed9e201\">JS堆内存需要</span><u><span data-lake-id=\"u409eca21\" id=\"u409eca21\">JS引擎手动释放这些内存</span></u><span data-lake-id=\"uae89f9be\" id=\"uae89f9be\">（由于堆内存所存大小不固定，系统无法自动释放回收）</span></li></ul><h3 data-lake-id=\"IeeMt\" id=\"IeeMt\"><span data-lake-id=\"u9e84395f\" id=\"u9e84395f\">为什么要进行垃圾回收？</span></h3><p data-lake-id=\"ue26c8a5e\" id=\"ue26c8a5e\"><span data-lake-id=\"ua5bf3524\" id=\"ua5bf3524\">在Chrome中，V8被限制了内存的使用（64位约1.4G/1464MB，32位约0.7G/732MB）。</span></p><p data-lake-id=\"u168aee22\" id=\"u168aee22\"><span data-lake-id=\"u01d20a0c\" id=\"u01d20a0c\">限制内存使用的原因：</span></p><ul list=\"u7a0a8909\"><li fid=\"ud21b5408\" data-lake-id=\"ud8db7faf\" id=\"ud8db7faf\"><span data-lake-id=\"u5f393045\" id=\"u5f393045\">表层：V8最初为浏览器而设计，不太可能遇到用大量内存的场景</span></li><li fid=\"ud21b5408\" data-lake-id=\"u5b2bb204\" id=\"u5b2bb204\"><span data-lake-id=\"ubd7c6bc8\" id=\"ubd7c6bc8\">深层：V8的垃圾回收机制的限制（如果清理大量的内存垃圾很耗时间，这样会引起JS线程暂时执行的时间，性能和应用直线下降）</span></li></ul><blockquote data-lake-id=\"u590725ff\" id=\"u590725ff\"><p data-lake-id=\"ufd589c32\" id=\"ufd589c32\"><span data-lake-id=\"u4bf94c94\" id=\"u4bf94c94\">当我们的代码没有按照正确的写法时，会使得JS引擎的垃圾回收机制无法正确的对内存进行释放（内存泄漏），从而使得浏览器占用的内存不断增加，进而导致JS和应用、操作系统性能下降。</span></p></blockquote><h3 data-lake-id=\"Dj75r\" id=\"Dj75r\"><span data-lake-id=\"u1177ef8d\" id=\"u1177ef8d\">V8的垃圾回收算法</span></h3><h4 data-lake-id=\"JEhWy\" id=\"JEhWy\"><span data-lake-id=\"u193a838a\" id=\"u193a838a\">分代回收</span></h4><p data-lake-id=\"ud35f2718\" id=\"ud35f2718\"><span data-lake-id=\"u9d0a86c4\" id=\"u9d0a86c4\">在JS中，对象存活周期分为两种情况：</span></p><ul list=\"u10716cba\"><li fid=\"u4d6f4cff\" data-lake-id=\"ud0f1a5a8\" id=\"ud0f1a5a8\"><span data-lake-id=\"u474e3d61\" id=\"u474e3d61\">存活周期很短：经过一次垃圾回收后，就被释放回收掉。</span></li><li fid=\"u4d6f4cff\" data-lake-id=\"u58f4813a\" id=\"u58f4813a\"><span data-lake-id=\"uff9ae711\" id=\"uff9ae711\">存活周期很长：经过多次垃圾回收后，还存在。</span></li></ul><p data-lake-id=\"u7b4bfb4b\" id=\"u7b4bfb4b\"><span data-lake-id=\"uee67855c\" id=\"uee67855c\">产生问题：对于存活周期长的，多次回收都回收不掉，明知回收不掉，却还不断地去回收，不是很消耗性能吗？</span></p><p data-lake-id=\"uae69cc01\" id=\"uae69cc01\"><span data-lake-id=\"uada6f1c1\" id=\"uada6f1c1\">对于此问题，V8做了</span><strong><span data-lake-id=\"u61bc8ac9\" id=\"u61bc8ac9\">分代回收</span></strong><span data-lake-id=\"u375374ea\" id=\"u375374ea\">的优化方法。即：</span><strong><span data-lake-id=\"u86ac96ff\" id=\"u86ac96ff\">V8将堆分为两个空间，一个叫新生代，一个叫老生代。新生代是存放存活周期短对象的地方，老生代是存放存活周期长对象的地方。</span></strong></p><blockquote data-lake-id=\"uce86f693\" id=\"uce86f693\"><p data-lake-id=\"u7d8c541c\" id=\"u7d8c541c\"><span data-lake-id=\"u20cca4be\" id=\"u20cca4be\">新生代容量：1-8M。而老生代容量很大。对于这两块区域，V8分别做了</span><strong><span data-lake-id=\"u8d4a2334\" id=\"u8d4a2334\">不同的垃圾回收器和不同的垃圾回收算法</span></strong><span data-lake-id=\"u3732644d\" id=\"u3732644d\">，以致于更高效地进行垃圾回收。</span></p><ul list=\"u6e6237ae\"><li fid=\"u21ceaefe\" data-lake-id=\"u64fe2468\" id=\"u64fe2468\"><span data-lake-id=\"ufa4ccc87\" id=\"ufa4ccc87\">副垃圾回收器 + Scavenge 算法：主要负责新生代的垃圾回收</span></li><li fid=\"u21ceaefe\" data-lake-id=\"u82241c88\" id=\"u82241c88\"><span data-lake-id=\"uc9f1b7f9\" id=\"uc9f1b7f9\">主垃圾回收器 + Mark-Sweep &amp;&amp; Mark-Compact 算法</span></li></ul></blockquote><h5 data-lake-id=\"liInW\" id=\"liInW\"><span data-lake-id=\"u7cd29c50\" id=\"u7cd29c50\">新生代</span></h5><p data-lake-id=\"u06f94cf3\" id=\"u06f94cf3\"><span data-lake-id=\"u329afa9b\" id=\"u329afa9b\">在JS中，任何对象的声明分配到的内存，将会先放到新生代中，而因为大部分对象在内存中存活的周期很短，所以需要一个效率非常高的算法。在新生代中，主要使用Scavenge算法进行垃圾回收，Scavenge算法是一个典型的牺牲空间换取时间的复制算法，在占用空间不大的场景上非常适用。</span></p><p data-lake-id=\"u67c23c6a\" id=\"u67c23c6a\" style=\"text-indent: 2em\"><span data-lake-id=\"uce110ef3\" id=\"uce110ef3\">Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，工作方式也很简单，就是将from-space中存活的活动对象复制到to-space中，并将这些对象的内存有序排列起来，然后将from-space中的非活动对象的内存进行释放，完成后，将from space和to space进行互换，这样可以使得新生代中的这两块区域可以重复利用。</span></p><p data-lake-id=\"u914a79d3\" id=\"u914a79d3\"><span data-lake-id=\"u47f0225c\" id=\"u47f0225c\">具体步骤：</span></p><ol list=\"udeea99d0\"><li fid=\"u30fe0781\" data-lake-id=\"ub8b8bdae\" id=\"ub8b8bdae\"><span data-lake-id=\"uc2b855fe\" id=\"uc2b855fe\">标记活动对象和非活动对象</span></li><li fid=\"u30fe0781\" data-lake-id=\"u8bd7471c\" id=\"u8bd7471c\"><span data-lake-id=\"u6628ccc7\" id=\"u6628ccc7\">复制from-space的活动对象到to-space中并进行排序</span></li><li fid=\"u30fe0781\" data-lake-id=\"u9378e36c\" id=\"u9378e36c\"><span data-lake-id=\"u6a700d6a\" id=\"u6a700d6a\">清除from-space中的非活动对象</span></li><li fid=\"u30fe0781\" data-lake-id=\"u7a1ddbdd\" id=\"u7a1ddbdd\"><span data-lake-id=\"udd906edb\" id=\"udd906edb\">将 from-space和to-space进行角色互换，以便下一次的Scavenge算法垃圾回收</span></li></ol><blockquote data-lake-id=\"uea533ef8\" id=\"uea533ef8\"><p data-lake-id=\"u24ba0a2b\" id=\"u24ba0a2b\"><span data-lake-id=\"u4d56717d\" id=\"u4d56717d\">垃圾回收器如何知道哪些是活动对象，哪些是非活动对象呢？</span></p><ul list=\"u0448bae4\"><li fid=\"u1d5f3bce\" data-lake-id=\"u1b48cf47\" id=\"u1b48cf47\"><span data-lake-id=\"uf96969ce\" id=\"uf96969ce\">从初始的根对象（window或global）的指针开始，向下搜索子节点，子节点就被搜索到了，说明该子节点的引用对象可达，并为其进行标记。</span></li><li fid=\"u1d5f3bce\" data-lake-id=\"ua0a7f0c3\" id=\"ua0a7f0c3\"><span data-lake-id=\"u318253e8\" id=\"u318253e8\">然后接着递归搜索，直到所有的子节点被遍历结束。</span></li><li fid=\"u1d5f3bce\" data-lake-id=\"u9f3e2021\" id=\"u9f3e2021\"><span data-lake-id=\"u1663e712\" id=\"u1663e712\">那么没有被遍历到的节点，就没有标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。</span></li></ul></blockquote><p data-lake-id=\"uba485d8b\" id=\"uba485d8b\"><span data-lake-id=\"uef44b07a\" id=\"uef44b07a\">💬 新生代中的对象什么时候变成老生代？</span></p><p data-lake-id=\"u4414a1b4\" id=\"u4414a1b4\" style=\"text-indent: 2em\"><span data-lake-id=\"u0a59e7d7\" id=\"u0a59e7d7\">在新生代中，还进一步进行了细分。分为 nursery子代 和 intermediate子代 两个区域，一个对象第一次分配内存时会被分配到新生代中的nursery子代，如果经过下一次的垃圾回收这个对象还存在新生代中，这时，我们将此对象移动到intermedidate子代，在经过下一次垃圾回收，如果这个对象还在新生代中，副垃圾回收器 会将该对象移动到老生代中，这个移动的过程被称为</span><strong><span data-lake-id=\"udaccf290\" id=\"udaccf290\">晋升</span></strong><span data-lake-id=\"u8e40b069\" id=\"u8e40b069\">。</span></p><h5 data-lake-id=\"jLe40\" id=\"jLe40\"><span data-lake-id=\"u56e0f256\" id=\"u56e0f256\">老生代</span></h5><p data-lake-id=\"uc417e20f\" id=\"uc417e20f\"><span data-lake-id=\"u1dbd565b\" id=\"u1dbd565b\">老生代空间：新生代空间的对象，身经百战后，留下来的老对象，成功晋升到了老生代中。</span></p><p data-lake-id=\"u1f262ef3\" id=\"u1f262ef3\"><span data-lake-id=\"u07b44c67\" id=\"u07b44c67\">       由于这些对象都是经过多次回收过程但是没有被回收走的，都是一群生命力顽强、存活率高的对象，所以老生代中，回收算法不宜使用Scavenge算法。</span></p><p data-lake-id=\"u85625881\" id=\"u85625881\"><span data-lake-id=\"u2259c2fc\" id=\"u2259c2fc\">原因：</span></p><ul list=\"ud8c0a627\"><li fid=\"u745b88ec\" data-lake-id=\"u9d48a41c\" id=\"u9d48a41c\"><span data-lake-id=\"ufd4c80e7\" id=\"ufd4c80e7\">Scavenge算法是复制算法，反复复制这些存活率高的对象，没有什么意义，效率极低。</span></li><li fid=\"u745b88ec\" data-lake-id=\"u4ad9ea13\" id=\"u4ad9ea13\"><span data-lake-id=\"u03bd6dcb\" id=\"u03bd6dcb\">Scavenge算法是以空间换时间的算法，老生代是内存很大的空间，如果使用Scavenge算法，空间资源非常浪费。</span></li></ul><p data-lake-id=\"uac3568ec\" id=\"uac3568ec\"><span data-lake-id=\"uaf20c0cc\" id=\"uaf20c0cc\">因此，老生代里使用了Mark-Sweep算法（标记清理）和 Mark-Compact算法（标记整理）。</span></p><p data-lake-id=\"u205e2b47\" id=\"u205e2b47\"><strong><span data-lake-id=\"u1d641bae\" id=\"u1d641bae\">Mark-Sweep（标记清理）</span></strong></p><p data-lake-id=\"u5efb97f5\" id=\"u5efb97f5\"><span data-lake-id=\"u91c15ada\" id=\"u91c15ada\">Mark-Sweep分为两个阶段，标记和清理阶段，之前的Scavenge算法 也有标记和清理，但是Mark-Sweep算法跟Scavenge算法的区别是，后者需要复制再清理，前者不需要，Mark-Sweep直接标记活动对象和非活动对象之后，就直接执行清理了。</span></p><ul list=\"u93cde815\"><li fid=\"u6e665952\" data-lake-id=\"u45984a72\" id=\"u45984a72\"><span data-lake-id=\"ub7110135\" id=\"ub7110135\">标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记</span></li><li fid=\"u6e665952\" data-lake-id=\"u329513d6\" id=\"u329513d6\"><span data-lake-id=\"u5d44c202\" id=\"u5d44c202\">清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。</span></li></ul><p data-lake-id=\"u8b1bd8b7\" id=\"u8b1bd8b7\"><strong><span data-lake-id=\"ucdd8c8d7\" id=\"ucdd8c8d7\">Mark-Compact（标记整理）</span></strong></p><p data-lake-id=\"u0d920ede\" id=\"u0d920ede\"><span data-lake-id=\"uf88139d2\" id=\"uf88139d2\">Mark-Sweep算法执行垃圾回收之后，留下了很多零零散散的空位。坏处：如果此时进来了一个大对象，需要对此对象分配一个大内存，先从零零散散的空位中找位置，找了一圈，发现没有适合自己大小的空位，只好拼在了最后，这个寻找空位的过程是耗性能的，这也是Mark-Sweep算法的一个缺点。</span></p><p data-lake-id=\"u04110e71\" id=\"u04110e71\"><span data-lake-id=\"u6f0f70c1\" id=\"u6f0f70c1\">Mark-Compact算法是Mark-Sweep算法的加强版，在Mark-Sweep算法的基础上，加上了</span><code data-lake-id=\"ub2079893\" id=\"ub2079893\"><span data-lake-id=\"u7af13c47\" id=\"u7af13c47\">整理阶段</span></code><span data-lake-id=\"ua3fb3ac9\" id=\"ua3fb3ac9\">，每次清理完非活动对象，就会把剩下的活动对象，整理到内存的一侧，整理完成后，直接回收掉边界上的内存。 </span></p><h4 data-lake-id=\"qXQ7q\" id=\"qXQ7q\"><span data-lake-id=\"uca173be1\" id=\"uca173be1\">全停顿（Stop-The-World）</span></h4><p data-lake-id=\"ube2afc62\" id=\"ube2afc62\"><span data-lake-id=\"u46fb2948\" id=\"u46fb2948\">JS代码的运行要用到JS引擎，垃圾回收也要用到JS引擎，如果这两者同时进行了，发生冲突了，怎么办？答案：垃圾回收优先于代码执行，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，成为全停顿。</span></p><p data-lake-id=\"u1f44fb33\" id=\"u1f44fb33\" style=\"text-indent: 2em\"><span data-lake-id=\"u10c85ec5\" id=\"u10c85ec5\">由于新生代空间小，并且存活对象少，再配合Scavenge算法，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多时，停顿时间就会较长，使得页面出现了卡顿现象。</span></p><h4 data-lake-id=\"LzlsH\" id=\"LzlsH\"><span data-lake-id=\"u235e2d9b\" id=\"u235e2d9b\">Orinoco优化</span></h4><p data-lake-id=\"u94b11978\" id=\"u94b11978\"><span data-lake-id=\"u2aa55ec5\" id=\"u2aa55ec5\">orinoco是V8的垃圾回收器的项目代号，为了提升用户体验，解决全停顿问题，它提出了增量标记、懒性清理、并发、并行的优化方法。</span></p><h5 data-lake-id=\"qJ8qA\" id=\"qJ8qA\"><span data-lake-id=\"ube2c6f6e\" id=\"ube2c6f6e\">增量标记（Incremental marking）</span></h5><p data-lake-id=\"u44b42023\" id=\"u44b42023\"><span data-lake-id=\"u4bb33729\" id=\"u4bb33729\">增量标记是在</span><code data-lake-id=\"u4331b9a4\" id=\"u4331b9a4\"><span data-lake-id=\"u0f32ee13\" id=\"u0f32ee13\">标记</span></code><span data-lake-id=\"ud8d2d7a5\" id=\"ud8d2d7a5\">这个阶段进行了优化。</span></p><p data-lake-id=\"uf5e9a333\" id=\"uf5e9a333\"><span data-lake-id=\"u72dddd2c\" id=\"u72dddd2c\">当垃圾少量时，不会做增量标记优化，但是当垃圾达到一定数量时，增量标记就会开启：标记一点，JS代码运行一段，从而提高效率。</span></p><h5 data-lake-id=\"ySJcw\" id=\"ySJcw\"><span data-lake-id=\"ufcc61208\" id=\"ufcc61208\">惰性清理（Lazy sweeping）</span></h5><p data-lake-id=\"ue8dbf9dd\" id=\"ue8dbf9dd\"><span data-lake-id=\"u5dac6e12\" id=\"u5dac6e12\">惰性清理针对</span><code data-lake-id=\"uf33a5412\" id=\"uf33a5412\"><span data-lake-id=\"u4c1f48ac\" id=\"u4c1f48ac\">清除</span></code><span data-lake-id=\"u32ad0a27\" id=\"u32ad0a27\">阶段。在增量标记后，要进行清理非活动对象时，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就</span><code data-lake-id=\"u3ca3d263\" id=\"u3ca3d263\"><span data-lake-id=\"uaf5cd11c\" id=\"uaf5cd11c\">延迟了清理</span></code><span data-lake-id=\"ue3b68b1b\" id=\"ue3b68b1b\">，让JS代码先执行，或者</span><code data-lake-id=\"u341b1744\" id=\"u341b1744\"><span data-lake-id=\"ud8cd3d3f\" id=\"ud8cd3d3f\">只清理部分垃圾</span></code><span data-lake-id=\"u11fe3166\" id=\"u11fe3166\">，而不清理全部。这个优化就叫做</span><code data-lake-id=\"ubeec2ac2\" id=\"ubeec2ac2\"><span data-lake-id=\"u4566d232\" id=\"u4566d232\">惰性清理</span></code><span data-lake-id=\"u430e47ab\" id=\"u430e47ab\">。</span></p><p data-lake-id=\"ubafad1d7\" id=\"ubafad1d7\" style=\"text-indent: 2em\"><span data-lake-id=\"u1f6c801b\" id=\"u1f6c801b\">整理标记和惰性清理的出现，大大改善了</span><code data-lake-id=\"u3d793081\" id=\"u3d793081\"><span data-lake-id=\"u62475ae8\" id=\"u62475ae8\">全停顿</span></code><span data-lake-id=\"u0f9b4395\" id=\"u0f9b4395\">的现象。但是产生了问题：增量</span><code data-lake-id=\"u45aa516f\" id=\"u45aa516f\"><span data-lake-id=\"u8559ff70\" id=\"u8559ff70\">标记是标记一点，JS运行一段</span></code><span data-lake-id=\"uee05c388\" id=\"uee05c388\">。如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。</span></p><p data-lake-id=\"ube1cb08d\" id=\"ube1cb08d\" style=\"text-indent: 2em\"><span data-lake-id=\"uf4bfaf39\" id=\"uf4bfaf39\">总结一下就是：标记和代码执行的穿插，有可能造成</span><code data-lake-id=\"u020b2b56\" id=\"u020b2b56\"><span data-lake-id=\"udfde4f94\" id=\"udfde4f94\">对象引用改变，标记错误</span></code><span data-lake-id=\"u8b3347bb\" id=\"u8b3347bb\">现象。这就需要使用</span><code data-lake-id=\"u64591b87\" id=\"u64591b87\"><span data-lake-id=\"u1a59ce6d\" id=\"u1a59ce6d\">写屏障</span></code><span data-lake-id=\"ud5f0ea04\" id=\"ud5f0ea04\">技术来记录这些引用关系的变化。</span></p><h5 data-lake-id=\"TuPmj\" id=\"TuPmj\"><span data-lake-id=\"u66c50f68\" id=\"u66c50f68\">并发（Concurrent）</span></h5><p data-lake-id=\"u3897d9e0\" id=\"u3897d9e0\"><span data-lake-id=\"u52a1fd23\" id=\"u52a1fd23\">并发式GC允许在垃圾回收时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于JS代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行</span><code data-lake-id=\"uf95278db\" id=\"uf95278db\"><span data-lake-id=\"ue2ff70a0\" id=\"ue2ff70a0\">写屏障</span></code><span data-lake-id=\"ub91ae711\" id=\"ub91ae711\">操作。</span></p><p data-lake-id=\"ued1e3ddc\" id=\"ued1e3ddc\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670851619218-0efd0aee-9227-4585-9745-d95f8bcacd7c.png%22%2C%22taskId%22%3A%22u19ceca22-5e5e-4460-bade-47f1ebaf8b4%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A718%2C%22height%22%3A147%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A56932%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A718%2C%22originHeight%22%3A147%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%20JS%20JS%20JS%20%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B%20GC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A518.2978%2C%22y%22%3A6.403%2C%22width%22%3A71.0915399999999%2C%22height%22%3A13.888992000000002%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A355.13663%2C%22y%22%3A6.6361527%2C%22width%22%3A70.84358999999995%2C%22height%22%3A14.469104300000001%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A244.60695%2C%22y%22%3A7.341826%2C%22width%22%3A70.62634999999997%2C%22height%22%3A13.232665999999998%2C%22text%22%3A%22%E4%B8%80%E4%B8%AAGC%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A511.00766%2C%22y%22%3A62.335815%2C%22width%22%3A21.408289999999965%2C%22height%22%3A16.434475000000006%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A326.68866%2C%22y%22%3A62.805073%2C%22width%22%3A22.071339999999964%2C%22height%22%3A16.210126999999993%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A209.93317%2C%22y%22%3A62.98647%2C%22width%22%3A20.16162%2C%22height%22%3A15.607550000000003%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A27.72673%2C%22y%22%3A63.23409%2C%22width%22%3A50.66001%2C%22height%22%3A15.531129999999997%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A18.213867%2C%22y%22%3A112.826996%2C%22width%22%3A68.70949300000001%2C%22height%22%3A18.384354000000016%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A270.15326%2C%22y%22%3A114.86365%2C%22width%22%3A24.49684000000002%2C%22height%22%3A14.056330000000003%2C%22text%22%3A%22GC%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23b5e19a%22%2C%22id%22%3A%22u0aee8473%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h5 data-lake-id=\"VcQ3Z\" id=\"VcQ3Z\"><span data-lake-id=\"u101402ee\" id=\"u101402ee\">并行</span></h5><p data-lake-id=\"ua0460e40\" id=\"ua0460e40\"><span data-lake-id=\"u04561708\" id=\"u04561708\">并行式GC运行主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的GC工作，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。</span></p><p data-lake-id=\"uef99213b\" id=\"uef99213b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670851771272-d5454f1b-90b5-4cbd-83bb-8d1805c9bce1.png%22%2C%22taskId%22%3A%22ucd478771-10dc-4006-83a3-1f89d520c4e%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A608%2C%22height%22%3A139%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A52245%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A608%2C%22originHeight%22%3A139%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%20JS%20%E5%A4%8D%E5%88%B6%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%20%E5%A4%8D%E5%88%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A24.106985%2C%22y%22%3A9.381434%2C%22width%22%3A46.446355000000004%2C%22height%22%3A16.010916%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A260.74698%2C%22y%22%3A9.807495%2C%22width%22%3A97.11372%2C%22height%22%3A16.74852%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A407.33334%2C%22y%22%3A9.333336%2C%22width%22%3A22.720039999999983%2C%22height%22%3A17.614965%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A294.43375%2C%22y%22%3A55.91309%2C%22width%22%3A30.719720000000052%2C%22height%22%3A16.232619999999997%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A12.700244%2C%22y%22%3A55.850666%2C%22width%22%3A67.851826%2C%22height%22%3A15.496128000000006%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A10.309506%2C%22y%22%3A105.08276%2C%22width%22%3A71.105264%2C%22height%22%3A15.924114000000003%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%2C%7B%22x%22%3A295.03604%2C%22y%22%3A105.999%2C%22width%22%3A28.44702000000001%2C%22height%22%3A14.280320000000003%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22ue342693c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"wEroB\" id=\"wEroB\"><span data-lake-id=\"u3c8d3bdf\" id=\"u3c8d3bdf\">V8当前的垃圾回收机制</span></h3><p data-lake-id=\"u06d6eebb\" id=\"u06d6eebb\"><span data-lake-id=\"u78029936\" id=\"u78029936\">2011年，V8应用了增量标记机制。2018年，Chrome64和Node.js V10启动</span><code data-lake-id=\"u355331d5\" id=\"u355331d5\"><span data-lake-id=\"ued09ec0b\" id=\"ued09ec0b\">并发（Concurrent）</span></code><span data-lake-id=\"u23ad23fa\" id=\"u23ad23fa\">，同时在并发基础上添加</span><code data-lake-id=\"ue8b0e387\" id=\"ue8b0e387\"><span data-lake-id=\"u9b034d7a\" id=\"u9b034d7a\">并行（Parallel）技术</span></code><span data-lake-id=\"u6ee4949c\" id=\"u6ee4949c\">，使得垃圾回收时间大幅度缩短。</span></p><h4 data-lake-id=\"rvy9V\" id=\"rvy9V\"><span data-lake-id=\"u6fb22152\" id=\"u6fb22152\">副垃圾回收器</span></h4><p data-lake-id=\"u69444266\" id=\"u69444266\"><span data-lake-id=\"ude6f8f96\" id=\"ude6f8f96\">V8在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从from-to复制到</span><code data-lake-id=\"u94ad60b4\" id=\"u94ad60b4\"><span data-lake-id=\"u1b7a4b68\" id=\"u1b7a4b68\">space-to</span></code><span data-lake-id=\"u88d5c25f\" id=\"u88d5c25f\">时，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8在第一个线程对活动对象进行复制并且复制完成后，都必须去维护这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。</span></p><p data-lake-id=\"u297158e6\" id=\"u297158e6\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670852581283-0012ecbd-7021-4bfa-bf9b-64bd4ee61947.png%22%2C%22taskId%22%3A%22u46c50273-8903-4249-a83f-795e67d5c8a%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A614%2C%22height%22%3A142%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A52347%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A614%2C%22originHeight%22%3A142%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%20JS%20%E5%A4%8D%E5%88%B6%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%20%E5%A4%8D%E5%88%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A24.284567%2C%22y%22%3A8.10701%2C%22width%22%3A47.76761300000001%2C%22height%22%3A16.477707000000002%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A261.1071%2C%22y%22%3A8.693776%2C%22width%22%3A97.71956%2C%22height%22%3A15.960688999999999%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%2F%E5%A4%8D%E5%88%B6%2F%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A409.35535%2C%22y%22%3A9.155507%2C%22width%22%3A20.897310000000004%2C%22height%22%3A16.500383%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A295.91223%2C%22y%22%3A54.80176%2C%22width%22%3A29.993669999999952%2C%22height%22%3A15.140569999999997%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A12.963719%2C%22y%22%3A54.817806%2C%22width%22%3A68.663041%2C%22height%22%3A15.837244000000005%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A12.00726%2C%22y%22%3A103.812416%2C%22width%22%3A70.69794999999999%2C%22height%22%3A15.520734000000004%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%2C%7B%22x%22%3A295.66864%2C%22y%22%3A103.939766%2C%22width%22%3A29.698730000000012%2C%22height%22%3A16.138813999999996%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22u33593aab%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"wXu3d\" id=\"wXu3d\"><span data-lake-id=\"udf022892\" id=\"udf022892\">主垃圾回收器</span></h4><p data-lake-id=\"u6f92da7a\" id=\"u6f92da7a\"><span data-lake-id=\"u272d142b\" id=\"u272d142b\">V8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在JS代码执行时，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JS代码修改时，</span><code data-lake-id=\"u63999d0a\" id=\"u63999d0a\"><span data-lake-id=\"u86bda28c\" id=\"u86bda28c\">写屏障</span></code><span data-lake-id=\"u52a941a6\" id=\"u52a941a6\">技术在辅助线程在进行并发标记时进行追踪。</span></p><p data-lake-id=\"u3b599297\" id=\"u3b599297\" style=\"text-indent: 2em\"><span data-lake-id=\"ue2e66fb8\" id=\"ue2e66fb8\">当并发标记完成或动态分配的内存达到极限时，主线程会执行最终的快速标记步骤，这时主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行check操作，确认操作完成后，某些辅助线程会进行清理内存操作，某些辅助线程会进行内存整理操作，由于都是并发的，并不会影响主线程JS代码的执行。</span></p><p data-lake-id=\"u11df0571\" id=\"u11df0571\" style=\"text-indent: 2em\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670891665363-ab526d91-530b-485d-a461-ebfd7da717ef.png%22%2C%22taskId%22%3A%22ua5f38ef3-e648-452a-bada-462d2332057%22%2C%22clientId%22%3A%22u8f053162-afe4-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A680%2C%22height%22%3A160%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A66145%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A680%2C%22originHeight%22%3A160%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%20JS%20JS%20%E6%A0%87%E8%AE%B0%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%20%E5%86%85%E5%AD%98%E6%95%B4%E7%90%86%20%E6%A0%87%E8%AE%B0%20%E5%86%85%E5%AD%98%E6%B8%85%E7%90%86%20%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A33.03638%2C%22y%22%3A15.195885%2C%22width%22%3A50.019749999999995%2C%22height%22%3A17.119114999999997%2C%22text%22%3A%22%E4%B8%BB%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A212.22484%2C%22y%22%3A16.182165%2C%22width%22%3A23.436399999999992%2C%22height%22%3A15.696908999999998%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A401.21948%2C%22y%22%3A17.290962%2C%22width%22%3A20.644200000000012%2C%22height%22%3A14.593924000000001%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A229.88173%2C%22y%22%3A65.92184%2C%22width%22%3A32.28113999999999%2C%22height%22%3A16.251289999999997%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%22%7D%2C%7B%22x%22%3A17.864382%2C%22y%22%3A65.89883%2C%22width%22%3A74.898763%2C%22height%22%3A18.681219999999996%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B1%22%7D%2C%7B%22x%22%3A334.0977%2C%22y%22%3A66.60388%2C%22width%22%3A64.33415000000002%2C%22height%22%3A16.507629999999992%2C%22text%22%3A%22%E5%86%85%E5%AD%98%E6%95%B4%E7%90%86%22%7D%2C%7B%22x%22%3A228.91518%2C%22y%22%3A119.97595%2C%22width%22%3A33.59330000000003%2C%22height%22%3A17.58068999999999%2C%22text%22%3A%22%E6%A0%87%E8%AE%B0%22%7D%2C%7B%22x%22%3A333.5789%2C%22y%22%3A120.04136%2C%22width%22%3A64.59252000000004%2C%22height%22%3A17.292149999999992%2C%22text%22%3A%22%E5%86%85%E5%AD%98%E6%B8%85%E7%90%86%22%7D%2C%7B%22x%22%3A17.962547%2C%22y%22%3A119.83123%2C%22width%22%3A78.128913%2C%22height%22%3A17.705060000000003%2C%22text%22%3A%22%E8%BE%85%E5%8A%A9%E7%BA%BF%E7%A8%8B2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eaf5dc%22%2C%22id%22%3A%22u97b0bb01%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"jDgwF\" id=\"jDgwF\"><span data-lake-id=\"u50227514\" id=\"u50227514\">问题及解答</span></h3><h4 data-lake-id=\"qFF42\" id=\"qFF42\"><span data-lake-id=\"uf6b58e12\" id=\"uf6b58e12\">浏览器怎么进行垃圾回收？</span></h4><blockquote data-lake-id=\"u025b60fd\" id=\"u025b60fd\"><p data-lake-id=\"uf26deb91\" id=\"uf26deb91\"><span data-lake-id=\"u4b0eb259\" id=\"u4b0eb259\">从三个点来回答什么是垃圾、如何捡垃圾、什么时候捡垃圾</span></p></blockquote><p data-lake-id=\"ua8c77cf9\" id=\"ua8c77cf9\"><span data-lake-id=\"u2954cd6a\" id=\"u2954cd6a\">什么是垃圾？</span></p><ol list=\"u4520e8f6\"><li fid=\"uf3a70105\" data-lake-id=\"ubd6f031e\" id=\"ubd6f031e\"><span data-lake-id=\"u9c509b83\" id=\"u9c509b83\">不再需要，即为垃圾</span></li><li fid=\"uf3a70105\" data-lake-id=\"u4cccc6a2\" id=\"u4cccc6a2\"><span data-lake-id=\"u0de76a99\" id=\"u0de76a99\">全局变量随时可能用到，所以一定不是垃圾</span></li></ol><p data-lake-id=\"u8f50b29d\" id=\"u8f50b29d\"><span data-lake-id=\"u7728f052\" id=\"u7728f052\">如何捡垃圾（遍历算法）？</span></p><ol list=\"ucf934674\"><li fid=\"uc01026e3\" data-lake-id=\"uc08d22fd\" id=\"uc08d22fd\"><span data-lake-id=\"u8b885bd5\" id=\"u8b885bd5\">标记空间中</span><span data-lake-id=\"u9f9c0753\" id=\"u9f9c0753\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89)\">「可达」</span><span data-lake-id=\"u52c554a4\" id=\"u52c554a4\">值</span></li></ol><ol list=\"ucf934674\" data-lake-indent=\"1\"><li fid=\"uc01026e3\" data-lake-id=\"ue0f25687\" id=\"ue0f25687\"><span data-lake-id=\"u03801340\" id=\"u03801340\">从根节点（Root）出发，遍历所有的对象</span></li><li fid=\"uc01026e3\" data-lake-id=\"u49d927b0\" id=\"u49d927b0\"><span data-lake-id=\"u99878587\" id=\"u99878587\">可以遍历到的对象，是可达的（reachable）</span></li><li fid=\"uc01026e3\" data-lake-id=\"u7f69f3d9\" id=\"u7f69f3d9\"><span data-lake-id=\"ufa4615d6\" id=\"ufa4615d6\">没有遍历到的对象，不可达的（unreachable）</span></li></ol><ol list=\"ucf934674\" start=\"2\"><li fid=\"uc01026e3\" data-lake-id=\"ue0560bf9\" id=\"ue0560bf9\"><span data-lake-id=\"u38e6eaaf\" id=\"u38e6eaaf\">回收</span><span data-lake-id=\"u00c7ac50\" id=\"u00c7ac50\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89)\">「不可达」</span><span data-lake-id=\"uea983247\" id=\"uea983247\">的值所占据的内存</span></li><li fid=\"uc01026e3\" data-lake-id=\"u2220cbbb\" id=\"u2220cbbb\"><span data-lake-id=\"u68ccda49\" id=\"u68ccda49\">做内存整理</span></li></ol><p data-lake-id=\"u30755c38\" id=\"u30755c38\"><span data-lake-id=\"uffb2ae91\" id=\"uffb2ae91\">什么时候捡垃圾？</span></p><ol list=\"u0de72e4a\"><li fid=\"u9210a6b7\" data-lake-id=\"u6c20c1ca\" id=\"u6c20c1ca\"><span data-lake-id=\"u98145e6d\" id=\"u98145e6d\">前端有其特殊性，垃圾回收时会造成页面卡顿</span></li><li fid=\"u9210a6b7\" data-lake-id=\"u0b458561\" id=\"u0b458561\"><span data-lake-id=\"u151f6e9e\" id=\"u151f6e9e\">分代收集、增量收集、闲时收集</span></li></ol><h4 data-lake-id=\"W65fb\" id=\"W65fb\"><span data-lake-id=\"u44adabbd\" id=\"u44adabbd\">浏览器中不同类型变量的内存都是何时释放？</span></h4><p data-lake-id=\"uef7a70a2\" id=\"uef7a70a2\"><span data-lake-id=\"u575f017e\" id=\"u575f017e\">JS中类型：值类型、引用类型</span></p><ul list=\"u85362816\"><li fid=\"uad2bf249\" data-lake-id=\"ua009e4a9\" id=\"ua009e4a9\"><span data-lake-id=\"u86748593\" id=\"u86748593\">引用类型</span></li></ul><ul list=\"u85362816\" data-lake-indent=\"1\"><li fid=\"uad2bf249\" data-lake-id=\"u7d6fe898\" id=\"u7d6fe898\"><span data-lake-id=\"uccd6df97\" id=\"uccd6df97\">在没有引用之后，通过V8自动回收</span></li></ul><ul list=\"u85362816\" start=\"2\"><li fid=\"uad2bf249\" data-lake-id=\"ubf7a332a\" id=\"ubf7a332a\"><span data-lake-id=\"u5e678254\" id=\"u5e678254\">值类型</span></li></ul><ul list=\"u85362816\" data-lake-indent=\"1\"><li fid=\"uad2bf249\" data-lake-id=\"uc104a1fb\" id=\"uc104a1fb\"><span data-lake-id=\"u95a6e76c\" id=\"u95a6e76c\">如果处于闭包的情况下，要等闭包没有引用才会被V8回收</span></li><li fid=\"uad2bf249\" data-lake-id=\"uefe43339\" id=\"uefe43339\"><span data-lake-id=\"u97c5e952\" id=\"u97c5e952\">非闭包的情况下，等待V8的新生代切换时回收</span></li></ul><h4 data-lake-id=\"VFWLI\" id=\"VFWLI\"><span data-lake-id=\"u3ce3e17e\" id=\"u3ce3e17e\">哪些情况会导致内存泄漏？如何避免？</span></h4><p data-lake-id=\"u3a265273\" id=\"u3a265273\"><span data-lake-id=\"ua30d8e69\" id=\"ua30d8e69\">内存泄漏是指你</span><span data-lake-id=\"ub41b4993\" id=\"ub41b4993\" class=\"lake-fontsize-11\">「用不到」</span><span data-lake-id=\"u62f7ce0c\" id=\"u62f7ce0c\">（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></p><blockquote data-lake-id=\"uc06ba89b\" id=\"uc06ba89b\"><p data-lake-id=\"u8eb79b6b\" id=\"u8eb79b6b\"><span data-lake-id=\"ue0c35899\" id=\"ue0c35899\">以Vue为例，通常会有这些情况：</span></p><ul list=\"u908da993\"><li fid=\"ubb396913\" data-lake-id=\"u0de7967b\" id=\"u0de7967b\"><span data-lake-id=\"ua36661c7\" id=\"ua36661c7\">监听在window/body 等事件没有解绑</span></li><li fid=\"ubb396913\" data-lake-id=\"ue9fa1e41\" id=\"ue9fa1e41\"><span data-lake-id=\"u5dc9aa05\" id=\"u5dc9aa05\">绑在EventBus的事件没有解绑</span></li><li fid=\"ubb396913\" data-lake-id=\"u29044860\" id=\"u29044860\"><span data-lake-id=\"uc37501c1\" id=\"uc37501c1\">Vuex的$store，watch了之后没有unwatch</span></li><li fid=\"ubb396913\" data-lake-id=\"u30ab7a49\" id=\"u30ab7a49\"><span data-lake-id=\"u7e2063be\" id=\"u7e2063be\">使用第三方库创建，没有调用正确的销毁函数</span></li></ul><p data-lake-id=\"ue28b727f\" id=\"ue28b727f\"><strong><span data-lake-id=\"u52a9bc77\" id=\"u52a9bc77\">解决办法：</span></strong></p><ul list=\"ucca91c68\"><li fid=\"u15c0d10b\" data-lake-id=\"ubf86f941\" id=\"ubf86f941\"><span data-lake-id=\"ud0e908df\" id=\"ud0e908df\">beforeDestory 中及时销毁</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u5b4857d0\" id=\"u5b4857d0\"><span data-lake-id=\"uc1da7a90\" id=\"uc1da7a90\">绑定了DOM/BOM对象addEventListener，removeEventListener。</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u2c76ace4\" id=\"u2c76ace4\"><span data-lake-id=\"uaff06bbe\" id=\"uaff06bbe\">观察者模式 $on，$off处理</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u8ea8d227\" id=\"u8ea8d227\"><span data-lake-id=\"u10774bf9\" id=\"u10774bf9\">如果组件中使用了定时器，应销毁处理</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u30329e85\" id=\"u30329e85\"><span data-lake-id=\"uc8d57169\" id=\"uc8d57169\">如果在mouted/created钩子中使用了第三方库初始化，对应的销毁</span></li><li fid=\"u15c0d10b\" data-lake-id=\"u25776ecd\" id=\"u25776ecd\"><span data-lake-id=\"ub7a5ada8\" id=\"ub7a5ada8\">使用弱引用weakMap、weakSet。</span></li></ul></blockquote><p data-lake-id=\"u0450833b\" id=\"u0450833b\"><span data-lake-id=\"u2a45ea03\" id=\"u2a45ea03\">闭包会导致内存泄漏吗？</span></p><blockquote data-lake-id=\"ua8bc9a00\" id=\"ua8bc9a00\"><p data-lake-id=\"ua80fe0bd\" id=\"ua80fe0bd\"><span data-lake-id=\"ua319ccd0\" id=\"ua319ccd0\">不会。</span></p><p data-lake-id=\"u085717ba\" id=\"u085717ba\"><span data-lake-id=\"u559063b9\" id=\"u559063b9\">内存泄漏是指你用不到的（访问不到）的变量，依然占据着空间，不能被再次利用起来。</span></p><p data-lake-id=\"u54d250fc\" id=\"u54d250fc\"><span data-lake-id=\"ubd0d2af5\" id=\"ubd0d2af5\">闭包里面的变量就是我们需要的变量，不能说是内存泄漏。</span></p><p data-lake-id=\"u707d2b30\" id=\"u707d2b30\"><span data-lake-id=\"u718841f7\" id=\"u718841f7\">只是由于IE9之前的版本对JS对象和COM对象使用不同的垃圾收集，从而导致内存无法回收。这是IE的问题，不是闭包的问题。</span></p></blockquote><h4 data-lake-id=\"S4DlT\" id=\"S4DlT\"><span data-lake-id=\"u3c1defbc\" id=\"u3c1defbc\">weakMap weakSet Map Set 有什么区别？</span></h4><p data-lake-id=\"uc0417685\" id=\"uc0417685\"><span data-lake-id=\"u6312494b\" id=\"u6312494b\">在ES6中为我们新增了两个数据结构 WeakMap、WeakSet ，就是为了解决内存泄漏问题。</span></p><p data-lake-id=\"ue23552c6\" id=\"ue23552c6\"><span data-lake-id=\"u595542eb\" id=\"u595542eb\">它的键名所引用的对象都是弱引用，就是垃圾回收机制遍历的时候不考虑该引用。</span></p><p data-lake-id=\"ub6deca20\" id=\"ub6deca20\"><span data-lake-id=\"u98cc071e\" id=\"u98cc071e\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。</span></p><p data-lake-id=\"u3b9a252e\" id=\"u3b9a252e\"><span data-lake-id=\"u5d48706a\" id=\"u5d48706a\">也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对就就会自动侠消失，不用手动删除引用。</span></p><h4 data-lake-id=\"nUpTu\" id=\"nUpTu\"><span data-lake-id=\"ufb766ea8\" id=\"ufb766ea8\">简单了解浏览器的垃圾回收机制？</span></h4><p data-lake-id=\"uf6502ac5\" id=\"uf6502ac5\"><span data-lake-id=\"ud280705a\" id=\"ud280705a\">浏览器怎么进行垃圾回收？</span></p><ul list=\"ub38298e9\"><li fid=\"ub2a2cec0\" data-lake-id=\"u20fe06ee\" id=\"u20fe06ee\"><span data-lake-id=\"uc9de903d\" id=\"uc9de903d\">思路：什么是垃圾、怎么收垃圾、什么时候收垃圾</span></li></ul><p data-lake-id=\"u506a8667\" id=\"u506a8667\"><span data-lake-id=\"u4e4ac535\" id=\"u4e4ac535\">浏览器中不同类型变量的内存都是何时释放？</span></p><ul list=\"u9ef59523\"><li fid=\"u27e1f018\" data-lake-id=\"u8601cbdb\" id=\"u8601cbdb\"><span data-lake-id=\"u62ec2be7\" id=\"u62ec2be7\">思路：分为值类型、引用类型</span></li></ul><p data-lake-id=\"ufb6b550b\" id=\"ufb6b550b\"><a href=\"https://www.cnblogs.com/crazycode2/p/14747974.html\" target=\"_blank\" data-lake-id=\"u3b1a5280\" id=\"u3b1a5280\"><span data-lake-id=\"u3aa70f3c\" id=\"u3aa70f3c\">哪些情况会导致内存泄漏？如何避免？</span></a></p><ul list=\"u8c94d3b2\"><li fid=\"u0d6d1a65\" data-lake-id=\"u84ad8c57\" id=\"u84ad8c57\"><span data-lake-id=\"u6d5f3b41\" id=\"u6d5f3b41\">思路：内存泄漏是指你用不到（访问不到）的变量，依然占据着内存空间，不能被再次利用起来。</span></li></ul><p data-lake-id=\"ufa40c248\" id=\"ufa40c248\"><span data-lake-id=\"uce23f173\" id=\"uce23f173\">weakMap、weakSet、Set、Map有什么区别？</span></p><ul list=\"u9b3fd0fe\"><li fid=\"u089fc18d\" data-lake-id=\"ue19652b2\" id=\"ue19652b2\"><span data-lake-id=\"u13a8e115\" id=\"u13a8e115\">思路：WeakMap、WeakSet弱引用，解决了内存泄漏问题</span></li></ul><p data-lake-id=\"u5aef46f2\" id=\"u5aef46f2\"><span data-lake-id=\"u2d6e200d\" id=\"u2d6e200d\">​</span><br></p><p data-lake-id=\"u1c5dc9d7\" id=\"u1c5dc9d7\"><span data-lake-id=\"u32a21438\" id=\"u32a21438\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-13T01:32:04.000Z",
    "deleted_at": null,
    "created_at": "2022-12-12T08:03:58.000Z",
    "updated_at": "2022-12-13T01:32:04.000Z",
    "published_at": "2022-12-13T01:32:04.000Z",
    "first_published_at": "2022-12-12T08:58:55.147Z",
    "word_count": 4941,
    "cover": "https://cdn.nlark.com/yuque/0/2022/png/2324645/1670837158434-d02b829e-2ca6-4457-9178-7e528051eba5.png",
    "description": "--- title: JS垃圾回收机制categories: JSdate: 2022-11-19updated: 2022-11-19tags: [JS,垃圾回收]cover: https://img1.baidu.com/it/u=3556875364,2935983115&fm=253&...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 108770183,
    "slug": "dq6dovt8l9ux483r",
    "title": "Object.defineProperty和Proxy区别",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: Object.defineProperty和Proxy区别<br />categories: Vue<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: Vue<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/vd.png<br />--- \n<a name=\"CxrBd\"></a>\n## 代理和反射\nvue2中的Object.defineProperty()和vue3 中的Proxy()本质上的作用都是代理。<br />那么什么是代理和反射呢？\n\n- 反射和代理就是**一种拦截并向基本操作嵌入额外行为的能力。**本质上属于数据劫持**。**\n- 反射**Reflect** 是一个内建对象**，**可简化Proxy的创建。\n- Reflect对象使调用一些内部方法（[[Get]]、[[Set]]等）成为可能，它的方法是内部方法的最小包装。\n   - Reflect允许我们将操作符（new，delete等）作为函数（`Reflect.construct`，`Reflect.deleteProperty`等）执行调用。\n   - 对于每个可被`Proxy`捕获的内部方法，在`Reflect`中都有一个对应的方法，其名称和参数与Proxy捕捉器相同。所以，我们可以使用Reflect来将操作转发给原始对象。\n   - Reflect调用的命名与捕捉器的命名完全相同，并且接收相同的参数，因此，return Reflect ... 提供了一个安全的方式，可以轻松地转发操作，并确保我们不会忘记与此相关的任何内容。\n- 代理是目标对象抽象，也就是说，它可以用做目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。\n\n来个简单的例子理解代理操作：\n```javascript\nconst target = {\n  id: 'target'\n};  // 目标对象\nconst handler = {};  // 代理对象\nconst proxy = new Proxy(target,handler);\nconsole.log(target.id);  // target\nconsole.log(proxy.id); // target\n```\n> 显然，通过Proxy代理把目标对象上的属性映射到了代理对象身上。\n\n<a name=\"ldKmO\"></a>\n## Object.defineProperty() 与 Proxy的区别\n<a name=\"Veo3Y\"></a>\n### Object.defineProperty()\ndefineProperty() 捕获器会在Object.defineProperty()中被调用。<br />Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改也跟对象的现有属性，并返回此对象。<br />**defineProxy()捕获器处理程序参数**：\n\n1. obj：要在其上定义属性的对象\n2. prop：要定义或修改的属性的名称或Symbol\n3. descriptor：定义或修改的属性描述符\n```javascript\nObject.defineProperty(obj,prop,descriptor);\n```\n缺点：只能劫持对象的属性，无法监听新增属性和数组的变化（Vue）。\n> 对象中目前存在的属性描述符有两种主要形式：数据（属性）描述符和存取描述符（访问器属性）。数据描述符是一个具有值的属性，该值是可写的，也可以是不可写的。存取描述符是由getter函数和setter函数所描述的属性。一个描述符只能是这两者其中之一，**不能同时是两者。**\n> 属性描述符：\n> - value：值\n> - writable：如果为true，则会被在循环中列出，否则不会被列出\n> - emumerable：如果为true，则会被在循环在列出，否则不会被列出。\n> - configurable：如果为true，则此属性可以被删除，这些特性也可以被修改，否则不可以。\n> \n**访问器属性：**\n> - get：一个没有参数的函数，在读取属性时工作\n> - set：带有一个参数的函数，当属性被设置时调用\n> - enumerate：与数据属性的相同\n> - configurable：与数据属性的相同\n\n<a name=\"ToHZ6\"></a>\n### Proxy\n> Proxy 主要用于改变对象的默认访问行为，实际上是在访问对象前增加一层拦截，在任何对对象的访问行为都会通过这层拦截。\n\nProxy 的参数为：\n\n1. target：目标对象\n2. handler：配置对象，用来定义拦截的行为\n3. proxy：Proxy构造器的实例\n\n体现的功能有：\n\n1.  拦截功能\n2. 提供对象访问\n3. **可以重写属性或构造函数**\n<a name=\"NDqW8\"></a>\n#### 好处\n\n1. 能够代理任何对象包括数组和函数、对象\n2. 比Object.defineProperty()更多的语义的操作（get、set、delete）\n3. 不用循环遍历对象，然后再使用 Object.defineProperty，Proxy可以代理对象内的所有属性\n4. Object.defineProperty() 只能劫持对象的属性（给对象新添加属性vue无法检测到）\n<a name=\"iZDxZ\"></a>\n#### 局限性\n\n1. 无法代理内部对象的内部插槽\n   1. 许多内建对象，例如 Map、Set、Date、Promise等，都使用了所谓的“内部插槽“。\n\n例如：\n```javascript\nlet map = new Map();\nlet proxy = new Proxy(map, {});\nproxy.set('test', 1); // Error\n```\n解决方法：在get时将get要返回的值先绑定目标对象后返回。\n```javascript\nlet map = new Map();\n\nlet proxy = new Proxy(map, {\n  get(target, prop, receiver) {\n    let value = Reflect.get(...arguments);\nreturn typeof value == 'function' ? value.bind(target) : value;\n  }\n});\n\nproxy.set('test', 1);\nalert(proxy.get('test')); // 1（工作了！）\n```\n\n2. 无法代理私有字段（同上）\n3. proxy != target代理对象和目标对象是不===的。\n<a name=\"FJbDY\"></a>\n#### 总结\n\n- Proxy是对象的包装器，将代理上的操作转发给对象，并可以选择捕获其中一些操作。\n- 可以包含任何类型的对象，包括类和函数。\n- Reflect旨在补充Proxy，对于任意Proxy捕捉器，都有一个带有相同参数的Reflect调用，我们应该使用它们将调用转发给目标对象。\n<a name=\"R3arv\"></a>\n### 区别\n\n1. Proxy是对整个对象的代理，而Object.defineProperty()只能代理某个属性\n```javascript\n//Proxy\nvar target = {\n    a:1,\n    b:{\n        c:2,\n        d:{e:3}\n    }\n};\nvar handler = {\n    //捕获器\n    get:function(trapTarget,prop,receiver){\n        console.log('触发get:',prop)\n        return Reflect.get(trapTarget,prop) // 反射API // 只要在代理上调用，所有捕获器都会拦截它们对应的反射API操作\n    },\n    set:function(trapTarget,key,value,receiver){\n        console.log('触发set:',key,value)\n        return Reflect.set(trapTarget,key,value,receiver)\n    }\n};\nconst proxy = new Proxy(target,handler);\n// 访问\nproxy.b.c;// 触发get: b\nproxy.b.d.e;// 触发get: b //说明都不能够遍历到深层次的地方，只能代理最外层属性\nconsole.log(proxy);//{ a: 1, b: { c: 2, d: { e: 3 } } }\n\n// Object.defineProperty\nconst obj = {}\nObject.defineProperty(obj,'name',{\n    value:'张三'\n})\nconsole.log(obj.name) // '张三'\nobj.name = '李四' // 给obj.name赋新值\nconsole.log(obj.name) // 张三  //默认writable为false，即不可改\n```\n\n2. 对象上新增属性和数组新增修改，Proxy可以监听到，Object.defineProperty()不能（Vue2中）\n3. 若对象内部属性要全部递归代理，Proxy可以只在调用时递归，而Object.defineProperty()需要一次性完成所有递归，性能比Proxy差。\n\n假如对象嵌套层级比较深的话，每一次都需要循环遍历（采用递归代理）。\n\n4. Proxy只在现代浏览器采用，不兼容IE，Object.defineProperty()不兼容IE8及以下\n5. 如果Object.defineProperty遍历到对象不存在的属性时，它是检测不到变化的。\n<a name=\"ZSmmP\"></a>\n## Vue2 和 Vue3 代理基础架构对比\n<a name=\"kJjTo\"></a>\n### Vue2中的defineProperty基础架构\n假如我们定义考了一个defineProperty()函数来实现代理映射的效果，里面包含了get和set方法，如果触发了get方法，那么直接映射源数据value；<br />如果触发了set方法，那么先判断新的数据是否等于原来的数据，这样做是为了避免无效更新视图层，减少性能损耗。<br />如果不等于源数据，那么就将newValue更新赋值给value。<br />然后再更新视图层，这样就实现了最基本的响应式数据。\n```javascript\nconst dinner = {\n    meal:'tacos'\n}\n\nfunction defineReactive(target,key,value) {\n    Object.defineProperty(target,key,{\n        get(){\n            return value\n        },\n        set(newValue){\n            if(newValue !==value){\n                value = newValue\n                //更新视图层\n            }\n        }\n    })\n}\n\nfor (let key in dinner){\n    defineReactive(dinner,key,dinner[key])\n}\n\nconsole.log('set之前',dinner.meal) //set之前 tacos\n\ndinner.meal = 'changed'\n\nconsole.log('set之后',dinner.meal) //set之后 changed\n```\n<a name=\"Xlt6o\"></a>\n### Vue3 中的Proxy基础架构\n```javascript\nconst dinner = {\n    meal:'tacos'\n}\n\nconst handler = {\n    //这里的key指的是访问的property\n    get(target,key){\n        return target[key]\n    },\n    set(target,key,value){\n        target[key] = value\n    }\n}\n\nconst proxy = new Proxy(dinner,handler)\n\nconsole.log('set之前',proxy.meal)//set之前 tacos\n\nproxy.meal = 'changed'\n\nconsole.log('set之后',proxy.meal)//set之后 changed\n```\n可以看到都能实现响应式数据变化。<br />但是，我们考虑到如果是多层嵌套或者数组时，更改一下defineProperty中的例子：<br />把原对象变为：\n```javascript\nconst dinner = {\n    meal:'tacos',\n    a:{\n        b:[1,2,3],\n        c:{\n            d:'',\n            e:''\n        }\n    }\n}\n```\n那么在层级比较深并且包含数组的情况下，该如何实现响应式呢？<br />此时，我们需要一个observer来观测value的类型，再决定遍历的方式和次数。\n```javascript\nfunction observer(target){\n    if(typeof target !== 'object'||target == null){\n        return target\n    }\n    if(Array.isArray(target)){\n        //拦截数组，给数组的方法进行了重写\n        Object.setPrototypeOf(target,proto);\n        //target.__proto__ = proto\n        for (let i =0;i<target.length;i++){}\n        observer(target[i]);\n    }else{\n        //是对象的话，就进行层层递归\n        for (let key in target){\n            defineReactive(target,key,target[key])\n        }\n    }\n}\nfunction defineReactive(target,key,value) {\n    //递归遍历，继续拦截对象\n    observer(value);\n    Object.defineProperty((target,key,{\n        get() {\n            return value;\n        },\n        set(newValue) {\n            if (newValue!==value){\n                observer(newValue)\n                // updateView 更新视图的方法\n                value = newValue\n            }\n        }\n    }))\n}\n```\n> 这里可以看出defineProperty的缺点，在重写的defineReactive方法里，显然性能损耗基本上是在observer上。\n> 而在Vue3中的Proxy可以很好的解决上面的问题。\n\n<a name=\"J6qte\"></a>\n## 总结\n相同点：二者都可以对属性进行代理。<br />不同点：\n\n1. 代理的粒度不同：defineProperty只能代理对象的属性，Proxy代理的是对象。\n- 如果想代理对象的所有属性，defineProperty需要遍历属性一个个加setter和getter。\n- 而Proxy只需要配置一个可以获取属性名参数的函数即可。\n- 如果出现嵌套的函数，Proxy也是要递归进行代理的，但可以做惰性代理（按需代理），即用到嵌套对象时再创建对应的Proxy。\n2. 是否破坏原对象。\n\n**defineProperty的代理行为是在破坏原对象的基础上实现的**，它通常会将原来的value变成了setter和getter。<br />**Proxy则不会破坏原对象**，只是在原对象上覆盖了一层。当新增属性时，希望属性被代理，defineProperty需要显式调用该API，而Proxy则可以直接用`obj.key = val`的形式。<br />Proxy返回的是一个新的对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。\n\n3. 代理数组属性\n\ndefineProperty只能代理常规对象，不适合监听数组属性，因为数组长度可能很大，比如几百万，一个个对索引使用defineProperty是无法接受的。\n\n- 一种方法是重写数组的API方法（比如splice），通过它们来实现代理，但它是有缺陷的：直接用arr[1] = 100无法触发代理。（Vue2做法）\n- 另外，我们无法对数组的length做代理。这暴露了defineProperty的一个缺陷：**设置了configurable为false的属性无法进行代理。**数组的length就是这种情况。\n\nProxy则没有这个问题，它只需要设置一个setter和getter，在属性变化时，能够在函数参数上拿到索引值。**它可以代理任何对象（函数、数组、类），不能代理内部对象的内部插槽。**\n\n4. 代理范围：defineProperty只能代理属性的get和set。\n\nProxy还能代理其他的行为，比如delete和handler.getPropertypeOf()等方法。\n\n5. 兼容性：Proxy是ES6新增的特性，兼容性不如 defineProperty。\n\nIE不支持Proxy。<br />且Proxy不能被[polyfill](https://blog.csdn.net/sujinchang939024/article/details/118498394)磨平，因为它是在编程语言层面上的修改。<br />Proxy还有一些性能问题，但作为标准，浏览器会持续做重点性能优化。\n\n",
    "body_draft": "--- <br />title: Object.defineProperty和Proxy区别<br />categories: Vue<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: Vue<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/vd.png<br />--- \n<a name=\"CxrBd\"></a>\n## 代理和反射\nvue2中的Object.defineProperty()和vue3 中的Proxy()本质上的作用都是代理。<br />那么什么是代理和反射呢？\n\n- 反射和代理就是**一种拦截并向基本操作嵌入额外行为的能力。**本质上属于数据劫持**。**\n- 反射**Reflect** 是一个内建对象**，**可简化Proxy的创建。\n- Reflect对象使调用一些内部方法（[[Get]]、[[Set]]等）成为可能，它的方法是内部方法的最小包装。\n   - Reflect允许我们将操作符（new，delete等）作为函数（`Reflect.construct`，`Reflect.deleteProperty`等）执行调用。\n   - 对于每个可被`Proxy`捕获的内部方法，在`Reflect`中都有一个对应的方法，其名称和参数与Proxy捕捉器相同。所以，我们可以使用Reflect来将操作转发给原始对象。\n   - Reflect调用的命名与捕捉器的命名完全相同，并且接收相同的参数，因此，return Reflect ... 提供了一个安全的方式，可以轻松地转发操作，并确保我们不会忘记与此相关的任何内容。\n- 代理是目标对象抽象，也就是说，它可以用做目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。\n\n来个简单的例子理解代理操作：\n```javascript\nconst target = {\n  id: 'target'\n};  // 目标对象\nconst handler = {};  // 代理对象\nconst proxy = new Proxy(target,handler);\nconsole.log(target.id);  // target\nconsole.log(proxy.id); // target\n```\n> 显然，通过Proxy代理把目标对象上的属性映射到了代理对象身上。\n\n<a name=\"ldKmO\"></a>\n## Object.defineProperty() 与 Proxy的区别\n<a name=\"Veo3Y\"></a>\n### Object.defineProperty()\ndefineProperty() 捕获器会在Object.defineProperty()中被调用。<br />Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改也跟对象的现有属性，并返回此对象。<br />**defineProxy()捕获器处理程序参数**：\n\n1. obj：要在其上定义属性的对象\n2. prop：要定义或修改的属性的名称或Symbol\n3. descriptor：定义或修改的属性描述符\n```javascript\nObject.defineProperty(obj,prop,descriptor);\n```\n缺点：只能劫持对象的属性，无法监听新增属性和数组的变化（Vue）。\n> 对象中目前存在的属性描述符有两种主要形式：数据（属性）描述符和存取描述符（访问器属性）。数据描述符是一个具有值的属性，该值是可写的，也可以是不可写的。存取描述符是由getter函数和setter函数所描述的属性。一个描述符只能是这两者其中之一，**不能同时是两者。**\n> 属性描述符：\n> - value：值\n> - writable：如果为true，则会被在循环中列出，否则不会被列出\n> - emumerable：如果为true，则会被在循环在列出，否则不会被列出。\n> - configurable：如果为true，则此属性可以被删除，这些特性也可以被修改，否则不可以。\n> \n**访问器属性：**\n> - get：一个没有参数的函数，在读取属性时工作\n> - set：带有一个参数的函数，当属性被设置时调用\n> - enumerate：与数据属性的相同\n> - configurable：与数据属性的相同\n\n<a name=\"ToHZ6\"></a>\n### Proxy\n> Proxy 主要用于改变对象的默认访问行为，实际上是在访问对象前增加一层拦截，在任何对对象的访问行为都会通过这层拦截。\n\nProxy 的参数为：\n\n1. target：目标对象\n2. handler：配置对象，用来定义拦截的行为\n3. proxy：Proxy构造器的实例\n\n体现的功能有：\n\n1.  拦截功能\n2. 提供对象访问\n3. **可以重写属性或构造函数**\n<a name=\"NDqW8\"></a>\n#### 好处\n\n1. 能够代理任何对象包括数组和函数、对象\n2. 比Object.defineProperty()更多的语义的操作（get、set、delete）\n3. 不用循环遍历对象，然后再使用 Object.defineProperty，Proxy可以代理对象内的所有属性\n4. Object.defineProperty() 只能劫持对象的属性（给对象新添加属性vue无法检测到）\n<a name=\"iZDxZ\"></a>\n#### 局限性\n\n1. 无法代理内部对象的内部插槽\n   1. 许多内建对象，例如 Map、Set、Date、Promise等，都使用了所谓的“内部插槽“。\n\n例如：\n```javascript\nlet map = new Map();\nlet proxy = new Proxy(map, {});\nproxy.set('test', 1); // Error\n```\n解决方法：在get时将get要返回的值先绑定目标对象后返回。\n```javascript\nlet map = new Map();\n\nlet proxy = new Proxy(map, {\n  get(target, prop, receiver) {\n    let value = Reflect.get(...arguments);\nreturn typeof value == 'function' ? value.bind(target) : value;\n  }\n});\n\nproxy.set('test', 1);\nalert(proxy.get('test')); // 1（工作了！）\n```\n\n2. 无法代理私有字段（同上）\n3. proxy != target代理对象和目标对象是不===的。\n<a name=\"FJbDY\"></a>\n#### 总结\n\n- Proxy是对象的包装器，将代理上的操作转发给对象，并可以选择捕获其中一些操作。\n- 可以包含任何类型的对象，包括类和函数。\n- Reflect旨在补充Proxy，对于任意Proxy捕捉器，都有一个带有相同参数的Reflect调用，我们应该使用它们将调用转发给目标对象。\n<a name=\"R3arv\"></a>\n### 区别\n\n1. Proxy是对整个对象的代理，而Object.defineProperty()只能代理某个属性\n```javascript\n//Proxy\nvar target = {\n    a:1,\n    b:{\n        c:2,\n        d:{e:3}\n    }\n};\nvar handler = {\n    //捕获器\n    get:function(trapTarget,prop,receiver){\n        console.log('触发get:',prop)\n        return Reflect.get(trapTarget,prop) // 反射API // 只要在代理上调用，所有捕获器都会拦截它们对应的反射API操作\n    },\n    set:function(trapTarget,key,value,receiver){\n        console.log('触发set:',key,value)\n        return Reflect.set(trapTarget,key,value,receiver)\n    }\n};\nconst proxy = new Proxy(target,handler);\n// 访问\nproxy.b.c;// 触发get: b\nproxy.b.d.e;// 触发get: b //说明都不能够遍历到深层次的地方，只能代理最外层属性\nconsole.log(proxy);//{ a: 1, b: { c: 2, d: { e: 3 } } }\n\n// Object.defineProperty\nconst obj = {}\nObject.defineProperty(obj,'name',{\n    value:'张三'\n})\nconsole.log(obj.name) // '张三'\nobj.name = '李四' // 给obj.name赋新值\nconsole.log(obj.name) // 张三  //默认writable为false，即不可改\n```\n\n2. 对象上新增属性和数组新增修改，Proxy可以监听到，Object.defineProperty()不能（Vue2中）\n3. 若对象内部属性要全部递归代理，Proxy可以只在调用时递归，而Object.defineProperty()需要一次性完成所有递归，性能比Proxy差。\n\n假如对象嵌套层级比较深的话，每一次都需要循环遍历（采用递归代理）。\n\n4. Proxy只在现代浏览器采用，不兼容IE，Object.defineProperty()不兼容IE8及以下\n5. 如果Object.defineProperty遍历到对象不存在的属性时，它是检测不到变化的。\n<a name=\"ZSmmP\"></a>\n## Vue2 和 Vue3 代理基础架构对比\n<a name=\"kJjTo\"></a>\n### Vue2中的defineProperty基础架构\n假如我们定义考了一个defineProperty()函数来实现代理映射的效果，里面包含了get和set方法，如果触发了get方法，那么直接映射源数据value；<br />如果触发了set方法，那么先判断新的数据是否等于原来的数据，这样做是为了避免无效更新视图层，减少性能损耗。<br />如果不等于源数据，那么就将newValue更新赋值给value。<br />然后再更新视图层，这样就实现了最基本的响应式数据。\n```javascript\nconst dinner = {\n    meal:'tacos'\n}\n\nfunction defineReactive(target,key,value) {\n    Object.defineProperty(target,key,{\n        get(){\n            return value\n        },\n        set(newValue){\n            if(newValue !==value){\n                value = newValue\n                //更新视图层\n            }\n        }\n    })\n}\n\nfor (let key in dinner){\n    defineReactive(dinner,key,dinner[key])\n}\n\nconsole.log('set之前',dinner.meal) //set之前 tacos\n\ndinner.meal = 'changed'\n\nconsole.log('set之后',dinner.meal) //set之后 changed\n```\n<a name=\"Xlt6o\"></a>\n### Vue3 中的Proxy基础架构\n```javascript\nconst dinner = {\n    meal:'tacos'\n}\n\nconst handler = {\n    //这里的key指的是访问的property\n    get(target,key){\n        return target[key]\n    },\n    set(target,key,value){\n        target[key] = value\n    }\n}\n\nconst proxy = new Proxy(dinner,handler)\n\nconsole.log('set之前',proxy.meal)//set之前 tacos\n\nproxy.meal = 'changed'\n\nconsole.log('set之后',proxy.meal)//set之后 changed\n```\n可以看到都能实现响应式数据变化。<br />但是，我们考虑到如果是多层嵌套或者数组时，更改一下defineProperty中的例子：<br />把原对象变为：\n```javascript\nconst dinner = {\n    meal:'tacos',\n    a:{\n        b:[1,2,3],\n        c:{\n            d:'',\n            e:''\n        }\n    }\n}\n```\n那么在层级比较深并且包含数组的情况下，该如何实现响应式呢？<br />此时，我们需要一个observer来观测value的类型，再决定遍历的方式和次数。\n```javascript\nfunction observer(target){\n    if(typeof target !== 'object'||target == null){\n        return target\n    }\n    if(Array.isArray(target)){\n        //拦截数组，给数组的方法进行了重写\n        Object.setPrototypeOf(target,proto);\n        //target.__proto__ = proto\n        for (let i =0;i<target.length;i++){}\n        observer(target[i]);\n    }else{\n        //是对象的话，就进行层层递归\n        for (let key in target){\n            defineReactive(target,key,target[key])\n        }\n    }\n}\nfunction defineReactive(target,key,value) {\n    //递归遍历，继续拦截对象\n    observer(value);\n    Object.defineProperty((target,key,{\n        get() {\n            return value;\n        },\n        set(newValue) {\n            if (newValue!==value){\n                observer(newValue)\n                // updateView 更新视图的方法\n                value = newValue\n            }\n        }\n    }))\n}\n```\n> 这里可以看出defineProperty的缺点，在重写的defineReactive方法里，显然性能损耗基本上是在observer上。\n> 而在Vue3中的Proxy可以很好的解决上面的问题。\n\n<a name=\"J6qte\"></a>\n## 总结\n相同点：二者都可以对属性进行代理。<br />不同点：\n\n1. 代理的粒度不同：defineProperty只能代理对象的属性，Proxy代理的是对象。\n- 如果想代理对象的所有属性，defineProperty需要遍历属性一个个加setter和getter。\n- 而Proxy只需要配置一个可以获取属性名参数的函数即可。\n- 如果出现嵌套的函数，Proxy也是要递归进行代理的，但可以做惰性代理（按需代理），即用到嵌套对象时再创建对应的Proxy。\n2. 是否破坏原对象。\n\n**defineProperty的代理行为是在破坏原对象的基础上实现的**，它通常会将原来的value变成了setter和getter。<br />**Proxy则不会破坏原对象**，只是在原对象上覆盖了一层。当新增属性时，希望属性被代理，defineProperty需要显式调用该API，而Proxy则可以直接用`obj.key = val`的形式。<br />Proxy返回的是一个新的对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。\n\n3. 代理数组属性\n\ndefineProperty只能代理常规对象，不适合监听数组属性，因为数组长度可能很大，比如几百万，一个个对索引使用defineProperty是无法接受的。\n\n- 一种方法是重写数组的API方法（比如splice），通过它们来实现代理，但它是有缺陷的：直接用arr[1] = 100无法触发代理。（Vue2做法）\n- 另外，我们无法对数组的length做代理。这暴露了defineProperty的一个缺陷：**设置了configurable为false的属性无法进行代理。**数组的length就是这种情况。\n\nProxy则没有这个问题，它只需要设置一个setter和getter，在属性变化时，能够在函数参数上拿到索引值。**它可以代理任何对象（函数、数组、类），不能代理内部对象的内部插槽。**\n\n4. 代理范围：defineProperty只能代理属性的get和set。\n\nProxy还能代理其他的行为，比如delete和handler.getPropertypeOf()等方法。\n\n5. 兼容性：Proxy是ES6新增的特性，兼容性不如 defineProperty。\n\nIE不支持Proxy。<br />且Proxy不能被[polyfill](https://blog.csdn.net/sujinchang939024/article/details/118498394)磨平，因为它是在编程语言层面上的修改。<br />Proxy还有一些性能问题，但作为标准，浏览器会持续做重点性能优化。\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u0e908af7\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: Object.defineProperty和Proxy区别</span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: Vue</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-18</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-18</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: Vue</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/vd.png</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h2 id=\"CxrBd\"><span class=\"ne-text\">代理和反射</span></h2><p id=\"udabf4c61\" class=\"ne-p\"><span class=\"ne-text\">vue2中的Object.defineProperty()和vue3 中的Proxy()本质上的作用都是代理。</span></p><p id=\"u1b0b3bc9\" class=\"ne-p\"><span class=\"ne-text\">那么什么是代理和反射呢？</span></p><ul class=\"ne-ul\"><li id=\"u52bdbb79\"><span class=\"ne-text\">反射和代理就是</span><strong><span class=\"ne-text\">一种拦截并向基本操作嵌入额外行为的能力。</span></strong><span class=\"ne-text\">本质上属于数据劫持</span><strong><span class=\"ne-text\">。</span></strong></li><li id=\"u2e5d5b94\"><span class=\"ne-text\">反射</span><strong><span class=\"ne-text\">Reflect</span></strong><span class=\"ne-text\"> 是一个内建对象</span><strong><span class=\"ne-text\">，</span></strong><span class=\"ne-text\">可简化Proxy的创建。</span></li><li id=\"uca1c7fa5\"><span class=\"ne-text\">Reflect对象使调用一些内部方法（[[Get]]、[[Set]]等）成为可能，它的方法是内部方法的最小包装。</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"udbcf82d0\"><span class=\"ne-text\">Reflect允许我们将操作符（new，delete等）作为函数（</span><code class=\"ne-code\"><span class=\"ne-text\">Reflect.construct</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">Reflect.deleteProperty</span></code><span class=\"ne-text\">等）执行调用。</span></li><li id=\"uc477f5f9\"><span class=\"ne-text\">对于每个可被</span><code class=\"ne-code\"><span class=\"ne-text\">Proxy</span></code><span class=\"ne-text\">捕获的内部方法，在</span><code class=\"ne-code\"><span class=\"ne-text\">Reflect</span></code><span class=\"ne-text\">中都有一个对应的方法，其名称和参数与Proxy捕捉器相同。所以，我们可以使用Reflect来将操作转发给原始对象。</span></li><li id=\"u4f909f86\"><span class=\"ne-text\">Reflect调用的命名与捕捉器的命名完全相同，并且接收相同的参数，因此，return Reflect ... 提供了一个安全的方式，可以轻松地转发操作，并确保我们不会忘记与此相关的任何内容。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u7b7ef8c5\"><span class=\"ne-text\">代理是目标对象抽象，也就是说，它可以用做目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。</span></li></ul><p id=\"u5520dbc1\" class=\"ne-p\"><span class=\"ne-text\">来个简单的例子理解代理操作：</span></p><pre data-language=\"javascript\" id=\"f9DpD\" class=\"ne-codeblock language-javascript\">const target = {\n  id: 'target'\n};  // 目标对象\nconst handler = {};  // 代理对象\nconst proxy = new Proxy(target,handler);\nconsole.log(target.id);  // target\nconsole.log(proxy.id); // target</pre><div class=\"ne-quote\"><p id=\"u2e34ecd2\" class=\"ne-p\"><span class=\"ne-text\">显然，通过Proxy代理把目标对象上的属性映射到了代理对象身上。</span></p></div><h2 id=\"ldKmO\"><span class=\"ne-text\">Object.defineProperty() 与 Proxy的区别</span></h2><h3 id=\"Veo3Y\"><span class=\"ne-text\">Object.defineProperty()</span></h3><p id=\"u2acde9d9\" class=\"ne-p\"><span class=\"ne-text\">defineProperty() 捕获器会在Object.defineProperty()中被调用。</span></p><p id=\"ub996021c\" class=\"ne-p\"><span class=\"ne-text\" style=\"text-decoration: underline\">Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改也跟对象的现有属性，并返回此对象。</span></p><p id=\"u5d6bb4b3\" class=\"ne-p\"><strong><span class=\"ne-text\">defineProxy()捕获器处理程序参数</span></strong><span class=\"ne-text\">：</span></p><ol class=\"ne-ol\"><li id=\"uc50c1b09\"><span class=\"ne-text\">obj：要在其上定义属性的对象</span></li><li id=\"ua694275c\"><span class=\"ne-text\">prop：要定义或修改的属性的名称或Symbol</span></li><li id=\"u2d485517\"><span class=\"ne-text\">descriptor：定义或修改的属性描述符</span></li></ol><pre data-language=\"javascript\" id=\"GCALg\" class=\"ne-codeblock language-javascript\">Object.defineProperty(obj,prop,descriptor);</pre><p id=\"ue233dba9\" class=\"ne-p\"><span class=\"ne-text\">缺点：只能劫持对象的属性，无法监听新增属性和数组的变化（Vue）。</span></p><div class=\"ne-quote\"><p id=\"u3301a88a\" class=\"ne-p\"><span class=\"ne-text\">对象中目前存在的属性描述符有两种主要形式：数据（属性）描述符和存取描述符（访问器属性）。数据描述符是一个具有值的属性，该值是可写的，也可以是不可写的。存取描述符是由getter函数和setter函数所描述的属性。一个描述符只能是这两者其中之一，</span><strong><span class=\"ne-text\">不能同时是两者。</span></strong></p><p id=\"ue30d7244\" class=\"ne-p\"><span class=\"ne-text\">属性描述符：</span></p><ul class=\"ne-ul\"><li id=\"ufa9623d3\"><span class=\"ne-text\">value：值</span></li><li id=\"u8708aea0\"><span class=\"ne-text\">writable：如果为true，则会被在循环中列出，否则不会被列出</span></li><li id=\"u803667e4\"><span class=\"ne-text\">emumerable：如果为true，则会被在循环在列出，否则不会被列出。</span></li><li id=\"u6c5322c1\"><span class=\"ne-text\">configurable：如果为true，则此属性可以被删除，这些特性也可以被修改，否则不可以。</span></li></ul><p id=\"u0a43d09a\" class=\"ne-p\"><strong><span class=\"ne-text\">访问器属性：</span></strong></p><ul class=\"ne-ul\"><li id=\"ud0e8bb39\"><span class=\"ne-text\">get：一个没有参数的函数，在读取属性时工作</span></li><li id=\"uf5f643ad\"><span class=\"ne-text\">set：带有一个参数的函数，当属性被设置时调用</span></li><li id=\"u58c5683f\"><span class=\"ne-text\">enumerate：与数据属性的相同</span></li><li id=\"ue0de7150\"><span class=\"ne-text\">configurable：与数据属性的相同</span></li></ul></div><h3 id=\"ToHZ6\"><span class=\"ne-text\">Proxy</span></h3><div class=\"ne-quote\"><p id=\"u330e6e05\" class=\"ne-p\"><span class=\"ne-text\">Proxy 主要用于改变对象的默认访问行为，实际上是在访问对象前增加一层拦截，在任何对对象的访问行为都会通过这层拦截。</span></p></div><p id=\"u9e853547\" class=\"ne-p\"><span class=\"ne-text\">Proxy 的参数为：</span></p><ol class=\"ne-ol\"><li id=\"uea65e13b\"><span class=\"ne-text\">target：目标对象</span></li><li id=\"u61497bcb\"><span class=\"ne-text\">handler：配置对象，用来定义拦截的行为</span></li><li id=\"ubd642f8e\"><span class=\"ne-text\">proxy：Proxy构造器的实例</span></li></ol><p id=\"ubcd6e377\" class=\"ne-p\"><span class=\"ne-text\">体现的功能有：</span></p><ol class=\"ne-ol\"><li id=\"u8fd4e42a\"><span class=\"ne-text\"> 拦截功能</span></li><li id=\"u1d721d29\"><span class=\"ne-text\">提供对象访问</span></li><li id=\"uc5bf32f8\"><strong><span class=\"ne-text\">可以重写属性或构造函数</span></strong></li></ol><h4 id=\"NDqW8\"><span class=\"ne-text\">好处</span></h4><ol class=\"ne-ol\"><li id=\"ub9dbcafa\"><span class=\"ne-text\">能够代理任何对象包括数组和函数、对象</span></li><li id=\"u427dde50\"><span class=\"ne-text\">比Object.defineProperty()更多的语义的操作（get、set、delete）</span></li><li id=\"u1d6205a1\"><span class=\"ne-text\">不用循环遍历对象，然后再使用 Object.defineProperty，Proxy可以代理对象内的所有属性</span></li><li id=\"ua66c7727\"><span class=\"ne-text\">Object.defineProperty() 只能劫持对象的属性（给对象新添加属性vue无法检测到）</span></li></ol><h4 id=\"iZDxZ\"><span class=\"ne-text\">局限性</span></h4><ol class=\"ne-ol\"><li id=\"u651a3c57\"><span class=\"ne-text\">无法代理内部对象的内部插槽</span></li></ol><ol class=\"ne-list-wrap\"><ol ne-level=\"1\" class=\"ne-ol\"><li id=\"u491156d5\"><span class=\"ne-text\">许多内建对象，例如 Map、Set、Date、Promise等，都使用了所谓的“内部插槽“。</span></li></ol></ol><p id=\"ub3217798\" class=\"ne-p\"><span class=\"ne-text\">例如：</span></p><pre data-language=\"javascript\" id=\"mMMzq\" class=\"ne-codeblock language-javascript\">let map = new Map();\nlet proxy = new Proxy(map, {});\nproxy.set('test', 1); // Error</pre><p id=\"udca9ad9e\" class=\"ne-p\"><span class=\"ne-text\">解决方法：在get时将get要返回的值先绑定目标对象后返回。</span></p><pre data-language=\"javascript\" id=\"ztuNu\" class=\"ne-codeblock language-javascript\">let map = new Map();\n\nlet proxy = new Proxy(map, {\n  get(target, prop, receiver) {\n    let value = Reflect.get(...arguments);\nreturn typeof value == 'function' ? value.bind(target) : value;\n  }\n});\n\nproxy.set('test', 1);\nalert(proxy.get('test')); // 1（工作了！）</pre><ol start=\"2\" class=\"ne-ol\"><li id=\"u58716b61\"><span class=\"ne-text\">无法代理私有字段（同上）</span></li><li id=\"uc05befd9\"><span class=\"ne-text\">proxy != target代理对象和目标对象是不===的。</span></li></ol><h4 id=\"FJbDY\"><span class=\"ne-text\">总结</span></h4><ul class=\"ne-ul\"><li id=\"u0247bee1\"><span class=\"ne-text\">Proxy是对象的包装器，将代理上的操作转发给对象，并可以选择捕获其中一些操作。</span></li><li id=\"u7ea1e923\"><span class=\"ne-text\">可以包含任何类型的对象，包括类和函数。</span></li><li id=\"u765525cf\"><span class=\"ne-text\">Reflect旨在补充Proxy，对于任意Proxy捕捉器，都有一个带有相同参数的Reflect调用，我们应该使用它们将调用转发给目标对象。</span></li></ul><h3 id=\"R3arv\"><span class=\"ne-text\">区别</span></h3><ol class=\"ne-ol\"><li id=\"ubd71ef9d\"><span class=\"ne-text\">Proxy是对整个对象的代理，而Object.defineProperty()只能代理某个属性</span></li></ol><pre data-language=\"javascript\" id=\"QM15t\" class=\"ne-codeblock language-javascript\">//Proxy\nvar target = {\n    a:1,\n    b:{\n        c:2,\n        d:{e:3}\n    }\n};\nvar handler = {\n    //捕获器\n    get:function(trapTarget,prop,receiver){\n        console.log('触发get:',prop)\n        return Reflect.get(trapTarget,prop) // 反射API // 只要在代理上调用，所有捕获器都会拦截它们对应的反射API操作\n    },\n    set:function(trapTarget,key,value,receiver){\n        console.log('触发set:',key,value)\n        return Reflect.set(trapTarget,key,value,receiver)\n    }\n};\nconst proxy = new Proxy(target,handler);\n// 访问\nproxy.b.c;// 触发get: b\nproxy.b.d.e;// 触发get: b //说明都不能够遍历到深层次的地方，只能代理最外层属性\nconsole.log(proxy);//{ a: 1, b: { c: 2, d: { e: 3 } } }\n\n// Object.defineProperty\nconst obj = {}\nObject.defineProperty(obj,'name',{\n    value:'张三'\n})\nconsole.log(obj.name) // '张三'\nobj.name = '李四' // 给obj.name赋新值\nconsole.log(obj.name) // 张三  //默认writable为false，即不可改</pre><ol start=\"2\" class=\"ne-ol\"><li id=\"u50038dcb\"><span class=\"ne-text\">对象上新增属性和数组新增修改，Proxy可以监听到，Object.defineProperty()不能（Vue2中）</span></li><li id=\"u890f1e15\"><span class=\"ne-text\">若对象内部属性要全部递归代理，Proxy可以只在调用时递归，而Object.defineProperty()需要一次性完成所有递归，性能比Proxy差。</span></li></ol><p id=\"ud93ebf79\" class=\"ne-p\"><span class=\"ne-text\">假如对象嵌套层级比较深的话，每一次都需要循环遍历（采用递归代理）。</span></p><ol start=\"4\" class=\"ne-ol\"><li id=\"uf618d9c5\"><span class=\"ne-text\">Proxy只在现代浏览器采用，不兼容IE，Object.defineProperty()不兼容IE8及以下</span></li><li id=\"ud2521c72\"><span class=\"ne-text\">如果Object.defineProperty遍历到对象不存在的属性时，它是检测不到变化的。</span></li></ol><h2 id=\"ZSmmP\"><span class=\"ne-text\">Vue2 和 Vue3 代理基础架构对比</span></h2><h3 id=\"kJjTo\"><span class=\"ne-text\">Vue2中的defineProperty基础架构</span></h3><p id=\"u5800efa0\" class=\"ne-p\"><span class=\"ne-text\">假如我们定义考了一个defineProperty()函数来实现代理映射的效果，里面包含了get和set方法，如果触发了get方法，那么直接映射源数据value；</span></p><p id=\"ua32eaa6a\" class=\"ne-p\"><span class=\"ne-text\">如果触发了set方法，那么先判断新的数据是否等于原来的数据，这样做是为了避免无效更新视图层，减少性能损耗。</span></p><p id=\"u983918bf\" class=\"ne-p\"><span class=\"ne-text\">如果不等于源数据，那么就将newValue更新赋值给value。</span></p><p id=\"u9713346d\" class=\"ne-p\"><span class=\"ne-text\">然后再更新视图层，这样就实现了最基本的响应式数据。</span></p><pre data-language=\"javascript\" id=\"zHFim\" class=\"ne-codeblock language-javascript\">const dinner = {\n    meal:'tacos'\n}\n\nfunction defineReactive(target,key,value) {\n    Object.defineProperty(target,key,{\n        get(){\n            return value\n        },\n        set(newValue){\n            if(newValue !==value){\n                value = newValue\n                //更新视图层\n            }\n        }\n    })\n}\n\nfor (let key in dinner){\n    defineReactive(dinner,key,dinner[key])\n}\n\nconsole.log('set之前',dinner.meal) //set之前 tacos\n\ndinner.meal = 'changed'\n\nconsole.log('set之后',dinner.meal) //set之后 changed</pre><h3 id=\"Xlt6o\"><span class=\"ne-text\">Vue3 中的Proxy基础架构</span></h3><pre data-language=\"javascript\" id=\"OYgLV\" class=\"ne-codeblock language-javascript\">const dinner = {\n    meal:'tacos'\n}\n\nconst handler = {\n    //这里的key指的是访问的property\n    get(target,key){\n        return target[key]\n    },\n    set(target,key,value){\n        target[key] = value\n    }\n}\n\nconst proxy = new Proxy(dinner,handler)\n\nconsole.log('set之前',proxy.meal)//set之前 tacos\n\nproxy.meal = 'changed'\n\nconsole.log('set之后',proxy.meal)//set之后 changed</pre><p id=\"u247e17ca\" class=\"ne-p\"><span class=\"ne-text\">可以看到都能实现响应式数据变化。</span></p><p id=\"ud80d5867\" class=\"ne-p\"><span class=\"ne-text\">但是，我们考虑到如果是多层嵌套或者数组时，更改一下defineProperty中的例子：</span></p><p id=\"u4907ab30\" class=\"ne-p\"><span class=\"ne-text\">把原对象变为：</span></p><pre data-language=\"javascript\" id=\"CJhBw\" class=\"ne-codeblock language-javascript\">const dinner = {\n    meal:'tacos',\n    a:{\n        b:[1,2,3],\n        c:{\n            d:'',\n            e:''\n        }\n    }\n}</pre><p id=\"u680fc41e\" class=\"ne-p\"><span class=\"ne-text\">那么在层级比较深并且包含数组的情况下，该如何实现响应式呢？</span></p><p id=\"ueedd28b3\" class=\"ne-p\"><span class=\"ne-text\">此时，我们需要一个observer来观测value的类型，再决定遍历的方式和次数。</span></p><pre data-language=\"javascript\" id=\"j9Mwm\" class=\"ne-codeblock language-javascript\">function observer(target){\n    if(typeof target !== 'object'||target == null){\n        return target\n    }\n    if(Array.isArray(target)){\n        //拦截数组，给数组的方法进行了重写\n        Object.setPrototypeOf(target,proto);\n        //target.__proto__ = proto\n        for (let i =0;i&lt;target.length;i++){}\n        observer(target[i]);\n    }else{\n        //是对象的话，就进行层层递归\n        for (let key in target){\n            defineReactive(target,key,target[key])\n        }\n    }\n}\nfunction defineReactive(target,key,value) {\n    //递归遍历，继续拦截对象\n    observer(value);\n    Object.defineProperty((target,key,{\n        get() {\n            return value;\n        },\n        set(newValue) {\n            if (newValue!==value){\n                observer(newValue)\n                // updateView 更新视图的方法\n                value = newValue\n            }\n        }\n    }))\n}</pre><div class=\"ne-quote\"><p id=\"u24eb034a\" class=\"ne-p\"><span class=\"ne-text\">这里可以看出defineProperty的缺点，在重写的defineReactive方法里，显然性能损耗基本上是在observer上。</span></p><p id=\"u34231243\" class=\"ne-p\"><span class=\"ne-text\">而在Vue3中的Proxy可以很好的解决上面的问题。</span></p></div><h2 id=\"J6qte\"><span class=\"ne-text\">总结</span></h2><p id=\"ubd40a657\" class=\"ne-p\"><span class=\"ne-text\">相同点：二者都可以对属性进行代理。</span></p><p id=\"u284ea597\" class=\"ne-p\"><span class=\"ne-text\">不同点：</span></p><ol class=\"ne-ol\"><li id=\"u117d226c\"><span class=\"ne-text\">代理的粒度不同：defineProperty只能代理对象的属性，Proxy代理的是对象。</span></li></ol><ul class=\"ne-ul\"><li id=\"ud3b0f223\"><span class=\"ne-text\">如果想代理对象的所有属性，defineProperty需要遍历属性一个个加setter和getter。</span></li><li id=\"uf73ece31\"><span class=\"ne-text\">而Proxy只需要配置一个可以获取属性名参数的函数即可。</span></li><li id=\"ubb2d3ae3\"><span class=\"ne-text\">如果出现嵌套的函数，Proxy也是要递归进行代理的，但可以做惰性代理（按需代理），即用到嵌套对象时再创建对应的Proxy。</span></li></ul><ol start=\"2\" class=\"ne-ol\"><li id=\"u241d9e86\"><span class=\"ne-text\">是否破坏原对象。</span></li></ol><p id=\"u970e0e58\" class=\"ne-p\" style=\"text-indent: 2em\"><strong><span class=\"ne-text\">defineProperty的代理行为是在破坏原对象的基础上实现的</span></strong><span class=\"ne-text\">，它通常会将原来的value变成了setter和getter。</span></p><p id=\"ud0e46554\" class=\"ne-p\" style=\"text-indent: 2em\"><strong><span class=\"ne-text\">Proxy则不会破坏原对象</span></strong><span class=\"ne-text\">，只是在原对象上覆盖了一层。当新增属性时，希望属性被代理，defineProperty需要显式调用该API，而Proxy则可以直接用</span><code class=\"ne-code\"><span class=\"ne-text\">obj.key = val</span></code><span class=\"ne-text\">的形式。</span></p><p id=\"uc34eae52\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Proxy返回的是一个新的对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。</span></p><ol start=\"3\" class=\"ne-ol\"><li id=\"ud6ec56ef\"><span class=\"ne-text\">代理数组属性</span></li></ol><p id=\"u9e02f4e0\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">defineProperty只能代理常规对象，不适合监听数组属性，因为数组长度可能很大，比如几百万，一个个对索引使用defineProperty是无法接受的。</span></p><ul class=\"ne-ul\"><li id=\"u92863efd\"><span class=\"ne-text\">一种方法是重写数组的API方法（比如splice），通过它们来实现代理，但它是有缺陷的：直接用arr[1] = 100无法触发代理。（Vue2做法）</span></li><li id=\"uec12cc06\"><span class=\"ne-text\">另外，我们无法对数组的length做代理。这暴露了defineProperty的一个缺陷：</span><strong><span class=\"ne-text\">设置了configurable为false的属性无法进行代理。</span></strong><span class=\"ne-text\">数组的length就是这种情况。</span></li></ul><p id=\"u968d8de5\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Proxy则没有这个问题，它只需要设置一个setter和getter，在属性变化时，能够在函数参数上拿到索引值。</span><strong><span class=\"ne-text\">它可以代理任何对象（函数、数组、类），不能代理内部对象的内部插槽。</span></strong></p><ol start=\"4\" class=\"ne-ol\"><li id=\"u4e369dc4\"><span class=\"ne-text\">代理范围：defineProperty只能代理属性的get和set。</span></li></ol><p id=\"u55f97e9e\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Proxy还能代理其他的行为，比如delete和handler.getPropertypeOf()等方法。</span></p><ol start=\"5\" class=\"ne-ol\"><li id=\"u7b51069d\"><span class=\"ne-text\">兼容性：Proxy是ES6新增的特性，兼容性不如 defineProperty。</span></li></ol><p id=\"u82bb8790\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">IE不支持Proxy。</span></p><p id=\"ue4471776\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">且Proxy不能被</span><a href=\"https://blog.csdn.net/sujinchang939024/article/details/118498394\" data-href=\"https://blog.csdn.net/sujinchang939024/article/details/118498394\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">polyfill</span></a><span class=\"ne-text\">磨平，因为它是在编程语言层面上的修改。</span></p><p id=\"u2cce08eb\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Proxy还有一些性能问题，但作为标准，浏览器会持续做重点性能优化。</span></p><p id=\"ubf0e5b31\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u0e908af7\" id=\"u0e908af7\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: Object.defineProperty和Proxy区别</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: Vue</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/vd.png</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"CxrBd\" id=\"CxrBd\"><span data-lake-id=\"u09e02f3e\" id=\"u09e02f3e\">代理和反射</span></h2><p data-lake-id=\"udabf4c61\" id=\"udabf4c61\"><span data-lake-id=\"u20c9c319\" id=\"u20c9c319\">vue2中的Object.defineProperty()和vue3 中的Proxy()本质上的作用都是代理。</span></p><p data-lake-id=\"u1b0b3bc9\" id=\"u1b0b3bc9\"><span data-lake-id=\"u96a5514a\" id=\"u96a5514a\">那么什么是代理和反射呢？</span></p><ul list=\"u84a754db\"><li fid=\"u5d6c6444\" data-lake-id=\"u52bdbb79\" id=\"u52bdbb79\"><span data-lake-id=\"u1f4e932b\" id=\"u1f4e932b\">反射和代理就是</span><strong><span data-lake-id=\"u8bef86e8\" id=\"u8bef86e8\">一种拦截并向基本操作嵌入额外行为的能力。</span></strong><span data-lake-id=\"u625d3f62\" id=\"u625d3f62\">本质上属于数据劫持</span><strong><span data-lake-id=\"ub0967280\" id=\"ub0967280\">。</span></strong></li><li fid=\"u5d6c6444\" data-lake-id=\"u2e5d5b94\" id=\"u2e5d5b94\"><span data-lake-id=\"u05b508ed\" id=\"u05b508ed\">反射</span><strong><span data-lake-id=\"u11f19a26\" id=\"u11f19a26\">Reflect</span></strong><span data-lake-id=\"ub23a4dd5\" id=\"ub23a4dd5\"> 是一个内建对象</span><strong><span data-lake-id=\"u2935f573\" id=\"u2935f573\">，</span></strong><span data-lake-id=\"ue712cda0\" id=\"ue712cda0\">可简化Proxy的创建。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"uca1c7fa5\" id=\"uca1c7fa5\"><span data-lake-id=\"ud3b26d02\" id=\"ud3b26d02\">Reflect对象使调用一些内部方法（[[Get]]、[[Set]]等）成为可能，它的方法是内部方法的最小包装。</span></li></ul><ul list=\"u84a754db\" data-lake-indent=\"1\"><li fid=\"u5d6c6444\" data-lake-id=\"udbcf82d0\" id=\"udbcf82d0\"><span data-lake-id=\"ucfec7795\" id=\"ucfec7795\">Reflect允许我们将操作符（new，delete等）作为函数（</span><code data-lake-id=\"u3f3dbf35\" id=\"u3f3dbf35\"><span data-lake-id=\"u50c53e82\" id=\"u50c53e82\">Reflect.construct</span></code><span data-lake-id=\"ufee72662\" id=\"ufee72662\">，</span><code data-lake-id=\"ue56bdbf2\" id=\"ue56bdbf2\"><span data-lake-id=\"uc25f9d93\" id=\"uc25f9d93\">Reflect.deleteProperty</span></code><span data-lake-id=\"u4d6d943a\" id=\"u4d6d943a\">等）执行调用。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"uc477f5f9\" id=\"uc477f5f9\"><span data-lake-id=\"ub7b9b9c0\" id=\"ub7b9b9c0\">对于每个可被</span><code data-lake-id=\"ud48aba3a\" id=\"ud48aba3a\"><span data-lake-id=\"ucd3c1913\" id=\"ucd3c1913\">Proxy</span></code><span data-lake-id=\"ud5ce2733\" id=\"ud5ce2733\">捕获的内部方法，在</span><code data-lake-id=\"u6685da41\" id=\"u6685da41\"><span data-lake-id=\"ubd16d22d\" id=\"ubd16d22d\">Reflect</span></code><span data-lake-id=\"ueb1f194a\" id=\"ueb1f194a\">中都有一个对应的方法，其名称和参数与Proxy捕捉器相同。所以，我们可以使用Reflect来将操作转发给原始对象。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"u4f909f86\" id=\"u4f909f86\"><span data-lake-id=\"u6db29b54\" id=\"u6db29b54\">Reflect调用的命名与捕捉器的命名完全相同，并且接收相同的参数，因此，return Reflect ... 提供了一个安全的方式，可以轻松地转发操作，并确保我们不会忘记与此相关的任何内容。</span></li></ul><ul list=\"u84a754db\" start=\"4\"><li fid=\"u5d6c6444\" data-lake-id=\"u7b7ef8c5\" id=\"u7b7ef8c5\"><span data-lake-id=\"u442f4048\" id=\"u442f4048\">代理是目标对象抽象，也就是说，它可以用做目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。</span></li></ul><p data-lake-id=\"u5520dbc1\" id=\"u5520dbc1\"><span data-lake-id=\"u040c7794\" id=\"u040c7794\">来个简单的例子理解代理操作：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20target%20%3D%20%7B%5Cn%20%20id%3A%20'target'%5Cn%7D%3B%20%20%2F%2F%20%E7%9B%AE%E6%A0%87%E5%AF%B9%E8%B1%A1%5Cnconst%20handler%20%3D%20%7B%7D%3B%20%20%2F%2F%20%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cnconst%20proxy%20%3D%20new%20Proxy(target%2Chandler)%3B%5Cnconsole.log(target.id)%3B%20%20%2F%2F%20target%5Cnconsole.log(proxy.id)%3B%20%2F%2F%20target%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f9DpD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u32f52887\" id=\"u32f52887\"><p data-lake-id=\"u2e34ecd2\" id=\"u2e34ecd2\"><span data-lake-id=\"u49cb209c\" id=\"u49cb209c\">显然，通过Proxy代理把目标对象上的属性映射到了代理对象身上。</span></p></blockquote><h2 data-lake-id=\"ldKmO\" id=\"ldKmO\"><span data-lake-id=\"u1c5d9716\" id=\"u1c5d9716\">Object.defineProperty() 与 Proxy的区别</span></h2><h3 data-lake-id=\"Veo3Y\" id=\"Veo3Y\"><span data-lake-id=\"uc0d2bf96\" id=\"uc0d2bf96\">Object.defineProperty()</span></h3><p data-lake-id=\"u2acde9d9\" id=\"u2acde9d9\"><span data-lake-id=\"ue2980c1b\" id=\"ue2980c1b\">defineProperty() 捕获器会在Object.defineProperty()中被调用。</span></p><p data-lake-id=\"ub996021c\" id=\"ub996021c\"><u><span data-lake-id=\"uc3627828\" id=\"uc3627828\">Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改也跟对象的现有属性，并返回此对象。</span></u></p><p data-lake-id=\"u5d6bb4b3\" id=\"u5d6bb4b3\"><strong><span data-lake-id=\"uf5a2620b\" id=\"uf5a2620b\">defineProxy()捕获器处理程序参数</span></strong><span data-lake-id=\"ubac09076\" id=\"ubac09076\">：</span></p><ol list=\"ua5221c26\"><li fid=\"ufcb743bf\" data-lake-id=\"uc50c1b09\" id=\"uc50c1b09\"><span data-lake-id=\"ud0d0072e\" id=\"ud0d0072e\">obj：要在其上定义属性的对象</span></li><li fid=\"ufcb743bf\" data-lake-id=\"ua694275c\" id=\"ua694275c\"><span data-lake-id=\"uacef7fec\" id=\"uacef7fec\">prop：要定义或修改的属性的名称或Symbol</span></li><li fid=\"ufcb743bf\" data-lake-id=\"u2d485517\" id=\"u2d485517\"><span data-lake-id=\"ue27a3e1a\" id=\"ue27a3e1a\">descriptor：定义或修改的属性描述符</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Object.defineProperty(obj%2Cprop%2Cdescriptor)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GCALg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue233dba9\" id=\"ue233dba9\"><span data-lake-id=\"u500cf73a\" id=\"u500cf73a\">缺点：只能劫持对象的属性，无法监听新增属性和数组的变化（Vue）。</span></p><blockquote data-lake-id=\"u8ce09d60\" id=\"u8ce09d60\"><p data-lake-id=\"u3301a88a\" id=\"u3301a88a\"><span data-lake-id=\"u95c0a53b\" id=\"u95c0a53b\">对象中目前存在的属性描述符有两种主要形式：数据（属性）描述符和存取描述符（访问器属性）。数据描述符是一个具有值的属性，该值是可写的，也可以是不可写的。存取描述符是由getter函数和setter函数所描述的属性。一个描述符只能是这两者其中之一，</span><strong><span data-lake-id=\"ud81206d1\" id=\"ud81206d1\">不能同时是两者。</span></strong></p><p data-lake-id=\"ue30d7244\" id=\"ue30d7244\"><span data-lake-id=\"u912caf1a\" id=\"u912caf1a\">属性描述符：</span></p><ul list=\"u3295c832\"><li fid=\"ud1b82599\" data-lake-id=\"ufa9623d3\" id=\"ufa9623d3\"><span data-lake-id=\"u166dc7b9\" id=\"u166dc7b9\">value：值</span></li><li fid=\"ud1b82599\" data-lake-id=\"u8708aea0\" id=\"u8708aea0\"><span data-lake-id=\"uc18a8212\" id=\"uc18a8212\">writable：如果为true，则会被在循环中列出，否则不会被列出</span></li><li fid=\"ud1b82599\" data-lake-id=\"u803667e4\" id=\"u803667e4\"><span data-lake-id=\"uf7ba133c\" id=\"uf7ba133c\">emumerable：如果为true，则会被在循环在列出，否则不会被列出。</span></li><li fid=\"ud1b82599\" data-lake-id=\"u6c5322c1\" id=\"u6c5322c1\"><span data-lake-id=\"u1e1ef162\" id=\"u1e1ef162\">configurable：如果为true，则此属性可以被删除，这些特性也可以被修改，否则不可以。</span></li></ul><p data-lake-id=\"u0a43d09a\" id=\"u0a43d09a\"><strong><span data-lake-id=\"u87da5bfc\" id=\"u87da5bfc\">访问器属性：</span></strong></p><ul list=\"uccd24199\"><li fid=\"u4aef9506\" data-lake-id=\"ud0e8bb39\" id=\"ud0e8bb39\"><span data-lake-id=\"u0dd8187c\" id=\"u0dd8187c\">get：一个没有参数的函数，在读取属性时工作</span></li><li fid=\"u4aef9506\" data-lake-id=\"uf5f643ad\" id=\"uf5f643ad\"><span data-lake-id=\"u517d7ee2\" id=\"u517d7ee2\">set：带有一个参数的函数，当属性被设置时调用</span></li><li fid=\"u4aef9506\" data-lake-id=\"u58c5683f\" id=\"u58c5683f\"><span data-lake-id=\"u2a18b513\" id=\"u2a18b513\">enumerate：与数据属性的相同</span></li><li fid=\"u4aef9506\" data-lake-id=\"ue0de7150\" id=\"ue0de7150\"><span data-lake-id=\"u48c96172\" id=\"u48c96172\">configurable：与数据属性的相同</span></li></ul></blockquote><h3 data-lake-id=\"ToHZ6\" id=\"ToHZ6\"><span data-lake-id=\"u57ed1372\" id=\"u57ed1372\">Proxy</span></h3><blockquote data-lake-id=\"uf66ef70b\" id=\"uf66ef70b\"><p data-lake-id=\"u330e6e05\" id=\"u330e6e05\"><span data-lake-id=\"u041160ee\" id=\"u041160ee\">Proxy 主要用于改变对象的默认访问行为，实际上是在访问对象前增加一层拦截，在任何对对象的访问行为都会通过这层拦截。</span></p></blockquote><p data-lake-id=\"u9e853547\" id=\"u9e853547\"><span data-lake-id=\"u0a29a49f\" id=\"u0a29a49f\">Proxy 的参数为：</span></p><ol list=\"u40b49bec\"><li fid=\"u5865e701\" data-lake-id=\"uea65e13b\" id=\"uea65e13b\"><span data-lake-id=\"uda53c1cd\" id=\"uda53c1cd\">target：目标对象</span></li><li fid=\"u5865e701\" data-lake-id=\"u61497bcb\" id=\"u61497bcb\"><span data-lake-id=\"u2275f6ec\" id=\"u2275f6ec\">handler：配置对象，用来定义拦截的行为</span></li><li fid=\"u5865e701\" data-lake-id=\"ubd642f8e\" id=\"ubd642f8e\"><span data-lake-id=\"ueefd25d7\" id=\"ueefd25d7\">proxy：Proxy构造器的实例</span></li></ol><p data-lake-id=\"ubcd6e377\" id=\"ubcd6e377\"><span data-lake-id=\"u2f3e50e8\" id=\"u2f3e50e8\">体现的功能有：</span></p><ol list=\"u948e8c99\"><li fid=\"u80ac6caa\" data-lake-id=\"u8fd4e42a\" id=\"u8fd4e42a\"><span data-lake-id=\"u28fa9e32\" id=\"u28fa9e32\"> 拦截功能</span></li><li fid=\"u80ac6caa\" data-lake-id=\"u1d721d29\" id=\"u1d721d29\"><span data-lake-id=\"u2c35eeb4\" id=\"u2c35eeb4\">提供对象访问</span></li><li fid=\"u80ac6caa\" data-lake-id=\"uc5bf32f8\" id=\"uc5bf32f8\"><strong><span data-lake-id=\"ua7b55b7c\" id=\"ua7b55b7c\">可以重写属性或构造函数</span></strong></li></ol><h4 data-lake-id=\"NDqW8\" id=\"NDqW8\"><span data-lake-id=\"uf8a3adc1\" id=\"uf8a3adc1\">好处</span></h4><ol list=\"u8f674ca6\"><li fid=\"u646fa933\" data-lake-id=\"ub9dbcafa\" id=\"ub9dbcafa\"><span data-lake-id=\"ub2acd64e\" id=\"ub2acd64e\">能够代理任何对象包括数组和函数、对象</span></li><li fid=\"u646fa933\" data-lake-id=\"u427dde50\" id=\"u427dde50\"><span data-lake-id=\"ub4f7af6b\" id=\"ub4f7af6b\">比Object.defineProperty()更多的语义的操作（get、set、delete）</span></li><li fid=\"u646fa933\" data-lake-id=\"u1d6205a1\" id=\"u1d6205a1\"><span data-lake-id=\"u1cc8c367\" id=\"u1cc8c367\">不用循环遍历对象，然后再使用 Object.defineProperty，Proxy可以代理对象内的所有属性</span></li><li fid=\"u646fa933\" data-lake-id=\"ua66c7727\" id=\"ua66c7727\"><span data-lake-id=\"u190716f4\" id=\"u190716f4\">Object.defineProperty() 只能劫持对象的属性（给对象新添加属性vue无法检测到）</span></li></ol><h4 data-lake-id=\"iZDxZ\" id=\"iZDxZ\"><span data-lake-id=\"u8eee8731\" id=\"u8eee8731\">局限性</span></h4><ol list=\"uac496115\"><li fid=\"ue4e40a95\" data-lake-id=\"u651a3c57\" id=\"u651a3c57\"><span data-lake-id=\"u86f50ac9\" id=\"u86f50ac9\">无法代理内部对象的内部插槽</span></li></ol><ol list=\"uac496115\" data-lake-indent=\"1\"><li fid=\"ue4e40a95\" data-lake-id=\"u491156d5\" id=\"u491156d5\"><span data-lake-id=\"ua2947343\" id=\"ua2947343\">许多内建对象，例如 Map、Set、Date、Promise等，都使用了所谓的“内部插槽“。</span></li></ol><p data-lake-id=\"ub3217798\" id=\"ub3217798\"><span data-lake-id=\"u81b15af0\" id=\"u81b15af0\">例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20map%20%3D%20new%20Map()%3B%5Cnlet%20proxy%20%3D%20new%20Proxy(map%2C%20%7B%7D)%3B%5Cnproxy.set('test'%2C%201)%3B%20%2F%2F%20Error%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mMMzq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udca9ad9e\" id=\"udca9ad9e\"><span data-lake-id=\"u01a30f3d\" id=\"u01a30f3d\">解决方法：在get时将get要返回的值先绑定目标对象后返回。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20map%20%3D%20new%20Map()%3B%5Cn%5Cnlet%20proxy%20%3D%20new%20Proxy(map%2C%20%7B%5Cn%20%20get(target%2C%20prop%2C%20receiver)%20%7B%5Cn%20%20%20%20let%20value%20%3D%20Reflect.get(...arguments)%3B%5Cnreturn%20typeof%20value%20%3D%3D%20'function'%20%3F%20value.bind(target)%20%3A%20value%3B%5Cn%20%20%7D%5Cn%7D)%3B%5Cn%5Cnproxy.set('test'%2C%201)%3B%5Cnalert(proxy.get('test'))%3B%20%2F%2F%201%EF%BC%88%E5%B7%A5%E4%BD%9C%E4%BA%86%EF%BC%81%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ztuNu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u3851937f\" start=\"2\"><li fid=\"u1bb58f40\" data-lake-id=\"u58716b61\" id=\"u58716b61\"><span data-lake-id=\"ud853b367\" id=\"ud853b367\">无法代理私有字段（同上）</span></li><li fid=\"u1bb58f40\" data-lake-id=\"uc05befd9\" id=\"uc05befd9\"><span data-lake-id=\"u628f7a54\" id=\"u628f7a54\">proxy != target代理对象和目标对象是不===的。</span></li></ol><h4 data-lake-id=\"FJbDY\" id=\"FJbDY\"><span data-lake-id=\"u4a48e7b3\" id=\"u4a48e7b3\">总结</span></h4><ul list=\"u4160982f\"><li fid=\"u3c451343\" data-lake-id=\"u0247bee1\" id=\"u0247bee1\"><span data-lake-id=\"u20a182ea\" id=\"u20a182ea\">Proxy是对象的包装器，将代理上的操作转发给对象，并可以选择捕获其中一些操作。</span></li><li fid=\"u3c451343\" data-lake-id=\"u7ea1e923\" id=\"u7ea1e923\"><span data-lake-id=\"uddfad6a2\" id=\"uddfad6a2\">可以包含任何类型的对象，包括类和函数。</span></li><li fid=\"u3c451343\" data-lake-id=\"u765525cf\" id=\"u765525cf\"><span data-lake-id=\"uad7f0491\" id=\"uad7f0491\">Reflect旨在补充Proxy，对于任意Proxy捕捉器，都有一个带有相同参数的Reflect调用，我们应该使用它们将调用转发给目标对象。</span></li></ul><h3 data-lake-id=\"R3arv\" id=\"R3arv\"><span data-lake-id=\"u4f36184f\" id=\"u4f36184f\">区别</span></h3><ol list=\"u556854b4\"><li fid=\"u6f8cd645\" data-lake-id=\"ubd71ef9d\" id=\"ubd71ef9d\"><span data-lake-id=\"uf67cd78d\" id=\"uf67cd78d\">Proxy是对整个对象的代理，而Object.defineProperty()只能代理某个属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2FProxy%5Cnvar%20target%20%3D%20%7B%5Cn%20%20%20%20a%3A1%2C%5Cn%20%20%20%20b%3A%7B%5Cn%20%20%20%20%20%20%20%20c%3A2%2C%5Cn%20%20%20%20%20%20%20%20d%3A%7Be%3A3%7D%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnvar%20handler%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E6%8D%95%E8%8E%B7%E5%99%A8%5Cn%20%20%20%20get%3Afunction(trapTarget%2Cprop%2Creceiver)%7B%5Cn%20%20%20%20%20%20%20%20console.log('%E8%A7%A6%E5%8F%91get%3A'%2Cprop)%5Cn%20%20%20%20%20%20%20%20return%20Reflect.get(trapTarget%2Cprop)%20%2F%2F%20%E5%8F%8D%E5%B0%84API%20%2F%2F%20%E5%8F%AA%E8%A6%81%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8A%E8%B0%83%E7%94%A8%EF%BC%8C%E6%89%80%E6%9C%89%E6%8D%95%E8%8E%B7%E5%99%A8%E9%83%BD%E4%BC%9A%E6%8B%A6%E6%88%AA%E5%AE%83%E4%BB%AC%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%8D%E5%B0%84API%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20set%3Afunction(trapTarget%2Ckey%2Cvalue%2Creceiver)%7B%5Cn%20%20%20%20%20%20%20%20console.log('%E8%A7%A6%E5%8F%91set%3A'%2Ckey%2Cvalue)%5Cn%20%20%20%20%20%20%20%20return%20Reflect.set(trapTarget%2Ckey%2Cvalue%2Creceiver)%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnconst%20proxy%20%3D%20new%20Proxy(target%2Chandler)%3B%5Cn%2F%2F%20%E8%AE%BF%E9%97%AE%5Cnproxy.b.c%3B%2F%2F%20%E8%A7%A6%E5%8F%91get%3A%20b%5Cnproxy.b.d.e%3B%2F%2F%20%E8%A7%A6%E5%8F%91get%3A%20b%20%2F%2F%E8%AF%B4%E6%98%8E%E9%83%BD%E4%B8%8D%E8%83%BD%E5%A4%9F%E9%81%8D%E5%8E%86%E5%88%B0%E6%B7%B1%E5%B1%82%E6%AC%A1%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BB%A3%E7%90%86%E6%9C%80%E5%A4%96%E5%B1%82%E5%B1%9E%E6%80%A7%5Cnconsole.log(proxy)%3B%2F%2F%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%202%2C%20d%3A%20%7B%20e%3A%203%20%7D%20%7D%20%7D%5Cn%5Cn%2F%2F%20Object.defineProperty%5Cnconst%20obj%20%3D%20%7B%7D%5CnObject.defineProperty(obj%2C'name'%2C%7B%5Cn%20%20%20%20value%3A'%E5%BC%A0%E4%B8%89'%5Cn%7D)%5Cnconsole.log(obj.name)%20%2F%2F%20'%E5%BC%A0%E4%B8%89'%5Cnobj.name%20%3D%20'%E6%9D%8E%E5%9B%9B'%20%2F%2F%20%E7%BB%99obj.name%E8%B5%8B%E6%96%B0%E5%80%BC%5Cnconsole.log(obj.name)%20%2F%2F%20%E5%BC%A0%E4%B8%89%20%20%2F%2F%E9%BB%98%E8%AE%A4writable%E4%B8%BAfalse%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%8F%AF%E6%94%B9%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QM15t%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u5b787f26\" start=\"2\"><li fid=\"uac14c9cf\" data-lake-id=\"u50038dcb\" id=\"u50038dcb\"><span data-lake-id=\"u69d5f6e2\" id=\"u69d5f6e2\">对象上新增属性和数组新增修改，Proxy可以监听到，Object.defineProperty()不能（Vue2中）</span></li><li fid=\"uac14c9cf\" data-lake-id=\"u890f1e15\" id=\"u890f1e15\"><span data-lake-id=\"ufbd2bba1\" id=\"ufbd2bba1\">若对象内部属性要全部递归代理，Proxy可以只在调用时递归，而Object.defineProperty()需要一次性完成所有递归，性能比Proxy差。</span></li></ol><p data-lake-id=\"ud93ebf79\" id=\"ud93ebf79\"><span data-lake-id=\"ua69837da\" id=\"ua69837da\">假如对象嵌套层级比较深的话，每一次都需要循环遍历（采用递归代理）。</span></p><ol list=\"uf331543f\" start=\"4\"><li fid=\"u871e9952\" data-lake-id=\"uf618d9c5\" id=\"uf618d9c5\"><span data-lake-id=\"u5e8b3a90\" id=\"u5e8b3a90\">Proxy只在现代浏览器采用，不兼容IE，Object.defineProperty()不兼容IE8及以下</span></li><li fid=\"u871e9952\" data-lake-id=\"ud2521c72\" id=\"ud2521c72\"><span data-lake-id=\"u541614a0\" id=\"u541614a0\">如果Object.defineProperty遍历到对象不存在的属性时，它是检测不到变化的。</span></li></ol><h2 data-lake-id=\"ZSmmP\" id=\"ZSmmP\"><span data-lake-id=\"u632442c2\" id=\"u632442c2\">Vue2 和 Vue3 代理基础架构对比</span></h2><h3 data-lake-id=\"kJjTo\" id=\"kJjTo\"><span data-lake-id=\"uc639c0c9\" id=\"uc639c0c9\">Vue2中的defineProperty基础架构</span></h3><p data-lake-id=\"u5800efa0\" id=\"u5800efa0\"><span data-lake-id=\"u4282a64a\" id=\"u4282a64a\">假如我们定义考了一个defineProperty()函数来实现代理映射的效果，里面包含了get和set方法，如果触发了get方法，那么直接映射源数据value；</span></p><p data-lake-id=\"ua32eaa6a\" id=\"ua32eaa6a\"><span data-lake-id=\"ube0bc0c6\" id=\"ube0bc0c6\">如果触发了set方法，那么先判断新的数据是否等于原来的数据，这样做是为了避免无效更新视图层，减少性能损耗。</span></p><p data-lake-id=\"u983918bf\" id=\"u983918bf\"><span data-lake-id=\"ufdfa128d\" id=\"ufdfa128d\">如果不等于源数据，那么就将newValue更新赋值给value。</span></p><p data-lake-id=\"u9713346d\" id=\"u9713346d\"><span data-lake-id=\"ud398f073\" id=\"ud398f073\">然后再更新视图层，这样就实现了最基本的响应式数据。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%5Cn%7D%5Cn%5Cnfunction%20defineReactive(target%2Ckey%2Cvalue)%20%7B%5Cn%20%20%20%20Object.defineProperty(target%2Ckey%2C%7B%5Cn%20%20%20%20%20%20%20%20get()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20value%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set(newValue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(newValue%20!%3D%3Dvalue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20value%20%3D%20newValue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E5%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%7D%5Cn%5Cnfor%20(let%20key%20in%20dinner)%7B%5Cn%20%20%20%20defineReactive(dinner%2Ckey%2Cdinner%5Bkey%5D)%5Cn%7D%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%89%8D'%2Cdinner.meal)%20%2F%2Fset%E4%B9%8B%E5%89%8D%20tacos%5Cn%5Cndinner.meal%20%3D%20'changed'%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%90%8E'%2Cdinner.meal)%20%2F%2Fset%E4%B9%8B%E5%90%8E%20changed%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zHFim%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Xlt6o\" id=\"Xlt6o\"><span data-lake-id=\"ue88f8818\" id=\"ue88f8818\">Vue3 中的Proxy基础架构</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%5Cn%7D%5Cn%5Cnconst%20handler%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E7%9A%84key%E6%8C%87%E7%9A%84%E6%98%AF%E8%AE%BF%E9%97%AE%E7%9A%84property%5Cn%20%20%20%20get(target%2Ckey)%7B%5Cn%20%20%20%20%20%20%20%20return%20target%5Bkey%5D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20set(target%2Ckey%2Cvalue)%7B%5Cn%20%20%20%20%20%20%20%20target%5Bkey%5D%20%3D%20value%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnconst%20proxy%20%3D%20new%20Proxy(dinner%2Chandler)%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%89%8D'%2Cproxy.meal)%2F%2Fset%E4%B9%8B%E5%89%8D%20tacos%5Cn%5Cnproxy.meal%20%3D%20'changed'%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%90%8E'%2Cproxy.meal)%2F%2Fset%E4%B9%8B%E5%90%8E%20changed%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OYgLV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u247e17ca\" id=\"u247e17ca\"><span data-lake-id=\"u9049fc79\" id=\"u9049fc79\">可以看到都能实现响应式数据变化。</span></p><p data-lake-id=\"ud80d5867\" id=\"ud80d5867\"><span data-lake-id=\"u7065a9b1\" id=\"u7065a9b1\">但是，我们考虑到如果是多层嵌套或者数组时，更改一下defineProperty中的例子：</span></p><p data-lake-id=\"u4907ab30\" id=\"u4907ab30\"><span data-lake-id=\"u74480e8d\" id=\"u74480e8d\">把原对象变为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%2C%5Cn%20%20%20%20a%3A%7B%5Cn%20%20%20%20%20%20%20%20b%3A%5B1%2C2%2C3%5D%2C%5Cn%20%20%20%20%20%20%20%20c%3A%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20d%3A''%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e%3A''%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CJhBw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u680fc41e\" id=\"u680fc41e\"><span data-lake-id=\"u8feea80a\" id=\"u8feea80a\">那么在层级比较深并且包含数组的情况下，该如何实现响应式呢？</span></p><p data-lake-id=\"ueedd28b3\" id=\"ueedd28b3\"><span data-lake-id=\"u71119b27\" id=\"u71119b27\">此时，我们需要一个observer来观测value的类型，再决定遍历的方式和次数。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20observer(target)%7B%5Cn%20%20%20%20if(typeof%20target%20!%3D%3D%20'object'%7C%7Ctarget%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20return%20target%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if(Array.isArray(target))%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E7%BB%99%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E4%BA%86%E9%87%8D%E5%86%99%5Cn%20%20%20%20%20%20%20%20Object.setPrototypeOf(target%2Cproto)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2Ftarget.__proto__%20%3D%20proto%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D0%3Bi%3Ctarget.length%3Bi%2B%2B)%7B%7D%5Cn%20%20%20%20%20%20%20%20observer(target%5Bi%5D)%3B%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E8%BF%9B%E8%A1%8C%E5%B1%82%E5%B1%82%E9%80%92%E5%BD%92%5Cn%20%20%20%20%20%20%20%20for%20(let%20key%20in%20target)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20defineReactive(target%2Ckey%2Ctarget%5Bkey%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cnfunction%20defineReactive(target%2Ckey%2Cvalue)%20%7B%5Cn%20%20%20%20%2F%2F%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%EF%BC%8C%E7%BB%A7%E7%BB%AD%E6%8B%A6%E6%88%AA%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20observer(value)%3B%5Cn%20%20%20%20Object.defineProperty((target%2Ckey%2C%7B%5Cn%20%20%20%20%20%20%20%20get()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20value%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set(newValue)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(newValue!%3D%3Dvalue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20observer(newValue)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20updateView%20%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20value%20%3D%20newValue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22j9Mwm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ucbbd6b22\" id=\"ucbbd6b22\"><p data-lake-id=\"u24eb034a\" id=\"u24eb034a\"><span data-lake-id=\"u72f022c0\" id=\"u72f022c0\">这里可以看出defineProperty的缺点，在重写的defineReactive方法里，显然性能损耗基本上是在observer上。</span></p><p data-lake-id=\"u34231243\" id=\"u34231243\"><span data-lake-id=\"ubca13c9b\" id=\"ubca13c9b\">而在Vue3中的Proxy可以很好的解决上面的问题。</span></p></blockquote><h2 data-lake-id=\"J6qte\" id=\"J6qte\"><span data-lake-id=\"ubb52de17\" id=\"ubb52de17\">总结</span></h2><p data-lake-id=\"ubd40a657\" id=\"ubd40a657\"><span data-lake-id=\"ubfbf2069\" id=\"ubfbf2069\">相同点：二者都可以对属性进行代理。</span></p><p data-lake-id=\"u284ea597\" id=\"u284ea597\"><span data-lake-id=\"ua6a2d68c\" id=\"ua6a2d68c\">不同点：</span></p><ol list=\"ucc9bc7c6\"><li fid=\"u08e110c2\" data-lake-id=\"u117d226c\" id=\"u117d226c\"><span data-lake-id=\"uf6a36ea3\" id=\"uf6a36ea3\">代理的粒度不同：defineProperty只能代理对象的属性，Proxy代理的是对象。</span></li></ol><ul list=\"ucb5dff45\"><li fid=\"u0a75b5c9\" data-lake-id=\"ud3b0f223\" id=\"ud3b0f223\"><span data-lake-id=\"u147815fc\" id=\"u147815fc\">如果想代理对象的所有属性，defineProperty需要遍历属性一个个加setter和getter。</span></li><li fid=\"u0a75b5c9\" data-lake-id=\"uf73ece31\" id=\"uf73ece31\"><span data-lake-id=\"u47101db6\" id=\"u47101db6\">而Proxy只需要配置一个可以获取属性名参数的函数即可。</span></li><li fid=\"u0a75b5c9\" data-lake-id=\"ubb2d3ae3\" id=\"ubb2d3ae3\"><span data-lake-id=\"u24e3309d\" id=\"u24e3309d\">如果出现嵌套的函数，Proxy也是要递归进行代理的，但可以做惰性代理（按需代理），即用到嵌套对象时再创建对应的Proxy。</span></li></ul><ol list=\"u9ddce4c7\" start=\"2\"><li fid=\"ub8e017e2\" data-lake-id=\"u241d9e86\" id=\"u241d9e86\"><span data-lake-id=\"uc7038e6a\" id=\"uc7038e6a\">是否破坏原对象。</span></li></ol><p data-lake-id=\"u970e0e58\" id=\"u970e0e58\" style=\"text-indent: 2em\"><strong><span data-lake-id=\"uf41c5c1c\" id=\"uf41c5c1c\">defineProperty的代理行为是在破坏原对象的基础上实现的</span></strong><span data-lake-id=\"ucc08d914\" id=\"ucc08d914\">，它通常会将原来的value变成了setter和getter。</span></p><p data-lake-id=\"ud0e46554\" id=\"ud0e46554\" style=\"text-indent: 2em\"><strong><span data-lake-id=\"ufb16cbf8\" id=\"ufb16cbf8\">Proxy则不会破坏原对象</span></strong><span data-lake-id=\"u3d06b92d\" id=\"u3d06b92d\">，只是在原对象上覆盖了一层。当新增属性时，希望属性被代理，defineProperty需要显式调用该API，而Proxy则可以直接用</span><code data-lake-id=\"u47fade2b\" id=\"u47fade2b\"><span data-lake-id=\"ud3397d9d\" id=\"ud3397d9d\">obj.key = val</span></code><span data-lake-id=\"u51345bc3\" id=\"u51345bc3\">的形式。</span></p><p data-lake-id=\"uc34eae52\" id=\"uc34eae52\" style=\"text-indent: 2em\"><span data-lake-id=\"u276833db\" id=\"u276833db\">Proxy返回的是一个新的对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。</span></p><ol list=\"ucbc980a9\" start=\"3\"><li fid=\"u05b1e757\" data-lake-id=\"ud6ec56ef\" id=\"ud6ec56ef\"><span data-lake-id=\"uc3521305\" id=\"uc3521305\">代理数组属性</span></li></ol><p data-lake-id=\"u9e02f4e0\" id=\"u9e02f4e0\" style=\"text-indent: 2em\"><span data-lake-id=\"u0899776c\" id=\"u0899776c\">defineProperty只能代理常规对象，不适合监听数组属性，因为数组长度可能很大，比如几百万，一个个对索引使用defineProperty是无法接受的。</span></p><ul list=\"u25f5cd3c\"><li fid=\"u9bf7a9c7\" data-lake-id=\"u92863efd\" id=\"u92863efd\"><span data-lake-id=\"u34da0989\" id=\"u34da0989\">一种方法是重写数组的API方法（比如splice），通过它们来实现代理，但它是有缺陷的：直接用arr[1] = 100无法触发代理。（Vue2做法）</span></li><li fid=\"u9bf7a9c7\" data-lake-id=\"uec12cc06\" id=\"uec12cc06\"><span data-lake-id=\"u13ed8180\" id=\"u13ed8180\">另外，我们无法对数组的length做代理。这暴露了defineProperty的一个缺陷：</span><strong><span data-lake-id=\"u6dae5431\" id=\"u6dae5431\">设置了configurable为false的属性无法进行代理。</span></strong><span data-lake-id=\"u42544bce\" id=\"u42544bce\">数组的length就是这种情况。</span></li></ul><p data-lake-id=\"u968d8de5\" id=\"u968d8de5\" style=\"text-indent: 2em\"><span data-lake-id=\"u4177769c\" id=\"u4177769c\">Proxy则没有这个问题，它只需要设置一个setter和getter，在属性变化时，能够在函数参数上拿到索引值。</span><strong><span data-lake-id=\"ud88b9ef9\" id=\"ud88b9ef9\">它可以代理任何对象（函数、数组、类），不能代理内部对象的内部插槽。</span></strong></p><ol list=\"ua19d195d\" start=\"4\"><li fid=\"u631dd408\" data-lake-id=\"u4e369dc4\" id=\"u4e369dc4\"><span data-lake-id=\"u795dc790\" id=\"u795dc790\">代理范围：defineProperty只能代理属性的get和set。</span></li></ol><p data-lake-id=\"u55f97e9e\" id=\"u55f97e9e\" style=\"text-indent: 2em\"><span data-lake-id=\"u09244ded\" id=\"u09244ded\">Proxy还能代理其他的行为，比如delete和handler.getPropertypeOf()等方法。</span></p><ol list=\"ub4605acc\" start=\"5\"><li fid=\"u36642516\" data-lake-id=\"u7b51069d\" id=\"u7b51069d\"><span data-lake-id=\"u92120c92\" id=\"u92120c92\">兼容性：Proxy是ES6新增的特性，兼容性不如 defineProperty。</span></li></ol><p data-lake-id=\"u82bb8790\" id=\"u82bb8790\" style=\"text-indent: 2em\"><span data-lake-id=\"ucc29ff64\" id=\"ucc29ff64\">IE不支持Proxy。</span></p><p data-lake-id=\"ue4471776\" id=\"ue4471776\" style=\"text-indent: 2em\"><span data-lake-id=\"uc0b71d2a\" id=\"uc0b71d2a\">且Proxy不能被</span><a href=\"https://blog.csdn.net/sujinchang939024/article/details/118498394\" target=\"_blank\" data-lake-id=\"u00ca8186\" id=\"u00ca8186\"><span data-lake-id=\"u86c5d71c\" id=\"u86c5d71c\">polyfill</span></a><span data-lake-id=\"u0cfe9b92\" id=\"u0cfe9b92\">磨平，因为它是在编程语言层面上的修改。</span></p><p data-lake-id=\"u2cce08eb\" id=\"u2cce08eb\" style=\"text-indent: 2em\"><span data-lake-id=\"u7dec63b8\" id=\"u7dec63b8\">Proxy还有一些性能问题，但作为标准，浏览器会持续做重点性能优化。</span></p><p data-lake-id=\"ubf0e5b31\" id=\"ubf0e5b31\" style=\"text-indent: 2em\"><span data-lake-id=\"u88914efd\" id=\"u88914efd\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u0e908af7\" id=\"u0e908af7\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: Object.defineProperty和Proxy区别</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: Vue</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/vd.png</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"CxrBd\" id=\"CxrBd\"><span data-lake-id=\"u09e02f3e\" id=\"u09e02f3e\">代理和反射</span></h2><p data-lake-id=\"udabf4c61\" id=\"udabf4c61\"><span data-lake-id=\"u20c9c319\" id=\"u20c9c319\">vue2中的Object.defineProperty()和vue3 中的Proxy()本质上的作用都是代理。</span></p><p data-lake-id=\"u1b0b3bc9\" id=\"u1b0b3bc9\"><span data-lake-id=\"u96a5514a\" id=\"u96a5514a\">那么什么是代理和反射呢？</span></p><ul list=\"u84a754db\"><li fid=\"u5d6c6444\" data-lake-id=\"u52bdbb79\" id=\"u52bdbb79\"><span data-lake-id=\"u1f4e932b\" id=\"u1f4e932b\">反射和代理就是</span><strong><span data-lake-id=\"u8bef86e8\" id=\"u8bef86e8\">一种拦截并向基本操作嵌入额外行为的能力。</span></strong><span data-lake-id=\"u625d3f62\" id=\"u625d3f62\">本质上属于数据劫持</span><strong><span data-lake-id=\"ub0967280\" id=\"ub0967280\">。</span></strong></li><li fid=\"u5d6c6444\" data-lake-id=\"u2e5d5b94\" id=\"u2e5d5b94\"><span data-lake-id=\"u05b508ed\" id=\"u05b508ed\">反射</span><strong><span data-lake-id=\"u11f19a26\" id=\"u11f19a26\">Reflect</span></strong><span data-lake-id=\"ub23a4dd5\" id=\"ub23a4dd5\"> 是一个内建对象</span><strong><span data-lake-id=\"u2935f573\" id=\"u2935f573\">，</span></strong><span data-lake-id=\"ue712cda0\" id=\"ue712cda0\">可简化Proxy的创建。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"uca1c7fa5\" id=\"uca1c7fa5\"><span data-lake-id=\"ud3b26d02\" id=\"ud3b26d02\">Reflect对象使调用一些内部方法（[[Get]]、[[Set]]等）成为可能，它的方法是内部方法的最小包装。</span></li></ul><ul list=\"u84a754db\" data-lake-indent=\"1\"><li fid=\"u5d6c6444\" data-lake-id=\"udbcf82d0\" id=\"udbcf82d0\"><span data-lake-id=\"ucfec7795\" id=\"ucfec7795\">Reflect允许我们将操作符（new，delete等）作为函数（</span><code data-lake-id=\"u3f3dbf35\" id=\"u3f3dbf35\"><span data-lake-id=\"u50c53e82\" id=\"u50c53e82\">Reflect.construct</span></code><span data-lake-id=\"ufee72662\" id=\"ufee72662\">，</span><code data-lake-id=\"ue56bdbf2\" id=\"ue56bdbf2\"><span data-lake-id=\"uc25f9d93\" id=\"uc25f9d93\">Reflect.deleteProperty</span></code><span data-lake-id=\"u4d6d943a\" id=\"u4d6d943a\">等）执行调用。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"uc477f5f9\" id=\"uc477f5f9\"><span data-lake-id=\"ub7b9b9c0\" id=\"ub7b9b9c0\">对于每个可被</span><code data-lake-id=\"ud48aba3a\" id=\"ud48aba3a\"><span data-lake-id=\"ucd3c1913\" id=\"ucd3c1913\">Proxy</span></code><span data-lake-id=\"ud5ce2733\" id=\"ud5ce2733\">捕获的内部方法，在</span><code data-lake-id=\"u6685da41\" id=\"u6685da41\"><span data-lake-id=\"ubd16d22d\" id=\"ubd16d22d\">Reflect</span></code><span data-lake-id=\"ueb1f194a\" id=\"ueb1f194a\">中都有一个对应的方法，其名称和参数与Proxy捕捉器相同。所以，我们可以使用Reflect来将操作转发给原始对象。</span></li><li fid=\"u5d6c6444\" data-lake-id=\"u4f909f86\" id=\"u4f909f86\"><span data-lake-id=\"u6db29b54\" id=\"u6db29b54\">Reflect调用的命名与捕捉器的命名完全相同，并且接收相同的参数，因此，return Reflect ... 提供了一个安全的方式，可以轻松地转发操作，并确保我们不会忘记与此相关的任何内容。</span></li></ul><ul list=\"u84a754db\" start=\"4\"><li fid=\"u5d6c6444\" data-lake-id=\"u7b7ef8c5\" id=\"u7b7ef8c5\"><span data-lake-id=\"u442f4048\" id=\"u442f4048\">代理是目标对象抽象，也就是说，它可以用做目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。</span></li></ul><p data-lake-id=\"u5520dbc1\" id=\"u5520dbc1\"><span data-lake-id=\"u040c7794\" id=\"u040c7794\">来个简单的例子理解代理操作：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20target%20%3D%20%7B%5Cn%20%20id%3A%20'target'%5Cn%7D%3B%20%20%2F%2F%20%E7%9B%AE%E6%A0%87%E5%AF%B9%E8%B1%A1%5Cnconst%20handler%20%3D%20%7B%7D%3B%20%20%2F%2F%20%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cnconst%20proxy%20%3D%20new%20Proxy(target%2Chandler)%3B%5Cnconsole.log(target.id)%3B%20%20%2F%2F%20target%5Cnconsole.log(proxy.id)%3B%20%2F%2F%20target%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f9DpD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u32f52887\" id=\"u32f52887\"><p data-lake-id=\"u2e34ecd2\" id=\"u2e34ecd2\"><span data-lake-id=\"u49cb209c\" id=\"u49cb209c\">显然，通过Proxy代理把目标对象上的属性映射到了代理对象身上。</span></p></blockquote><h2 data-lake-id=\"ldKmO\" id=\"ldKmO\"><span data-lake-id=\"u1c5d9716\" id=\"u1c5d9716\">Object.defineProperty() 与 Proxy的区别</span></h2><h3 data-lake-id=\"Veo3Y\" id=\"Veo3Y\"><span data-lake-id=\"uc0d2bf96\" id=\"uc0d2bf96\">Object.defineProperty()</span></h3><p data-lake-id=\"u2acde9d9\" id=\"u2acde9d9\"><span data-lake-id=\"ue2980c1b\" id=\"ue2980c1b\">defineProperty() 捕获器会在Object.defineProperty()中被调用。</span></p><p data-lake-id=\"ub996021c\" id=\"ub996021c\"><u><span data-lake-id=\"uc3627828\" id=\"uc3627828\">Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改也跟对象的现有属性，并返回此对象。</span></u></p><p data-lake-id=\"u5d6bb4b3\" id=\"u5d6bb4b3\"><strong><span data-lake-id=\"uf5a2620b\" id=\"uf5a2620b\">defineProxy()捕获器处理程序参数</span></strong><span data-lake-id=\"ubac09076\" id=\"ubac09076\">：</span></p><ol list=\"ua5221c26\"><li fid=\"ufcb743bf\" data-lake-id=\"uc50c1b09\" id=\"uc50c1b09\"><span data-lake-id=\"ud0d0072e\" id=\"ud0d0072e\">obj：要在其上定义属性的对象</span></li><li fid=\"ufcb743bf\" data-lake-id=\"ua694275c\" id=\"ua694275c\"><span data-lake-id=\"uacef7fec\" id=\"uacef7fec\">prop：要定义或修改的属性的名称或Symbol</span></li><li fid=\"ufcb743bf\" data-lake-id=\"u2d485517\" id=\"u2d485517\"><span data-lake-id=\"ue27a3e1a\" id=\"ue27a3e1a\">descriptor：定义或修改的属性描述符</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Object.defineProperty(obj%2Cprop%2Cdescriptor)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GCALg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue233dba9\" id=\"ue233dba9\"><span data-lake-id=\"u500cf73a\" id=\"u500cf73a\">缺点：只能劫持对象的属性，无法监听新增属性和数组的变化（Vue）。</span></p><blockquote data-lake-id=\"u8ce09d60\" id=\"u8ce09d60\"><p data-lake-id=\"u3301a88a\" id=\"u3301a88a\"><span data-lake-id=\"u95c0a53b\" id=\"u95c0a53b\">对象中目前存在的属性描述符有两种主要形式：数据（属性）描述符和存取描述符（访问器属性）。数据描述符是一个具有值的属性，该值是可写的，也可以是不可写的。存取描述符是由getter函数和setter函数所描述的属性。一个描述符只能是这两者其中之一，</span><strong><span data-lake-id=\"ud81206d1\" id=\"ud81206d1\">不能同时是两者。</span></strong></p><p data-lake-id=\"ue30d7244\" id=\"ue30d7244\"><span data-lake-id=\"u912caf1a\" id=\"u912caf1a\">属性描述符：</span></p><ul list=\"u3295c832\"><li fid=\"ud1b82599\" data-lake-id=\"ufa9623d3\" id=\"ufa9623d3\"><span data-lake-id=\"u166dc7b9\" id=\"u166dc7b9\">value：值</span></li><li fid=\"ud1b82599\" data-lake-id=\"u8708aea0\" id=\"u8708aea0\"><span data-lake-id=\"uc18a8212\" id=\"uc18a8212\">writable：如果为true，则会被在循环中列出，否则不会被列出</span></li><li fid=\"ud1b82599\" data-lake-id=\"u803667e4\" id=\"u803667e4\"><span data-lake-id=\"uf7ba133c\" id=\"uf7ba133c\">emumerable：如果为true，则会被在循环在列出，否则不会被列出。</span></li><li fid=\"ud1b82599\" data-lake-id=\"u6c5322c1\" id=\"u6c5322c1\"><span data-lake-id=\"u1e1ef162\" id=\"u1e1ef162\">configurable：如果为true，则此属性可以被删除，这些特性也可以被修改，否则不可以。</span></li></ul><p data-lake-id=\"u0a43d09a\" id=\"u0a43d09a\"><strong><span data-lake-id=\"u87da5bfc\" id=\"u87da5bfc\">访问器属性：</span></strong></p><ul list=\"uccd24199\"><li fid=\"u4aef9506\" data-lake-id=\"ud0e8bb39\" id=\"ud0e8bb39\"><span data-lake-id=\"u0dd8187c\" id=\"u0dd8187c\">get：一个没有参数的函数，在读取属性时工作</span></li><li fid=\"u4aef9506\" data-lake-id=\"uf5f643ad\" id=\"uf5f643ad\"><span data-lake-id=\"u517d7ee2\" id=\"u517d7ee2\">set：带有一个参数的函数，当属性被设置时调用</span></li><li fid=\"u4aef9506\" data-lake-id=\"u58c5683f\" id=\"u58c5683f\"><span data-lake-id=\"u2a18b513\" id=\"u2a18b513\">enumerate：与数据属性的相同</span></li><li fid=\"u4aef9506\" data-lake-id=\"ue0de7150\" id=\"ue0de7150\"><span data-lake-id=\"u48c96172\" id=\"u48c96172\">configurable：与数据属性的相同</span></li></ul></blockquote><h3 data-lake-id=\"ToHZ6\" id=\"ToHZ6\"><span data-lake-id=\"u57ed1372\" id=\"u57ed1372\">Proxy</span></h3><blockquote data-lake-id=\"uf66ef70b\" id=\"uf66ef70b\"><p data-lake-id=\"u330e6e05\" id=\"u330e6e05\"><span data-lake-id=\"u041160ee\" id=\"u041160ee\">Proxy 主要用于改变对象的默认访问行为，实际上是在访问对象前增加一层拦截，在任何对对象的访问行为都会通过这层拦截。</span></p></blockquote><p data-lake-id=\"u9e853547\" id=\"u9e853547\"><span data-lake-id=\"u0a29a49f\" id=\"u0a29a49f\">Proxy 的参数为：</span></p><ol list=\"u40b49bec\"><li fid=\"u5865e701\" data-lake-id=\"uea65e13b\" id=\"uea65e13b\"><span data-lake-id=\"uda53c1cd\" id=\"uda53c1cd\">target：目标对象</span></li><li fid=\"u5865e701\" data-lake-id=\"u61497bcb\" id=\"u61497bcb\"><span data-lake-id=\"u2275f6ec\" id=\"u2275f6ec\">handler：配置对象，用来定义拦截的行为</span></li><li fid=\"u5865e701\" data-lake-id=\"ubd642f8e\" id=\"ubd642f8e\"><span data-lake-id=\"ueefd25d7\" id=\"ueefd25d7\">proxy：Proxy构造器的实例</span></li></ol><p data-lake-id=\"ubcd6e377\" id=\"ubcd6e377\"><span data-lake-id=\"u2f3e50e8\" id=\"u2f3e50e8\">体现的功能有：</span></p><ol list=\"u948e8c99\"><li fid=\"u80ac6caa\" data-lake-id=\"u8fd4e42a\" id=\"u8fd4e42a\"><span data-lake-id=\"u28fa9e32\" id=\"u28fa9e32\"> 拦截功能</span></li><li fid=\"u80ac6caa\" data-lake-id=\"u1d721d29\" id=\"u1d721d29\"><span data-lake-id=\"u2c35eeb4\" id=\"u2c35eeb4\">提供对象访问</span></li><li fid=\"u80ac6caa\" data-lake-id=\"uc5bf32f8\" id=\"uc5bf32f8\"><strong><span data-lake-id=\"ua7b55b7c\" id=\"ua7b55b7c\">可以重写属性或构造函数</span></strong></li></ol><h4 data-lake-id=\"NDqW8\" id=\"NDqW8\"><span data-lake-id=\"uf8a3adc1\" id=\"uf8a3adc1\">好处</span></h4><ol list=\"u8f674ca6\"><li fid=\"u646fa933\" data-lake-id=\"ub9dbcafa\" id=\"ub9dbcafa\"><span data-lake-id=\"ub2acd64e\" id=\"ub2acd64e\">能够代理任何对象包括数组和函数、对象</span></li><li fid=\"u646fa933\" data-lake-id=\"u427dde50\" id=\"u427dde50\"><span data-lake-id=\"ub4f7af6b\" id=\"ub4f7af6b\">比Object.defineProperty()更多的语义的操作（get、set、delete）</span></li><li fid=\"u646fa933\" data-lake-id=\"u1d6205a1\" id=\"u1d6205a1\"><span data-lake-id=\"u1cc8c367\" id=\"u1cc8c367\">不用循环遍历对象，然后再使用 Object.defineProperty，Proxy可以代理对象内的所有属性</span></li><li fid=\"u646fa933\" data-lake-id=\"ua66c7727\" id=\"ua66c7727\"><span data-lake-id=\"u190716f4\" id=\"u190716f4\">Object.defineProperty() 只能劫持对象的属性（给对象新添加属性vue无法检测到）</span></li></ol><h4 data-lake-id=\"iZDxZ\" id=\"iZDxZ\"><span data-lake-id=\"u8eee8731\" id=\"u8eee8731\">局限性</span></h4><ol list=\"uac496115\"><li fid=\"ue4e40a95\" data-lake-id=\"u651a3c57\" id=\"u651a3c57\"><span data-lake-id=\"u86f50ac9\" id=\"u86f50ac9\">无法代理内部对象的内部插槽</span></li></ol><ol list=\"uac496115\" data-lake-indent=\"1\"><li fid=\"ue4e40a95\" data-lake-id=\"u491156d5\" id=\"u491156d5\"><span data-lake-id=\"ua2947343\" id=\"ua2947343\">许多内建对象，例如 Map、Set、Date、Promise等，都使用了所谓的“内部插槽“。</span></li></ol><p data-lake-id=\"ub3217798\" id=\"ub3217798\"><span data-lake-id=\"u81b15af0\" id=\"u81b15af0\">例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20map%20%3D%20new%20Map()%3B%5Cnlet%20proxy%20%3D%20new%20Proxy(map%2C%20%7B%7D)%3B%5Cnproxy.set('test'%2C%201)%3B%20%2F%2F%20Error%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mMMzq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udca9ad9e\" id=\"udca9ad9e\"><span data-lake-id=\"u01a30f3d\" id=\"u01a30f3d\">解决方法：在get时将get要返回的值先绑定目标对象后返回。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20map%20%3D%20new%20Map()%3B%5Cn%5Cnlet%20proxy%20%3D%20new%20Proxy(map%2C%20%7B%5Cn%20%20get(target%2C%20prop%2C%20receiver)%20%7B%5Cn%20%20%20%20let%20value%20%3D%20Reflect.get(...arguments)%3B%5Cnreturn%20typeof%20value%20%3D%3D%20'function'%20%3F%20value.bind(target)%20%3A%20value%3B%5Cn%20%20%7D%5Cn%7D)%3B%5Cn%5Cnproxy.set('test'%2C%201)%3B%5Cnalert(proxy.get('test'))%3B%20%2F%2F%201%EF%BC%88%E5%B7%A5%E4%BD%9C%E4%BA%86%EF%BC%81%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ztuNu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u3851937f\" start=\"2\"><li fid=\"u1bb58f40\" data-lake-id=\"u58716b61\" id=\"u58716b61\"><span data-lake-id=\"ud853b367\" id=\"ud853b367\">无法代理私有字段（同上）</span></li><li fid=\"u1bb58f40\" data-lake-id=\"uc05befd9\" id=\"uc05befd9\"><span data-lake-id=\"u628f7a54\" id=\"u628f7a54\">proxy != target代理对象和目标对象是不===的。</span></li></ol><h4 data-lake-id=\"FJbDY\" id=\"FJbDY\"><span data-lake-id=\"u4a48e7b3\" id=\"u4a48e7b3\">总结</span></h4><ul list=\"u4160982f\"><li fid=\"u3c451343\" data-lake-id=\"u0247bee1\" id=\"u0247bee1\"><span data-lake-id=\"u20a182ea\" id=\"u20a182ea\">Proxy是对象的包装器，将代理上的操作转发给对象，并可以选择捕获其中一些操作。</span></li><li fid=\"u3c451343\" data-lake-id=\"u7ea1e923\" id=\"u7ea1e923\"><span data-lake-id=\"uddfad6a2\" id=\"uddfad6a2\">可以包含任何类型的对象，包括类和函数。</span></li><li fid=\"u3c451343\" data-lake-id=\"u765525cf\" id=\"u765525cf\"><span data-lake-id=\"uad7f0491\" id=\"uad7f0491\">Reflect旨在补充Proxy，对于任意Proxy捕捉器，都有一个带有相同参数的Reflect调用，我们应该使用它们将调用转发给目标对象。</span></li></ul><h3 data-lake-id=\"R3arv\" id=\"R3arv\"><span data-lake-id=\"u4f36184f\" id=\"u4f36184f\">区别</span></h3><ol list=\"u556854b4\"><li fid=\"u6f8cd645\" data-lake-id=\"ubd71ef9d\" id=\"ubd71ef9d\"><span data-lake-id=\"uf67cd78d\" id=\"uf67cd78d\">Proxy是对整个对象的代理，而Object.defineProperty()只能代理某个属性</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2FProxy%5Cnvar%20target%20%3D%20%7B%5Cn%20%20%20%20a%3A1%2C%5Cn%20%20%20%20b%3A%7B%5Cn%20%20%20%20%20%20%20%20c%3A2%2C%5Cn%20%20%20%20%20%20%20%20d%3A%7Be%3A3%7D%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnvar%20handler%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E6%8D%95%E8%8E%B7%E5%99%A8%5Cn%20%20%20%20get%3Afunction(trapTarget%2Cprop%2Creceiver)%7B%5Cn%20%20%20%20%20%20%20%20console.log('%E8%A7%A6%E5%8F%91get%3A'%2Cprop)%5Cn%20%20%20%20%20%20%20%20return%20Reflect.get(trapTarget%2Cprop)%20%2F%2F%20%E5%8F%8D%E5%B0%84API%20%2F%2F%20%E5%8F%AA%E8%A6%81%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8A%E8%B0%83%E7%94%A8%EF%BC%8C%E6%89%80%E6%9C%89%E6%8D%95%E8%8E%B7%E5%99%A8%E9%83%BD%E4%BC%9A%E6%8B%A6%E6%88%AA%E5%AE%83%E4%BB%AC%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%8D%E5%B0%84API%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20set%3Afunction(trapTarget%2Ckey%2Cvalue%2Creceiver)%7B%5Cn%20%20%20%20%20%20%20%20console.log('%E8%A7%A6%E5%8F%91set%3A'%2Ckey%2Cvalue)%5Cn%20%20%20%20%20%20%20%20return%20Reflect.set(trapTarget%2Ckey%2Cvalue%2Creceiver)%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnconst%20proxy%20%3D%20new%20Proxy(target%2Chandler)%3B%5Cn%2F%2F%20%E8%AE%BF%E9%97%AE%5Cnproxy.b.c%3B%2F%2F%20%E8%A7%A6%E5%8F%91get%3A%20b%5Cnproxy.b.d.e%3B%2F%2F%20%E8%A7%A6%E5%8F%91get%3A%20b%20%2F%2F%E8%AF%B4%E6%98%8E%E9%83%BD%E4%B8%8D%E8%83%BD%E5%A4%9F%E9%81%8D%E5%8E%86%E5%88%B0%E6%B7%B1%E5%B1%82%E6%AC%A1%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BB%A3%E7%90%86%E6%9C%80%E5%A4%96%E5%B1%82%E5%B1%9E%E6%80%A7%5Cnconsole.log(proxy)%3B%2F%2F%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%202%2C%20d%3A%20%7B%20e%3A%203%20%7D%20%7D%20%7D%5Cn%5Cn%2F%2F%20Object.defineProperty%5Cnconst%20obj%20%3D%20%7B%7D%5CnObject.defineProperty(obj%2C'name'%2C%7B%5Cn%20%20%20%20value%3A'%E5%BC%A0%E4%B8%89'%5Cn%7D)%5Cnconsole.log(obj.name)%20%2F%2F%20'%E5%BC%A0%E4%B8%89'%5Cnobj.name%20%3D%20'%E6%9D%8E%E5%9B%9B'%20%2F%2F%20%E7%BB%99obj.name%E8%B5%8B%E6%96%B0%E5%80%BC%5Cnconsole.log(obj.name)%20%2F%2F%20%E5%BC%A0%E4%B8%89%20%20%2F%2F%E9%BB%98%E8%AE%A4writable%E4%B8%BAfalse%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%8F%AF%E6%94%B9%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QM15t%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u5b787f26\" start=\"2\"><li fid=\"uac14c9cf\" data-lake-id=\"u50038dcb\" id=\"u50038dcb\"><span data-lake-id=\"u69d5f6e2\" id=\"u69d5f6e2\">对象上新增属性和数组新增修改，Proxy可以监听到，Object.defineProperty()不能（Vue2中）</span></li><li fid=\"uac14c9cf\" data-lake-id=\"u890f1e15\" id=\"u890f1e15\"><span data-lake-id=\"ufbd2bba1\" id=\"ufbd2bba1\">若对象内部属性要全部递归代理，Proxy可以只在调用时递归，而Object.defineProperty()需要一次性完成所有递归，性能比Proxy差。</span></li></ol><p data-lake-id=\"ud93ebf79\" id=\"ud93ebf79\"><span data-lake-id=\"ua69837da\" id=\"ua69837da\">假如对象嵌套层级比较深的话，每一次都需要循环遍历（采用递归代理）。</span></p><ol list=\"uf331543f\" start=\"4\"><li fid=\"u871e9952\" data-lake-id=\"uf618d9c5\" id=\"uf618d9c5\"><span data-lake-id=\"u5e8b3a90\" id=\"u5e8b3a90\">Proxy只在现代浏览器采用，不兼容IE，Object.defineProperty()不兼容IE8及以下</span></li><li fid=\"u871e9952\" data-lake-id=\"ud2521c72\" id=\"ud2521c72\"><span data-lake-id=\"u541614a0\" id=\"u541614a0\">如果Object.defineProperty遍历到对象不存在的属性时，它是检测不到变化的。</span></li></ol><h2 data-lake-id=\"ZSmmP\" id=\"ZSmmP\"><span data-lake-id=\"u632442c2\" id=\"u632442c2\">Vue2 和 Vue3 代理基础架构对比</span></h2><h3 data-lake-id=\"kJjTo\" id=\"kJjTo\"><span data-lake-id=\"uc639c0c9\" id=\"uc639c0c9\">Vue2中的defineProperty基础架构</span></h3><p data-lake-id=\"u5800efa0\" id=\"u5800efa0\"><span data-lake-id=\"u4282a64a\" id=\"u4282a64a\">假如我们定义考了一个defineProperty()函数来实现代理映射的效果，里面包含了get和set方法，如果触发了get方法，那么直接映射源数据value；</span></p><p data-lake-id=\"ua32eaa6a\" id=\"ua32eaa6a\"><span data-lake-id=\"ube0bc0c6\" id=\"ube0bc0c6\">如果触发了set方法，那么先判断新的数据是否等于原来的数据，这样做是为了避免无效更新视图层，减少性能损耗。</span></p><p data-lake-id=\"u983918bf\" id=\"u983918bf\"><span data-lake-id=\"ufdfa128d\" id=\"ufdfa128d\">如果不等于源数据，那么就将newValue更新赋值给value。</span></p><p data-lake-id=\"u9713346d\" id=\"u9713346d\"><span data-lake-id=\"ud398f073\" id=\"ud398f073\">然后再更新视图层，这样就实现了最基本的响应式数据。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%5Cn%7D%5Cn%5Cnfunction%20defineReactive(target%2Ckey%2Cvalue)%20%7B%5Cn%20%20%20%20Object.defineProperty(target%2Ckey%2C%7B%5Cn%20%20%20%20%20%20%20%20get()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20value%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set(newValue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(newValue%20!%3D%3Dvalue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20value%20%3D%20newValue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E5%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%7D%5Cn%5Cnfor%20(let%20key%20in%20dinner)%7B%5Cn%20%20%20%20defineReactive(dinner%2Ckey%2Cdinner%5Bkey%5D)%5Cn%7D%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%89%8D'%2Cdinner.meal)%20%2F%2Fset%E4%B9%8B%E5%89%8D%20tacos%5Cn%5Cndinner.meal%20%3D%20'changed'%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%90%8E'%2Cdinner.meal)%20%2F%2Fset%E4%B9%8B%E5%90%8E%20changed%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zHFim%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Xlt6o\" id=\"Xlt6o\"><span data-lake-id=\"ue88f8818\" id=\"ue88f8818\">Vue3 中的Proxy基础架构</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%5Cn%7D%5Cn%5Cnconst%20handler%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E7%9A%84key%E6%8C%87%E7%9A%84%E6%98%AF%E8%AE%BF%E9%97%AE%E7%9A%84property%5Cn%20%20%20%20get(target%2Ckey)%7B%5Cn%20%20%20%20%20%20%20%20return%20target%5Bkey%5D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20set(target%2Ckey%2Cvalue)%7B%5Cn%20%20%20%20%20%20%20%20target%5Bkey%5D%20%3D%20value%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnconst%20proxy%20%3D%20new%20Proxy(dinner%2Chandler)%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%89%8D'%2Cproxy.meal)%2F%2Fset%E4%B9%8B%E5%89%8D%20tacos%5Cn%5Cnproxy.meal%20%3D%20'changed'%5Cn%5Cnconsole.log('set%E4%B9%8B%E5%90%8E'%2Cproxy.meal)%2F%2Fset%E4%B9%8B%E5%90%8E%20changed%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OYgLV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u247e17ca\" id=\"u247e17ca\"><span data-lake-id=\"u9049fc79\" id=\"u9049fc79\">可以看到都能实现响应式数据变化。</span></p><p data-lake-id=\"ud80d5867\" id=\"ud80d5867\"><span data-lake-id=\"u7065a9b1\" id=\"u7065a9b1\">但是，我们考虑到如果是多层嵌套或者数组时，更改一下defineProperty中的例子：</span></p><p data-lake-id=\"u4907ab30\" id=\"u4907ab30\"><span data-lake-id=\"u74480e8d\" id=\"u74480e8d\">把原对象变为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20dinner%20%3D%20%7B%5Cn%20%20%20%20meal%3A'tacos'%2C%5Cn%20%20%20%20a%3A%7B%5Cn%20%20%20%20%20%20%20%20b%3A%5B1%2C2%2C3%5D%2C%5Cn%20%20%20%20%20%20%20%20c%3A%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20d%3A''%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e%3A''%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CJhBw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u680fc41e\" id=\"u680fc41e\"><span data-lake-id=\"u8feea80a\" id=\"u8feea80a\">那么在层级比较深并且包含数组的情况下，该如何实现响应式呢？</span></p><p data-lake-id=\"ueedd28b3\" id=\"ueedd28b3\"><span data-lake-id=\"u71119b27\" id=\"u71119b27\">此时，我们需要一个observer来观测value的类型，再决定遍历的方式和次数。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20observer(target)%7B%5Cn%20%20%20%20if(typeof%20target%20!%3D%3D%20'object'%7C%7Ctarget%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20return%20target%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if(Array.isArray(target))%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E7%BB%99%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E4%BA%86%E9%87%8D%E5%86%99%5Cn%20%20%20%20%20%20%20%20Object.setPrototypeOf(target%2Cproto)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2Ftarget.__proto__%20%3D%20proto%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D0%3Bi%3Ctarget.length%3Bi%2B%2B)%7B%7D%5Cn%20%20%20%20%20%20%20%20observer(target%5Bi%5D)%3B%5Cn%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E8%BF%9B%E8%A1%8C%E5%B1%82%E5%B1%82%E9%80%92%E5%BD%92%5Cn%20%20%20%20%20%20%20%20for%20(let%20key%20in%20target)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20defineReactive(target%2Ckey%2Ctarget%5Bkey%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cnfunction%20defineReactive(target%2Ckey%2Cvalue)%20%7B%5Cn%20%20%20%20%2F%2F%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%EF%BC%8C%E7%BB%A7%E7%BB%AD%E6%8B%A6%E6%88%AA%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20observer(value)%3B%5Cn%20%20%20%20Object.defineProperty((target%2Ckey%2C%7B%5Cn%20%20%20%20%20%20%20%20get()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20value%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set(newValue)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(newValue!%3D%3Dvalue)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20observer(newValue)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20updateView%20%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20value%20%3D%20newValue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22j9Mwm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ucbbd6b22\" id=\"ucbbd6b22\"><p data-lake-id=\"u24eb034a\" id=\"u24eb034a\"><span data-lake-id=\"u72f022c0\" id=\"u72f022c0\">这里可以看出defineProperty的缺点，在重写的defineReactive方法里，显然性能损耗基本上是在observer上。</span></p><p data-lake-id=\"u34231243\" id=\"u34231243\"><span data-lake-id=\"ubca13c9b\" id=\"ubca13c9b\">而在Vue3中的Proxy可以很好的解决上面的问题。</span></p></blockquote><h2 data-lake-id=\"J6qte\" id=\"J6qte\"><span data-lake-id=\"ubb52de17\" id=\"ubb52de17\">总结</span></h2><p data-lake-id=\"ubd40a657\" id=\"ubd40a657\"><span data-lake-id=\"ubfbf2069\" id=\"ubfbf2069\">相同点：二者都可以对属性进行代理。</span></p><p data-lake-id=\"u284ea597\" id=\"u284ea597\"><span data-lake-id=\"ua6a2d68c\" id=\"ua6a2d68c\">不同点：</span></p><ol list=\"ucc9bc7c6\"><li fid=\"u08e110c2\" data-lake-id=\"u117d226c\" id=\"u117d226c\"><span data-lake-id=\"uf6a36ea3\" id=\"uf6a36ea3\">代理的粒度不同：defineProperty只能代理对象的属性，Proxy代理的是对象。</span></li></ol><ul list=\"ucb5dff45\"><li fid=\"u0a75b5c9\" data-lake-id=\"ud3b0f223\" id=\"ud3b0f223\"><span data-lake-id=\"u147815fc\" id=\"u147815fc\">如果想代理对象的所有属性，defineProperty需要遍历属性一个个加setter和getter。</span></li><li fid=\"u0a75b5c9\" data-lake-id=\"uf73ece31\" id=\"uf73ece31\"><span data-lake-id=\"u47101db6\" id=\"u47101db6\">而Proxy只需要配置一个可以获取属性名参数的函数即可。</span></li><li fid=\"u0a75b5c9\" data-lake-id=\"ubb2d3ae3\" id=\"ubb2d3ae3\"><span data-lake-id=\"u24e3309d\" id=\"u24e3309d\">如果出现嵌套的函数，Proxy也是要递归进行代理的，但可以做惰性代理（按需代理），即用到嵌套对象时再创建对应的Proxy。</span></li></ul><ol list=\"u9ddce4c7\" start=\"2\"><li fid=\"ub8e017e2\" data-lake-id=\"u241d9e86\" id=\"u241d9e86\"><span data-lake-id=\"uc7038e6a\" id=\"uc7038e6a\">是否破坏原对象。</span></li></ol><p data-lake-id=\"u970e0e58\" id=\"u970e0e58\" style=\"text-indent: 2em\"><strong><span data-lake-id=\"uf41c5c1c\" id=\"uf41c5c1c\">defineProperty的代理行为是在破坏原对象的基础上实现的</span></strong><span data-lake-id=\"ucc08d914\" id=\"ucc08d914\">，它通常会将原来的value变成了setter和getter。</span></p><p data-lake-id=\"ud0e46554\" id=\"ud0e46554\" style=\"text-indent: 2em\"><strong><span data-lake-id=\"ufb16cbf8\" id=\"ufb16cbf8\">Proxy则不会破坏原对象</span></strong><span data-lake-id=\"u3d06b92d\" id=\"u3d06b92d\">，只是在原对象上覆盖了一层。当新增属性时，希望属性被代理，defineProperty需要显式调用该API，而Proxy则可以直接用</span><code data-lake-id=\"u47fade2b\" id=\"u47fade2b\"><span data-lake-id=\"ud3397d9d\" id=\"ud3397d9d\">obj.key = val</span></code><span data-lake-id=\"u51345bc3\" id=\"u51345bc3\">的形式。</span></p><p data-lake-id=\"uc34eae52\" id=\"uc34eae52\" style=\"text-indent: 2em\"><span data-lake-id=\"u276833db\" id=\"u276833db\">Proxy返回的是一个新的对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。</span></p><ol list=\"ucbc980a9\" start=\"3\"><li fid=\"u05b1e757\" data-lake-id=\"ud6ec56ef\" id=\"ud6ec56ef\"><span data-lake-id=\"uc3521305\" id=\"uc3521305\">代理数组属性</span></li></ol><p data-lake-id=\"u9e02f4e0\" id=\"u9e02f4e0\" style=\"text-indent: 2em\"><span data-lake-id=\"u0899776c\" id=\"u0899776c\">defineProperty只能代理常规对象，不适合监听数组属性，因为数组长度可能很大，比如几百万，一个个对索引使用defineProperty是无法接受的。</span></p><ul list=\"u25f5cd3c\"><li fid=\"u9bf7a9c7\" data-lake-id=\"u92863efd\" id=\"u92863efd\"><span data-lake-id=\"u34da0989\" id=\"u34da0989\">一种方法是重写数组的API方法（比如splice），通过它们来实现代理，但它是有缺陷的：直接用arr[1] = 100无法触发代理。（Vue2做法）</span></li><li fid=\"u9bf7a9c7\" data-lake-id=\"uec12cc06\" id=\"uec12cc06\"><span data-lake-id=\"u13ed8180\" id=\"u13ed8180\">另外，我们无法对数组的length做代理。这暴露了defineProperty的一个缺陷：</span><strong><span data-lake-id=\"u6dae5431\" id=\"u6dae5431\">设置了configurable为false的属性无法进行代理。</span></strong><span data-lake-id=\"u42544bce\" id=\"u42544bce\">数组的length就是这种情况。</span></li></ul><p data-lake-id=\"u968d8de5\" id=\"u968d8de5\" style=\"text-indent: 2em\"><span data-lake-id=\"u4177769c\" id=\"u4177769c\">Proxy则没有这个问题，它只需要设置一个setter和getter，在属性变化时，能够在函数参数上拿到索引值。</span><strong><span data-lake-id=\"ud88b9ef9\" id=\"ud88b9ef9\">它可以代理任何对象（函数、数组、类），不能代理内部对象的内部插槽。</span></strong></p><ol list=\"ua19d195d\" start=\"4\"><li fid=\"u631dd408\" data-lake-id=\"u4e369dc4\" id=\"u4e369dc4\"><span data-lake-id=\"u795dc790\" id=\"u795dc790\">代理范围：defineProperty只能代理属性的get和set。</span></li></ol><p data-lake-id=\"u55f97e9e\" id=\"u55f97e9e\" style=\"text-indent: 2em\"><span data-lake-id=\"u09244ded\" id=\"u09244ded\">Proxy还能代理其他的行为，比如delete和handler.getPropertypeOf()等方法。</span></p><ol list=\"ub4605acc\" start=\"5\"><li fid=\"u36642516\" data-lake-id=\"u7b51069d\" id=\"u7b51069d\"><span data-lake-id=\"u92120c92\" id=\"u92120c92\">兼容性：Proxy是ES6新增的特性，兼容性不如 defineProperty。</span></li></ol><p data-lake-id=\"u82bb8790\" id=\"u82bb8790\" style=\"text-indent: 2em\"><span data-lake-id=\"ucc29ff64\" id=\"ucc29ff64\">IE不支持Proxy。</span></p><p data-lake-id=\"ue4471776\" id=\"ue4471776\" style=\"text-indent: 2em\"><span data-lake-id=\"uc0b71d2a\" id=\"uc0b71d2a\">且Proxy不能被</span><a href=\"https://blog.csdn.net/sujinchang939024/article/details/118498394\" target=\"_blank\" data-lake-id=\"u00ca8186\" id=\"u00ca8186\"><span data-lake-id=\"u86c5d71c\" id=\"u86c5d71c\">polyfill</span></a><span data-lake-id=\"u0cfe9b92\" id=\"u0cfe9b92\">磨平，因为它是在编程语言层面上的修改。</span></p><p data-lake-id=\"u2cce08eb\" id=\"u2cce08eb\" style=\"text-indent: 2em\"><span data-lake-id=\"u7dec63b8\" id=\"u7dec63b8\">Proxy还有一些性能问题，但作为标准，浏览器会持续做重点性能优化。</span></p><p data-lake-id=\"ubf0e5b31\" id=\"ubf0e5b31\" style=\"text-indent: 2em\"><span data-lake-id=\"u88914efd\" id=\"u88914efd\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-08T08:26:16.000Z",
    "deleted_at": null,
    "created_at": "2022-12-08T05:54:39.000Z",
    "updated_at": "2022-12-08T08:26:16.000Z",
    "published_at": "2022-12-08T08:26:16.000Z",
    "first_published_at": "2022-12-08T06:58:28.021Z",
    "word_count": 2953,
    "cover": null,
    "description": "--- title: Object.defineProperty和Proxy区别categories: Vuedate: 2022-11-18updated: 2022-11-18tags: Vuecover: https://cdn.jsdelivr.net/gh/coder-fang/my...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 108739479,
    "slug": "sts9i9aa18rsgy5u",
    "title": "Vue 响应式原理和双向绑定原理区分",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: Vue 响应式原理和双向绑定原理区分<br />categories: Vue<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: Vue<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208162638.png<br />--- \n<a name=\"hx5ew\"></a>\n# 数据响应式原理\n通过**数据劫持结合发布-订阅者模式**的方式来实现的。<br />Vue内部通过Object.defineProperty() 监听对象属性的改变，它有对应的两个描述属性get和set，当数据发生改变后，通过此方法对两个属性进行重写操作，从而通过发布-订阅者模式通知界面发生改变。<br />Vue2 是借助Object.defineProperty() 实现的，而Vue3 是借助Proxy实现的，通过Proxy对象创建一个对象的代理，并且Proxy的监听是深层次的，监听整个对象，而不是某个属性。<br /> **发布-订阅者模式：**<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208120909.png)\n\n1. new Vue() 首先执行初始化，对data执行响应化处理，此过程发生在Observer中\n2. compiler对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图\n3. 由于data的某个key在一个视图中可能出现多次，所以每个key都需要一个管家Dep来管理多个Watcher\n4. 同时定义一个更新函数 update()和Watcher，将来对应数据变化时Watcher会调用更新函数。\n5. 一旦data中数据发生变化，会首先找到对应的Dep，通知所有的Watcher执行更新函数，然后更新视图。 \n<a name=\"PEasO\"></a>\n### Vue2 的实现：\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    //拦截get，当我们访问data.key时会被这个方法拦截到\n    get: function getter () {\n        //我们在这里收集依赖\n        return obj[key];\n    },\n    //拦截set，当我们为data.key赋值时会被这个方法拦截到\n    set: function setter (newVal) {\n        //当数据变更时，通知依赖项变更UI\n    } \n})\n```\n\n- 通过Object.defineProperty() 为对象obj添加属性，可以设置对象属性的getter和setter函数。\n- 之后我们每次通过点语法获取属性都会执行这里的getter函数，此函数中我们把调用此属性的依赖收集到一个集合中；\n- 而在我们给属性赋值时（修改属性），会触发这里定义的setter函数，在此函数中会去通知集合中的依赖更新，做到数据驱动视图更新。\n<a name=\"auYEq\"></a>\n### Vue3 的实现：\nVue3与Vue2的核心思想一致，不过数据的劫持使用的是Proxy而不是Object.defineProperty() ，只不过Proxy相比Object.defineProperty() 在处理数组和新增属性的响应式处理上更加方便。\n```javascript\nlet nObj=new Proxy(obj,{\n  //拦截get，当我们访问nObj.key时会被这个方法拦截到\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  //拦截set，当我们为nObj.key赋值时会被这个方法拦截到\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n})\n```\n<a name=\"QNIq1\"></a>\n# 数据双向绑定原理\n可以通过v-model和修饰符.sync两种方式实现，像在组件中使用v-model就属于双向绑定。<br />v-model本质是：\n\n1. 将动态的data通过value属性传递给input显示\n2. 给input标签绑定input监听，一旦输入改变，读取最新的值保存到data对应属性上\n\n双向绑定由三个重要部分构成：\n\n- 数据层（Model）：页面渲染所需要的数据\n- 视图层（View）：所呈现出的页面\n- 业务逻辑层（ViewModel）：框架封装的核心；重要职责：数据变化后更新视图，视图变化后更新数据。\n<a name=\"KRJb8\"></a>\n### 使用Object.defineProperty()实现双向绑定\n```javascript\n<body>\n    hello,world\n    <input type=\"text\" id=\"model\" oninput=\"handleChange()\" />\n    <p id=\"word\"></p>\n</body>\n<script>\n    // TODO  双向数据绑定：页面中输入框中用户输入变化时其它控件中内容也跟着变化\n    let input = document.getElementById(\"model\");\n    let p = document.getElementById(\"word\");\n    let data = {};\n    Object.defineProperty(data, \"val\", {\n        set: function(newVal) {\n            val = newVal;\n            input.value = val;\n            p.innerHTML = val;\n        },\n        get: function() {\n            return val;\n        },\n    });\n\n    function handleChange() {\n        data.val = input.value; // 触发set\n    }\n</script>\n```\n效果：在输入内框内输入内容，下方数据会相应改变。<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208124835.png)\n<a name=\"RF4WP\"></a>\n### 使用Proxy实现响应式\n```javascript\n<button>click me</button>\n<script>\n    const btn = document.querySelector(\"button\");\n\n    const obj = {\n        naisu: 233\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            btn.innerText = `Naisu is ${target[property]}.`; // 值在改变的同时更新视图\n            return true;\n        },\n        // 注意target属性操作使用[]\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    btn.onclick = () => {\n        objProxy.naisu = objProxy.naisu + 1; // 在真正操作时只要关系数据就行\n    };\n</script>\n```\n![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125406.png)<br />好处：数据驱动视图，之后操作关心数据本身即可，无需因为数据改变去手动操作视图了。\n<a name=\"YUrVm\"></a>\n### Proxy实现数据双向绑定\n```javascript\n<body>\n    hello,world\n    <input type=\"text\" id=\"model\" oninput=\"inputHandler()\" />\n    <p id=\"word\"></p>\n</body>\n<script>\n    // TODO  ES6实现\n    const input = document.getElementById(\"model\");\n    const p = document.getElementById(\"word\");\n    const obj = {\n        naisu: 233,\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            p.innerHTML = `Naisu is ${target[property]}`;\n            return true;\n        },\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    function inputHandler() {\n        objProxy.naisu = input.value; // 输入事件中改变代理对象属性值\n    }\n</script>\n```\n![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125431.png)\n",
    "body_draft": "--- <br />title: Vue 响应式原理和双向绑定原理区分<br />categories: Vue<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: Vue<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208162638.png<br />--- \n<a name=\"hx5ew\"></a>\n# 数据响应式原理\n通过**数据劫持结合发布-订阅者模式**的方式来实现的。<br />Vue内部通过Object.defineProperty() 监听对象属性的改变，它有对应的两个描述属性get和set，当数据发生改变后，通过此方法对两个属性进行重写操作，从而通过发布-订阅者模式通知界面发生改变。<br />Vue2 是借助Object.defineProperty() 实现的，而Vue3 是借助Proxy实现的，通过Proxy对象创建一个对象的代理，并且Proxy的监听是深层次的，监听整个对象，而不是某个属性。<br /> **发布-订阅者模式：**<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208120909.png)\n\n1. new Vue() 首先执行初始化，对data执行响应化处理，此过程发生在Observer中\n2. compiler对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图\n3. 由于data的某个key在一个视图中可能出现多次，所以每个key都需要一个管家Dep来管理多个Watcher\n4. 同时定义一个更新函数 update()和Watcher，将来对应数据变化时Watcher会调用更新函数。\n5. 一旦data中数据发生变化，会首先找到对应的Dep，通知所有的Watcher执行更新函数，然后更新视图。 \n<a name=\"PEasO\"></a>\n### Vue2 的实现：\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    //拦截get，当我们访问data.key时会被这个方法拦截到\n    get: function getter () {\n        //我们在这里收集依赖\n        return obj[key];\n    },\n    //拦截set，当我们为data.key赋值时会被这个方法拦截到\n    set: function setter (newVal) {\n        //当数据变更时，通知依赖项变更UI\n    } \n})\n```\n\n- 通过Object.defineProperty() 为对象obj添加属性，可以设置对象属性的getter和setter函数。\n- 之后我们每次通过点语法获取属性都会执行这里的getter函数，此函数中我们把调用此属性的依赖收集到一个集合中；\n- 而在我们给属性赋值时（修改属性），会触发这里定义的setter函数，在此函数中会去通知集合中的依赖更新，做到数据驱动视图更新。\n<a name=\"auYEq\"></a>\n### Vue3 的实现：\nVue3与Vue2的核心思想一致，不过数据的劫持使用的是Proxy而不是Object.defineProperty() ，只不过Proxy相比Object.defineProperty() 在处理数组和新增属性的响应式处理上更加方便。\n```javascript\nlet nObj=new Proxy(obj,{\n  //拦截get，当我们访问nObj.key时会被这个方法拦截到\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  //拦截set，当我们为nObj.key赋值时会被这个方法拦截到\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n})\n```\n<a name=\"QNIq1\"></a>\n# 数据双向绑定原理\n可以通过v-model和修饰符.sync两种方式实现，像在组件中使用v-model就属于双向绑定。<br />v-model本质是：\n\n1. 将动态的data通过value属性传递给input显示\n2. 给input标签绑定input监听，一旦输入改变，读取最新的值保存到data对应属性上\n\n双向绑定由三个重要部分构成：\n\n- 数据层（Model）：页面渲染所需要的数据\n- 视图层（View）：所呈现出的页面\n- 业务逻辑层（ViewModel）：框架封装的核心；重要职责：数据变化后更新视图，视图变化后更新数据。\n<a name=\"KRJb8\"></a>\n### 使用Object.defineProperty()实现双向绑定\n```javascript\n<body>\n    hello,world\n    <input type=\"text\" id=\"model\" oninput=\"handleChange()\" />\n    <p id=\"word\"></p>\n</body>\n<script>\n    // TODO  双向数据绑定：页面中输入框中用户输入变化时其它控件中内容也跟着变化\n    let input = document.getElementById(\"model\");\n    let p = document.getElementById(\"word\");\n    let data = {};\n    Object.defineProperty(data, \"val\", {\n        set: function(newVal) {\n            val = newVal;\n            input.value = val;\n            p.innerHTML = val;\n        },\n        get: function() {\n            return val;\n        },\n    });\n\n    function handleChange() {\n        data.val = input.value; // 触发set\n    }\n</script>\n```\n效果：在输入内框内输入内容，下方数据会相应改变。<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208124835.png)\n<a name=\"RF4WP\"></a>\n### 使用Proxy实现响应式\n```javascript\n<button>click me</button>\n<script>\n    const btn = document.querySelector(\"button\");\n\n    const obj = {\n        naisu: 233\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            btn.innerText = `Naisu is ${target[property]}.`; // 值在改变的同时更新视图\n            return true;\n        },\n        // 注意target属性操作使用[]\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    btn.onclick = () => {\n        objProxy.naisu = objProxy.naisu + 1; // 在真正操作时只要关系数据就行\n    };\n</script>\n```\n![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125406.png)<br />好处：数据驱动视图，之后操作关心数据本身即可，无需因为数据改变去手动操作视图了。\n<a name=\"YUrVm\"></a>\n### Proxy实现数据双向绑定\n```javascript\n<body>\n    hello,world\n    <input type=\"text\" id=\"model\" oninput=\"inputHandler()\" />\n    <p id=\"word\"></p>\n</body>\n<script>\n    // TODO  ES6实现\n    const input = document.getElementById(\"model\");\n    const p = document.getElementById(\"word\");\n    const obj = {\n        naisu: 233,\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            p.innerHTML = `Naisu is ${target[property]}`;\n            return true;\n        },\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    function inputHandler() {\n        objProxy.naisu = input.value; // 输入事件中改变代理对象属性值\n    }\n</script>\n```\n![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125431.png)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf30e0ee4\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: Vue 响应式原理和双向绑定原理区分</span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: Vue</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-18</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-18</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: Vue</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208162638.png</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h1 id=\"hx5ew\"><span class=\"ne-text\">数据响应式原理</span></h1><p id=\"u38e54592\" class=\"ne-p\"><span class=\"ne-text\">通过</span><strong><span class=\"ne-text\">数据劫持结合发布-订阅者模式</span></strong><span class=\"ne-text\">的方式来实现的。</span></p><p id=\"uaceb099e\" class=\"ne-p\"><span class=\"ne-text\">Vue内部通过Object.defineProperty() 监听对象属性的改变，它有对应的两个描述属性get和set，当数据发生改变后，通过此方法对两个属性进行重写操作，从而通过发布-订阅者模式通知界面发生改变。</span></p><p id=\"u52eb6ca4\" class=\"ne-p\"><span class=\"ne-text\">Vue2 是借助Object.defineProperty() 实现的，而Vue3 是借助Proxy实现的，通过Proxy对象创建一个对象的代理，并且Proxy的监听是深层次的，监听整个对象，而不是某个属性。</span></p><p id=\"u79ff661b\" class=\"ne-p\"><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">发布-订阅者模式：</span></strong></p><p id=\"u482897f1\" class=\"ne-p\"><span class=\"ne-text\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208120909.png)</span></p><ol class=\"ne-ol\"><li id=\"uba2f98ae\"><span class=\"ne-text\">new Vue() 首先执行初始化，对data执行响应化处理，此过程发生在Observer中</span></li><li id=\"u8deb1661\"><span class=\"ne-text\">compiler对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图</span></li><li id=\"u05ea8a08\"><span class=\"ne-text\">由于data的某个key在一个视图中可能出现多次，所以每个key都需要一个管家Dep来管理多个Watcher</span></li><li id=\"ua198e876\"><span class=\"ne-text\">同时定义一个更新函数 update()和Watcher，将来对应数据变化时Watcher会调用更新函数。</span></li><li id=\"uec27f2e8\"><span class=\"ne-text\">一旦data中数据发生变化，会首先找到对应的Dep，通知所有的Watcher执行更新函数，然后更新视图。 </span></li></ol><h3 id=\"PEasO\"><span class=\"ne-text\">Vue2 的实现：</span></h3><pre data-language=\"javascript\" id=\"uzEsG\" class=\"ne-codeblock language-javascript\">Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    //拦截get，当我们访问data.key时会被这个方法拦截到\n    get: function getter () {\n        //我们在这里收集依赖\n        return obj[key];\n    },\n    //拦截set，当我们为data.key赋值时会被这个方法拦截到\n    set: function setter (newVal) {\n        //当数据变更时，通知依赖项变更UI\n    } \n})</pre><ul class=\"ne-ul\"><li id=\"uf8287275\"><span class=\"ne-text\">通过Object.defineProperty() 为对象obj添加属性，可以设置对象属性的getter和setter函数。</span></li><li id=\"ua9174cd9\"><span class=\"ne-text\">之后我们每次通过点语法获取属性都会执行这里的getter函数，此函数中我们把调用此属性的依赖收集到一个集合中；</span></li><li id=\"ua473db3d\"><span class=\"ne-text\">而在我们给属性赋值时（修改属性），会触发这里定义的setter函数，在此函数中会去通知集合中的依赖更新，做到数据驱动视图更新。</span></li></ul><h3 id=\"auYEq\"><span class=\"ne-text\">Vue3 的实现：</span></h3><p id=\"u13a9b44c\" class=\"ne-p\"><span class=\"ne-text\">Vue3与Vue2的核心思想一致，不过数据的劫持使用的是Proxy而不是Object.defineProperty() ，只不过Proxy相比Object.defineProperty() 在处理数组和新增属性的响应式处理上更加方便。</span></p><pre data-language=\"javascript\" id=\"a17np\" class=\"ne-codeblock language-javascript\">let nObj=new Proxy(obj,{\n  //拦截get，当我们访问nObj.key时会被这个方法拦截到\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  //拦截set，当我们为nObj.key赋值时会被这个方法拦截到\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n})</pre><h1 id=\"QNIq1\"><span class=\"ne-text\">数据双向绑定原理</span></h1><p id=\"u0e5c0d61\" class=\"ne-p\"><span class=\"ne-text\">可以通过v-model和修饰符.sync两种方式实现，像在组件中使用v-model就属于双向绑定。</span></p><p id=\"u1f8b5cc5\" class=\"ne-p\"><span class=\"ne-text\">v-model本质是：</span></p><ol class=\"ne-ol\"><li id=\"u6fa361f2\"><span class=\"ne-text\">将动态的data通过value属性传递给input显示</span></li><li id=\"uf39027fe\"><span class=\"ne-text\">给input标签绑定input监听，一旦输入改变，读取最新的值保存到data对应属性上</span></li></ol><p id=\"u4f881fe8\" class=\"ne-p\"><span class=\"ne-text\">双向绑定由三个重要部分构成：</span></p><ul class=\"ne-ul\"><li id=\"u084bcf46\"><span class=\"ne-text\">数据层（Model）：页面渲染所需要的数据</span></li><li id=\"u3deb863f\"><span class=\"ne-text\">视图层（View）：所呈现出的页面</span></li><li id=\"ufd64bf82\"><span class=\"ne-text\">业务逻辑层（ViewModel）：框架封装的核心；重要职责：数据变化后更新视图，视图变化后更新数据。</span></li></ul><h3 id=\"KRJb8\"><span class=\"ne-text\">使用Object.defineProperty()实现双向绑定</span></h3><pre data-language=\"javascript\" id=\"TMRfm\" class=\"ne-codeblock language-javascript\">&lt;body&gt;\n    hello,world\n    &lt;input type=&quot;text&quot; id=&quot;model&quot; oninput=&quot;handleChange()&quot; /&gt;\n    &lt;p id=&quot;word&quot;&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    // TODO  双向数据绑定：页面中输入框中用户输入变化时其它控件中内容也跟着变化\n    let input = document.getElementById(&quot;model&quot;);\n    let p = document.getElementById(&quot;word&quot;);\n    let data = {};\n    Object.defineProperty(data, &quot;val&quot;, {\n        set: function(newVal) {\n            val = newVal;\n            input.value = val;\n            p.innerHTML = val;\n        },\n        get: function() {\n            return val;\n        },\n    });\n\n    function handleChange() {\n        data.val = input.value; // 触发set\n    }\n&lt;/script&gt;</pre><p id=\"u07cf3706\" class=\"ne-p\"><span class=\"ne-text\">效果：在输入内框内输入内容，下方数据会相应改变。</span></p><p id=\"u321b6558\" class=\"ne-p\"><span class=\"ne-text\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208124835.png)</span></p><h3 id=\"RF4WP\"><span class=\"ne-text\">使用Proxy实现响应式</span></h3><pre data-language=\"javascript\" id=\"jbcFv\" class=\"ne-codeblock language-javascript\">&lt;button&gt;click me&lt;/button&gt;\n&lt;script&gt;\n    const btn = document.querySelector(&quot;button&quot;);\n\n    const obj = {\n        naisu: 233\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            btn.innerText = `Naisu is ${target[property]}.`; // 值在改变的同时更新视图\n            return true;\n        },\n        // 注意target属性操作使用[]\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    btn.onclick = () =&gt; {\n        objProxy.naisu = objProxy.naisu + 1; // 在真正操作时只要关系数据就行\n    };\n&lt;/script&gt;</pre><p id=\"u970349b1\" class=\"ne-p\"><span class=\"ne-text\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125406.png)</span></p><p id=\"uffdaf5de\" class=\"ne-p\"><span class=\"ne-text\">好处：数据驱动视图，之后操作关心数据本身即可，无需因为数据改变去手动操作视图了。</span></p><h3 id=\"YUrVm\"><span class=\"ne-text\">Proxy实现数据双向绑定</span></h3><pre data-language=\"javascript\" id=\"dW5MI\" class=\"ne-codeblock language-javascript\">&lt;body&gt;\n    hello,world\n    &lt;input type=&quot;text&quot; id=&quot;model&quot; oninput=&quot;inputHandler()&quot; /&gt;\n    &lt;p id=&quot;word&quot;&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    // TODO  ES6实现\n    const input = document.getElementById(&quot;model&quot;);\n    const p = document.getElementById(&quot;word&quot;);\n    const obj = {\n        naisu: 233,\n    };\n    const handler = {\n        get: function(target, property, receiver) {\n            return target[property];\n        },\n        set: function(target, property, value, receiver) {\n            target[property] = value;\n            p.innerHTML = `Naisu is ${target[property]}`;\n            return true;\n        },\n    };\n    const objProxy = new Proxy(obj, handler);\n\n    function inputHandler() {\n        objProxy.naisu = input.value; // 输入事件中改变代理对象属性值\n    }\n&lt;/script&gt;</pre><p id=\"u90ea0fe0\" class=\"ne-p\"><span class=\"ne-text\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125431.png)</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uf30e0ee4\" id=\"uf30e0ee4\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: Vue 响应式原理和双向绑定原理区分</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: Vue</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208162638.png</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h1 data-lake-id=\"hx5ew\" id=\"hx5ew\"><span data-lake-id=\"uf4642cb4\" id=\"uf4642cb4\">数据响应式原理</span></h1><p data-lake-id=\"u38e54592\" id=\"u38e54592\"><span data-lake-id=\"uc9db37d1\" id=\"uc9db37d1\">通过</span><strong><span data-lake-id=\"u0dac1ac2\" id=\"u0dac1ac2\">数据劫持结合发布-订阅者模式</span></strong><span data-lake-id=\"u6503c25c\" id=\"u6503c25c\">的方式来实现的。</span></p><p data-lake-id=\"uaceb099e\" id=\"uaceb099e\"><span data-lake-id=\"u86309c8c\" id=\"u86309c8c\">Vue内部通过Object.defineProperty() 监听对象属性的改变，它有对应的两个描述属性get和set，当数据发生改变后，通过此方法对两个属性进行重写操作，从而通过发布-订阅者模式通知界面发生改变。</span></p><p data-lake-id=\"u52eb6ca4\" id=\"u52eb6ca4\"><span data-lake-id=\"u7ccf2d63\" id=\"u7ccf2d63\">Vue2 是借助Object.defineProperty() 实现的，而Vue3 是借助Proxy实现的，通过Proxy对象创建一个对象的代理，并且Proxy的监听是深层次的，监听整个对象，而不是某个属性。</span></p><p data-lake-id=\"u79ff661b\" id=\"u79ff661b\"><span data-lake-id=\"u5569c6f3\" id=\"u5569c6f3\"> </span><strong><span data-lake-id=\"u7e555cc6\" id=\"u7e555cc6\">发布-订阅者模式：</span></strong></p><p data-lake-id=\"u482897f1\" id=\"u482897f1\"><span data-lake-id=\"ub77ed128\" id=\"ub77ed128\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208120909.png)</span></p><ol list=\"u5f1a50b2\"><li fid=\"uf0f8595b\" data-lake-id=\"uba2f98ae\" id=\"uba2f98ae\"><span data-lake-id=\"u3dcd3bd4\" id=\"u3dcd3bd4\">new Vue() 首先执行初始化，对data执行响应化处理，此过程发生在Observer中</span></li><li fid=\"uf0f8595b\" data-lake-id=\"u8deb1661\" id=\"u8deb1661\"><span data-lake-id=\"u1d9c5df4\" id=\"u1d9c5df4\">compiler对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图</span></li><li fid=\"uf0f8595b\" data-lake-id=\"u05ea8a08\" id=\"u05ea8a08\"><span data-lake-id=\"u6992abb9\" id=\"u6992abb9\">由于data的某个key在一个视图中可能出现多次，所以每个key都需要一个管家Dep来管理多个Watcher</span></li><li fid=\"uf0f8595b\" data-lake-id=\"ua198e876\" id=\"ua198e876\"><span data-lake-id=\"ub5ebcdcd\" id=\"ub5ebcdcd\">同时定义一个更新函数 update()和Watcher，将来对应数据变化时Watcher会调用更新函数。</span></li><li fid=\"uf0f8595b\" data-lake-id=\"uec27f2e8\" id=\"uec27f2e8\"><span data-lake-id=\"u4ae539cd\" id=\"u4ae539cd\">一旦data中数据发生变化，会首先找到对应的Dep，通知所有的Watcher执行更新函数，然后更新视图。 </span></li></ol><h3 data-lake-id=\"PEasO\" id=\"PEasO\"><span data-lake-id=\"u127b42f9\" id=\"u127b42f9\">Vue2 的实现：</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Object.defineProperty(obj%2C%20key%2C%20%7B%5Cn%20%20%20%20enumerable%3A%20true%2C%5Cn%20%20%20%20configurable%3A%20true%2C%5Cn%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AAget%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%BF%E9%97%AEdata.key%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20%20%20get%3A%20function%20getter%20()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BF%99%E9%87%8C%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96%5Cn%20%20%20%20%20%20%20%20return%20obj%5Bkey%5D%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AAset%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E4%B8%BAdata.key%E8%B5%8B%E5%80%BC%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20%20%20set%3A%20function%20setter%20(newVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BD%93%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E6%97%B6%EF%BC%8C%E9%80%9A%E7%9F%A5%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%8F%98%E6%9B%B4UI%5Cn%20%20%20%20%7D%20%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uzEsG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ufb4fcf2f\"><li fid=\"ue0864f34\" data-lake-id=\"uf8287275\" id=\"uf8287275\"><span data-lake-id=\"uf6fc2917\" id=\"uf6fc2917\">通过Object.defineProperty() 为对象obj添加属性，可以设置对象属性的getter和setter函数。</span></li><li fid=\"ue0864f34\" data-lake-id=\"ua9174cd9\" id=\"ua9174cd9\"><span data-lake-id=\"u3f539bbf\" id=\"u3f539bbf\">之后我们每次通过点语法获取属性都会执行这里的getter函数，此函数中我们把调用此属性的依赖收集到一个集合中；</span></li><li fid=\"ue0864f34\" data-lake-id=\"ua473db3d\" id=\"ua473db3d\"><span data-lake-id=\"u47ff80f6\" id=\"u47ff80f6\">而在我们给属性赋值时（修改属性），会触发这里定义的setter函数，在此函数中会去通知集合中的依赖更新，做到数据驱动视图更新。</span></li></ul><h3 data-lake-id=\"auYEq\" id=\"auYEq\"><span data-lake-id=\"ua8fff12b\" id=\"ua8fff12b\">Vue3 的实现：</span></h3><p data-lake-id=\"u13a9b44c\" id=\"u13a9b44c\"><span data-lake-id=\"ud9ccd6e2\" id=\"ud9ccd6e2\">Vue3与Vue2的核心思想一致，不过数据的劫持使用的是Proxy而不是Object.defineProperty() ，只不过Proxy相比Object.defineProperty() 在处理数组和新增属性的响应式处理上更加方便。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20nObj%3Dnew%20Proxy(obj%2C%7B%5Cn%20%20%2F%2F%E6%8B%A6%E6%88%AAget%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%BF%E9%97%AEnObj.key%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20get%3A%20function%20(target%2C%20propKey%2C%20receiver)%20%7B%5Cn%20%20%20%20console.log(%60getting%20%24%7BpropKey%7D!%60)%3B%5Cn%20%20%20%20return%20Reflect.get(target%2C%20propKey%2C%20receiver)%3B%5Cn%20%20%7D%2C%5Cn%20%20%2F%2F%E6%8B%A6%E6%88%AAset%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E4%B8%BAnObj.key%E8%B5%8B%E5%80%BC%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20set%3A%20function%20(target%2C%20propKey%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20console.log(%60setting%20%24%7BpropKey%7D!%60)%3B%5Cn%20%20%20%20return%20Reflect.set(target%2C%20propKey%2C%20value%2C%20receiver)%3B%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a17np%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QNIq1\" id=\"QNIq1\"><span data-lake-id=\"uaa263dab\" id=\"uaa263dab\">数据双向绑定原理</span></h1><p data-lake-id=\"u0e5c0d61\" id=\"u0e5c0d61\"><span data-lake-id=\"uef0ff9c0\" id=\"uef0ff9c0\">可以通过v-model和修饰符.sync两种方式实现，像在组件中使用v-model就属于双向绑定。</span></p><p data-lake-id=\"u1f8b5cc5\" id=\"u1f8b5cc5\"><span data-lake-id=\"uadb95dbd\" id=\"uadb95dbd\">v-model本质是：</span></p><ol list=\"u1d4990b4\"><li fid=\"ucf2440e4\" data-lake-id=\"u6fa361f2\" id=\"u6fa361f2\"><span data-lake-id=\"ub630dff1\" id=\"ub630dff1\">将动态的data通过value属性传递给input显示</span></li><li fid=\"ucf2440e4\" data-lake-id=\"uf39027fe\" id=\"uf39027fe\"><span data-lake-id=\"uadb1bb0d\" id=\"uadb1bb0d\">给input标签绑定input监听，一旦输入改变，读取最新的值保存到data对应属性上</span></li></ol><p data-lake-id=\"u4f881fe8\" id=\"u4f881fe8\"><span data-lake-id=\"uec521df6\" id=\"uec521df6\">双向绑定由三个重要部分构成：</span></p><ul list=\"ua2b52e87\"><li fid=\"ucad76355\" data-lake-id=\"u084bcf46\" id=\"u084bcf46\"><span data-lake-id=\"ue3d39987\" id=\"ue3d39987\">数据层（Model）：页面渲染所需要的数据</span></li><li fid=\"ucad76355\" data-lake-id=\"u3deb863f\" id=\"u3deb863f\"><span data-lake-id=\"u431dc4e8\" id=\"u431dc4e8\">视图层（View）：所呈现出的页面</span></li><li fid=\"ucad76355\" data-lake-id=\"ufd64bf82\" id=\"ufd64bf82\"><span data-lake-id=\"u26d7c5ad\" id=\"u26d7c5ad\">业务逻辑层（ViewModel）：框架封装的核心；重要职责：数据变化后更新视图，视图变化后更新数据。</span></li></ul><h3 data-lake-id=\"KRJb8\" id=\"KRJb8\"><span data-lake-id=\"u3e398211\" id=\"u3e398211\">使用Object.defineProperty()实现双向绑定</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbody%3E%5Cn%20%20%20%20hello%2Cworld%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20id%3D%5C%22model%5C%22%20oninput%3D%5C%22handleChange()%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cp%20id%3D%5C%22word%5C%22%3E%3C%2Fp%3E%5Cn%3C%2Fbody%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20TODO%20%20%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%9A%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%BE%93%E5%85%A5%E6%A1%86%E4%B8%AD%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%8F%98%E5%8C%96%E6%97%B6%E5%85%B6%E5%AE%83%E6%8E%A7%E4%BB%B6%E4%B8%AD%E5%86%85%E5%AE%B9%E4%B9%9F%E8%B7%9F%E7%9D%80%E5%8F%98%E5%8C%96%5Cn%20%20%20%20let%20input%20%3D%20document.getElementById(%5C%22model%5C%22)%3B%5Cn%20%20%20%20let%20p%20%3D%20document.getElementById(%5C%22word%5C%22)%3B%5Cn%20%20%20%20let%20data%20%3D%20%7B%7D%3B%5Cn%20%20%20%20Object.defineProperty(data%2C%20%5C%22val%5C%22%2C%20%7B%5Cn%20%20%20%20%20%20%20%20set%3A%20function(newVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20val%20%3D%20newVal%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20input.value%20%3D%20val%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20p.innerHTML%20%3D%20val%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20get%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20val%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20function%20handleChange()%20%7B%5Cn%20%20%20%20%20%20%20%20data.val%20%3D%20input.value%3B%20%2F%2F%20%E8%A7%A6%E5%8F%91set%5Cn%20%20%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TMRfm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u07cf3706\" id=\"u07cf3706\"><span data-lake-id=\"uf147ffb9\" id=\"uf147ffb9\">效果：在输入内框内输入内容，下方数据会相应改变。</span></p><p data-lake-id=\"u321b6558\" id=\"u321b6558\"><span data-lake-id=\"ufb2228ce\" id=\"ufb2228ce\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208124835.png)</span></p><h3 data-lake-id=\"RF4WP\" id=\"RF4WP\"><span data-lake-id=\"ub8a6dea5\" id=\"ub8a6dea5\">使用Proxy实现响应式</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbutton%3Eclick%20me%3C%2Fbutton%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20const%20btn%20%3D%20document.querySelector(%5C%22button%5C%22)%3B%5Cn%5Cn%20%20%20%20const%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20naisu%3A%20233%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20handler%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20get%3A%20function(target%2C%20property%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20target%5Bproperty%5D%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set%3A%20function(target%2C%20property%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target%5Bproperty%5D%20%3D%20value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20btn.innerText%20%3D%20%60Naisu%20is%20%24%7Btarget%5Bproperty%5D%7D.%60%3B%20%2F%2F%20%E5%80%BC%E5%9C%A8%E6%94%B9%E5%8F%98%E7%9A%84%E5%90%8C%E6%97%B6%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E6%84%8Ftarget%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8%5B%5D%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20objProxy%20%3D%20new%20Proxy(obj%2C%20handler)%3B%5Cn%5Cn%20%20%20%20btn.onclick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20objProxy.naisu%20%3D%20objProxy.naisu%20%2B%201%3B%20%2F%2F%20%E5%9C%A8%E7%9C%9F%E6%AD%A3%E6%93%8D%E4%BD%9C%E6%97%B6%E5%8F%AA%E8%A6%81%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%B0%B1%E8%A1%8C%5Cn%20%20%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jbcFv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u970349b1\" id=\"u970349b1\"><span data-lake-id=\"ucbd50072\" id=\"ucbd50072\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125406.png)</span></p><p data-lake-id=\"uffdaf5de\" id=\"uffdaf5de\"><span data-lake-id=\"uef763524\" id=\"uef763524\">好处：数据驱动视图，之后操作关心数据本身即可，无需因为数据改变去手动操作视图了。</span></p><h3 data-lake-id=\"YUrVm\" id=\"YUrVm\"><span data-lake-id=\"u4a6db87e\" id=\"u4a6db87e\">Proxy实现数据双向绑定</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbody%3E%5Cn%20%20%20%20hello%2Cworld%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20id%3D%5C%22model%5C%22%20oninput%3D%5C%22inputHandler()%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cp%20id%3D%5C%22word%5C%22%3E%3C%2Fp%3E%5Cn%3C%2Fbody%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20TODO%20%20ES6%E5%AE%9E%E7%8E%B0%5Cn%20%20%20%20const%20input%20%3D%20document.getElementById(%5C%22model%5C%22)%3B%5Cn%20%20%20%20const%20p%20%3D%20document.getElementById(%5C%22word%5C%22)%3B%5Cn%20%20%20%20const%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20naisu%3A%20233%2C%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20handler%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20get%3A%20function(target%2C%20property%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20target%5Bproperty%5D%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set%3A%20function(target%2C%20property%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target%5Bproperty%5D%20%3D%20value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20p.innerHTML%20%3D%20%60Naisu%20is%20%24%7Btarget%5Bproperty%5D%7D%60%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20objProxy%20%3D%20new%20Proxy(obj%2C%20handler)%3B%5Cn%5Cn%20%20%20%20function%20inputHandler()%20%7B%5Cn%20%20%20%20%20%20%20%20objProxy.naisu%20%3D%20input.value%3B%20%2F%2F%20%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6%E4%B8%AD%E6%94%B9%E5%8F%98%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%5Cn%20%20%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dW5MI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u90ea0fe0\" id=\"u90ea0fe0\"><span data-lake-id=\"u7ad58504\" id=\"u7ad58504\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125431.png)</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uf30e0ee4\" id=\"uf30e0ee4\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: Vue 响应式原理和双向绑定原理区分</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: Vue</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208162638.png</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h1 data-lake-id=\"hx5ew\" id=\"hx5ew\"><span data-lake-id=\"uf4642cb4\" id=\"uf4642cb4\">数据响应式原理</span></h1><p data-lake-id=\"u38e54592\" id=\"u38e54592\"><span data-lake-id=\"uc9db37d1\" id=\"uc9db37d1\">通过</span><strong><span data-lake-id=\"u0dac1ac2\" id=\"u0dac1ac2\">数据劫持结合发布-订阅者模式</span></strong><span data-lake-id=\"u6503c25c\" id=\"u6503c25c\">的方式来实现的。</span></p><p data-lake-id=\"uaceb099e\" id=\"uaceb099e\"><span data-lake-id=\"u86309c8c\" id=\"u86309c8c\">Vue内部通过Object.defineProperty() 监听对象属性的改变，它有对应的两个描述属性get和set，当数据发生改变后，通过此方法对两个属性进行重写操作，从而通过发布-订阅者模式通知界面发生改变。</span></p><p data-lake-id=\"u52eb6ca4\" id=\"u52eb6ca4\"><span data-lake-id=\"u7ccf2d63\" id=\"u7ccf2d63\">Vue2 是借助Object.defineProperty() 实现的，而Vue3 是借助Proxy实现的，通过Proxy对象创建一个对象的代理，并且Proxy的监听是深层次的，监听整个对象，而不是某个属性。</span></p><p data-lake-id=\"u79ff661b\" id=\"u79ff661b\"><span data-lake-id=\"u5569c6f3\" id=\"u5569c6f3\"> </span><strong><span data-lake-id=\"u7e555cc6\" id=\"u7e555cc6\">发布-订阅者模式：</span></strong></p><p data-lake-id=\"u482897f1\" id=\"u482897f1\"><span data-lake-id=\"ub77ed128\" id=\"ub77ed128\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208120909.png)</span></p><ol list=\"u5f1a50b2\"><li fid=\"uf0f8595b\" data-lake-id=\"uba2f98ae\" id=\"uba2f98ae\"><span data-lake-id=\"u3dcd3bd4\" id=\"u3dcd3bd4\">new Vue() 首先执行初始化，对data执行响应化处理，此过程发生在Observer中</span></li><li fid=\"uf0f8595b\" data-lake-id=\"u8deb1661\" id=\"u8deb1661\"><span data-lake-id=\"u1d9c5df4\" id=\"u1d9c5df4\">compiler对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图</span></li><li fid=\"uf0f8595b\" data-lake-id=\"u05ea8a08\" id=\"u05ea8a08\"><span data-lake-id=\"u6992abb9\" id=\"u6992abb9\">由于data的某个key在一个视图中可能出现多次，所以每个key都需要一个管家Dep来管理多个Watcher</span></li><li fid=\"uf0f8595b\" data-lake-id=\"ua198e876\" id=\"ua198e876\"><span data-lake-id=\"ub5ebcdcd\" id=\"ub5ebcdcd\">同时定义一个更新函数 update()和Watcher，将来对应数据变化时Watcher会调用更新函数。</span></li><li fid=\"uf0f8595b\" data-lake-id=\"uec27f2e8\" id=\"uec27f2e8\"><span data-lake-id=\"u4ae539cd\" id=\"u4ae539cd\">一旦data中数据发生变化，会首先找到对应的Dep，通知所有的Watcher执行更新函数，然后更新视图。 </span></li></ol><h3 data-lake-id=\"PEasO\" id=\"PEasO\"><span data-lake-id=\"u127b42f9\" id=\"u127b42f9\">Vue2 的实现：</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Object.defineProperty(obj%2C%20key%2C%20%7B%5Cn%20%20%20%20enumerable%3A%20true%2C%5Cn%20%20%20%20configurable%3A%20true%2C%5Cn%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AAget%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%BF%E9%97%AEdata.key%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20%20%20get%3A%20function%20getter%20()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BF%99%E9%87%8C%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96%5Cn%20%20%20%20%20%20%20%20return%20obj%5Bkey%5D%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%E6%8B%A6%E6%88%AAset%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E4%B8%BAdata.key%E8%B5%8B%E5%80%BC%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20%20%20set%3A%20function%20setter%20(newVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BD%93%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E6%97%B6%EF%BC%8C%E9%80%9A%E7%9F%A5%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%8F%98%E6%9B%B4UI%5Cn%20%20%20%20%7D%20%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uzEsG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ufb4fcf2f\"><li fid=\"ue0864f34\" data-lake-id=\"uf8287275\" id=\"uf8287275\"><span data-lake-id=\"uf6fc2917\" id=\"uf6fc2917\">通过Object.defineProperty() 为对象obj添加属性，可以设置对象属性的getter和setter函数。</span></li><li fid=\"ue0864f34\" data-lake-id=\"ua9174cd9\" id=\"ua9174cd9\"><span data-lake-id=\"u3f539bbf\" id=\"u3f539bbf\">之后我们每次通过点语法获取属性都会执行这里的getter函数，此函数中我们把调用此属性的依赖收集到一个集合中；</span></li><li fid=\"ue0864f34\" data-lake-id=\"ua473db3d\" id=\"ua473db3d\"><span data-lake-id=\"u47ff80f6\" id=\"u47ff80f6\">而在我们给属性赋值时（修改属性），会触发这里定义的setter函数，在此函数中会去通知集合中的依赖更新，做到数据驱动视图更新。</span></li></ul><h3 data-lake-id=\"auYEq\" id=\"auYEq\"><span data-lake-id=\"ua8fff12b\" id=\"ua8fff12b\">Vue3 的实现：</span></h3><p data-lake-id=\"u13a9b44c\" id=\"u13a9b44c\"><span data-lake-id=\"ud9ccd6e2\" id=\"ud9ccd6e2\">Vue3与Vue2的核心思想一致，不过数据的劫持使用的是Proxy而不是Object.defineProperty() ，只不过Proxy相比Object.defineProperty() 在处理数组和新增属性的响应式处理上更加方便。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20nObj%3Dnew%20Proxy(obj%2C%7B%5Cn%20%20%2F%2F%E6%8B%A6%E6%88%AAget%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%BF%E9%97%AEnObj.key%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20get%3A%20function%20(target%2C%20propKey%2C%20receiver)%20%7B%5Cn%20%20%20%20console.log(%60getting%20%24%7BpropKey%7D!%60)%3B%5Cn%20%20%20%20return%20Reflect.get(target%2C%20propKey%2C%20receiver)%3B%5Cn%20%20%7D%2C%5Cn%20%20%2F%2F%E6%8B%A6%E6%88%AAset%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E4%B8%BAnObj.key%E8%B5%8B%E5%80%BC%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%88%B0%5Cn%20%20set%3A%20function%20(target%2C%20propKey%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20console.log(%60setting%20%24%7BpropKey%7D!%60)%3B%5Cn%20%20%20%20return%20Reflect.set(target%2C%20propKey%2C%20value%2C%20receiver)%3B%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a17np%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QNIq1\" id=\"QNIq1\"><span data-lake-id=\"uaa263dab\" id=\"uaa263dab\">数据双向绑定原理</span></h1><p data-lake-id=\"u0e5c0d61\" id=\"u0e5c0d61\"><span data-lake-id=\"uef0ff9c0\" id=\"uef0ff9c0\">可以通过v-model和修饰符.sync两种方式实现，像在组件中使用v-model就属于双向绑定。</span></p><p data-lake-id=\"u1f8b5cc5\" id=\"u1f8b5cc5\"><span data-lake-id=\"uadb95dbd\" id=\"uadb95dbd\">v-model本质是：</span></p><ol list=\"u1d4990b4\"><li fid=\"ucf2440e4\" data-lake-id=\"u6fa361f2\" id=\"u6fa361f2\"><span data-lake-id=\"ub630dff1\" id=\"ub630dff1\">将动态的data通过value属性传递给input显示</span></li><li fid=\"ucf2440e4\" data-lake-id=\"uf39027fe\" id=\"uf39027fe\"><span data-lake-id=\"uadb1bb0d\" id=\"uadb1bb0d\">给input标签绑定input监听，一旦输入改变，读取最新的值保存到data对应属性上</span></li></ol><p data-lake-id=\"u4f881fe8\" id=\"u4f881fe8\"><span data-lake-id=\"uec521df6\" id=\"uec521df6\">双向绑定由三个重要部分构成：</span></p><ul list=\"ua2b52e87\"><li fid=\"ucad76355\" data-lake-id=\"u084bcf46\" id=\"u084bcf46\"><span data-lake-id=\"ue3d39987\" id=\"ue3d39987\">数据层（Model）：页面渲染所需要的数据</span></li><li fid=\"ucad76355\" data-lake-id=\"u3deb863f\" id=\"u3deb863f\"><span data-lake-id=\"u431dc4e8\" id=\"u431dc4e8\">视图层（View）：所呈现出的页面</span></li><li fid=\"ucad76355\" data-lake-id=\"ufd64bf82\" id=\"ufd64bf82\"><span data-lake-id=\"u26d7c5ad\" id=\"u26d7c5ad\">业务逻辑层（ViewModel）：框架封装的核心；重要职责：数据变化后更新视图，视图变化后更新数据。</span></li></ul><h3 data-lake-id=\"KRJb8\" id=\"KRJb8\"><span data-lake-id=\"u3e398211\" id=\"u3e398211\">使用Object.defineProperty()实现双向绑定</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbody%3E%5Cn%20%20%20%20hello%2Cworld%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20id%3D%5C%22model%5C%22%20oninput%3D%5C%22handleChange()%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cp%20id%3D%5C%22word%5C%22%3E%3C%2Fp%3E%5Cn%3C%2Fbody%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20TODO%20%20%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%9A%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%BE%93%E5%85%A5%E6%A1%86%E4%B8%AD%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%8F%98%E5%8C%96%E6%97%B6%E5%85%B6%E5%AE%83%E6%8E%A7%E4%BB%B6%E4%B8%AD%E5%86%85%E5%AE%B9%E4%B9%9F%E8%B7%9F%E7%9D%80%E5%8F%98%E5%8C%96%5Cn%20%20%20%20let%20input%20%3D%20document.getElementById(%5C%22model%5C%22)%3B%5Cn%20%20%20%20let%20p%20%3D%20document.getElementById(%5C%22word%5C%22)%3B%5Cn%20%20%20%20let%20data%20%3D%20%7B%7D%3B%5Cn%20%20%20%20Object.defineProperty(data%2C%20%5C%22val%5C%22%2C%20%7B%5Cn%20%20%20%20%20%20%20%20set%3A%20function(newVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20val%20%3D%20newVal%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20input.value%20%3D%20val%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20p.innerHTML%20%3D%20val%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20get%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20val%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20function%20handleChange()%20%7B%5Cn%20%20%20%20%20%20%20%20data.val%20%3D%20input.value%3B%20%2F%2F%20%E8%A7%A6%E5%8F%91set%5Cn%20%20%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TMRfm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u07cf3706\" id=\"u07cf3706\"><span data-lake-id=\"uf147ffb9\" id=\"uf147ffb9\">效果：在输入内框内输入内容，下方数据会相应改变。</span></p><p data-lake-id=\"u321b6558\" id=\"u321b6558\"><span data-lake-id=\"ufb2228ce\" id=\"ufb2228ce\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208124835.png)</span></p><h3 data-lake-id=\"RF4WP\" id=\"RF4WP\"><span data-lake-id=\"ub8a6dea5\" id=\"ub8a6dea5\">使用Proxy实现响应式</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbutton%3Eclick%20me%3C%2Fbutton%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20const%20btn%20%3D%20document.querySelector(%5C%22button%5C%22)%3B%5Cn%5Cn%20%20%20%20const%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20naisu%3A%20233%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20handler%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20get%3A%20function(target%2C%20property%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20target%5Bproperty%5D%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set%3A%20function(target%2C%20property%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target%5Bproperty%5D%20%3D%20value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20btn.innerText%20%3D%20%60Naisu%20is%20%24%7Btarget%5Bproperty%5D%7D.%60%3B%20%2F%2F%20%E5%80%BC%E5%9C%A8%E6%94%B9%E5%8F%98%E7%9A%84%E5%90%8C%E6%97%B6%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E6%84%8Ftarget%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8%5B%5D%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20objProxy%20%3D%20new%20Proxy(obj%2C%20handler)%3B%5Cn%5Cn%20%20%20%20btn.onclick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20objProxy.naisu%20%3D%20objProxy.naisu%20%2B%201%3B%20%2F%2F%20%E5%9C%A8%E7%9C%9F%E6%AD%A3%E6%93%8D%E4%BD%9C%E6%97%B6%E5%8F%AA%E8%A6%81%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%B0%B1%E8%A1%8C%5Cn%20%20%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jbcFv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u970349b1\" id=\"u970349b1\"><span data-lake-id=\"ucbd50072\" id=\"ucbd50072\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125406.png)</span></p><p data-lake-id=\"uffdaf5de\" id=\"uffdaf5de\"><span data-lake-id=\"uef763524\" id=\"uef763524\">好处：数据驱动视图，之后操作关心数据本身即可，无需因为数据改变去手动操作视图了。</span></p><h3 data-lake-id=\"YUrVm\" id=\"YUrVm\"><span data-lake-id=\"u4a6db87e\" id=\"u4a6db87e\">Proxy实现数据双向绑定</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cbody%3E%5Cn%20%20%20%20hello%2Cworld%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20id%3D%5C%22model%5C%22%20oninput%3D%5C%22inputHandler()%5C%22%20%2F%3E%5Cn%20%20%20%20%3Cp%20id%3D%5C%22word%5C%22%3E%3C%2Fp%3E%5Cn%3C%2Fbody%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20TODO%20%20ES6%E5%AE%9E%E7%8E%B0%5Cn%20%20%20%20const%20input%20%3D%20document.getElementById(%5C%22model%5C%22)%3B%5Cn%20%20%20%20const%20p%20%3D%20document.getElementById(%5C%22word%5C%22)%3B%5Cn%20%20%20%20const%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20naisu%3A%20233%2C%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20handler%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20get%3A%20function(target%2C%20property%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20target%5Bproperty%5D%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20set%3A%20function(target%2C%20property%2C%20value%2C%20receiver)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target%5Bproperty%5D%20%3D%20value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20p.innerHTML%20%3D%20%60Naisu%20is%20%24%7Btarget%5Bproperty%5D%7D%60%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20const%20objProxy%20%3D%20new%20Proxy(obj%2C%20handler)%3B%5Cn%5Cn%20%20%20%20function%20inputHandler()%20%7B%5Cn%20%20%20%20%20%20%20%20objProxy.naisu%20%3D%20input.value%3B%20%2F%2F%20%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6%E4%B8%AD%E6%94%B9%E5%8F%98%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%5Cn%20%20%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dW5MI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u90ea0fe0\" id=\"u90ea0fe0\"><span data-lake-id=\"u7ad58504\" id=\"u7ad58504\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/20221208125431.png)</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-08T08:26:59.000Z",
    "deleted_at": null,
    "created_at": "2022-12-08T02:10:25.000Z",
    "updated_at": "2022-12-08T08:27:00.000Z",
    "published_at": "2022-12-08T08:26:59.000Z",
    "first_published_at": "2022-12-08T03:19:43.691Z",
    "word_count": 1305,
    "cover": null,
    "description": "--- title: Vue 响应式原理和双向绑定原理区分categories: Vuedate: 2022-11-18updated: 2022-11-18tags: Vuecover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgResp...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 108673573,
    "slug": "xbgxofpl51db52yh",
    "title": "shadow dom",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: shadow dom <br />categories: HTML<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: HTML<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F11452172135%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto<br />--- \n<a name=\"ec0PD\"></a>\n## 问题引入：\ninput 为什么能输入内容？\n<a name=\"g5QJj\"></a>\n## 思路：\n\n1. 以Chrome为例，F12打开Chrome浏览器控制台，点击设置，开启Element 下的Show user agent shadow DOM选项，可以看见一些隐藏的结构：\n\n![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130211.png)\n> 可以看到input标签下有一个shadow-dom，点开shadow-dom可以看到里面的内容。这其中的内容就是具体的实现。\n\n<a name=\"B7d2i\"></a>\n## Shadow DOM\n<a name=\"ECJeg\"></a>\n### 什么是 Shadow DOM？\nShadow DOM 是”DOM中的DOM“，是独立的DOM，具有自己的元素和样式，与原始DOM完全隔离，是我们无法控制操作的DOM。<br />相当于一个作用域的概念，使其不被外部所影响。可以看做是一颗单独的DOM树，这样就不会有css的命名冲突或样式的意外泄漏的情况。\n<a name=\"ve74E\"></a>\n### 为什么需要 Shadow DOM？\n\n- shadow dom是游离于DOM树之外的节点树，但其创建是基于普通的DOM元素（非document），并且创建的节点可以直接从界面上直观的看到\n- shadow dom有良好的密封性（浏览器提供的一种“封装”功能，提供了一种强大的技术去隐藏一些实现细节。）\n<a name=\"Jls4Z\"></a>\n### 如何创建 Shadow DOM？\n\n- 首先，我们指定一个**宿主节点（shadow host）**，然后创建影子根（**shadow root**），为它添加一个文本节点，但结果宿主中的内容未被渲染。\n```javascript\n<div class=\"widget\">Hello, world!</div>\n<script>\n    var host = document.querySelector(\".widget\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    root.textContent = \"我在你的 div 里！\";\n</script>\n```\n运行结果：<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/649e.png)<br />那么如何渲染宿主节点中的内容？ <br />可以使用`slot`标签。由于目前`content`标签已经弃用，可以使用`slot`标签代替。\n```javascript\n<div class=\"pokemon\">大酱</div>\n<template class=\"pokemon-template\">\n  <h1>你好，我是<slot></slot>，请多指教！</h1>\n</template>\n<script>\n    var host = document.querySelector(\".pokemon\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    var template = document.querySelector(\".pokemon-template\");\n    console.log(template.content);\n    root.appendChild(document.importNode(template.content, true));\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130237.png)<br />`<slot>`标签创建了一个**插入点**将`.pokemon`里面的文本投影出来，多个内容匹配时可以使用`name`属性指定。\n```javascript\n<div class=\"host\">\n    <p>啦啦啦啦</p>\n    <span slot=\"name\">大酱呀</span>\n</div>\n<template class=\"root-template\">\n  <dl>\n    <h1><dt>名字</dt></h1>\n    <dd><slot name=\"name\"></slot></dd>\n    <p><slot name=\"\"></slot></p>\n  </dl>\n</template>\n<script>\n    var host = document.querySelector(\".host\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    var template = document.querySelector(\".root-template\");\n    root.appendChild(document.importNode(template.content, true));\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130255.png)\n> 注意：\n> 1. 只有封闭区域，才能作为shadow Host\n> 2. 当我们把一个标签设置成shadow dom 时，里面的子元素将全部失效。\n> 3. 当mode为closed时，禁止你使用的shadow Root属性从root外部访问shadow root元素\n\n\n> 如何修改shadow dom的样式？\n> 1. 在shadow 块下面创建style标签，在里面添加样式。\n> 2. mode为true时，通过shadow root 获取到指定元素修改样式。\n\n<a name=\"f1sCj\"></a>\n### 样式渲染\n```javascript\n<style>\n    button {\n        font-size: 18px;\n        font-family: \"华文行楷\";\n    }\n</style>\n<button>普通按钮</button>\n<div></div>\n<script>\n    var host = document.querySelector(\"div\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    root.innerHTML =\n        \"<style>button { font-size: 24px; color: blue; } </style>\" +\n        \"<button>影子按钮</button>\";\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130315.png)<br />在影子节点中存在边界使shadow dom样式和正常DOM流中的样式互不干扰，这是一种作用域化的体现，不用担心样式的相互冲突。\n\n\n",
    "body_draft": "--- <br />title: shadow dom <br />categories: HTML<br />date: 2022-11-18<br />updated: 2022-11-18<br />tags: HTML<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F11452172135%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto<br />--- \n<a name=\"ec0PD\"></a>\n## 问题引入：\ninput 为什么能输入内容？\n<a name=\"g5QJj\"></a>\n## 思路：\n\n1. 以Chrome为例，F12打开Chrome浏览器控制台，点击设置，开启Element 下的Show user agent shadow DOM选项，可以看见一些隐藏的结构：\n\n![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130211.png)\n> 可以看到input标签下有一个shadow-dom，点开shadow-dom可以看到里面的内容。这其中的内容就是具体的实现。\n\n<a name=\"B7d2i\"></a>\n## Shadow DOM\n<a name=\"ECJeg\"></a>\n### 什么是 Shadow DOM？\nShadow DOM 是”DOM中的DOM“，是独立的DOM，具有自己的元素和样式，与原始DOM完全隔离，是我们无法控制操作的DOM。<br />相当于一个作用域的概念，使其不被外部所影响。可以看做是一颗单独的DOM树，这样就不会有css的命名冲突或样式的意外泄漏的情况。\n<a name=\"ve74E\"></a>\n### 为什么需要 Shadow DOM？\n\n- shadow dom是游离于DOM树之外的节点树，但其创建是基于普通的DOM元素（非document），并且创建的节点可以直接从界面上直观的看到\n- shadow dom有良好的密封性（浏览器提供的一种“封装”功能，提供了一种强大的技术去隐藏一些实现细节。）\n<a name=\"Jls4Z\"></a>\n### 如何创建 Shadow DOM？\n\n- 首先，我们指定一个**宿主节点（shadow host）**，然后创建影子根（**shadow root**），为它添加一个文本节点，但结果宿主中的内容未被渲染。\n```javascript\n<div class=\"widget\">Hello, world!</div>\n<script>\n    var host = document.querySelector(\".widget\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    root.textContent = \"我在你的 div 里！\";\n</script>\n```\n运行结果：<br />![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/649e.png)<br />那么如何渲染宿主节点中的内容？ <br />可以使用`slot`标签。由于目前`content`标签已经弃用，可以使用`slot`标签代替。\n```javascript\n<div class=\"pokemon\">大酱</div>\n<template class=\"pokemon-template\">\n  <h1>你好，我是<slot></slot>，请多指教！</h1>\n</template>\n<script>\n    var host = document.querySelector(\".pokemon\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    var template = document.querySelector(\".pokemon-template\");\n    console.log(template.content);\n    root.appendChild(document.importNode(template.content, true));\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130237.png)<br />`<slot>`标签创建了一个**插入点**将`.pokemon`里面的文本投影出来，多个内容匹配时可以使用`name`属性指定。\n```javascript\n<div class=\"host\">\n    <p>啦啦啦啦</p>\n    <span slot=\"name\">大酱呀</span>\n</div>\n<template class=\"root-template\">\n  <dl>\n    <h1><dt>名字</dt></h1>\n    <dd><slot name=\"name\"></slot></dd>\n    <p><slot name=\"\"></slot></p>\n  </dl>\n</template>\n<script>\n    var host = document.querySelector(\".host\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    var template = document.querySelector(\".root-template\");\n    root.appendChild(document.importNode(template.content, true));\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130255.png)\n> 注意：\n> 1. 只有封闭区域，才能作为shadow Host\n> 2. 当我们把一个标签设置成shadow dom 时，里面的子元素将全部失效。\n> 3. 当mode为closed时，禁止你使用的shadow Root属性从root外部访问shadow root元素\n\n\n> 如何修改shadow dom的样式？\n> 1. 在shadow 块下面创建style标签，在里面添加样式。\n> 2. mode为true时，通过shadow root 获取到指定元素修改样式。\n\n<a name=\"f1sCj\"></a>\n### 样式渲染\n```javascript\n<style>\n    button {\n        font-size: 18px;\n        font-family: \"华文行楷\";\n    }\n</style>\n<button>普通按钮</button>\n<div></div>\n<script>\n    var host = document.querySelector(\"div\");\n    var root = host.attachShadow({\n        mode: \"open\",\n    });\n    root.innerHTML =\n        \"<style>button { font-size: 24px; color: blue; } </style>\" +\n        \"<button>影子按钮</button>\";\n</script>\n```\n显示结果：<br />![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130315.png)<br />在影子节点中存在边界使shadow dom样式和正常DOM流中的样式互不干扰，这是一种作用域化的体现，不用担心样式的相互冲突。\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u3538366f\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: shadow dom </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: HTML</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-18</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-18</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: HTML</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: </span><span class=\"ne-text\">https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F11452172135%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h2 id=\"ec0PD\"><span class=\"ne-text\">问题引入：</span></h2><p id=\"ubec7d191\" class=\"ne-p\"><span class=\"ne-text\">input 为什么能输入内容？</span></p><h2 id=\"g5QJj\"><span class=\"ne-text\">思路：</span></h2><ol class=\"ne-ol\"><li id=\"u0450ef4b\"><span class=\"ne-text\">以Chrome为例，F12打开Chrome浏览器控制台，点击设置，开启Element 下的Show user agent shadow DOM选项，可以看见一些隐藏的结构：</span></li></ol><p id=\"u80b89f07\" class=\"ne-p\"><span class=\"ne-text\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130211.png)</span></p><div class=\"ne-quote\"><p id=\"u4d9331d0\" class=\"ne-p\"><span class=\"ne-text\">可以看到input标签下有一个shadow-dom，点开shadow-dom可以看到里面的内容。这其中的内容就是具体的实现。</span></p></div><h2 id=\"B7d2i\"><span class=\"ne-text\">Shadow DOM</span></h2><h3 id=\"ECJeg\"><span class=\"ne-text\">什么是 Shadow DOM？</span></h3><p id=\"u3187a6b0\" class=\"ne-p\"><span class=\"ne-text\">Shadow DOM 是”DOM中的DOM“，是独立的DOM，具有自己的元素和样式，与原始DOM完全隔离，是我们无法控制操作的DOM。</span></p><p id=\"u7f371456\" class=\"ne-p\"><span class=\"ne-text\">相当于一个作用域的概念，使其不被外部所影响。可以看做是一颗单独的DOM树，这样就不会有css的命名冲突或样式的意外泄漏的情况。</span></p><h3 id=\"ve74E\"><span class=\"ne-text\">为什么需要 Shadow DOM？</span></h3><ul class=\"ne-ul\"><li id=\"uf88e8bab\"><span class=\"ne-text\">shadow dom是游离于DOM树之外的节点树，但其创建是基于普通的DOM元素（非document），并且创建的节点可以直接从界面上直观的看到</span></li><li id=\"ue5cf50a4\"><span class=\"ne-text\">shadow dom有良好的密封性（浏览器提供的一种“封装”功能，提供了一种强大的技术去隐藏一些实现细节。）</span></li></ul><h3 id=\"Jls4Z\"><span class=\"ne-text\">如何创建 Shadow DOM？</span></h3><ul class=\"ne-ul\"><li id=\"u36f4e5ed\"><span class=\"ne-text\">首先，我们指定一个</span><strong><span class=\"ne-text\">宿主节点（shadow host）</span></strong><span class=\"ne-text\">，然后创建影子根（</span><strong><span class=\"ne-text\">shadow root</span></strong><span class=\"ne-text\">），为它添加一个文本节点，但结果宿主中的内容未被渲染。</span></li></ul><pre data-language=\"javascript\" id=\"G77zo\" class=\"ne-codeblock language-javascript\">&lt;div class=&quot;widget&quot;&gt;Hello, world!&lt;/div&gt;\n&lt;script&gt;\n    var host = document.querySelector(&quot;.widget&quot;);\n    var root = host.attachShadow({\n        mode: &quot;open&quot;,\n    });\n    root.textContent = &quot;我在你的 div 里！&quot;;\n&lt;/script&gt;</pre><p id=\"uc7a348e1\" class=\"ne-p\"><span class=\"ne-text\">运行结果：</span></p><p id=\"u5a4d3fc0\" class=\"ne-p\"><span class=\"ne-text\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/649e.png)</span></p><p id=\"u07acd1b5\" class=\"ne-p\"><span class=\"ne-text\">那么如何渲染宿主节点中的内容？ </span></p><p id=\"u20b1c490\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">可以使用</span><code class=\"ne-code\"><span class=\"ne-text\">slot</span></code><span class=\"ne-text\">标签。由于目前</span><code class=\"ne-code\"><span class=\"ne-text\">content</span></code><span class=\"ne-text\">标签已经弃用，可以使用</span><code class=\"ne-code\"><span class=\"ne-text\">slot</span></code><span class=\"ne-text\">标签代替。</span></p><pre data-language=\"javascript\" id=\"VbGmS\" class=\"ne-codeblock language-javascript\">&lt;div class=&quot;pokemon&quot;&gt;大酱&lt;/div&gt;\n&lt;template class=&quot;pokemon-template&quot;&gt;\n  &lt;h1&gt;你好，我是&lt;slot&gt;&lt;/slot&gt;，请多指教！&lt;/h1&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    var host = document.querySelector(&quot;.pokemon&quot;);\n    var root = host.attachShadow({\n        mode: &quot;open&quot;,\n    });\n    var template = document.querySelector(&quot;.pokemon-template&quot;);\n    console.log(template.content);\n    root.appendChild(document.importNode(template.content, true));\n&lt;/script&gt;</pre><p id=\"u8cac84a4\" class=\"ne-p\"><span class=\"ne-text\">显示结果：</span></p><p id=\"u5a135471\" class=\"ne-p\"><span class=\"ne-text\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130237.png)</span></p><p id=\"u16fb9d3d\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">&lt;slot&gt;</span></code><span class=\"ne-text\">标签创建了一个</span><strong><span class=\"ne-text\">插入点</span></strong><span class=\"ne-text\">将</span><code class=\"ne-code\"><span class=\"ne-text\">.pokemon</span></code><span class=\"ne-text\">里面的文本投影出来，多个内容匹配时可以使用</span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\">属性指定。</span></p><pre data-language=\"javascript\" id=\"hDS3b\" class=\"ne-codeblock language-javascript\">&lt;div class=&quot;host&quot;&gt;\n    &lt;p&gt;啦啦啦啦&lt;/p&gt;\n    &lt;span slot=&quot;name&quot;&gt;大酱呀&lt;/span&gt;\n&lt;/div&gt;\n&lt;template class=&quot;root-template&quot;&gt;\n  &lt;dl&gt;\n    &lt;h1&gt;&lt;dt&gt;名字&lt;/dt&gt;&lt;/h1&gt;\n    &lt;dd&gt;&lt;slot name=&quot;name&quot;&gt;&lt;/slot&gt;&lt;/dd&gt;\n    &lt;p&gt;&lt;slot name=&quot;&quot;&gt;&lt;/slot&gt;&lt;/p&gt;\n  &lt;/dl&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    var host = document.querySelector(&quot;.host&quot;);\n    var root = host.attachShadow({\n        mode: &quot;open&quot;,\n    });\n    var template = document.querySelector(&quot;.root-template&quot;);\n    root.appendChild(document.importNode(template.content, true));\n&lt;/script&gt;</pre><p id=\"u58a6b055\" class=\"ne-p\"><span class=\"ne-text\">显示结果：</span></p><p id=\"u5115eefa\" class=\"ne-p\"><span class=\"ne-text\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130255.png)</span></p><div class=\"ne-quote\"><p id=\"u195a5a44\" class=\"ne-p\"><span class=\"ne-text\">注意：</span></p><ol class=\"ne-ol\"><li id=\"u0bda6683\"><span class=\"ne-text\">只有封闭区域，才能作为shadow Host</span></li><li id=\"uf888b313\"><span class=\"ne-text\">当我们把一个标签设置成shadow dom 时，里面的子元素将全部失效。</span></li><li id=\"u78e21f09\"><span class=\"ne-text\">当mode为closed时，禁止你使用的shadow Root属性从root外部访问shadow root元素</span></li></ol></div><p id=\"u3b4f0054\" class=\"ne-p\"><span class=\"ne-text\"></span></p><div class=\"ne-quote\"><p id=\"uf59e97d2\" class=\"ne-p\"><span class=\"ne-text\">如何修改shadow dom的样式？</span></p><ol class=\"ne-ol\"><li id=\"uc5e6f8c6\"><span class=\"ne-text\">在shadow 块下面创建style标签，在里面添加样式。</span></li><li id=\"u578508a9\"><span class=\"ne-text\">mode为true时，通过shadow root 获取到指定元素修改样式。</span></li></ol></div><h3 id=\"f1sCj\"><span class=\"ne-text\">样式渲染</span></h3><pre data-language=\"javascript\" id=\"utCcj\" class=\"ne-codeblock language-javascript\">&lt;style&gt;\n    button {\n        font-size: 18px;\n        font-family: &quot;华文行楷&quot;;\n    }\n&lt;/style&gt;\n&lt;button&gt;普通按钮&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;script&gt;\n    var host = document.querySelector(&quot;div&quot;);\n    var root = host.attachShadow({\n        mode: &quot;open&quot;,\n    });\n    root.innerHTML =\n        &quot;&lt;style&gt;button { font-size: 24px; color: blue; } &lt;/style&gt;&quot; +\n        &quot;&lt;button&gt;影子按钮&lt;/button&gt;&quot;;\n&lt;/script&gt;</pre><p id=\"u36f0731d\" class=\"ne-p\"><span class=\"ne-text\">显示结果：</span></p><p id=\"ud8545805\" class=\"ne-p\"><span class=\"ne-text\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130315.png)</span></p><p id=\"u704affd7\" class=\"ne-p\"><span class=\"ne-text\">在影子节点中存在边界使shadow dom样式和正常DOM流中的样式互不干扰，这是一种作用域化的体现，不用担心样式的相互冲突。</span></p><p id=\"u4196b774\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ub13a68e8\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u3538366f\" id=\"u3538366f\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: shadow dom </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: HTML</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: HTML</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: </span><span data-lake-id=\"u97b98a8e\" id=\"u97b98a8e\">https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F11452172135%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"ec0PD\" id=\"ec0PD\"><span data-lake-id=\"ub4d85de9\" id=\"ub4d85de9\">问题引入：</span></h2><p data-lake-id=\"ubec7d191\" id=\"ubec7d191\"><span data-lake-id=\"ua781ad49\" id=\"ua781ad49\">input 为什么能输入内容？</span></p><h2 data-lake-id=\"g5QJj\" id=\"g5QJj\"><span data-lake-id=\"u16a53a15\" id=\"u16a53a15\">思路：</span></h2><ol list=\"ua67cc10d\"><li fid=\"ue149d41f\" data-lake-id=\"u0450ef4b\" id=\"u0450ef4b\"><span data-lake-id=\"u4d5e1291\" id=\"u4d5e1291\">以Chrome为例，F12打开Chrome浏览器控制台，点击设置，开启Element 下的Show user agent shadow DOM选项，可以看见一些隐藏的结构：</span></li></ol><p data-lake-id=\"u80b89f07\" id=\"u80b89f07\"><span data-lake-id=\"u60ad6a54\" id=\"u60ad6a54\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130211.png)</span></p><blockquote data-lake-id=\"uaf682f07\" id=\"uaf682f07\"><p data-lake-id=\"u4d9331d0\" id=\"u4d9331d0\"><span data-lake-id=\"u4855e324\" id=\"u4855e324\">可以看到input标签下有一个shadow-dom，点开shadow-dom可以看到里面的内容。这其中的内容就是具体的实现。</span></p></blockquote><h2 data-lake-id=\"B7d2i\" id=\"B7d2i\"><span data-lake-id=\"ua3b7cff2\" id=\"ua3b7cff2\">Shadow DOM</span></h2><h3 data-lake-id=\"ECJeg\" id=\"ECJeg\"><span data-lake-id=\"u7d231480\" id=\"u7d231480\">什么是 Shadow DOM？</span></h3><p data-lake-id=\"u3187a6b0\" id=\"u3187a6b0\"><span data-lake-id=\"ud7c141c1\" id=\"ud7c141c1\">Shadow DOM 是”DOM中的DOM“，是独立的DOM，具有自己的元素和样式，与原始DOM完全隔离，是我们无法控制操作的DOM。</span></p><p data-lake-id=\"u7f371456\" id=\"u7f371456\"><span data-lake-id=\"ua89213ed\" id=\"ua89213ed\">相当于一个作用域的概念，使其不被外部所影响。可以看做是一颗单独的DOM树，这样就不会有css的命名冲突或样式的意外泄漏的情况。</span></p><h3 data-lake-id=\"ve74E\" id=\"ve74E\"><span data-lake-id=\"u0c9adda3\" id=\"u0c9adda3\">为什么需要 Shadow DOM？</span></h3><ul list=\"ud3893a5b\"><li fid=\"ue47fa4b5\" data-lake-id=\"uf88e8bab\" id=\"uf88e8bab\"><span data-lake-id=\"ua29ae787\" id=\"ua29ae787\">shadow dom是游离于DOM树之外的节点树，但其创建是基于普通的DOM元素（非document），并且创建的节点可以直接从界面上直观的看到</span></li><li fid=\"ue47fa4b5\" data-lake-id=\"ue5cf50a4\" id=\"ue5cf50a4\"><span data-lake-id=\"u2c7f48f0\" id=\"u2c7f48f0\">shadow dom有良好的密封性（浏览器提供的一种“封装”功能，提供了一种强大的技术去隐藏一些实现细节。）</span></li></ul><h3 data-lake-id=\"Jls4Z\" id=\"Jls4Z\"><span data-lake-id=\"uc16f09b1\" id=\"uc16f09b1\">如何创建 Shadow DOM？</span></h3><ul list=\"u80af1e53\"><li fid=\"u80082494\" data-lake-id=\"u36f4e5ed\" id=\"u36f4e5ed\"><span data-lake-id=\"ue2c8e61c\" id=\"ue2c8e61c\">首先，我们指定一个</span><strong><span data-lake-id=\"u402f9a54\" id=\"u402f9a54\">宿主节点（shadow host）</span></strong><span data-lake-id=\"u8c8b85c4\" id=\"u8c8b85c4\">，然后创建影子根（</span><strong><span data-lake-id=\"ucede675a\" id=\"ucede675a\">shadow root</span></strong><span data-lake-id=\"u77b00c19\" id=\"u77b00c19\">），为它添加一个文本节点，但结果宿主中的内容未被渲染。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22widget%5C%22%3EHello%2C%20world!%3C%2Fdiv%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.widget%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20root.textContent%20%3D%20%5C%22%E6%88%91%E5%9C%A8%E4%BD%A0%E7%9A%84%20div%20%E9%87%8C%EF%BC%81%5C%22%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAshadow%20dom%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22G77zo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc7a348e1\" id=\"uc7a348e1\"><span data-lake-id=\"u6692b391\" id=\"u6692b391\">运行结果：</span></p><p data-lake-id=\"u5a4d3fc0\" id=\"u5a4d3fc0\"><span data-lake-id=\"u7583bba9\" id=\"u7583bba9\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/649e.png)</span></p><p data-lake-id=\"u07acd1b5\" id=\"u07acd1b5\"><span data-lake-id=\"u94d30045\" id=\"u94d30045\">那么如何渲染宿主节点中的内容？ </span></p><p data-lake-id=\"u20b1c490\" id=\"u20b1c490\" style=\"text-indent: 2em\"><span data-lake-id=\"u9b28f626\" id=\"u9b28f626\">可以使用</span><code data-lake-id=\"u4ecdb103\" id=\"u4ecdb103\"><span data-lake-id=\"u74673e45\" id=\"u74673e45\">slot</span></code><span data-lake-id=\"u53cb2caa\" id=\"u53cb2caa\">标签。由于目前</span><code data-lake-id=\"u079d7ae0\" id=\"u079d7ae0\"><span data-lake-id=\"u8ef897b5\" id=\"u8ef897b5\">content</span></code><span data-lake-id=\"u0f66d4c4\" id=\"u0f66d4c4\">标签已经弃用，可以使用</span><code data-lake-id=\"u2fef4b91\" id=\"u2fef4b91\"><span data-lake-id=\"u822ee307\" id=\"u822ee307\">slot</span></code><span data-lake-id=\"ucae8d317\" id=\"ucae8d317\">标签代替。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22pokemon%5C%22%3E%E5%A4%A7%E9%85%B1%3C%2Fdiv%3E%5Cn%3Ctemplate%20class%3D%5C%22pokemon-template%5C%22%3E%5Cn%20%20%3Ch1%3E%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%3Cslot%3E%3C%2Fslot%3E%EF%BC%8C%E8%AF%B7%E5%A4%9A%E6%8C%87%E6%95%99%EF%BC%81%3C%2Fh1%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.pokemon%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20var%20template%20%3D%20document.querySelector(%5C%22.pokemon-template%5C%22)%3B%5Cn%20%20%20%20console.log(template.content)%3B%5Cn%20%20%20%20root.appendChild(document.importNode(template.content%2C%20true))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VbGmS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u8cac84a4\" id=\"u8cac84a4\"><span data-lake-id=\"u58c32081\" id=\"u58c32081\">显示结果：</span></p><p data-lake-id=\"u5a135471\" id=\"u5a135471\"><span data-lake-id=\"u8f1bfdc7\" id=\"u8f1bfdc7\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130237.png)</span></p><p data-lake-id=\"u16fb9d3d\" id=\"u16fb9d3d\"><code data-lake-id=\"ub221e990\" id=\"ub221e990\"><span data-lake-id=\"u532111f0\" id=\"u532111f0\">&lt;slot&gt;</span></code><span data-lake-id=\"u70cbdd36\" id=\"u70cbdd36\">标签创建了一个</span><strong><span data-lake-id=\"uc8bceb95\" id=\"uc8bceb95\">插入点</span></strong><span data-lake-id=\"u0fbabcf5\" id=\"u0fbabcf5\">将</span><code data-lake-id=\"u8c02caa4\" id=\"u8c02caa4\"><span data-lake-id=\"u37517c91\" id=\"u37517c91\">.pokemon</span></code><span data-lake-id=\"ufe8e9ded\" id=\"ufe8e9ded\">里面的文本投影出来，多个内容匹配时可以使用</span><code data-lake-id=\"uf739af69\" id=\"uf739af69\"><span data-lake-id=\"u268a2b09\" id=\"u268a2b09\">name</span></code><span data-lake-id=\"ua160707c\" id=\"ua160707c\">属性指定。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22host%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%E5%95%A6%E5%95%A6%E5%95%A6%E5%95%A6%3C%2Fp%3E%5Cn%20%20%20%20%3Cspan%20slot%3D%5C%22name%5C%22%3E%E5%A4%A7%E9%85%B1%E5%91%80%3C%2Fspan%3E%5Cn%3C%2Fdiv%3E%5Cn%3Ctemplate%20class%3D%5C%22root-template%5C%22%3E%5Cn%20%20%3Cdl%3E%5Cn%20%20%20%20%3Ch1%3E%3Cdt%3E%E5%90%8D%E5%AD%97%3C%2Fdt%3E%3C%2Fh1%3E%5Cn%20%20%20%20%3Cdd%3E%3Cslot%20name%3D%5C%22name%5C%22%3E%3C%2Fslot%3E%3C%2Fdd%3E%5Cn%20%20%20%20%3Cp%3E%3Cslot%20name%3D%5C%22%5C%22%3E%3C%2Fslot%3E%3C%2Fp%3E%5Cn%20%20%3C%2Fdl%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.host%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20var%20template%20%3D%20document.querySelector(%5C%22.root-template%5C%22)%3B%5Cn%20%20%20%20root.appendChild(document.importNode(template.content%2C%20true))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E5%A4%9A%E4%B8%AA%E5%86%85%E5%AE%B9%E5%8C%B9%E9%85%8D%E6%97%B6%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hDS3b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u58a6b055\" id=\"u58a6b055\"><span data-lake-id=\"ucc2f3232\" id=\"ucc2f3232\">显示结果：</span></p><p data-lake-id=\"u5115eefa\" id=\"u5115eefa\"><span data-lake-id=\"u56d32729\" id=\"u56d32729\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130255.png)</span></p><blockquote data-lake-id=\"uab434148\" id=\"uab434148\"><p data-lake-id=\"u195a5a44\" id=\"u195a5a44\"><span data-lake-id=\"u0a036ff1\" id=\"u0a036ff1\">注意：</span></p><ol list=\"uadfe3700\"><li fid=\"uf325d9e5\" data-lake-id=\"u0bda6683\" id=\"u0bda6683\"><span data-lake-id=\"u652b563b\" id=\"u652b563b\">只有封闭区域，才能作为shadow Host</span></li><li fid=\"uf325d9e5\" data-lake-id=\"uf888b313\" id=\"uf888b313\"><span data-lake-id=\"u9b9baf5e\" id=\"u9b9baf5e\">当我们把一个标签设置成shadow dom 时，里面的子元素将全部失效。</span></li><li fid=\"uf325d9e5\" data-lake-id=\"u78e21f09\" id=\"u78e21f09\"><span data-lake-id=\"uda980c4a\" id=\"uda980c4a\">当mode为closed时，禁止你使用的shadow Root属性从root外部访问shadow root元素</span></li></ol></blockquote><p data-lake-id=\"u3b4f0054\" id=\"u3b4f0054\"><span data-lake-id=\"u288d94dd\" id=\"u288d94dd\">​</span><br></p><blockquote data-lake-id=\"ud3042ffc\" id=\"ud3042ffc\"><p data-lake-id=\"uf59e97d2\" id=\"uf59e97d2\"><span data-lake-id=\"u4cda725d\" id=\"u4cda725d\">如何修改shadow dom的样式？</span></p><ol list=\"u89aed3fb\"><li fid=\"u485b475a\" data-lake-id=\"uc5e6f8c6\" id=\"uc5e6f8c6\"><span data-lake-id=\"u507aa9c6\" id=\"u507aa9c6\">在shadow 块下面创建style标签，在里面添加样式。</span></li><li fid=\"u485b475a\" data-lake-id=\"u578508a9\" id=\"u578508a9\"><span data-lake-id=\"u4b39a33b\" id=\"u4b39a33b\">mode为true时，通过shadow root 获取到指定元素修改样式。</span></li></ol></blockquote><h3 data-lake-id=\"f1sCj\" id=\"f1sCj\"><span data-lake-id=\"ub61cf69d\" id=\"ub61cf69d\">样式渲染</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cstyle%3E%5Cn%20%20%20%20button%20%7B%5Cn%20%20%20%20%20%20%20%20font-size%3A%2018px%3B%5Cn%20%20%20%20%20%20%20%20font-family%3A%20%5C%22%E5%8D%8E%E6%96%87%E8%A1%8C%E6%A5%B7%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%3Cbutton%3E%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%5Cn%3Cdiv%3E%3C%2Fdiv%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22div%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20root.innerHTML%20%3D%5Cn%20%20%20%20%20%20%20%20%5C%22%3Cstyle%3Ebutton%20%7B%20font-size%3A%2024px%3B%20color%3A%20blue%3B%20%7D%20%3C%2Fstyle%3E%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%5C%22%3Cbutton%3E%E5%BD%B1%E5%AD%90%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%5C%22%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E6%A0%B7%E5%BC%8F%E6%B8%B2%E6%9F%93%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22utCcj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u36f0731d\" id=\"u36f0731d\"><span data-lake-id=\"u29566f22\" id=\"u29566f22\">显示结果：</span></p><p data-lake-id=\"ud8545805\" id=\"ud8545805\"><span data-lake-id=\"uffebc256\" id=\"uffebc256\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130315.png)</span></p><p data-lake-id=\"u704affd7\" id=\"u704affd7\"><span data-lake-id=\"u83514605\" id=\"u83514605\">在影子节点中存在边界使shadow dom样式和正常DOM流中的样式互不干扰，这是一种作用域化的体现，不用担心样式的相互冲突。</span></p><p data-lake-id=\"u4196b774\" id=\"u4196b774\"><span data-lake-id=\"u2450328c\" id=\"u2450328c\">​</span><br></p><p data-lake-id=\"ub13a68e8\" id=\"ub13a68e8\"><span data-lake-id=\"u3cdf773f\" id=\"u3cdf773f\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u3538366f\" id=\"u3538366f\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: shadow dom </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: HTML</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-18</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-18</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: HTML</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: </span><span data-lake-id=\"u97b98a8e\" id=\"u97b98a8e\">https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F11452172135%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"ec0PD\" id=\"ec0PD\"><span data-lake-id=\"ub4d85de9\" id=\"ub4d85de9\">问题引入：</span></h2><p data-lake-id=\"ubec7d191\" id=\"ubec7d191\"><span data-lake-id=\"ua781ad49\" id=\"ua781ad49\">input 为什么能输入内容？</span></p><h2 data-lake-id=\"g5QJj\" id=\"g5QJj\"><span data-lake-id=\"u16a53a15\" id=\"u16a53a15\">思路：</span></h2><ol list=\"ua67cc10d\"><li fid=\"ue149d41f\" data-lake-id=\"u0450ef4b\" id=\"u0450ef4b\"><span data-lake-id=\"u4d5e1291\" id=\"u4d5e1291\">以Chrome为例，F12打开Chrome浏览器控制台，点击设置，开启Element 下的Show user agent shadow DOM选项，可以看见一些隐藏的结构：</span></li></ol><p data-lake-id=\"u80b89f07\" id=\"u80b89f07\"><span data-lake-id=\"u60ad6a54\" id=\"u60ad6a54\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130211.png)</span></p><blockquote data-lake-id=\"uaf682f07\" id=\"uaf682f07\"><p data-lake-id=\"u4d9331d0\" id=\"u4d9331d0\"><span data-lake-id=\"u4855e324\" id=\"u4855e324\">可以看到input标签下有一个shadow-dom，点开shadow-dom可以看到里面的内容。这其中的内容就是具体的实现。</span></p></blockquote><h2 data-lake-id=\"B7d2i\" id=\"B7d2i\"><span data-lake-id=\"ua3b7cff2\" id=\"ua3b7cff2\">Shadow DOM</span></h2><h3 data-lake-id=\"ECJeg\" id=\"ECJeg\"><span data-lake-id=\"u7d231480\" id=\"u7d231480\">什么是 Shadow DOM？</span></h3><p data-lake-id=\"u3187a6b0\" id=\"u3187a6b0\"><span data-lake-id=\"ud7c141c1\" id=\"ud7c141c1\">Shadow DOM 是”DOM中的DOM“，是独立的DOM，具有自己的元素和样式，与原始DOM完全隔离，是我们无法控制操作的DOM。</span></p><p data-lake-id=\"u7f371456\" id=\"u7f371456\"><span data-lake-id=\"ua89213ed\" id=\"ua89213ed\">相当于一个作用域的概念，使其不被外部所影响。可以看做是一颗单独的DOM树，这样就不会有css的命名冲突或样式的意外泄漏的情况。</span></p><h3 data-lake-id=\"ve74E\" id=\"ve74E\"><span data-lake-id=\"u0c9adda3\" id=\"u0c9adda3\">为什么需要 Shadow DOM？</span></h3><ul list=\"ud3893a5b\"><li fid=\"ue47fa4b5\" data-lake-id=\"uf88e8bab\" id=\"uf88e8bab\"><span data-lake-id=\"ua29ae787\" id=\"ua29ae787\">shadow dom是游离于DOM树之外的节点树，但其创建是基于普通的DOM元素（非document），并且创建的节点可以直接从界面上直观的看到</span></li><li fid=\"ue47fa4b5\" data-lake-id=\"ue5cf50a4\" id=\"ue5cf50a4\"><span data-lake-id=\"u2c7f48f0\" id=\"u2c7f48f0\">shadow dom有良好的密封性（浏览器提供的一种“封装”功能，提供了一种强大的技术去隐藏一些实现细节。）</span></li></ul><h3 data-lake-id=\"Jls4Z\" id=\"Jls4Z\"><span data-lake-id=\"uc16f09b1\" id=\"uc16f09b1\">如何创建 Shadow DOM？</span></h3><ul list=\"u80af1e53\"><li fid=\"u80082494\" data-lake-id=\"u36f4e5ed\" id=\"u36f4e5ed\"><span data-lake-id=\"ue2c8e61c\" id=\"ue2c8e61c\">首先，我们指定一个</span><strong><span data-lake-id=\"u402f9a54\" id=\"u402f9a54\">宿主节点（shadow host）</span></strong><span data-lake-id=\"u8c8b85c4\" id=\"u8c8b85c4\">，然后创建影子根（</span><strong><span data-lake-id=\"ucede675a\" id=\"ucede675a\">shadow root</span></strong><span data-lake-id=\"u77b00c19\" id=\"u77b00c19\">），为它添加一个文本节点，但结果宿主中的内容未被渲染。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22widget%5C%22%3EHello%2C%20world!%3C%2Fdiv%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.widget%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20root.textContent%20%3D%20%5C%22%E6%88%91%E5%9C%A8%E4%BD%A0%E7%9A%84%20div%20%E9%87%8C%EF%BC%81%5C%22%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAshadow%20dom%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22G77zo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc7a348e1\" id=\"uc7a348e1\"><span data-lake-id=\"u6692b391\" id=\"u6692b391\">运行结果：</span></p><p data-lake-id=\"u5a4d3fc0\" id=\"u5a4d3fc0\"><span data-lake-id=\"u7583bba9\" id=\"u7583bba9\">![](https://raw.githubusercontent.com/coder-fang/myBlogImgRespository/master/img/649e.png)</span></p><p data-lake-id=\"u07acd1b5\" id=\"u07acd1b5\"><span data-lake-id=\"u94d30045\" id=\"u94d30045\">那么如何渲染宿主节点中的内容？ </span></p><p data-lake-id=\"u20b1c490\" id=\"u20b1c490\" style=\"text-indent: 2em\"><span data-lake-id=\"u9b28f626\" id=\"u9b28f626\">可以使用</span><code data-lake-id=\"u4ecdb103\" id=\"u4ecdb103\"><span data-lake-id=\"u74673e45\" id=\"u74673e45\">slot</span></code><span data-lake-id=\"u53cb2caa\" id=\"u53cb2caa\">标签。由于目前</span><code data-lake-id=\"u079d7ae0\" id=\"u079d7ae0\"><span data-lake-id=\"u8ef897b5\" id=\"u8ef897b5\">content</span></code><span data-lake-id=\"u0f66d4c4\" id=\"u0f66d4c4\">标签已经弃用，可以使用</span><code data-lake-id=\"u2fef4b91\" id=\"u2fef4b91\"><span data-lake-id=\"u822ee307\" id=\"u822ee307\">slot</span></code><span data-lake-id=\"ucae8d317\" id=\"ucae8d317\">标签代替。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22pokemon%5C%22%3E%E5%A4%A7%E9%85%B1%3C%2Fdiv%3E%5Cn%3Ctemplate%20class%3D%5C%22pokemon-template%5C%22%3E%5Cn%20%20%3Ch1%3E%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%3Cslot%3E%3C%2Fslot%3E%EF%BC%8C%E8%AF%B7%E5%A4%9A%E6%8C%87%E6%95%99%EF%BC%81%3C%2Fh1%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.pokemon%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20var%20template%20%3D%20document.querySelector(%5C%22.pokemon-template%5C%22)%3B%5Cn%20%20%20%20console.log(template.content)%3B%5Cn%20%20%20%20root.appendChild(document.importNode(template.content%2C%20true))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VbGmS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u8cac84a4\" id=\"u8cac84a4\"><span data-lake-id=\"u58c32081\" id=\"u58c32081\">显示结果：</span></p><p data-lake-id=\"u5a135471\" id=\"u5a135471\"><span data-lake-id=\"u8f1bfdc7\" id=\"u8f1bfdc7\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130237.png)</span></p><p data-lake-id=\"u16fb9d3d\" id=\"u16fb9d3d\"><code data-lake-id=\"ub221e990\" id=\"ub221e990\"><span data-lake-id=\"u532111f0\" id=\"u532111f0\">&lt;slot&gt;</span></code><span data-lake-id=\"u70cbdd36\" id=\"u70cbdd36\">标签创建了一个</span><strong><span data-lake-id=\"uc8bceb95\" id=\"uc8bceb95\">插入点</span></strong><span data-lake-id=\"u0fbabcf5\" id=\"u0fbabcf5\">将</span><code data-lake-id=\"u8c02caa4\" id=\"u8c02caa4\"><span data-lake-id=\"u37517c91\" id=\"u37517c91\">.pokemon</span></code><span data-lake-id=\"ufe8e9ded\" id=\"ufe8e9ded\">里面的文本投影出来，多个内容匹配时可以使用</span><code data-lake-id=\"uf739af69\" id=\"uf739af69\"><span data-lake-id=\"u268a2b09\" id=\"u268a2b09\">name</span></code><span data-lake-id=\"ua160707c\" id=\"ua160707c\">属性指定。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22host%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%E5%95%A6%E5%95%A6%E5%95%A6%E5%95%A6%3C%2Fp%3E%5Cn%20%20%20%20%3Cspan%20slot%3D%5C%22name%5C%22%3E%E5%A4%A7%E9%85%B1%E5%91%80%3C%2Fspan%3E%5Cn%3C%2Fdiv%3E%5Cn%3Ctemplate%20class%3D%5C%22root-template%5C%22%3E%5Cn%20%20%3Cdl%3E%5Cn%20%20%20%20%3Ch1%3E%3Cdt%3E%E5%90%8D%E5%AD%97%3C%2Fdt%3E%3C%2Fh1%3E%5Cn%20%20%20%20%3Cdd%3E%3Cslot%20name%3D%5C%22name%5C%22%3E%3C%2Fslot%3E%3C%2Fdd%3E%5Cn%20%20%20%20%3Cp%3E%3Cslot%20name%3D%5C%22%5C%22%3E%3C%2Fslot%3E%3C%2Fp%3E%5Cn%20%20%3C%2Fdl%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22.host%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20var%20template%20%3D%20document.querySelector(%5C%22.root-template%5C%22)%3B%5Cn%20%20%20%20root.appendChild(document.importNode(template.content%2C%20true))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E5%A4%9A%E4%B8%AA%E5%86%85%E5%AE%B9%E5%8C%B9%E9%85%8D%E6%97%B6%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hDS3b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u58a6b055\" id=\"u58a6b055\"><span data-lake-id=\"ucc2f3232\" id=\"ucc2f3232\">显示结果：</span></p><p data-lake-id=\"u5115eefa\" id=\"u5115eefa\"><span data-lake-id=\"u56d32729\" id=\"u56d32729\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130255.png)</span></p><blockquote data-lake-id=\"uab434148\" id=\"uab434148\"><p data-lake-id=\"u195a5a44\" id=\"u195a5a44\"><span data-lake-id=\"u0a036ff1\" id=\"u0a036ff1\">注意：</span></p><ol list=\"uadfe3700\"><li fid=\"uf325d9e5\" data-lake-id=\"u0bda6683\" id=\"u0bda6683\"><span data-lake-id=\"u652b563b\" id=\"u652b563b\">只有封闭区域，才能作为shadow Host</span></li><li fid=\"uf325d9e5\" data-lake-id=\"uf888b313\" id=\"uf888b313\"><span data-lake-id=\"u9b9baf5e\" id=\"u9b9baf5e\">当我们把一个标签设置成shadow dom 时，里面的子元素将全部失效。</span></li><li fid=\"uf325d9e5\" data-lake-id=\"u78e21f09\" id=\"u78e21f09\"><span data-lake-id=\"uda980c4a\" id=\"uda980c4a\">当mode为closed时，禁止你使用的shadow Root属性从root外部访问shadow root元素</span></li></ol></blockquote><p data-lake-id=\"u3b4f0054\" id=\"u3b4f0054\"><span data-lake-id=\"u288d94dd\" id=\"u288d94dd\">​</span><br></p><blockquote data-lake-id=\"ud3042ffc\" id=\"ud3042ffc\"><p data-lake-id=\"uf59e97d2\" id=\"uf59e97d2\"><span data-lake-id=\"u4cda725d\" id=\"u4cda725d\">如何修改shadow dom的样式？</span></p><ol list=\"u89aed3fb\"><li fid=\"u485b475a\" data-lake-id=\"uc5e6f8c6\" id=\"uc5e6f8c6\"><span data-lake-id=\"u507aa9c6\" id=\"u507aa9c6\">在shadow 块下面创建style标签，在里面添加样式。</span></li><li fid=\"u485b475a\" data-lake-id=\"u578508a9\" id=\"u578508a9\"><span data-lake-id=\"u4b39a33b\" id=\"u4b39a33b\">mode为true时，通过shadow root 获取到指定元素修改样式。</span></li></ol></blockquote><h3 data-lake-id=\"f1sCj\" id=\"f1sCj\"><span data-lake-id=\"ub61cf69d\" id=\"ub61cf69d\">样式渲染</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cstyle%3E%5Cn%20%20%20%20button%20%7B%5Cn%20%20%20%20%20%20%20%20font-size%3A%2018px%3B%5Cn%20%20%20%20%20%20%20%20font-family%3A%20%5C%22%E5%8D%8E%E6%96%87%E8%A1%8C%E6%A5%B7%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%3C%2Fstyle%3E%5Cn%3Cbutton%3E%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%5Cn%3Cdiv%3E%3C%2Fdiv%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20host%20%3D%20document.querySelector(%5C%22div%5C%22)%3B%5Cn%20%20%20%20var%20root%20%3D%20host.attachShadow(%7B%5Cn%20%20%20%20%20%20%20%20mode%3A%20%5C%22open%5C%22%2C%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20root.innerHTML%20%3D%5Cn%20%20%20%20%20%20%20%20%5C%22%3Cstyle%3Ebutton%20%7B%20font-size%3A%2024px%3B%20color%3A%20blue%3B%20%7D%20%3C%2Fstyle%3E%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%5C%22%3Cbutton%3E%E5%BD%B1%E5%AD%90%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%5C%22%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E6%A0%B7%E5%BC%8F%E6%B8%B2%E6%9F%93%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22utCcj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u36f0731d\" id=\"u36f0731d\"><span data-lake-id=\"u29566f22\" id=\"u29566f22\">显示结果：</span></p><p data-lake-id=\"ud8545805\" id=\"ud8545805\"><span data-lake-id=\"uffebc256\" id=\"uffebc256\">![](https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221208130315.png)</span></p><p data-lake-id=\"u704affd7\" id=\"u704affd7\"><span data-lake-id=\"u83514605\" id=\"u83514605\">在影子节点中存在边界使shadow dom样式和正常DOM流中的样式互不干扰，这是一种作用域化的体现，不用担心样式的相互冲突。</span></p><p data-lake-id=\"u4196b774\" id=\"u4196b774\"><span data-lake-id=\"u2450328c\" id=\"u2450328c\">​</span><br></p><p data-lake-id=\"ub13a68e8\" id=\"ub13a68e8\"><span data-lake-id=\"u3cdf773f\" id=\"u3cdf773f\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-08T05:14:44.000Z",
    "deleted_at": null,
    "created_at": "2022-12-07T11:12:00.000Z",
    "updated_at": "2022-12-08T05:14:44.000Z",
    "published_at": "2022-12-08T05:14:44.000Z",
    "first_published_at": "2022-12-07T12:03:12.991Z",
    "word_count": 856,
    "cover": null,
    "description": "--- title: shadow dom categories: HTMLdate: 2022-11-18updated: 2022-11-18tags: HTMLcover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fine...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 107911533,
    "slug": "kg3opkzu64one66h",
    "title": "代码和图编辑器技术调研",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: 代码和图编辑器技术调研 <br />categories: 技术方案<br />date: 2022-6-10<br />updated: 2022-6-10<br />tags: 技术调研<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221211145840.png<br />---\n<a name=\"QOL3c\"></a>\n## 代码编辑器\n<a name=\"aod9n\"></a>\n### 技术选型：\n在线代码编辑器： CodePen、CodeSanbox、JSFiddle<br />开源框架/库：CodeMirror5\n<a name=\"KE3KA\"></a>\n## 图编辑器\n开源框架/库：\n\n- LogicFlow 底层依赖 svg\n- AntV G6  自定义需求强、中等数据  \n   - **交互方面缩放 友好**（采用脏矩形渲染机制、矩阵scale算法）✨\n   - **适合复杂定制** ✨\n- Sigma.js    简单样式、海量数据\n   - 平均，基本上不会有卡顿\n   - 动作上有缓入缓出机制，隐藏了一些不自然的帧来达到流畅\n   - 适合简单交互、数据量大的场景\n- vis-network   对定制化和包大小有要求、功能模块化裁剪、场景友好\n   - 大数据交互下不太友好，有明显卡顿感\n   - 完善的模块化机制\n> X6 与 G6 的区别：<br />X6 是图编辑引擎，特点是节点、边、等元素的定制能力非常强，经常用来构建流程图、ER图、DAG图、脑图等应用。G6 和 X6 是孪生兄弟，G6 更擅长于图可视化和图分析领域。\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png#averageHue=%23f4f4f4&clientId=u39fbe52f-7c5d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=392&id=uea3aa3a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=714&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134585&status=done&style=none&taskId=ua75e1627-9791-409c-acba-1f488dee087&title=&width=714)\n",
    "body_draft": "--- <br />title: 代码和图编辑器技术调研 <br />categories: 技术方案<br />date: 2022-6-10<br />updated: 2022-6-10<br />tags: 技术调研<br />cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221211145840.png<br />---\n<a name=\"QOL3c\"></a>\n## 代码编辑器\n<a name=\"aod9n\"></a>\n### 技术选型：\n在线代码编辑器： CodePen、CodeSanbox、JSFiddle<br />开源框架/库：CodeMirror5\n<a name=\"KE3KA\"></a>\n## 图编辑器\n开源框架/库：\n\n- LogicFlow 底层依赖 svg\n- AntV G6  自定义需求强、中等数据  \n   - **交互方面缩放 友好**（采用脏矩形渲染机制、矩阵scale算法）✨\n   - **适合复杂定制** ✨\n- Sigma.js    简单样式、海量数据\n   - 平均，基本上不会有卡顿\n   - 动作上有缓入缓出机制，隐藏了一些不自然的帧来达到流畅\n   - 适合简单交互、数据量大的场景\n- vis-network   对定制化和包大小有要求、功能模块化裁剪、场景友好\n   - 大数据交互下不太友好，有明显卡顿感\n   - 完善的模块化机制\n> X6 与 G6 的区别：<br />X6 是图编辑引擎，特点是节点、边、等元素的定制能力非常强，经常用来构建流程图、ER图、DAG图、脑图等应用。G6 和 X6 是孪生兄弟，G6 更擅长于图可视化和图分析领域。\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png#averageHue=%23f4f4f4&clientId=u39fbe52f-7c5d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=392&id=uea3aa3a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=714&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134585&status=done&style=none&taskId=ua75e1627-9791-409c-acba-1f488dee087&title=&width=714)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ude79f464\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"u2478cdb6\" class=\"ne-p\"><span class=\"ne-text\">title: 代码和图编辑器技术调研 </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: 技术方案</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-6-10</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-6-10</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: 技术调研</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221211145840.png</span></p><p id=\"ud4af58d6\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><h2 id=\"QOL3c\"><span class=\"ne-text\">代码编辑器</span></h2><h3 id=\"aod9n\"><span class=\"ne-text\">技术选型：</span></h3><p id=\"ubd2871c1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">在线代码编辑器： CodePen、CodeSanbox、JSFiddle</span></p><p id=\"u71b6009d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">开源框架/库：</span><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); text-decoration: underline; font-size: 16px\">CodeMirror5</span></p><h2 id=\"KE3KA\"><span class=\"ne-text\">图编辑器</span></h2><p id=\"u5e557563\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">开源框架/库：</span></p><ul class=\"ne-ul\"><li id=\"uf386c82a\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">LogicFlow 底层依赖 svg</span></li><li id=\"u8e510547\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); text-decoration: underline; font-size: 16px\">AntV G6</span><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">  自定义需求强、中等数据  </span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u76d7a492\"><strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">交互方面缩放 友好</span></strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">（采用脏矩形渲染机制、矩阵scale算法）✨</span></li><li id=\"u0e768c15\"><strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\">适合复杂定制</span></strong><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 16px\"> ✨</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u2e2c3c0a\"><span class=\"ne-text\" style=\"color: var(--text1)\">Sigma.js    简单样式、海量数据</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u7afb0e00\"><span class=\"ne-text\" style=\"color: var(--text1)\">平均，基本上不会有卡顿</span></li><li id=\"u1bf903a7\"><span class=\"ne-text\" style=\"color: var(--text1)\">动作上有缓入缓出机制，隐藏了一些不自然的帧来达到流畅</span></li><li id=\"ud33e37ad\"><span class=\"ne-text\" style=\"color: var(--text1)\">适合简单交互、数据量大的场景</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u2b0a6e20\"><span class=\"ne-text\" style=\"color: var(--text1)\">vis-network   对定制化和包大小有要求、功能模块化裁剪、场景友好</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u715ff937\"><span class=\"ne-text\" style=\"color: var(--text1)\">大数据交互下不太友好，有明显卡顿感</span></li><li id=\"u0906f2a4\"><span class=\"ne-text\" style=\"color: var(--text1)\">完善的模块化机制</span></li></ul></ul><div class=\"ne-quote\"><p id=\"uedfb6609\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(100, 100, 100)\">X6 与 G6 的区别：</span><span class=\"ne-text\"><br /></span><span class=\"ne-text\" style=\"color: rgb(100, 100, 100)\">X6 是图编辑引擎，特点是节点、边、等元素的定制能力非常强，经常用来构建流程图、ER图、DAG图、脑图等应用。G6 和 X6 是孪生兄弟，G6 更擅长于图可视化和图分析领域。</span></p></div><p id=\"u19375377\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png\" width=\"714\" id=\"uea3aa3a7\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ude79f464\" id=\"ude79f464\"><span data-lake-id=\"u18f57d0c\" id=\"u18f57d0c\">--- </span></p><p data-lake-id=\"u2478cdb6\" id=\"u2478cdb6\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: 代码和图编辑器技术调研 </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 技术方案</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-6-10</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-6-10</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: 技术调研</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221211145840.png</span></p><p data-lake-id=\"ud4af58d6\" id=\"ud4af58d6\"><span data-lake-id=\"u9456cbcd\" id=\"u9456cbcd\">---</span></p><h2 data-lake-id=\"QOL3c\" id=\"QOL3c\"><span data-lake-id=\"u2e976019\" id=\"u2e976019\">代码编辑器</span></h2><h3 data-lake-id=\"aod9n\" id=\"aod9n\"><span data-lake-id=\"u8f8dd3b1\" id=\"u8f8dd3b1\">技术选型：</span></h3><p data-lake-id=\"ubd2871c1\" id=\"ubd2871c1\"><span data-lake-id=\"u4172f4b8\" id=\"u4172f4b8\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">在线代码编辑器： CodePen、CodeSanbox、JSFiddle</span></p><p data-lake-id=\"u71b6009d\" id=\"u71b6009d\"><span data-lake-id=\"u9813a019\" id=\"u9813a019\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">开源框架/库：</span><span style=\"color: rgb(77, 77, 77)\"><u><span data-lake-id=\"u07ddf0e6\" id=\"u07ddf0e6\" class=\"lake-fontsize-12\">CodeMirror5</span></u></span></p><h2 data-lake-id=\"KE3KA\" id=\"KE3KA\"><span data-lake-id=\"ucce28a22\" id=\"ucce28a22\">图编辑器</span></h2><p data-lake-id=\"u5e557563\" id=\"u5e557563\"><span data-lake-id=\"ue61fdaba\" id=\"ue61fdaba\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">开源框架/库：</span></p><ul list=\"u43d7df49\"><li fid=\"u60183d78\" data-lake-id=\"uf386c82a\" id=\"uf386c82a\"><span data-lake-id=\"uf3b722df\" id=\"uf3b722df\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">LogicFlow 底层依赖 svg</span></li><li fid=\"u60183d78\" data-lake-id=\"u8e510547\" id=\"u8e510547\"><span style=\"color: rgb(77, 77, 77)\"><u><span data-lake-id=\"u3f5336a0\" id=\"u3f5336a0\" class=\"lake-fontsize-12\">AntV G6</span></u></span><span data-lake-id=\"u732c461c\" id=\"u732c461c\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">  自定义需求强、中等数据  </span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u76d7a492\" id=\"u76d7a492\"><strong><span data-lake-id=\"u261ee4cb\" id=\"u261ee4cb\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">交互方面缩放 友好</span></strong><span data-lake-id=\"u3664e31a\" id=\"u3664e31a\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">（采用脏矩形渲染机制、矩阵scale算法）✨</span></li><li fid=\"u60183d78\" data-lake-id=\"u0e768c15\" id=\"u0e768c15\"><strong><span data-lake-id=\"u7d66191f\" id=\"u7d66191f\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">适合复杂定制</span></strong><span data-lake-id=\"u2b60dcf3\" id=\"u2b60dcf3\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\"> ✨</span></li></ul><ul list=\"u43d7df49\" start=\"3\"><li fid=\"u60183d78\" data-lake-id=\"u2e2c3c0a\" id=\"u2e2c3c0a\"><span data-lake-id=\"u5355fae3\" id=\"u5355fae3\" style=\"color: var(--text1)\">Sigma.js    简单样式、海量数据</span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u7afb0e00\" id=\"u7afb0e00\"><span data-lake-id=\"u136866c7\" id=\"u136866c7\" style=\"color: var(--text1)\">平均，基本上不会有卡顿</span></li><li fid=\"u60183d78\" data-lake-id=\"u1bf903a7\" id=\"u1bf903a7\"><span data-lake-id=\"u045914a8\" id=\"u045914a8\" style=\"color: var(--text1)\">动作上有缓入缓出机制，隐藏了一些不自然的帧来达到流畅</span></li><li fid=\"u60183d78\" data-lake-id=\"ud33e37ad\" id=\"ud33e37ad\"><span data-lake-id=\"u78d5d960\" id=\"u78d5d960\" style=\"color: var(--text1)\">适合简单交互、数据量大的场景</span></li></ul><ul list=\"u43d7df49\" start=\"4\"><li fid=\"u60183d78\" data-lake-id=\"u2b0a6e20\" id=\"u2b0a6e20\"><span data-lake-id=\"u09c1358c\" id=\"u09c1358c\" style=\"color: var(--text1)\">vis-network   对定制化和包大小有要求、功能模块化裁剪、场景友好</span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u715ff937\" id=\"u715ff937\"><span data-lake-id=\"u372df26d\" id=\"u372df26d\" style=\"color: var(--text1)\">大数据交互下不太友好，有明显卡顿感</span></li><li fid=\"u60183d78\" data-lake-id=\"u0906f2a4\" id=\"u0906f2a4\"><span data-lake-id=\"ud7f1c956\" id=\"ud7f1c956\" style=\"color: var(--text1)\">完善的模块化机制</span></li></ul><blockquote data-lake-id=\"uafd76f0c\" id=\"uafd76f0c\"><p data-lake-id=\"uedfb6609\" id=\"uedfb6609\"><span data-lake-id=\"ub7be2d68\" id=\"ub7be2d68\" style=\"color: rgb(100, 100, 100)\">X6 与 G6 的区别：</span><span data-lake-id=\"u3aed36ca\" id=\"u3aed36ca\"><br /></span><span data-lake-id=\"uf1a613dd\" id=\"uf1a613dd\" style=\"color: rgb(100, 100, 100)\">X6 是图编辑引擎，特点是节点、边、等元素的定制能力非常强，经常用来构建流程图、ER图、DAG图、脑图等应用。G6 和 X6 是孪生兄弟，G6 更擅长于图可视化和图分析领域。</span></p></blockquote><p data-lake-id=\"u19375377\" id=\"u19375377\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png%22%2C%22taskId%22%3A%22ua75e1627-9791-409c-acba-1f488dee087%22%2C%22clientId%22%3A%22u39fbe52f-7c5d-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A714%2C%22height%22%3A392%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134585%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A714%2C%22originHeight%22%3A392%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BC%98%E5%8A%BF%20%E6%96%B9%E6%A1%88%20%E5%8A%A3%E5%8A%BF(%E6%B5%81%E7%A8%8B%E5%9B%BE%E9%9C%80%E6%B1%82%E4%B8%8B)%20%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%94%AF%E6%8C%81%20%E7%BA%AFHTML%20%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%2C%E9%80%9A%E8%BF%87CSS%E5%8D%B3%E5%8F%AF%E7%BB%98%E5%88%B6%20%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%81%92%E5%AE%9A%20%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E5%9F%BA%E4%BA%8E%E6%95%B4%E5%BC%A0%E7%94%BB%E5%B8%83%2C%E6%A0%B9%E6%8D%AE%E5%9D%90%20CANVAS%20%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%8F%AA%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AAHTML%E5%85%83%E7%B4%A0%20%E6%A0%87%E8%AE%A1%E7%AE%97%E5%87%BA%E8%8A%82%E7%82%B9%2C%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E7%B9%81%E7%90%90%20-%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8F%92%E5%85%A5HTML%20%E5%85%83%E7%B4%A0%2C%E4%B8%8D%E6%94%AF%E6%8C%81%20-%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0%E6%AF%94SVG%20%E5%A5%BD%20CSS%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F%20-%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%A4%A7%E5%B1%8F%E5%B9%95%E4%B8%8B%E6%B8%B2%E6%9F%93%E6%97%B6%20%E9%97%B4%E9%95%BF%20SVG%20%E5%9F%BA%E4%BA%8E%E7%9F%A2%E9%87%8F%2C%E9%9A%8F%E6%84%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E8%80%8C%E4%B8%8D%20%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8EDOM%2C%E5%BD%93%E5%9B%BE%E7%9A%84%E4%B8%8E%E5%85%83%E7%B4%A0%E6%95%B0%20%E9%87%8F%E8%BE%83%E5%A4%9A%E7%9A%84%E6%97%B6%E5%80%99%2C%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%9A%E6%AF%94%E8%BE%83%E4%BD%8E%20%E5%A4%B1%E7%9C%9F%20-%E5%9F%BA%E4%BA%8EDOM%2C%E5%AD%A6%E4%B9%A0%E6%88%90%E6%9C%AC%E5%92%8C%E7%BC%96%E7%A8%8B%E6%88%90%20%E6%9C%AC%E4%BD%8E%2C%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8E%20DOM%2C%E5%B9%B6%E4%B8%94%E6%94%AF%E6%8C%81%20CSS%2C%E4%BD%BF%E7%94%A8%E6%96%B9%E4%BE%BF%20-%E9%80%82%E5%90%88%E9%9D%99%E6%80%81%E5%9B%BE%E5%83%8F%2C%E5%9F%BA%E4%BA%8ESVG%20%E4%B9%9F%E5%8F%AF%20%E4%BB%A5%E5%81%9A%E8%BD%AC%E6%8D%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A182.74239%2C%22y%22%3A23.975464%2C%22width%22%3A32.20572999999999%2C%22height%22%3A16.412846%2C%22text%22%3A%22%E4%BC%98%E5%8A%BF%22%7D%2C%7B%22x%22%3A28.33652%2C%22y%22%3A24.008493%2C%22width%22%3A34.36082%2C%22height%22%3A17.530519999999996%2C%22text%22%3A%22%E6%96%B9%E6%A1%88%22%7D%2C%7B%22x%22%3A428.10117%2C%22y%22%3A23.632673%2C%22width%22%3A149.19403%2C%22height%22%3A17.666144%2C%22text%22%3A%22%E5%8A%A3%E5%8A%BF(%E6%B5%81%E7%A8%8B%E5%9B%BE%E9%9C%80%E6%B1%82%E4%B8%8B)%22%7D%2C%7B%22x%22%3A427.8337%2C%22y%22%3A55.880177%2C%22width%22%3A158.81859999999995%2C%22height%22%3A17.452372999999994%2C%22text%22%3A%22%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A27.93141%2C%22y%22%3A55.97051%2C%22width%22%3A67.09869%2C%22height%22%3A17.37698600000001%2C%22text%22%3A%22%E7%BA%AFHTML%22%7D%2C%7B%22x%22%3A183.08455%2C%22y%22%3A57.20821%2C%22width%22%3A216.21241999999998%2C%22height%22%3A16.957659999999997%2C%22text%22%3A%22%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%2C%E9%80%9A%E8%BF%87CSS%E5%8D%B3%E5%8F%AF%E7%BB%98%E5%88%B6%22%7D%2C%7B%22x%22%3A195.97217%2C%22y%22%3A88.48349%2C%22width%22%3A175.96263%2C%22height%22%3A17.723469999999992%2C%22text%22%3A%22%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%81%92%E5%AE%9A%22%7D%2C%7B%22x%22%3A431.7233%2C%22y%22%3A88.97757%2C%22width%22%3A233.77993000000004%2C%22height%22%3A17.619470000000007%2C%22text%22%3A%22%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E5%9F%BA%E4%BA%8E%E6%95%B4%E5%BC%A0%E7%94%BB%E5%B8%83%2C%E6%A0%B9%E6%8D%AE%E5%9D%90%22%7D%2C%7B%22x%22%3A28.85659%2C%22y%22%3A89.879974%2C%22width%22%3A55.80133000000001%2C%22height%22%3A14.155700999999993%2C%22text%22%3A%22CANVAS%22%7D%2C%7B%22x%22%3A195.62952%2C%22y%22%3A109.24726%2C%22width%22%3A215.28298%2C%22height%22%3A17.08032%2C%22text%22%3A%22%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%8F%AA%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AAHTML%E5%85%83%E7%B4%A0%22%7D%2C%7B%22x%22%3A427.7661%2C%22y%22%3A109.52163%2C%22width%22%3A210.13527000000005%2C%22height%22%3A16.699195000000003%2C%22text%22%3A%22%E6%A0%87%E8%AE%A1%E7%AE%97%E5%87%BA%E8%8A%82%E7%82%B9%2C%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E7%B9%81%E7%90%90%22%7D%2C%7B%22x%22%3A438.19943%2C%22y%22%3A131.46617%2C%22width%22%3A233.97653000000003%2C%22height%22%3A15.81568999999999%2C%22text%22%3A%22-%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8F%92%E5%85%A5HTML%20%E5%85%83%E7%B4%A0%2C%E4%B8%8D%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A195.0735%2C%22y%22%3A132.24176%2C%22width%22%3A206.51326000000003%2C%22height%22%3A16.32804999999999%2C%22text%22%3A%22-%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0%E6%AF%94SVG%22%7D%2C%7B%22x%22%3A181.53746%2C%22y%22%3A153.24632%2C%22width%22%3A17.38830999999999%2C%22height%22%3A16.79688999999999%2C%22text%22%3A%22%E5%A5%BD%22%7D%2C%7B%22x%22%3A428.2332%2C%22y%22%3A153.37639%2C%22width%22%3A93.78179999999998%2C%22height%22%3A16.641130000000004%2C%22text%22%3A%22CSS%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F%22%7D%2C%7B%22x%22%3A439.27927%2C%22y%22%3A174.2126%2C%22width%22%3A226.65206999999998%2C%22height%22%3A16.310720000000003%2C%22text%22%3A%22-%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%A4%A7%E5%B1%8F%E5%B9%95%E4%B8%8B%E6%B8%B2%E6%9F%93%E6%97%B6%22%7D%2C%7B%22x%22%3A427.60648%2C%22y%22%3A195.95827%2C%22width%22%3A32.348220000000026%2C%22height%22%3A16.45678000000001%2C%22text%22%3A%22%E9%97%B4%E9%95%BF%22%7D%2C%7B%22x%22%3A27.185465%2C%22y%22%3A227.01306%2C%22width%22%3A31.892587999999996%2C%22height%22%3A19.344189999999998%2C%22text%22%3A%22SVG%22%7D%2C%7B%22x%22%3A194.82153%2C%22y%22%3A227.5049%2C%22width%22%3A208.69492000000002%2C%22height%22%3A17.471360000000004%2C%22text%22%3A%22%E5%9F%BA%E4%BA%8E%E7%9F%A2%E9%87%8F%2C%E9%9A%8F%E6%84%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E8%80%8C%E4%B8%8D%22%7D%2C%7B%22x%22%3A437.61844%2C%22y%22%3A226.64351%2C%22width%22%3A239.50885999999997%2C%22height%22%3A19.36423000000002%2C%22text%22%3A%22%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8EDOM%2C%E5%BD%93%E5%9B%BE%E7%9A%84%E4%B8%8E%E5%85%83%E7%B4%A0%E6%95%B0%22%7D%2C%7B%22x%22%3A427.72852%2C%22y%22%3A247.46236%2C%22width%22%3A238.25903000000005%2C%22height%22%3A19.32704000000001%2C%22text%22%3A%22%E9%87%8F%E8%BE%83%E5%A4%9A%E7%9A%84%E6%97%B6%E5%80%99%2C%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%9A%E6%AF%94%E8%BE%83%E4%BD%8E%22%7D%2C%7B%22x%22%3A182.51393%2C%22y%22%3A248.60333%2C%22width%22%3A31.13205000000002%2C%22height%22%3A16.705970000000008%2C%22text%22%3A%22%E5%A4%B1%E7%9C%9F%22%7D%2C%7B%22x%22%3A181.91895%2C%22y%22%3A270.8799%2C%22width%22%3A232.42099000000002%2C%22height%22%3A17.222669999999994%2C%22text%22%3A%22-%E5%9F%BA%E4%BA%8EDOM%2C%E5%AD%A6%E4%B9%A0%E6%88%90%E6%9C%AC%E5%92%8C%E7%BC%96%E7%A8%8B%E6%88%90%22%7D%2C%7B%22x%22%3A183.13826%2C%22y%22%3A292.25998%2C%22width%22%3A173.15064%2C%22height%22%3A16.699720000000013%2C%22text%22%3A%22%E6%9C%AC%E4%BD%8E%2C%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8E%22%7D%2C%7B%22x%22%3A181.7264%2C%22y%22%3A312.2302%2C%22width%22%3A226.99579999999997%2C%22height%22%3A17.593259999999987%2C%22text%22%3A%22DOM%2C%E5%B9%B6%E4%B8%94%E6%94%AF%E6%8C%81%20CSS%2C%E4%BD%BF%E7%94%A8%E6%96%B9%E4%BE%BF%22%7D%2C%7B%22x%22%3A185.07164%2C%22y%22%3A333.79282%2C%22width%22%3A223.89476000000002%2C%22height%22%3A17.594780000000014%2C%22text%22%3A%22-%E9%80%82%E5%90%88%E9%9D%99%E6%80%81%E5%9B%BE%E5%83%8F%2C%E5%9F%BA%E4%BA%8ESVG%20%E4%B9%9F%E5%8F%AF%22%7D%2C%7B%22x%22%3A182.93622%2C%22y%22%3A356.30228%2C%22width%22%3A63.81091000000001%2C%22height%22%3A16.138019999999983%2C%22text%22%3A%22%E4%BB%A5%E5%81%9A%E8%BD%AC%E6%8D%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22uea3aa3a7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ude79f464\" id=\"ude79f464\"><span data-lake-id=\"u18f57d0c\" id=\"u18f57d0c\">--- </span></p><p data-lake-id=\"u2478cdb6\" id=\"u2478cdb6\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: 代码和图编辑器技术调研 </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 技术方案</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-6-10</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-6-10</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: 技术调研</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespository/img/20221211145840.png</span></p><p data-lake-id=\"ud4af58d6\" id=\"ud4af58d6\"><span data-lake-id=\"u9456cbcd\" id=\"u9456cbcd\">---</span></p><h2 data-lake-id=\"QOL3c\" id=\"QOL3c\"><span data-lake-id=\"u2e976019\" id=\"u2e976019\">代码编辑器</span></h2><h3 data-lake-id=\"aod9n\" id=\"aod9n\"><span data-lake-id=\"u8f8dd3b1\" id=\"u8f8dd3b1\">技术选型：</span></h3><p data-lake-id=\"ubd2871c1\" id=\"ubd2871c1\"><span data-lake-id=\"u4172f4b8\" id=\"u4172f4b8\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">在线代码编辑器： CodePen、CodeSanbox、JSFiddle</span></p><p data-lake-id=\"u71b6009d\" id=\"u71b6009d\"><span data-lake-id=\"u9813a019\" id=\"u9813a019\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">开源框架/库：</span><span style=\"color: rgb(77, 77, 77)\"><u><span data-lake-id=\"u07ddf0e6\" id=\"u07ddf0e6\" class=\"lake-fontsize-12\">CodeMirror5</span></u></span></p><h2 data-lake-id=\"KE3KA\" id=\"KE3KA\"><span data-lake-id=\"ucce28a22\" id=\"ucce28a22\">图编辑器</span></h2><p data-lake-id=\"u5e557563\" id=\"u5e557563\"><span data-lake-id=\"ue61fdaba\" id=\"ue61fdaba\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">开源框架/库：</span></p><ul list=\"u43d7df49\"><li fid=\"u60183d78\" data-lake-id=\"uf386c82a\" id=\"uf386c82a\"><span data-lake-id=\"uf3b722df\" id=\"uf3b722df\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">LogicFlow 底层依赖 svg</span></li><li fid=\"u60183d78\" data-lake-id=\"u8e510547\" id=\"u8e510547\"><span style=\"color: rgb(77, 77, 77)\"><u><span data-lake-id=\"u3f5336a0\" id=\"u3f5336a0\" class=\"lake-fontsize-12\">AntV G6</span></u></span><span data-lake-id=\"u732c461c\" id=\"u732c461c\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">  自定义需求强、中等数据  </span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u76d7a492\" id=\"u76d7a492\"><strong><span data-lake-id=\"u261ee4cb\" id=\"u261ee4cb\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">交互方面缩放 友好</span></strong><span data-lake-id=\"u3664e31a\" id=\"u3664e31a\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">（采用脏矩形渲染机制、矩阵scale算法）✨</span></li><li fid=\"u60183d78\" data-lake-id=\"u0e768c15\" id=\"u0e768c15\"><strong><span data-lake-id=\"u7d66191f\" id=\"u7d66191f\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">适合复杂定制</span></strong><span data-lake-id=\"u2b60dcf3\" id=\"u2b60dcf3\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\"> ✨</span></li></ul><ul list=\"u43d7df49\" start=\"3\"><li fid=\"u60183d78\" data-lake-id=\"u2e2c3c0a\" id=\"u2e2c3c0a\"><span data-lake-id=\"u5355fae3\" id=\"u5355fae3\" style=\"color: var(--text1)\">Sigma.js    简单样式、海量数据</span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u7afb0e00\" id=\"u7afb0e00\"><span data-lake-id=\"u136866c7\" id=\"u136866c7\" style=\"color: var(--text1)\">平均，基本上不会有卡顿</span></li><li fid=\"u60183d78\" data-lake-id=\"u1bf903a7\" id=\"u1bf903a7\"><span data-lake-id=\"u045914a8\" id=\"u045914a8\" style=\"color: var(--text1)\">动作上有缓入缓出机制，隐藏了一些不自然的帧来达到流畅</span></li><li fid=\"u60183d78\" data-lake-id=\"ud33e37ad\" id=\"ud33e37ad\"><span data-lake-id=\"u78d5d960\" id=\"u78d5d960\" style=\"color: var(--text1)\">适合简单交互、数据量大的场景</span></li></ul><ul list=\"u43d7df49\" start=\"4\"><li fid=\"u60183d78\" data-lake-id=\"u2b0a6e20\" id=\"u2b0a6e20\"><span data-lake-id=\"u09c1358c\" id=\"u09c1358c\" style=\"color: var(--text1)\">vis-network   对定制化和包大小有要求、功能模块化裁剪、场景友好</span></li></ul><ul list=\"u43d7df49\" data-lake-indent=\"1\"><li fid=\"u60183d78\" data-lake-id=\"u715ff937\" id=\"u715ff937\"><span data-lake-id=\"u372df26d\" id=\"u372df26d\" style=\"color: var(--text1)\">大数据交互下不太友好，有明显卡顿感</span></li><li fid=\"u60183d78\" data-lake-id=\"u0906f2a4\" id=\"u0906f2a4\"><span data-lake-id=\"ud7f1c956\" id=\"ud7f1c956\" style=\"color: var(--text1)\">完善的模块化机制</span></li></ul><blockquote data-lake-id=\"uafd76f0c\" id=\"uafd76f0c\"><p data-lake-id=\"uedfb6609\" id=\"uedfb6609\"><span data-lake-id=\"ub7be2d68\" id=\"ub7be2d68\" style=\"color: rgb(100, 100, 100)\">X6 与 G6 的区别：</span><span data-lake-id=\"u3aed36ca\" id=\"u3aed36ca\"><br /></span><span data-lake-id=\"uf1a613dd\" id=\"uf1a613dd\" style=\"color: rgb(100, 100, 100)\">X6 是图编辑引擎，特点是节点、边、等元素的定制能力非常强，经常用来构建流程图、ER图、DAG图、脑图等应用。G6 和 X6 是孪生兄弟，G6 更擅长于图可视化和图分析领域。</span></p></blockquote><p data-lake-id=\"u19375377\" id=\"u19375377\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png%22%2C%22taskId%22%3A%22ua75e1627-9791-409c-acba-1f488dee087%22%2C%22clientId%22%3A%22u39fbe52f-7c5d-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A714%2C%22height%22%3A392%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134585%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A714%2C%22originHeight%22%3A392%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BC%98%E5%8A%BF%20%E6%96%B9%E6%A1%88%20%E5%8A%A3%E5%8A%BF(%E6%B5%81%E7%A8%8B%E5%9B%BE%E9%9C%80%E6%B1%82%E4%B8%8B)%20%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%94%AF%E6%8C%81%20%E7%BA%AFHTML%20%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%2C%E9%80%9A%E8%BF%87CSS%E5%8D%B3%E5%8F%AF%E7%BB%98%E5%88%B6%20%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%81%92%E5%AE%9A%20%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E5%9F%BA%E4%BA%8E%E6%95%B4%E5%BC%A0%E7%94%BB%E5%B8%83%2C%E6%A0%B9%E6%8D%AE%E5%9D%90%20CANVAS%20%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%8F%AA%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AAHTML%E5%85%83%E7%B4%A0%20%E6%A0%87%E8%AE%A1%E7%AE%97%E5%87%BA%E8%8A%82%E7%82%B9%2C%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E7%B9%81%E7%90%90%20-%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8F%92%E5%85%A5HTML%20%E5%85%83%E7%B4%A0%2C%E4%B8%8D%E6%94%AF%E6%8C%81%20-%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0%E6%AF%94SVG%20%E5%A5%BD%20CSS%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F%20-%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%A4%A7%E5%B1%8F%E5%B9%95%E4%B8%8B%E6%B8%B2%E6%9F%93%E6%97%B6%20%E9%97%B4%E9%95%BF%20SVG%20%E5%9F%BA%E4%BA%8E%E7%9F%A2%E9%87%8F%2C%E9%9A%8F%E6%84%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E8%80%8C%E4%B8%8D%20%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8EDOM%2C%E5%BD%93%E5%9B%BE%E7%9A%84%E4%B8%8E%E5%85%83%E7%B4%A0%E6%95%B0%20%E9%87%8F%E8%BE%83%E5%A4%9A%E7%9A%84%E6%97%B6%E5%80%99%2C%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%9A%E6%AF%94%E8%BE%83%E4%BD%8E%20%E5%A4%B1%E7%9C%9F%20-%E5%9F%BA%E4%BA%8EDOM%2C%E5%AD%A6%E4%B9%A0%E6%88%90%E6%9C%AC%E5%92%8C%E7%BC%96%E7%A8%8B%E6%88%90%20%E6%9C%AC%E4%BD%8E%2C%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8E%20DOM%2C%E5%B9%B6%E4%B8%94%E6%94%AF%E6%8C%81%20CSS%2C%E4%BD%BF%E7%94%A8%E6%96%B9%E4%BE%BF%20-%E9%80%82%E5%90%88%E9%9D%99%E6%80%81%E5%9B%BE%E5%83%8F%2C%E5%9F%BA%E4%BA%8ESVG%20%E4%B9%9F%E5%8F%AF%20%E4%BB%A5%E5%81%9A%E8%BD%AC%E6%8D%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A182.74239%2C%22y%22%3A23.975464%2C%22width%22%3A32.20572999999999%2C%22height%22%3A16.412846%2C%22text%22%3A%22%E4%BC%98%E5%8A%BF%22%7D%2C%7B%22x%22%3A28.33652%2C%22y%22%3A24.008493%2C%22width%22%3A34.36082%2C%22height%22%3A17.530519999999996%2C%22text%22%3A%22%E6%96%B9%E6%A1%88%22%7D%2C%7B%22x%22%3A428.10117%2C%22y%22%3A23.632673%2C%22width%22%3A149.19403%2C%22height%22%3A17.666144%2C%22text%22%3A%22%E5%8A%A3%E5%8A%BF(%E6%B5%81%E7%A8%8B%E5%9B%BE%E9%9C%80%E6%B1%82%E4%B8%8B)%22%7D%2C%7B%22x%22%3A427.8337%2C%22y%22%3A55.880177%2C%22width%22%3A158.81859999999995%2C%22height%22%3A17.452372999999994%2C%22text%22%3A%22%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E5%BD%A2%E4%B8%8D%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A27.93141%2C%22y%22%3A55.97051%2C%22width%22%3A67.09869%2C%22height%22%3A17.37698600000001%2C%22text%22%3A%22%E7%BA%AFHTML%22%7D%2C%7B%22x%22%3A183.08455%2C%22y%22%3A57.20821%2C%22width%22%3A216.21241999999998%2C%22height%22%3A16.957659999999997%2C%22text%22%3A%22%E5%85%A5%E9%97%A8%E7%AE%80%E5%8D%95%2C%E9%80%9A%E8%BF%87CSS%E5%8D%B3%E5%8F%AF%E7%BB%98%E5%88%B6%22%7D%2C%7B%22x%22%3A195.97217%2C%22y%22%3A88.48349%2C%22width%22%3A175.96263%2C%22height%22%3A17.723469999999992%2C%22text%22%3A%22%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%81%92%E5%AE%9A%22%7D%2C%7B%22x%22%3A431.7233%2C%22y%22%3A88.97757%2C%22width%22%3A233.77993000000004%2C%22height%22%3A17.619470000000007%2C%22text%22%3A%22%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E5%9F%BA%E4%BA%8E%E6%95%B4%E5%BC%A0%E7%94%BB%E5%B8%83%2C%E6%A0%B9%E6%8D%AE%E5%9D%90%22%7D%2C%7B%22x%22%3A28.85659%2C%22y%22%3A89.879974%2C%22width%22%3A55.80133000000001%2C%22height%22%3A14.155700999999993%2C%22text%22%3A%22CANVAS%22%7D%2C%7B%22x%22%3A195.62952%2C%22y%22%3A109.24726%2C%22width%22%3A215.28298%2C%22height%22%3A17.08032%2C%22text%22%3A%22%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%8F%AA%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AAHTML%E5%85%83%E7%B4%A0%22%7D%2C%7B%22x%22%3A427.7661%2C%22y%22%3A109.52163%2C%22width%22%3A210.13527000000005%2C%22height%22%3A16.699195000000003%2C%22text%22%3A%22%E6%A0%87%E8%AE%A1%E7%AE%97%E5%87%BA%E8%8A%82%E7%82%B9%2C%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E7%B9%81%E7%90%90%22%7D%2C%7B%22x%22%3A438.19943%2C%22y%22%3A131.46617%2C%22width%22%3A233.97653000000003%2C%22height%22%3A15.81568999999999%2C%22text%22%3A%22-%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8F%92%E5%85%A5HTML%20%E5%85%83%E7%B4%A0%2C%E4%B8%8D%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A195.0735%2C%22y%22%3A132.24176%2C%22width%22%3A206.51326000000003%2C%22height%22%3A16.32804999999999%2C%22text%22%3A%22-%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0%E6%AF%94SVG%22%7D%2C%7B%22x%22%3A181.53746%2C%22y%22%3A153.24632%2C%22width%22%3A17.38830999999999%2C%22height%22%3A16.79688999999999%2C%22text%22%3A%22%E5%A5%BD%22%7D%2C%7B%22x%22%3A428.2332%2C%22y%22%3A153.37639%2C%22width%22%3A93.78179999999998%2C%22height%22%3A16.641130000000004%2C%22text%22%3A%22CSS%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F%22%7D%2C%7B%22x%22%3A439.27927%2C%22y%22%3A174.2126%2C%22width%22%3A226.65206999999998%2C%22height%22%3A16.310720000000003%2C%22text%22%3A%22-%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8E%E5%83%8F%E7%B4%A0%2C%E5%A4%A7%E5%B1%8F%E5%B9%95%E4%B8%8B%E6%B8%B2%E6%9F%93%E6%97%B6%22%7D%2C%7B%22x%22%3A427.60648%2C%22y%22%3A195.95827%2C%22width%22%3A32.348220000000026%2C%22height%22%3A16.45678000000001%2C%22text%22%3A%22%E9%97%B4%E9%95%BF%22%7D%2C%7B%22x%22%3A27.185465%2C%22y%22%3A227.01306%2C%22width%22%3A31.892587999999996%2C%22height%22%3A19.344189999999998%2C%22text%22%3A%22SVG%22%7D%2C%7B%22x%22%3A194.82153%2C%22y%22%3A227.5049%2C%22width%22%3A208.69492000000002%2C%22height%22%3A17.471360000000004%2C%22text%22%3A%22%E5%9F%BA%E4%BA%8E%E7%9F%A2%E9%87%8F%2C%E9%9A%8F%E6%84%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E8%80%8C%E4%B8%8D%22%7D%2C%7B%22x%22%3A437.61844%2C%22y%22%3A226.64351%2C%22width%22%3A239.50885999999997%2C%22height%22%3A19.36423000000002%2C%22text%22%3A%22%E5%9B%A0%E4%B8%BA%E5%9F%BA%E4%BA%8EDOM%2C%E5%BD%93%E5%9B%BE%E7%9A%84%E4%B8%8E%E5%85%83%E7%B4%A0%E6%95%B0%22%7D%2C%7B%22x%22%3A427.72852%2C%22y%22%3A247.46236%2C%22width%22%3A238.25903000000005%2C%22height%22%3A19.32704000000001%2C%22text%22%3A%22%E9%87%8F%E8%BE%83%E5%A4%9A%E7%9A%84%E6%97%B6%E5%80%99%2C%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%9A%E6%AF%94%E8%BE%83%E4%BD%8E%22%7D%2C%7B%22x%22%3A182.51393%2C%22y%22%3A248.60333%2C%22width%22%3A31.13205000000002%2C%22height%22%3A16.705970000000008%2C%22text%22%3A%22%E5%A4%B1%E7%9C%9F%22%7D%2C%7B%22x%22%3A181.91895%2C%22y%22%3A270.8799%2C%22width%22%3A232.42099000000002%2C%22height%22%3A17.222669999999994%2C%22text%22%3A%22-%E5%9F%BA%E4%BA%8EDOM%2C%E5%AD%A6%E4%B9%A0%E6%88%90%E6%9C%AC%E5%92%8C%E7%BC%96%E7%A8%8B%E6%88%90%22%7D%2C%7B%22x%22%3A183.13826%2C%22y%22%3A292.25998%2C%22width%22%3A173.15064%2C%22height%22%3A16.699720000000013%2C%22text%22%3A%22%E6%9C%AC%E4%BD%8E%2C%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92%E9%83%BD%E6%98%AF%E5%9F%BA%E4%BA%8E%22%7D%2C%7B%22x%22%3A181.7264%2C%22y%22%3A312.2302%2C%22width%22%3A226.99579999999997%2C%22height%22%3A17.593259999999987%2C%22text%22%3A%22DOM%2C%E5%B9%B6%E4%B8%94%E6%94%AF%E6%8C%81%20CSS%2C%E4%BD%BF%E7%94%A8%E6%96%B9%E4%BE%BF%22%7D%2C%7B%22x%22%3A185.07164%2C%22y%22%3A333.79282%2C%22width%22%3A223.89476000000002%2C%22height%22%3A17.594780000000014%2C%22text%22%3A%22-%E9%80%82%E5%90%88%E9%9D%99%E6%80%81%E5%9B%BE%E5%83%8F%2C%E5%9F%BA%E4%BA%8ESVG%20%E4%B9%9F%E5%8F%AF%22%7D%2C%7B%22x%22%3A182.93622%2C%22y%22%3A356.30228%2C%22width%22%3A63.81091000000001%2C%22height%22%3A16.138019999999983%2C%22text%22%3A%22%E4%BB%A5%E5%81%9A%E8%BD%AC%E6%8D%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22uea3aa3a7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-11T06:59:17.000Z",
    "deleted_at": null,
    "created_at": "2022-11-30T10:44:13.000Z",
    "updated_at": "2022-12-11T06:59:17.000Z",
    "published_at": "2022-12-11T06:59:17.000Z",
    "first_published_at": "2022-12-11T06:49:39.609Z",
    "word_count": 317,
    "cover": "https://cdn.nlark.com/yuque/0/2022/png/2324645/1670741315677-e685239c-ad00-47ef-be22-fc3e97dad9e8.png",
    "description": "--- title: 代码和图编辑器技术调研 categories: 技术方案date: 2022-6-10updated: 2022-6-10tags: 技术调研cover: https://cdn.jsdelivr.net/gh/coder-fang/myBlogImgRespositor...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 107651520,
    "slug": "xb0f6xp0xcfs2wvw",
    "title": "JS为什么要进行变量提升？",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: JS为什么要进行变量提升？ <br />categories: JS<br />date: 2022-11-15<br />updated: 2022-11-15<br />tags: JS<br />cover: https://img2.baidu.com/it/u=101925709,3442706391&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500<br />--- \n<a name=\"HHok1\"></a>\n## 1.变量提升如何体现？\n变量提升通常发生在var声明的变量里，使用var声明一个变量时，该变量会被提升到作用域的顶端，但是赋值的部分并不会被提升。<br />**原理：**\n\n1. JS引擎工作方式：先解析代码，获取所有被声明的变量\n2. 然后再运行。\n<a name=\"r0uCc\"></a>\n## 2.为什么要进行变量提升？\n首先，我们知道JS拿到一个变量时会进行解析和执行。\n\n- 在解析阶段，JS会检查语法，并对函数进行预编译。解析时会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局上下文环境类似，不过函数上下文会多出this、arguments和函数的参数。\n   - 全局上下文：变量定义、函数声明\n   - 函数执行上下文：变量定义、函数声明、this、arguments\n- 在执行阶段，按照代码的顺序依次执行\n\n为什么会进行变量提升？\n\n- 提高性能\n- 容错性更好\n<a name=\"qMCeu\"></a>\n### （1）提高性能\n\n- JS代码执行之前，会进行**语法检查和预编译**，并且这一操作只进行一次。\n\n这样做是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新编译一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n\n- 在**解析**的过程中，还会为函数**生成预编译代码**。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，取出注释、不必要的空白等。好处：每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量、创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n<a name=\"pJj7X\"></a>\n### （2）容错性更好\n变量提升可以在一定程度上提高JS的容错性。\n```javascript\na = 1;\nvar a;\nconsole.log(a);\n```\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。<br />虽然，我们可以在开发过程中，可以完全避免这样写，但是有时候很复杂时，可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n<a name=\"Lsr09\"></a>\n### 总结：\n\n- **解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间。**\n- **声明提升还可以提高JS代码的容错性，使得一些不规范的代码也可以正常运行。**\n<a name=\"IuEZk\"></a>\n## 3.变量提升导致的问题\n变量提升虽然有一些优点，但是也会造成一些问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。<br />变量提升会导致的问题：\n```javascript\nvar tmp = new Date()\nfunction fn(){\n  console.log(tmp)\n  if(false){\n    var tmp = 'hello world';\n  }\n}\nfn(); //  undefined\n```\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到哈函数内部的最顶部，相当于覆盖了最外层的tmp，所以打印结果为undefined。\n```javascript\nvar tmp = 'hello world'\nfor(var i = 0;i < tmp.length;i++){\n    console.log(tmp[i])\n}\nconsole.log(i) // 11\n```\n由于遍历时定义的i会变量提升为一个全局变量，在函数结束后，不会被销毁，所以打印出来11.\n\n",
    "body_draft": "--- <br />title: JS为什么要进行变量提升？ <br />categories: JS<br />date: 2022-11-15<br />updated: 2022-11-15<br />tags: JS<br />cover: https://img2.baidu.com/it/u=101925709,3442706391&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500<br />--- \n<a name=\"HHok1\"></a>\n## 1.变量提升如何体现？\n变量提升通常发生在var声明的变量里，使用var声明一个变量时，该变量会被提升到作用域的顶端，但是赋值的部分并不会被提升。<br />**原理：**\n\n1. JS引擎工作方式：先解析代码，获取所有被声明的变量\n2. 然后再运行。\n<a name=\"r0uCc\"></a>\n## 2.为什么要进行变量提升？\n首先，我们知道JS拿到一个变量时会进行解析和执行。\n\n- 在解析阶段，JS会检查语法，并对函数进行预编译。解析时会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局上下文环境类似，不过函数上下文会多出this、arguments和函数的参数。\n   - 全局上下文：变量定义、函数声明\n   - 函数执行上下文：变量定义、函数声明、this、arguments\n- 在执行阶段，按照代码的顺序依次执行\n\n为什么会进行变量提升？\n\n- 提高性能\n- 容错性更好\n<a name=\"qMCeu\"></a>\n### （1）提高性能\n\n- JS代码执行之前，会进行**语法检查和预编译**，并且这一操作只进行一次。\n\n这样做是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新编译一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n\n- 在**解析**的过程中，还会为函数**生成预编译代码**。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，取出注释、不必要的空白等。好处：每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量、创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n<a name=\"pJj7X\"></a>\n### （2）容错性更好\n变量提升可以在一定程度上提高JS的容错性。\n```javascript\na = 1;\nvar a;\nconsole.log(a);\n```\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。<br />虽然，我们可以在开发过程中，可以完全避免这样写，但是有时候很复杂时，可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n<a name=\"Lsr09\"></a>\n### 总结：\n\n- **解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间。**\n- **声明提升还可以提高JS代码的容错性，使得一些不规范的代码也可以正常运行。**\n<a name=\"IuEZk\"></a>\n## 3.变量提升导致的问题\n变量提升虽然有一些优点，但是也会造成一些问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。<br />变量提升会导致的问题：\n```javascript\nvar tmp = new Date()\nfunction fn(){\n  console.log(tmp)\n  if(false){\n    var tmp = 'hello world';\n  }\n}\nfn(); //  undefined\n```\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到哈函数内部的最顶部，相当于覆盖了最外层的tmp，所以打印结果为undefined。\n```javascript\nvar tmp = 'hello world'\nfor(var i = 0;i < tmp.length;i++){\n    console.log(tmp[i])\n}\nconsole.log(i) // 11\n```\n由于遍历时定义的i会变量提升为一个全局变量，在函数结束后，不会被销毁，所以打印出来11.\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u3a3a3ece\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: JS为什么要进行变量提升？ </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: JS</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-15</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-15</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: JS</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://img2.baidu.com/it/u=101925709,3442706391&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h2 id=\"HHok1\"><span class=\"ne-text\">1.变量提升如何体现？</span></h2><p id=\"udd016f9c\" class=\"ne-p\"><span class=\"ne-text\">变量提升通常发生在var声明的变量里，使用var声明一个变量时，该变量会被提升到作用域的顶端，但是赋值的部分并不会被提升。</span></p><p id=\"ua837c3ad\" class=\"ne-p\"><strong><span class=\"ne-text\">原理：</span></strong></p><ol class=\"ne-ol\"><li id=\"u11a3d49a\"><span class=\"ne-text\">JS引擎工作方式：先解析代码，获取所有被声明的变量</span></li><li id=\"ub7b9636d\"><span class=\"ne-text\">然后再运行。</span></li></ol><h2 id=\"r0uCc\"><span class=\"ne-text\">2.为什么要进行变量提升？</span></h2><p id=\"u33198bef\" class=\"ne-p\"><span class=\"ne-text\">首先，我们知道JS拿到一个变量时会进行解析和执行。</span></p><ul class=\"ne-ul\"><li id=\"uecd107b6\"><span class=\"ne-text\">在解析阶段，JS会检查语法，并对函数进行预编译。解析时会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局上下文环境类似，不过函数上下文会多出this、arguments和函数的参数。</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u64cf65f4\"><span class=\"ne-text\">全局上下文：变量定义、函数声明</span></li><li id=\"udd425796\"><span class=\"ne-text\">函数执行上下文：变量定义、函数声明、this、arguments</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u360dc2a0\"><span class=\"ne-text\">在执行阶段，按照代码的顺序依次执行</span></li></ul><p id=\"u23b0e057\" class=\"ne-p\"><span class=\"ne-text\">为什么会进行变量提升？</span></p><ul class=\"ne-ul\"><li id=\"u8ae4460a\"><span class=\"ne-text\">提高性能</span></li><li id=\"u64d10627\"><span class=\"ne-text\">容错性更好</span></li></ul><h3 id=\"qMCeu\"><span class=\"ne-text\">（1）提高性能</span></h3><ul class=\"ne-ul\"><li id=\"u85e302f7\"><span class=\"ne-text\">J</span><span class=\"ne-text\" style=\"text-decoration: underline\">S代码执行之前，会进行</span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">语法检查和预编译</span></strong><span class=\"ne-text\" style=\"text-decoration: underline\">，并且这一操作只进行一次。</span></li></ul><p id=\"u153a033c\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">这样做是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新编译一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</span></p><ul class=\"ne-ul\"><li id=\"u2bb31c7d\"><span class=\"ne-text\" style=\"text-decoration: underline\">在</span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">解析</span></strong><span class=\"ne-text\" style=\"text-decoration: underline\">的过程中，还会为函数</span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">生成预编译代码</span></strong><span class=\"ne-text\" style=\"text-decoration: underline\">。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，取出注释、不必要的空白等。</span><span class=\"ne-text\">好处：每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量、创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</span></li></ul><h3 id=\"pJj7X\"><span class=\"ne-text\">（2）容错性更好</span></h3><p id=\"ud5489059\" class=\"ne-p\"><span class=\"ne-text\">变量提升可以在一定程度上提高JS的容错性。</span></p><pre data-language=\"javascript\" id=\"SY53F\" class=\"ne-codeblock language-javascript\">a = 1;\nvar a;\nconsole.log(a);</pre><p id=\"u7be657b3\" class=\"ne-p\"><span class=\"ne-text\">如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</span></p><p id=\"ud19b6d0f\" class=\"ne-p\"><span class=\"ne-text\">虽然，我们可以在开发过程中，可以完全避免这样写，但是有时候很复杂时，可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</span></p><h3 id=\"Lsr09\"><span class=\"ne-text\">总结：</span></h3><ul class=\"ne-ul\"><li id=\"uf5aaedae\"><strong><span class=\"ne-text\">解析和预编译过程中的声明提升可以</span></strong><strong><span class=\"ne-text\" style=\"text-decoration: underline\">提高性能</span></strong><strong><span class=\"ne-text\">，让函数可以在</span></strong><strong><span class=\"ne-text\" style=\"text-decoration: underline\">执行时预先为变量分配栈空间</span></strong><strong><span class=\"ne-text\">。</span></strong></li><li id=\"uf9f4a1ea\"><strong><span class=\"ne-text\">声明提升还可以提高JS代码的容错性，使得一些不规范的代码也可以正常运行。</span></strong></li></ul><h2 id=\"IuEZk\"><span class=\"ne-text\">3.变量提升导致的问题</span></h2><p id=\"u59128425\" class=\"ne-p\"><span class=\"ne-text\">变量提升虽然有一些优点，但是也会造成一些问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。</span></p><p id=\"u8edeaa43\" class=\"ne-p\"><span class=\"ne-text\">变量提升会导致的问题：</span></p><pre data-language=\"javascript\" id=\"nRBCh\" class=\"ne-codeblock language-javascript\">var tmp = new Date()\nfunction fn(){\n  console.log(tmp)\n  if(false){\n    var tmp = 'hello world';\n  }\n}\nfn(); //  undefined</pre><p id=\"u31bb7a2e\" class=\"ne-p\"><span class=\"ne-text\">在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到哈函数内部的最顶部，相当于覆盖了最外层的tmp，所以打印结果为undefined。</span></p><pre data-language=\"javascript\" id=\"VjSOh\" class=\"ne-codeblock language-javascript\">var tmp = 'hello world'\nfor(var i = 0;i &lt; tmp.length;i++){\n    console.log(tmp[i])\n}\nconsole.log(i) // 11</pre><p id=\"ufdfabe2b\" class=\"ne-p\"><span class=\"ne-text\">由于遍历时定义的i会变量提升为一个全局变量，在函数结束后，不会被销毁，所以打印出来11.</span></p><p id=\"uf889ce64\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u3a3a3ece\" id=\"u3a3a3ece\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS为什么要进行变量提升？ </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-15</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-15</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: JS</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://img2.baidu.com/it/u=101925709,3442706391&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"HHok1\" id=\"HHok1\"><span data-lake-id=\"ue8650551\" id=\"ue8650551\">1.变量提升如何体现？</span></h2><p data-lake-id=\"udd016f9c\" id=\"udd016f9c\"><span data-lake-id=\"ue836a459\" id=\"ue836a459\">变量提升通常发生在var声明的变量里，使用var声明一个变量时，该变量会被提升到作用域的顶端，但是赋值的部分并不会被提升。</span></p><p data-lake-id=\"ua837c3ad\" id=\"ua837c3ad\"><strong><span data-lake-id=\"ua1f7c225\" id=\"ua1f7c225\">原理：</span></strong></p><ol list=\"u467c1727\"><li fid=\"u0fcbdf72\" data-lake-id=\"u11a3d49a\" id=\"u11a3d49a\"><span data-lake-id=\"u3626b8d5\" id=\"u3626b8d5\">JS引擎工作方式：先解析代码，获取所有被声明的变量</span></li><li fid=\"u0fcbdf72\" data-lake-id=\"ub7b9636d\" id=\"ub7b9636d\"><span data-lake-id=\"u81f423e7\" id=\"u81f423e7\">然后再运行。</span></li></ol><h2 data-lake-id=\"r0uCc\" id=\"r0uCc\"><span data-lake-id=\"uab1e49f7\" id=\"uab1e49f7\">2.为什么要进行变量提升？</span></h2><p data-lake-id=\"u33198bef\" id=\"u33198bef\"><span data-lake-id=\"u0d187988\" id=\"u0d187988\">首先，我们知道JS拿到一个变量时会进行解析和执行。</span></p><ul list=\"ua0d3a90e\"><li fid=\"u6c115a83\" data-lake-id=\"uecd107b6\" id=\"uecd107b6\"><span data-lake-id=\"ude46cb23\" id=\"ude46cb23\">在解析阶段，JS会检查语法，并对函数进行预编译。解析时会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局上下文环境类似，不过函数上下文会多出this、arguments和函数的参数。</span></li></ul><ul list=\"ua0d3a90e\" data-lake-indent=\"1\"><li fid=\"u6c115a83\" data-lake-id=\"u64cf65f4\" id=\"u64cf65f4\"><span data-lake-id=\"u87e4b5dd\" id=\"u87e4b5dd\">全局上下文：变量定义、函数声明</span></li><li fid=\"u6c115a83\" data-lake-id=\"udd425796\" id=\"udd425796\"><span data-lake-id=\"u5a9d02e2\" id=\"u5a9d02e2\">函数执行上下文：变量定义、函数声明、this、arguments</span></li></ul><ul list=\"ua0d3a90e\" start=\"2\"><li fid=\"u6c115a83\" data-lake-id=\"u360dc2a0\" id=\"u360dc2a0\"><span data-lake-id=\"u76841f51\" id=\"u76841f51\">在执行阶段，按照代码的顺序依次执行</span></li></ul><p data-lake-id=\"u23b0e057\" id=\"u23b0e057\"><span data-lake-id=\"u7d92b833\" id=\"u7d92b833\">为什么会进行变量提升？</span></p><ul list=\"u11bda3de\"><li fid=\"u43d7b0a9\" data-lake-id=\"u8ae4460a\" id=\"u8ae4460a\"><span data-lake-id=\"ubee9d45d\" id=\"ubee9d45d\">提高性能</span></li><li fid=\"u43d7b0a9\" data-lake-id=\"u64d10627\" id=\"u64d10627\"><span data-lake-id=\"ub022c810\" id=\"ub022c810\">容错性更好</span></li></ul><h3 data-lake-id=\"qMCeu\" id=\"qMCeu\"><span data-lake-id=\"u438d5319\" id=\"u438d5319\">（1）提高性能</span></h3><ul list=\"u0780078b\"><li fid=\"u11e76f0d\" data-lake-id=\"u85e302f7\" id=\"u85e302f7\"><span data-lake-id=\"u0bbe6f7b\" id=\"u0bbe6f7b\">J</span><u><span data-lake-id=\"uf5f1590a\" id=\"uf5f1590a\">S代码执行之前，会进行</span></u><u><strong><span data-lake-id=\"u5b27321f\" id=\"u5b27321f\">语法检查和预编译</span></strong></u><u><span data-lake-id=\"u7e513b0d\" id=\"u7e513b0d\">，并且这一操作只进行一次。</span></u></li></ul><p data-lake-id=\"u153a033c\" id=\"u153a033c\" style=\"text-indent: 2em\"><span data-lake-id=\"uba433369\" id=\"uba433369\">这样做是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新编译一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</span></p><ul list=\"u6569498b\"><li fid=\"u8c73aec9\" data-lake-id=\"u2bb31c7d\" id=\"u2bb31c7d\"><u><span data-lake-id=\"u34c418c4\" id=\"u34c418c4\">在</span></u><u><strong><span data-lake-id=\"ue0098870\" id=\"ue0098870\">解析</span></strong></u><u><span data-lake-id=\"u72b31a0b\" id=\"u72b31a0b\">的过程中，还会为函数</span></u><u><strong><span data-lake-id=\"u20bf4f4e\" id=\"u20bf4f4e\">生成预编译代码</span></strong></u><u><span data-lake-id=\"uec8f5412\" id=\"uec8f5412\">。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，取出注释、不必要的空白等。</span></u><span data-lake-id=\"ua14f79e3\" id=\"ua14f79e3\">好处：每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量、创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</span></li></ul><h3 data-lake-id=\"pJj7X\" id=\"pJj7X\"><span data-lake-id=\"u65513b78\" id=\"u65513b78\">（2）容错性更好</span></h3><p data-lake-id=\"ud5489059\" id=\"ud5489059\"><span data-lake-id=\"u810b25b6\" id=\"u810b25b6\">变量提升可以在一定程度上提高JS的容错性。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22a%20%3D%201%3B%5Cnvar%20a%3B%5Cnconsole.log(a)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SY53F%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7be657b3\" id=\"u7be657b3\"><span data-lake-id=\"u3cda6b49\" id=\"u3cda6b49\">如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</span></p><p data-lake-id=\"ud19b6d0f\" id=\"ud19b6d0f\"><span data-lake-id=\"u924abf1c\" id=\"u924abf1c\">虽然，我们可以在开发过程中，可以完全避免这样写，但是有时候很复杂时，可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</span></p><h3 data-lake-id=\"Lsr09\" id=\"Lsr09\"><span data-lake-id=\"u3d5325dd\" id=\"u3d5325dd\">总结：</span></h3><ul list=\"u4d781869\"><li fid=\"u5398cd05\" data-lake-id=\"uf5aaedae\" id=\"uf5aaedae\"><strong><span data-lake-id=\"u341d9edf\" id=\"u341d9edf\">解析和预编译过程中的声明提升可以</span></strong><strong><u><span data-lake-id=\"u6c708e53\" id=\"u6c708e53\">提高性能</span></u></strong><strong><span data-lake-id=\"uc141a997\" id=\"uc141a997\">，让函数可以在</span></strong><strong><u><span data-lake-id=\"u44e4643d\" id=\"u44e4643d\">执行时预先为变量分配栈空间</span></u></strong><strong><span data-lake-id=\"u90782cc2\" id=\"u90782cc2\">。</span></strong></li><li fid=\"u5398cd05\" data-lake-id=\"uf9f4a1ea\" id=\"uf9f4a1ea\"><strong><span data-lake-id=\"ud3fe557d\" id=\"ud3fe557d\">声明提升还可以提高JS代码的容错性，使得一些不规范的代码也可以正常运行。</span></strong></li></ul><h2 data-lake-id=\"IuEZk\" id=\"IuEZk\"><span data-lake-id=\"u23b0401f\" id=\"u23b0401f\">3.变量提升导致的问题</span></h2><p data-lake-id=\"u59128425\" id=\"u59128425\"><span data-lake-id=\"u228d20b6\" id=\"u228d20b6\">变量提升虽然有一些优点，但是也会造成一些问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。</span></p><p data-lake-id=\"u8edeaa43\" id=\"u8edeaa43\"><span data-lake-id=\"u445f6dcd\" id=\"u445f6dcd\">变量提升会导致的问题：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20new%20Date()%5Cnfunction%20fn()%7B%5Cn%20%20console.log(tmp)%5Cn%20%20if(false)%7B%5Cn%20%20%20%20var%20tmp%20%3D%20'hello%20world'%3B%5Cn%20%20%7D%5Cn%7D%5Cnfn()%3B%20%2F%2F%20%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nRBCh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u31bb7a2e\" id=\"u31bb7a2e\"><span data-lake-id=\"ube4349c9\" id=\"ube4349c9\">在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到哈函数内部的最顶部，相当于覆盖了最外层的tmp，所以打印结果为undefined。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20'hello%20world'%5Cnfor(var%20i%20%3D%200%3Bi%20%3C%20tmp.length%3Bi%2B%2B)%7B%5Cn%20%20%20%20console.log(tmp%5Bi%5D)%5Cn%7D%5Cnconsole.log(i)%20%2F%2F%2011%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VjSOh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ufdfabe2b\" id=\"ufdfabe2b\"><span data-lake-id=\"u9b933bfd\" id=\"u9b933bfd\">由于遍历时定义的i会变量提升为一个全局变量，在函数结束后，不会被销毁，所以打印出来11.</span></p><p data-lake-id=\"uf889ce64\" id=\"uf889ce64\"><span data-lake-id=\"u466b95c0\" id=\"u466b95c0\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u3a3a3ece\" id=\"u3a3a3ece\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS为什么要进行变量提升？ </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-15</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-15</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: JS</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://img2.baidu.com/it/u=101925709,3442706391&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"HHok1\" id=\"HHok1\"><span data-lake-id=\"ue8650551\" id=\"ue8650551\">1.变量提升如何体现？</span></h2><p data-lake-id=\"udd016f9c\" id=\"udd016f9c\"><span data-lake-id=\"ue836a459\" id=\"ue836a459\">变量提升通常发生在var声明的变量里，使用var声明一个变量时，该变量会被提升到作用域的顶端，但是赋值的部分并不会被提升。</span></p><p data-lake-id=\"ua837c3ad\" id=\"ua837c3ad\"><strong><span data-lake-id=\"ua1f7c225\" id=\"ua1f7c225\">原理：</span></strong></p><ol list=\"u467c1727\"><li fid=\"u0fcbdf72\" data-lake-id=\"u11a3d49a\" id=\"u11a3d49a\"><span data-lake-id=\"u3626b8d5\" id=\"u3626b8d5\">JS引擎工作方式：先解析代码，获取所有被声明的变量</span></li><li fid=\"u0fcbdf72\" data-lake-id=\"ub7b9636d\" id=\"ub7b9636d\"><span data-lake-id=\"u81f423e7\" id=\"u81f423e7\">然后再运行。</span></li></ol><h2 data-lake-id=\"r0uCc\" id=\"r0uCc\"><span data-lake-id=\"uab1e49f7\" id=\"uab1e49f7\">2.为什么要进行变量提升？</span></h2><p data-lake-id=\"u33198bef\" id=\"u33198bef\"><span data-lake-id=\"u0d187988\" id=\"u0d187988\">首先，我们知道JS拿到一个变量时会进行解析和执行。</span></p><ul list=\"ua0d3a90e\"><li fid=\"u6c115a83\" data-lake-id=\"uecd107b6\" id=\"uecd107b6\"><span data-lake-id=\"ude46cb23\" id=\"ude46cb23\">在解析阶段，JS会检查语法，并对函数进行预编译。解析时会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局上下文环境类似，不过函数上下文会多出this、arguments和函数的参数。</span></li></ul><ul list=\"ua0d3a90e\" data-lake-indent=\"1\"><li fid=\"u6c115a83\" data-lake-id=\"u64cf65f4\" id=\"u64cf65f4\"><span data-lake-id=\"u87e4b5dd\" id=\"u87e4b5dd\">全局上下文：变量定义、函数声明</span></li><li fid=\"u6c115a83\" data-lake-id=\"udd425796\" id=\"udd425796\"><span data-lake-id=\"u5a9d02e2\" id=\"u5a9d02e2\">函数执行上下文：变量定义、函数声明、this、arguments</span></li></ul><ul list=\"ua0d3a90e\" start=\"2\"><li fid=\"u6c115a83\" data-lake-id=\"u360dc2a0\" id=\"u360dc2a0\"><span data-lake-id=\"u76841f51\" id=\"u76841f51\">在执行阶段，按照代码的顺序依次执行</span></li></ul><p data-lake-id=\"u23b0e057\" id=\"u23b0e057\"><span data-lake-id=\"u7d92b833\" id=\"u7d92b833\">为什么会进行变量提升？</span></p><ul list=\"u11bda3de\"><li fid=\"u43d7b0a9\" data-lake-id=\"u8ae4460a\" id=\"u8ae4460a\"><span data-lake-id=\"ubee9d45d\" id=\"ubee9d45d\">提高性能</span></li><li fid=\"u43d7b0a9\" data-lake-id=\"u64d10627\" id=\"u64d10627\"><span data-lake-id=\"ub022c810\" id=\"ub022c810\">容错性更好</span></li></ul><h3 data-lake-id=\"qMCeu\" id=\"qMCeu\"><span data-lake-id=\"u438d5319\" id=\"u438d5319\">（1）提高性能</span></h3><ul list=\"u0780078b\"><li fid=\"u11e76f0d\" data-lake-id=\"u85e302f7\" id=\"u85e302f7\"><span data-lake-id=\"u0bbe6f7b\" id=\"u0bbe6f7b\">J</span><u><span data-lake-id=\"uf5f1590a\" id=\"uf5f1590a\">S代码执行之前，会进行</span></u><u><strong><span data-lake-id=\"u5b27321f\" id=\"u5b27321f\">语法检查和预编译</span></strong></u><u><span data-lake-id=\"u7e513b0d\" id=\"u7e513b0d\">，并且这一操作只进行一次。</span></u></li></ul><p data-lake-id=\"u153a033c\" id=\"u153a033c\" style=\"text-indent: 2em\"><span data-lake-id=\"uba433369\" id=\"uba433369\">这样做是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新编译一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</span></p><ul list=\"u6569498b\"><li fid=\"u8c73aec9\" data-lake-id=\"u2bb31c7d\" id=\"u2bb31c7d\"><u><span data-lake-id=\"u34c418c4\" id=\"u34c418c4\">在</span></u><u><strong><span data-lake-id=\"ue0098870\" id=\"ue0098870\">解析</span></strong></u><u><span data-lake-id=\"u72b31a0b\" id=\"u72b31a0b\">的过程中，还会为函数</span></u><u><strong><span data-lake-id=\"u20bf4f4e\" id=\"u20bf4f4e\">生成预编译代码</span></strong></u><u><span data-lake-id=\"uec8f5412\" id=\"uec8f5412\">。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，取出注释、不必要的空白等。</span></u><span data-lake-id=\"ua14f79e3\" id=\"ua14f79e3\">好处：每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量、创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</span></li></ul><h3 data-lake-id=\"pJj7X\" id=\"pJj7X\"><span data-lake-id=\"u65513b78\" id=\"u65513b78\">（2）容错性更好</span></h3><p data-lake-id=\"ud5489059\" id=\"ud5489059\"><span data-lake-id=\"u810b25b6\" id=\"u810b25b6\">变量提升可以在一定程度上提高JS的容错性。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22a%20%3D%201%3B%5Cnvar%20a%3B%5Cnconsole.log(a)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SY53F%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7be657b3\" id=\"u7be657b3\"><span data-lake-id=\"u3cda6b49\" id=\"u3cda6b49\">如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</span></p><p data-lake-id=\"ud19b6d0f\" id=\"ud19b6d0f\"><span data-lake-id=\"u924abf1c\" id=\"u924abf1c\">虽然，我们可以在开发过程中，可以完全避免这样写，但是有时候很复杂时，可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</span></p><h3 data-lake-id=\"Lsr09\" id=\"Lsr09\"><span data-lake-id=\"u3d5325dd\" id=\"u3d5325dd\">总结：</span></h3><ul list=\"u4d781869\"><li fid=\"u5398cd05\" data-lake-id=\"uf5aaedae\" id=\"uf5aaedae\"><strong><span data-lake-id=\"u341d9edf\" id=\"u341d9edf\">解析和预编译过程中的声明提升可以</span></strong><strong><u><span data-lake-id=\"u6c708e53\" id=\"u6c708e53\">提高性能</span></u></strong><strong><span data-lake-id=\"uc141a997\" id=\"uc141a997\">，让函数可以在</span></strong><strong><u><span data-lake-id=\"u44e4643d\" id=\"u44e4643d\">执行时预先为变量分配栈空间</span></u></strong><strong><span data-lake-id=\"u90782cc2\" id=\"u90782cc2\">。</span></strong></li><li fid=\"u5398cd05\" data-lake-id=\"uf9f4a1ea\" id=\"uf9f4a1ea\"><strong><span data-lake-id=\"ud3fe557d\" id=\"ud3fe557d\">声明提升还可以提高JS代码的容错性，使得一些不规范的代码也可以正常运行。</span></strong></li></ul><h2 data-lake-id=\"IuEZk\" id=\"IuEZk\"><span data-lake-id=\"u23b0401f\" id=\"u23b0401f\">3.变量提升导致的问题</span></h2><p data-lake-id=\"u59128425\" id=\"u59128425\"><span data-lake-id=\"u228d20b6\" id=\"u228d20b6\">变量提升虽然有一些优点，但是也会造成一些问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。</span></p><p data-lake-id=\"u8edeaa43\" id=\"u8edeaa43\"><span data-lake-id=\"u445f6dcd\" id=\"u445f6dcd\">变量提升会导致的问题：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20new%20Date()%5Cnfunction%20fn()%7B%5Cn%20%20console.log(tmp)%5Cn%20%20if(false)%7B%5Cn%20%20%20%20var%20tmp%20%3D%20'hello%20world'%3B%5Cn%20%20%7D%5Cn%7D%5Cnfn()%3B%20%2F%2F%20%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nRBCh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u31bb7a2e\" id=\"u31bb7a2e\"><span data-lake-id=\"ube4349c9\" id=\"ube4349c9\">在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到哈函数内部的最顶部，相当于覆盖了最外层的tmp，所以打印结果为undefined。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20'hello%20world'%5Cnfor(var%20i%20%3D%200%3Bi%20%3C%20tmp.length%3Bi%2B%2B)%7B%5Cn%20%20%20%20console.log(tmp%5Bi%5D)%5Cn%7D%5Cnconsole.log(i)%20%2F%2F%2011%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VjSOh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ufdfabe2b\" id=\"ufdfabe2b\"><span data-lake-id=\"u9b933bfd\" id=\"u9b933bfd\">由于遍历时定义的i会变量提升为一个全局变量，在函数结束后，不会被销毁，所以打印出来11.</span></p><p data-lake-id=\"uf889ce64\" id=\"uf889ce64\"><span data-lake-id=\"u466b95c0\" id=\"u466b95c0\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-06T12:26:48.000Z",
    "deleted_at": null,
    "created_at": "2022-11-28T11:57:52.000Z",
    "updated_at": "2022-12-06T12:26:48.000Z",
    "published_at": "2022-12-06T12:26:48.000Z",
    "first_published_at": "2022-11-29T02:11:10.700Z",
    "word_count": 1095,
    "cover": null,
    "description": "--- title: JS为什么要进行变量提升？ categories: JSdate: 2022-11-15updated: 2022-11-15tags: JScover: https://img2.baidu.com/it/u=101925709,3442706391&fm=253&fm...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 107509672,
    "slug": "gt65cry3ysg3r2ae",
    "title": "keep-alive实现原理",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: keep-alive实现原理<br />categories: 框架<br />date: 2022-11-16<br />updated: 2022-11-16<br />tags: Vue<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-86df8247745c62d526051662353c7739_r.jpg%3Fsource%3D1940ef5c&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1672407297&t=f7f5279caca9a3d4ceefbbd6876431b5<br />--- \n\n- 该组件内没有常规的`<template></template>`等标签，因为它不是一个常规的模板组件，取而代之的是，它内部多了一个render函数，它是一个函数式组件。执行`<keep-alive>`组件渲染时，就会执行这个`render`函数。\n- keep-alive缓存机制是根据LRU策略来设置缓存组件新鲜度，将很久未访问的组件从缓存中删除。\n<a name=\"H6gIT\"></a>\n## 组件实现原理\n```javascript\n// 源码位置：src/core/components/keep-alive.js\nexport default {\n  name: 'keep-alive',\n  abstract: true,\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n  created () {\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n  destroyed () {\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n  mounted () {\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n  render () {\n    const slot = this.$slots.default\n    const vnode: VNode = getFirstComponentChild(slot)\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions)\n      const { include, exclude } = this\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance\n        // make current key freshest\n        remove(keys, key)\n        keys.push(key)\n      } else {\n        cache[key] = vnode\n        keys.push(key)\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode)\n        }\n      }\n      vnode.data.keepAlive = true\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n```\nkeep-alive 实际上是一个抽象组件，只对包裹的组件做处理 ，并不会和子组件建立父子关系，也不会作为节点渲染到页面上。在组件开头就设置abstract为true，代表该组件是一个抽象组件。\n```javascript\n// 源码位置：src/core/instance/lifecycle.js\nexport function initLifecycle (vm: Component) {\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n  vm.$parent = parent\n  // ...\n}\n```\n那么抽象组件是如何忽略这层关系的？在初始化阶段会调用initLifecycle，里面判断父级是否为抽象组件，如果是抽象组件，就选取抽象组件中的上一级作为父级，忽略与抽象组件和子组件之间的层级关系。<br />keep-alive组件没有编写template模板，而是由render函数决定是否渲染结果。\n```javascript\nconst slot = this.$slots.default\nconst vnode: VNode = getFirstComponentChild(slot)\n```\n<br />如果keep-alive存在多个子元素，keep-alive 要求同时只有一个子元素被渲染。所以在开头会获取插槽内的子元素，调用getFirstComponentChild 获取到第一个子元素的VNode。\n```javascript\n// check pattern\nconst name: ?string = getComponentName(componentOptions)\nconst { include, exclude } = this\nif (\n  // not included\n  (include && (!name || !matches(include, name))) ||\n  // excluded\n  (exclude && name && matches(exclude, name))\n) {\n  return vnode\n}\n\nfunction matches (pattern: string | RegExp | Array<string>, name: string): boolean {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  return false\n}\n```\n接着判断的当前组件是否符合缓存条件，组件名与include不匹配或与exclude匹配都会直接退出并返回vnode，不走缓存机制。\n```javascript\nconst { cache, keys } = this\nconst key: ?string = vnode.key == null\n  // same constructor may get registered as different local components\n  // so cid alone is not enough (#3269)\n  ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n  : vnode.key\nif (cache[key]) {\n  vnode.componentInstance = cache[key].componentInstance\n  // make current key freshest\n  remove(keys, key)\n  keys.push(key)\n} else {\n  cache[key] = vnode\n  keys.push(key)\n  // prune oldest entry\n  if (this.max && keys.length > parseInt(this.max)) {\n    pruneCacheEntry(cache, keys[0], keys, this._vnode)\n  }\n}\nvnode.data.keepAlive = true\n```\n匹配条件通过会进入缓存机制的逻辑，如果命中缓存机制，从 cache中获取缓存的实例设置到当前的组件上，并调整key的位置将其放到最后，如果没有命中缓存，将当前vnode缓存起来，并加入到当前组件的key。如果缓存组件的数量不足，即缓存空间不足，则调用pruneCacheEntry将最旧的组件从缓存中删除，即keys[0]的组件。之后将组件的keepAlive标记为true，表示它是被缓存的组件。\n```javascript\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array<string>,\n  current?: VNode\n) {\n  const cached = cache[key]\n  if (cached && (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}\n```\npruneCacheEntry 负责将组件从缓存中删除，它会调用组件`$destory`方法销毁组件实例，缓存组件置空，并移除对应的key。\n```javascript\nmounted () {\n  this.$watch('include', val => {\n    pruneCache(this, name => matches(val, name))\n  })\n  this.$watch('exclude', val => {\n    pruneCache(this, name => !matches(val, name))\n  })\n}\n\nfunction pruneCache (keepAliveInstance: any, filter: Function) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode: ?VNode = cache[key]\n    if (cachedNode) {\n      const name: ?string = getComponentName(cachedNode.componentOptions)\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}\n```\nkeep-alive在mounted会监听include和exclude的变化，属性发生改变时，调整缓存和keys的顺序，最终调用的也是pruneCacheEntry。\n<a name=\"GA5Sh\"></a>\n### 小结 \ncache用于缓存组件，keys存储组件的key，根据LRU策略来调整缓存组件。keep-alive的render中最后会返回组件的vnode，因此：keep-alive并非真的不会渲染，而是渲染的对象是包裹的子组件。\n<a name=\"LLJji\"></a>\n## 组件渲染流程\n\n<a name=\"Z91pQ\"></a>\n## props\n在选项内接收传进来的三个属性：include、exclude、max。\n```javascript\nprops: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n}\n```\n\n- `include`表示只有匹配的组件会被缓存\n- `exclude`表示任何匹配到的组件都不会被缓存\n- `max`表示缓存组件的数量，因为我们缓存的`vnode`对象，它也会持有DOM，当我们缓存的组件很多时，会比较占内存，所以该配置允许我们指定缓存组件的数量。\n<a name=\"kVh6X\"></a>\n## created\n在`created`钩子函数中，定义并初始化了两个属性：`this.cache`、`this.keys`。\n```javascript\ncreated () {\n    this.cache = Object.create(null)\n    this.keys = []\n}\n```\n\n- this.cache是一个对象，用来存储需要缓存的组件，它以如下形式存储：\n```javascript\nthis.cache = {\n    'key1':'组件1',\n    'key2':'组件2',\n    // ...\n}\n```\n\n- `this.keys`是一个数组，用来存储每个需要缓存的组件的key，即对应的this.cache对象中的键值。\n<a name=\"lLHJQ\"></a>\n## destroyed\n当`<keep-alive>`组件被销毁时，此时会调用`destroyed`钩子函数，在该钩子函数里会遍历`this.cache`对象，然后将那些被缓存并当前没有处于被渲染状态是组件都销毁掉。\n```javascript\ndestroyed () {\n    for (const key in this.cache) {\n        pruneCacheEntry(this.cache, key, this.keys)\n    }\n}\n\n// pruneCacheEntry函数\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array<string>,\n  current?: VNode\n) {\n  const cached = cache[key]\n  /* 判断当前没有处于被渲染状态的组件，将其销毁*/\n  if (cached && (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}\n```\n<a name=\"xyndn\"></a>\n## mounted\n在mounted钩子函数中观测`include`和`exclude`的变化，如下：\n```javascript\nmounted () {\n    this.$watch('include', val => {\n        pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n        pruneCache(this, name => !matches(val, name))\n    })\n}\n```\n如果include和exclude发生了变化，即表示定义需要缓存的组件的规则或不需要缓存的组件的规则发生了变化，则执行pruneCache函数，如下：\n```javascript\nfunction pruneCache (keepAliveInstance, filter) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode = cache[key]\n    if (cachedNode) {\n      const name = getComponentName(cachedNode.componentOptions)\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}\n```\n在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用 `pruneCacheEntry`将其从`this.cache`对象剔除即可。\n<a name=\"raBtY\"></a>\n## render\n在render函数中首先获取第一个子组件节点的vnode：\n```javascript\n/* 获取默认插槽中的第一个组件节点 */\nconst slot = this.$slots.default\nconst vnode = getFirstComponentChild(slot)\n```\n由于我们也是在`<keep-alive>`标签内部写DOM，所以可以先获取到默认插槽，然后再获取到它的第一个子节点。<br />`<keep-alive>`只处理第一个子元素，所以一般和它搭配使用的有 `component`动态组件或者是 `router-view`。<br />接下来，获取该组件节点的名称：\n```javascript\n/* 获取该组件节点的名称 */\nconst name = getComponentName(componentOptions)\n\n/* 优先获取组件的name字段，如果name不存在则获取组件的tag */\nfunction getComponentName (opts: ?VNodeComponentOptions): ?string {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n```\n然后用组件名称跟include、exclude中的匹配规则去匹配。\n```javascript\nconst { include, exclude } = this\n/* 如果name与include规则不匹配或者与exclude规则匹配则表示不缓存，直接返回vnode */\nif (\n    (include && (!name || !matches(include, name))) ||\n    // excluded\n    (exclude && name && matches(exclude, name))\n) {\n    return vnode\n}\n```\n如果组件名称与include规则不匹配或者与exclude规则匹配，则表示不缓存该组件，直接返回这个组件的vnode，否则，走下一步缓存。\n```javascript\nconst { cache, keys } = this\n/* 获取组件的key */\nconst key = vnode.key == null\n? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n/* 最后设置keepAlive标记位 */\nvnode.data.keepAlive = true\n```\n\n- 首先获取组件的key值：\n```javascript\nconst key = vnode.key == null? \ncomponentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n```\n\n- 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存。\n```javascript\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n```\n\n- 直接从缓存中拿`vnode`的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删除掉并重新放在this.keys中最后一个。\n- 如果this.cache对象中没有该key值：\n```javascript\n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n```\n表明该组件还没有被缓存过，则以该组件的key为例，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中。此时，再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删除。\n> 问题：为什么要删除第一个缓存组件并为什么命中缓存了还要调整组件key的顺序？\n\n> 答：这其实应用了一个缓存淘汰策略LRU。\n\n<a name=\"tw16E\"></a>\n### LRU 算法\nLRU（最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过 ，那么将来被访问的几率也更高”。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png#averageHue=%23f3f3f3&clientId=ubef7bb93-9c10-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ueca676fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=1202&originalType=url&ratio=1&rotation=0&showTitle=false&size=32668&status=done&style=none&taskId=uc61d75db-aac1-4286-bf09-c689a4bfffd&title=)\n\n1. 将新数据从尾部插入到this.keys中；\n2. 每当缓存命中（即缓存数据被访问），则将数据移到this.keys的尾部。\n3. 当this.keys满时，将头部的数据丢弃\n\nLRU核心：如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件key重新插入到this.keys的尾部，这样一来，`this.keys`中越往头部的数据即将被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即this.keys中第一个缓存的组件。 这也是 **已缓存组件中最久没有被访问的实例**会被销毁的原因。\n\n以上工作做完后，设置`vnode.data.keepAlive = true`，最后将`vnode`返回。\n<a name=\"M4YBl\"></a>\n## 生命周期钩子\n组件一旦被`<keep-alive>`缓存，那么再次渲染时，就不会执行created、mounted等钩子函数，但我们很多业务场景都是希望被缓存的组件再次被渲染时做一些事情。<br />Vue 提供了这两个钩子函数： `activated` 和`deactivated`。它的执行时机是：`<keep-alive>`包裹的组件激活时调用和停用时调用。\n```javascript\nlet A = {\n  template: '<div class=\"a\">' +\n  '<p>A Comp</p>' +\n  '</div>',\n  name: 'A',\n  mounted(){\n  \tconsole.log('Comp A mounted')\n  },\n  activated(){\n  \tconsole.log('Comp A activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp A deactivated')  \n  }\n}\n\nlet B = {\n  template: '<div class=\"b\">' +\n  '<p>B Comp</p>' +\n  '</div>',\n  name: 'B',\n  mounted(){\n  \tconsole.log('Comp B mounted')\n  },\n  activated(){\n  \tconsole.log('Comp B activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp B deactivated')  \n  }\n}\n\nlet vm = new Vue({\n  el: '#app',\n  template: '<div>' +\n  '<keep-alive>' +\n  '<component :is=\"currentComp\">' +\n  '</component>' +\n  '</keep-alive>' +\n  '<button @click=\"change\">switch</button>' +\n  '</div>',\n  data: {\n    currentComp: 'A'\n  },\n  methods: {\n    change() {\n      this.currentComp = this.currentComp === 'A' ? 'B' : 'A'\n    }\n  },\n  components: {\n    A,\n    B\n  }\n})\n```\n\n",
    "body_draft": "--- <br />title: keep-alive实现原理<br />categories: 框架<br />date: 2022-11-16<br />updated: 2022-11-16<br />tags: Vue<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-86df8247745c62d526051662353c7739_r.jpg%3Fsource%3D1940ef5c&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1672407297&t=f7f5279caca9a3d4ceefbbd6876431b5<br />--- \n\n- 该组件内没有常规的`<template></template>`等标签，因为它不是一个常规的模板组件，取而代之的是，它内部多了一个render函数，它是一个函数式组件。执行`<keep-alive>`组件渲染时，就会执行这个`render`函数。\n- keep-alive缓存机制是根据LRU策略来设置缓存组件新鲜度，将很久未访问的组件从缓存中删除。\n<a name=\"H6gIT\"></a>\n## 组件实现原理\n```javascript\n// 源码位置：src/core/components/keep-alive.js\nexport default {\n  name: 'keep-alive',\n  abstract: true,\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n  created () {\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n  destroyed () {\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n  mounted () {\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n  render () {\n    const slot = this.$slots.default\n    const vnode: VNode = getFirstComponentChild(slot)\n    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions)\n      const { include, exclude } = this\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance\n        // make current key freshest\n        remove(keys, key)\n        keys.push(key)\n      } else {\n        cache[key] = vnode\n        keys.push(key)\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode)\n        }\n      }\n      vnode.data.keepAlive = true\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n```\nkeep-alive 实际上是一个抽象组件，只对包裹的组件做处理 ，并不会和子组件建立父子关系，也不会作为节点渲染到页面上。在组件开头就设置abstract为true，代表该组件是一个抽象组件。\n```javascript\n// 源码位置：src/core/instance/lifecycle.js\nexport function initLifecycle (vm: Component) {\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n  vm.$parent = parent\n  // ...\n}\n```\n那么抽象组件是如何忽略这层关系的？在初始化阶段会调用initLifecycle，里面判断父级是否为抽象组件，如果是抽象组件，就选取抽象组件中的上一级作为父级，忽略与抽象组件和子组件之间的层级关系。<br />keep-alive组件没有编写template模板，而是由render函数决定是否渲染结果。\n```javascript\nconst slot = this.$slots.default\nconst vnode: VNode = getFirstComponentChild(slot)\n```\n<br />如果keep-alive存在多个子元素，keep-alive 要求同时只有一个子元素被渲染。所以在开头会获取插槽内的子元素，调用getFirstComponentChild 获取到第一个子元素的VNode。\n```javascript\n// check pattern\nconst name: ?string = getComponentName(componentOptions)\nconst { include, exclude } = this\nif (\n  // not included\n  (include && (!name || !matches(include, name))) ||\n  // excluded\n  (exclude && name && matches(exclude, name))\n) {\n  return vnode\n}\n\nfunction matches (pattern: string | RegExp | Array<string>, name: string): boolean {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  return false\n}\n```\n接着判断的当前组件是否符合缓存条件，组件名与include不匹配或与exclude匹配都会直接退出并返回vnode，不走缓存机制。\n```javascript\nconst { cache, keys } = this\nconst key: ?string = vnode.key == null\n  // same constructor may get registered as different local components\n  // so cid alone is not enough (#3269)\n  ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n  : vnode.key\nif (cache[key]) {\n  vnode.componentInstance = cache[key].componentInstance\n  // make current key freshest\n  remove(keys, key)\n  keys.push(key)\n} else {\n  cache[key] = vnode\n  keys.push(key)\n  // prune oldest entry\n  if (this.max && keys.length > parseInt(this.max)) {\n    pruneCacheEntry(cache, keys[0], keys, this._vnode)\n  }\n}\nvnode.data.keepAlive = true\n```\n匹配条件通过会进入缓存机制的逻辑，如果命中缓存机制，从 cache中获取缓存的实例设置到当前的组件上，并调整key的位置将其放到最后，如果没有命中缓存，将当前vnode缓存起来，并加入到当前组件的key。如果缓存组件的数量不足，即缓存空间不足，则调用pruneCacheEntry将最旧的组件从缓存中删除，即keys[0]的组件。之后将组件的keepAlive标记为true，表示它是被缓存的组件。\n```javascript\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array<string>,\n  current?: VNode\n) {\n  const cached = cache[key]\n  if (cached && (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}\n```\npruneCacheEntry 负责将组件从缓存中删除，它会调用组件`$destory`方法销毁组件实例，缓存组件置空，并移除对应的key。\n```javascript\nmounted () {\n  this.$watch('include', val => {\n    pruneCache(this, name => matches(val, name))\n  })\n  this.$watch('exclude', val => {\n    pruneCache(this, name => !matches(val, name))\n  })\n}\n\nfunction pruneCache (keepAliveInstance: any, filter: Function) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode: ?VNode = cache[key]\n    if (cachedNode) {\n      const name: ?string = getComponentName(cachedNode.componentOptions)\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}\n```\nkeep-alive在mounted会监听include和exclude的变化，属性发生改变时，调整缓存和keys的顺序，最终调用的也是pruneCacheEntry。\n<a name=\"GA5Sh\"></a>\n### 小结 \ncache用于缓存组件，keys存储组件的key，根据LRU策略来调整缓存组件。keep-alive的render中最后会返回组件的vnode，因此：keep-alive并非真的不会渲染，而是渲染的对象是包裹的子组件。\n<a name=\"LLJji\"></a>\n## 组件渲染流程\n\n<a name=\"Z91pQ\"></a>\n## props\n在选项内接收传进来的三个属性：include、exclude、max。\n```javascript\nprops: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n}\n```\n\n- `include`表示只有匹配的组件会被缓存\n- `exclude`表示任何匹配到的组件都不会被缓存\n- `max`表示缓存组件的数量，因为我们缓存的`vnode`对象，它也会持有DOM，当我们缓存的组件很多时，会比较占内存，所以该配置允许我们指定缓存组件的数量。\n<a name=\"kVh6X\"></a>\n## created\n在`created`钩子函数中，定义并初始化了两个属性：`this.cache`、`this.keys`。\n```javascript\ncreated () {\n    this.cache = Object.create(null)\n    this.keys = []\n}\n```\n\n- this.cache是一个对象，用来存储需要缓存的组件，它以如下形式存储：\n```javascript\nthis.cache = {\n    'key1':'组件1',\n    'key2':'组件2',\n    // ...\n}\n```\n\n- `this.keys`是一个数组，用来存储每个需要缓存的组件的key，即对应的this.cache对象中的键值。\n<a name=\"lLHJQ\"></a>\n## destroyed\n当`<keep-alive>`组件被销毁时，此时会调用`destroyed`钩子函数，在该钩子函数里会遍历`this.cache`对象，然后将那些被缓存并当前没有处于被渲染状态是组件都销毁掉。\n```javascript\ndestroyed () {\n    for (const key in this.cache) {\n        pruneCacheEntry(this.cache, key, this.keys)\n    }\n}\n\n// pruneCacheEntry函数\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array<string>,\n  current?: VNode\n) {\n  const cached = cache[key]\n  /* 判断当前没有处于被渲染状态的组件，将其销毁*/\n  if (cached && (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}\n```\n<a name=\"xyndn\"></a>\n## mounted\n在mounted钩子函数中观测`include`和`exclude`的变化，如下：\n```javascript\nmounted () {\n    this.$watch('include', val => {\n        pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n        pruneCache(this, name => !matches(val, name))\n    })\n}\n```\n如果include和exclude发生了变化，即表示定义需要缓存的组件的规则或不需要缓存的组件的规则发生了变化，则执行pruneCache函数，如下：\n```javascript\nfunction pruneCache (keepAliveInstance, filter) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode = cache[key]\n    if (cachedNode) {\n      const name = getComponentName(cachedNode.componentOptions)\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}\n```\n在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用 `pruneCacheEntry`将其从`this.cache`对象剔除即可。\n<a name=\"raBtY\"></a>\n## render\n在render函数中首先获取第一个子组件节点的vnode：\n```javascript\n/* 获取默认插槽中的第一个组件节点 */\nconst slot = this.$slots.default\nconst vnode = getFirstComponentChild(slot)\n```\n由于我们也是在`<keep-alive>`标签内部写DOM，所以可以先获取到默认插槽，然后再获取到它的第一个子节点。<br />`<keep-alive>`只处理第一个子元素，所以一般和它搭配使用的有 `component`动态组件或者是 `router-view`。<br />接下来，获取该组件节点的名称：\n```javascript\n/* 获取该组件节点的名称 */\nconst name = getComponentName(componentOptions)\n\n/* 优先获取组件的name字段，如果name不存在则获取组件的tag */\nfunction getComponentName (opts: ?VNodeComponentOptions): ?string {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n```\n然后用组件名称跟include、exclude中的匹配规则去匹配。\n```javascript\nconst { include, exclude } = this\n/* 如果name与include规则不匹配或者与exclude规则匹配则表示不缓存，直接返回vnode */\nif (\n    (include && (!name || !matches(include, name))) ||\n    // excluded\n    (exclude && name && matches(exclude, name))\n) {\n    return vnode\n}\n```\n如果组件名称与include规则不匹配或者与exclude规则匹配，则表示不缓存该组件，直接返回这个组件的vnode，否则，走下一步缓存。\n```javascript\nconst { cache, keys } = this\n/* 获取组件的key */\nconst key = vnode.key == null\n? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n/* 最后设置keepAlive标记位 */\nvnode.data.keepAlive = true\n```\n\n- 首先获取组件的key值：\n```javascript\nconst key = vnode.key == null? \ncomponentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n```\n\n- 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存。\n```javascript\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n```\n\n- 直接从缓存中拿`vnode`的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删除掉并重新放在this.keys中最后一个。\n- 如果this.cache对象中没有该key值：\n```javascript\n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n```\n表明该组件还没有被缓存过，则以该组件的key为例，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中。此时，再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删除。\n> 问题：为什么要删除第一个缓存组件并为什么命中缓存了还要调整组件key的顺序？\n\n> 答：这其实应用了一个缓存淘汰策略LRU。\n\n<a name=\"tw16E\"></a>\n### LRU 算法\nLRU（最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过 ，那么将来被访问的几率也更高”。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png#averageHue=%23f3f3f3&clientId=ubef7bb93-9c10-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ueca676fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=1202&originalType=url&ratio=1&rotation=0&showTitle=false&size=32668&status=done&style=none&taskId=uc61d75db-aac1-4286-bf09-c689a4bfffd&title=)\n\n1. 将新数据从尾部插入到this.keys中；\n2. 每当缓存命中（即缓存数据被访问），则将数据移到this.keys的尾部。\n3. 当this.keys满时，将头部的数据丢弃\n\nLRU核心：如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件key重新插入到this.keys的尾部，这样一来，`this.keys`中越往头部的数据即将被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即this.keys中第一个缓存的组件。 这也是 **已缓存组件中最久没有被访问的实例**会被销毁的原因。\n\n以上工作做完后，设置`vnode.data.keepAlive = true`，最后将`vnode`返回。\n<a name=\"M4YBl\"></a>\n## 生命周期钩子\n组件一旦被`<keep-alive>`缓存，那么再次渲染时，就不会执行created、mounted等钩子函数，但我们很多业务场景都是希望被缓存的组件再次被渲染时做一些事情。<br />Vue 提供了这两个钩子函数： `activated` 和`deactivated`。它的执行时机是：`<keep-alive>`包裹的组件激活时调用和停用时调用。\n```javascript\nlet A = {\n  template: '<div class=\"a\">' +\n  '<p>A Comp</p>' +\n  '</div>',\n  name: 'A',\n  mounted(){\n  \tconsole.log('Comp A mounted')\n  },\n  activated(){\n  \tconsole.log('Comp A activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp A deactivated')  \n  }\n}\n\nlet B = {\n  template: '<div class=\"b\">' +\n  '<p>B Comp</p>' +\n  '</div>',\n  name: 'B',\n  mounted(){\n  \tconsole.log('Comp B mounted')\n  },\n  activated(){\n  \tconsole.log('Comp B activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp B deactivated')  \n  }\n}\n\nlet vm = new Vue({\n  el: '#app',\n  template: '<div>' +\n  '<keep-alive>' +\n  '<component :is=\"currentComp\">' +\n  '</component>' +\n  '</keep-alive>' +\n  '<button @click=\"change\">switch</button>' +\n  '</div>',\n  data: {\n    currentComp: 'A'\n  },\n  methods: {\n    change() {\n      this.currentComp = this.currentComp === 'A' ? 'B' : 'A'\n    }\n  },\n  components: {\n    A,\n    B\n  }\n})\n```\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"udcf6934e\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: keep-alive实现原理</span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: 框架</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-16</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-16</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: Vue</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-86df8247745c62d526051662353c7739_r.jpg%3Fsource%3D1940ef5c&amp;refer=http%3A%2F%2Fpic2.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1672407297&amp;t=f7f5279caca9a3d4ceefbbd6876431b5</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><ul class=\"ne-ul\"><li id=\"u78f8bea5\"><span class=\"ne-text\">该组件内没有常规的</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;template&gt;&lt;/template&gt;</span></code><span class=\"ne-text\">等标签，因为它不是一个常规的模板组件，取而代之的是，它内部多了一个render函数，它是一个函数式组件。执行</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">组件渲染时，就会执行这个</span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\">函数。</span></li><li id=\"u504f990c\"><span class=\"ne-text\">keep-alive缓存机制是根据LRU策略来设置缓存组件新鲜度，将很久未访问的组件从缓存中删除。</span></li></ul><h2 id=\"H6gIT\"><span class=\"ne-text\">组件实现原理</span></h2><pre data-language=\"javascript\" id=\"zZiEa\" class=\"ne-codeblock language-javascript\">// 源码位置：src/core/components/keep-alive.js\nexport default {\n  name: 'keep-alive',\n  abstract: true,\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n  created () {\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n  destroyed () {\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n  mounted () {\n    this.$watch('include', val =&gt; {\n      pruneCache(this, name =&gt; matches(val, name))\n    })\n    this.$watch('exclude', val =&gt; {\n      pruneCache(this, name =&gt; !matches(val, name))\n    })\n  },\n  render () {\n    const slot = this.$slots.default\n    const vnode: VNode = getFirstComponentChild(slot)\n    const componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions\n    if (componentOptions) {\n      // check pattern\n      const name: ?string = getComponentName(componentOptions)\n      const { include, exclude } = this\n      if (\n        // not included\n        (include &amp;&amp; (!name || !matches(include, name))) ||\n        // excluded\n        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      const key: ?string = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance\n        // make current key freshest\n        remove(keys, key)\n        keys.push(key)\n      } else {\n        cache[key] = vnode\n        keys.push(key)\n        // prune oldest entry\n        if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode)\n        }\n      }\n      vnode.data.keepAlive = true\n    }\n    return vnode || (slot &amp;&amp; slot[0])\n  }\n}</pre><p id=\"u7840961c\" class=\"ne-p\"><span class=\"ne-text\">keep-alive 实际上是一个抽象组件，只对包裹的组件做处理 ，并不会和子组件建立父子关系，也不会作为节点渲染到页面上。在组件开头就设置abstract为true，代表该组件是一个抽象组件。</span></p><pre data-language=\"javascript\" id=\"z3Cqd\" class=\"ne-codeblock language-javascript\">// 源码位置：src/core/instance/lifecycle.js\nexport function initLifecycle (vm: Component) {\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent &amp;&amp; !options.abstract) {\n    while (parent.$options.abstract &amp;&amp; parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n  vm.$parent = parent\n  // ...\n}</pre><p id=\"u3fa29aea\" class=\"ne-p\"><span class=\"ne-text\">那么抽象组件是如何忽略这层关系的？在初始化阶段会调用initLifecycle，里面判断父级是否为抽象组件，如果是抽象组件，就选取抽象组件中的上一级作为父级，忽略与抽象组件和子组件之间的层级关系。</span></p><p id=\"uecb74c44\" class=\"ne-p\"><span class=\"ne-text\">keep-alive组件没有编写template模板，而是由render函数决定是否渲染结果。</span></p><pre data-language=\"javascript\" id=\"vbrhn\" class=\"ne-codeblock language-javascript\">const slot = this.$slots.default\nconst vnode: VNode = getFirstComponentChild(slot)</pre><p id=\"u690fbdc9\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">如果keep-alive存在多个子元素，keep-alive 要求同时只有一个子元素被渲染。所以在开头会获取插槽内的子元素，调用getFirstComponentChild 获取到第一个子元素的VNode。</span></p><pre data-language=\"javascript\" id=\"qt0mr\" class=\"ne-codeblock language-javascript\">// check pattern\nconst name: ?string = getComponentName(componentOptions)\nconst { include, exclude } = this\nif (\n  // not included\n  (include &amp;&amp; (!name || !matches(include, name))) ||\n  // excluded\n  (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n) {\n  return vnode\n}\n\nfunction matches (pattern: string | RegExp | Array&lt;string&gt;, name: string): boolean {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) &gt; -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) &gt; -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  return false\n}</pre><p id=\"u1e84a7a0\" class=\"ne-p\"><span class=\"ne-text\">接着判断的当前组件是否符合缓存条件，组件名与include不匹配或与exclude匹配都会直接退出并返回vnode，不走缓存机制。</span></p><pre data-language=\"javascript\" id=\"cRfxn\" class=\"ne-codeblock language-javascript\">const { cache, keys } = this\nconst key: ?string = vnode.key == null\n  // same constructor may get registered as different local components\n  // so cid alone is not enough (#3269)\n  ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n  : vnode.key\nif (cache[key]) {\n  vnode.componentInstance = cache[key].componentInstance\n  // make current key freshest\n  remove(keys, key)\n  keys.push(key)\n} else {\n  cache[key] = vnode\n  keys.push(key)\n  // prune oldest entry\n  if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) {\n    pruneCacheEntry(cache, keys[0], keys, this._vnode)\n  }\n}\nvnode.data.keepAlive = true</pre><p id=\"u5bceef8e\" class=\"ne-p\"><span class=\"ne-text\">匹配条件通过会进入缓存机制的逻辑，如果命中缓存机制，从 cache中获取缓存的实例设置到当前的组件上，并调整key的位置将其放到最后，如果没有命中缓存，将当前vnode缓存起来，并加入到当前组件的key。如果缓存组件的数量不足，即缓存空间不足，则调用pruneCacheEntry将最旧的组件从缓存中删除，即keys[0]的组件。之后将组件的keepAlive标记为true，表示它是被缓存的组件。</span></p><pre data-language=\"javascript\" id=\"MkFay\" class=\"ne-codeblock language-javascript\">function pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array&lt;string&gt;,\n  current?: VNode\n) {\n  const cached = cache[key]\n  if (cached &amp;&amp; (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}</pre><p id=\"u339172a6\" class=\"ne-p\"><span class=\"ne-text\">pruneCacheEntry 负责将组件从缓存中删除，它会调用组件</span><code class=\"ne-code\"><span class=\"ne-text\">$destory</span></code><span class=\"ne-text\">方法销毁组件实例，缓存组件置空，并移除对应的key。</span></p><pre data-language=\"javascript\" id=\"aAMH2\" class=\"ne-codeblock language-javascript\">mounted () {\n  this.$watch('include', val =&gt; {\n    pruneCache(this, name =&gt; matches(val, name))\n  })\n  this.$watch('exclude', val =&gt; {\n    pruneCache(this, name =&gt; !matches(val, name))\n  })\n}\n\nfunction pruneCache (keepAliveInstance: any, filter: Function) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode: ?VNode = cache[key]\n    if (cachedNode) {\n      const name: ?string = getComponentName(cachedNode.componentOptions)\n      if (name &amp;&amp; !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}</pre><p id=\"u0ac9b60e\" class=\"ne-p\"><span class=\"ne-text\">keep-alive在mounted会监听include和exclude的变化，属性发生改变时，调整缓存和keys的顺序，最终调用的也是pruneCacheEntry。</span></p><h3 id=\"GA5Sh\"><span class=\"ne-text\">小结 </span></h3><p id=\"u4c973be2\" class=\"ne-p\"><span class=\"ne-text\">cache用于缓存组件，keys存储组件的key，根据LRU策略来调整缓存组件。keep-alive的render中最后会返回组件的vnode，因此：keep-alive并非真的不会渲染，而是渲染的对象是包裹的子组件。</span></p><h2 id=\"LLJji\"><span class=\"ne-text\">组件渲染流程</span></h2><p id=\"u3dafba99\" class=\"ne-p\"><br></p><h2 id=\"Z91pQ\"><span class=\"ne-text\">props</span></h2><p id=\"u11cd9d3a\" class=\"ne-p\"><span class=\"ne-text\">在选项内接收传进来的三个属性：include、exclude、max。</span></p><pre data-language=\"javascript\" id=\"Zo8Wa\" class=\"ne-codeblock language-javascript\">props: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n}</pre><ul class=\"ne-ul\"><li id=\"u29564616\"><code class=\"ne-code\"><span class=\"ne-text\">include</span></code><span class=\"ne-text\">表示只有匹配的组件会被缓存</span></li><li id=\"ue1106153\"><code class=\"ne-code\"><span class=\"ne-text\">exclude</span></code><span class=\"ne-text\">表示任何匹配到的组件都不会被缓存</span></li><li id=\"ubed4400e\"><code class=\"ne-code\"><span class=\"ne-text\">max</span></code><span class=\"ne-text\">表示缓存组件的数量，因为我们缓存的</span><code class=\"ne-code\"><span class=\"ne-text\">vnode</span></code><span class=\"ne-text\">对象，它也会持有DOM，当我们缓存的组件很多时，会比较占内存，所以该配置允许我们指定缓存组件的数量。</span></li></ul><h2 id=\"kVh6X\"><span class=\"ne-text\">created</span></h2><p id=\"u7e8fddc9\" class=\"ne-p\"><span class=\"ne-text\">在</span><code class=\"ne-code\"><span class=\"ne-text\">created</span></code><span class=\"ne-text\">钩子函数中，定义并初始化了两个属性：</span><code class=\"ne-code\"><span class=\"ne-text\">this.cache</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">this.keys</span></code><span class=\"ne-text\">。</span></p><pre data-language=\"javascript\" id=\"YQDhg\" class=\"ne-codeblock language-javascript\">created () {\n    this.cache = Object.create(null)\n    this.keys = []\n}</pre><ul class=\"ne-ul\"><li id=\"uef7a2ae0\"><span class=\"ne-text\">this.cache是一个对象，用来存储需要缓存的组件，它以如下形式存储：</span></li></ul><pre data-language=\"javascript\" id=\"NF1vs\" class=\"ne-codeblock language-javascript\">this.cache = {\n    'key1':'组件1',\n    'key2':'组件2',\n    // ...\n}</pre><ul class=\"ne-ul\"><li id=\"u1389204c\"><code class=\"ne-code\"><span class=\"ne-text\">this.keys</span></code><span class=\"ne-text\">是一个数组，用来存储每个需要缓存的组件的key，即对应的this.cache对象中的键值。</span></li></ul><h2 id=\"lLHJQ\"><span class=\"ne-text\">destroyed</span></h2><p id=\"u6e86742f\" class=\"ne-p\"><span class=\"ne-text\">当</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">组件被销毁时，此时会调用</span><code class=\"ne-code\"><span class=\"ne-text\">destroyed</span></code><span class=\"ne-text\">钩子函数，在该钩子函数里会遍历</span><code class=\"ne-code\"><span class=\"ne-text\">this.cache</span></code><span class=\"ne-text\">对象，然后将那些被缓存并当前没有处于被渲染状态是组件都销毁掉。</span></p><pre data-language=\"javascript\" id=\"cwwsA\" class=\"ne-codeblock language-javascript\">destroyed () {\n    for (const key in this.cache) {\n        pruneCacheEntry(this.cache, key, this.keys)\n    }\n}\n\n// pruneCacheEntry函数\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array&lt;string&gt;,\n  current?: VNode\n) {\n  const cached = cache[key]\n  /* 判断当前没有处于被渲染状态的组件，将其销毁*/\n  if (cached &amp;&amp; (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}</pre><h2 id=\"xyndn\"><span class=\"ne-text\">mounted</span></h2><p id=\"ub6be7bb5\" class=\"ne-p\"><span class=\"ne-text\">在mounted钩子函数中观测</span><code class=\"ne-code\"><span class=\"ne-text\">include</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">exclude</span></code><span class=\"ne-text\">的变化，如下：</span></p><pre data-language=\"javascript\" id=\"pV3Ed\" class=\"ne-codeblock language-javascript\">mounted () {\n    this.$watch('include', val =&gt; {\n        pruneCache(this, name =&gt; matches(val, name))\n    })\n    this.$watch('exclude', val =&gt; {\n        pruneCache(this, name =&gt; !matches(val, name))\n    })\n}</pre><p id=\"u54e189e8\" class=\"ne-p\"><span class=\"ne-text\">如果include和exclude发生了变化，即表示定义需要缓存的组件的规则或不需要缓存的组件的规则发生了变化，则执行pruneCache函数，如下：</span></p><pre data-language=\"javascript\" id=\"it9e5\" class=\"ne-codeblock language-javascript\">function pruneCache (keepAliveInstance, filter) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode = cache[key]\n    if (cachedNode) {\n      const name = getComponentName(cachedNode.componentOptions)\n      if (name &amp;&amp; !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}</pre><p id=\"ue3ba8a28\" class=\"ne-p\"><span class=\"ne-text\">在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用 </span><code class=\"ne-code\"><span class=\"ne-text\">pruneCacheEntry</span></code><span class=\"ne-text\">将其从</span><code class=\"ne-code\"><span class=\"ne-text\">this.cache</span></code><span class=\"ne-text\">对象剔除即可。</span></p><h2 id=\"raBtY\"><span class=\"ne-text\">render</span></h2><p id=\"u0d1ddd26\" class=\"ne-p\"><span class=\"ne-text\">在render函数中首先获取第一个子组件节点的vnode：</span></p><pre data-language=\"javascript\" id=\"yQGAx\" class=\"ne-codeblock language-javascript\">/* 获取默认插槽中的第一个组件节点 */\nconst slot = this.$slots.default\nconst vnode = getFirstComponentChild(slot)</pre><p id=\"ub1b70550\" class=\"ne-p\"><span class=\"ne-text\">由于我们也是在</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">标签内部写DOM，所以可以先获取到默认插槽，然后再获取到它的第一个子节点。</span></p><p id=\"uab7a9c2d\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">只处理第一个子元素，所以一般和它搭配使用的有 </span><code class=\"ne-code\"><span class=\"ne-text\">component</span></code><span class=\"ne-text\">动态组件或者是 </span><code class=\"ne-code\"><span class=\"ne-text\">router-view</span></code><span class=\"ne-text\">。</span></p><p id=\"u97d1cd3b\" class=\"ne-p\"><span class=\"ne-text\">接下来，获取该组件节点的名称：</span></p><pre data-language=\"javascript\" id=\"znflo\" class=\"ne-codeblock language-javascript\">/* 获取该组件节点的名称 */\nconst name = getComponentName(componentOptions)\n\n/* 优先获取组件的name字段，如果name不存在则获取组件的tag */\nfunction getComponentName (opts: ?VNodeComponentOptions): ?string {\n  return opts &amp;&amp; (opts.Ctor.options.name || opts.tag)\n}</pre><p id=\"ucc94f336\" class=\"ne-p\"><span class=\"ne-text\">然后用组件名称跟include、exclude中的匹配规则去匹配。</span></p><pre data-language=\"javascript\" id=\"oFBRv\" class=\"ne-codeblock language-javascript\">const { include, exclude } = this\n/* 如果name与include规则不匹配或者与exclude规则匹配则表示不缓存，直接返回vnode */\nif (\n    (include &amp;&amp; (!name || !matches(include, name))) ||\n    // excluded\n    (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n) {\n    return vnode\n}</pre><p id=\"u0a8a885e\" class=\"ne-p\"><span class=\"ne-text\">如果组件名称与include规则不匹配或者与exclude规则匹配，则表示不缓存该组件，直接返回这个组件的vnode，否则，走下一步缓存。</span></p><pre data-language=\"javascript\" id=\"ijIWw\" class=\"ne-codeblock language-javascript\">const { cache, keys } = this\n/* 获取组件的key */\nconst key = vnode.key == null\n? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n/* 最后设置keepAlive标记位 */\nvnode.data.keepAlive = true</pre><ul class=\"ne-ul\"><li id=\"ua981417a\"><span class=\"ne-text\">首先获取组件的key值：</span></li></ul><pre data-language=\"javascript\" id=\"Iu8r4\" class=\"ne-codeblock language-javascript\">const key = vnode.key == null? \ncomponentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key</pre><ul class=\"ne-ul\"><li id=\"u7ecac4d9\"><span class=\"ne-text\">拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存。</span></li></ul><pre data-language=\"javascript\" id=\"s87Ix\" class=\"ne-codeblock language-javascript\">/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} </pre><ul class=\"ne-ul\"><li id=\"ub4d9b503\"><span class=\"ne-text\">直接从缓存中拿</span><code class=\"ne-code\"><span class=\"ne-text\">vnode</span></code><span class=\"ne-text\">的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删除掉并重新放在this.keys中最后一个。</span></li><li id=\"u53bbcdb2\"><span class=\"ne-text\">如果this.cache对象中没有该key值：</span></li></ul><pre data-language=\"javascript\" id=\"wiiZQ\" class=\"ne-codeblock language-javascript\">/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}</pre><p id=\"u0552624c\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">表明该组件还没有被缓存过，则以该组件的key为例，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中。此时，再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删除。</span></p><div class=\"ne-quote\"><p id=\"ua38d221a\" class=\"ne-p\"><span class=\"ne-text\">问题：为什么要删除第一个缓存组件并为什么命中缓存了还要调整组件key的顺序？</span></p></div><div class=\"ne-quote\"><p id=\"ue562661d\" class=\"ne-p\"><span class=\"ne-text\">答：这其实应用了一个缓存淘汰策略LRU。</span></p></div><h3 id=\"tw16E\"><span class=\"ne-text\">LRU 算法</span></h3><p id=\"uebc75bba\" class=\"ne-p\"><span class=\"ne-text\">LRU（最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过 ，那么将来被访问的几率也更高”。</span></p><p id=\"uac8b2342\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png\" width=\"1202\" id=\"ueca676fc\" class=\"ne-image\"></p><ol class=\"ne-ol\"><li id=\"ue3eb23a4\"><span class=\"ne-text\">将新数据从尾部插入到this.keys中；</span></li><li id=\"u250c77cd\"><span class=\"ne-text\">每当缓存命中（即缓存数据被访问），则将数据移到this.keys的尾部。</span></li><li id=\"ue39a24b9\"><span class=\"ne-text\">当this.keys满时，将头部的数据丢弃</span></li></ol><p id=\"u388fce0d\" class=\"ne-p\"><span class=\"ne-text\">LRU核心：如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件key重新插入到this.keys的尾部，这样一来，</span><code class=\"ne-code\"><span class=\"ne-text\">this.keys</span></code><span class=\"ne-text\">中越往头部的数据即将被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即this.keys中第一个缓存的组件。 </span><span class=\"ne-text\" style=\"text-decoration: underline\">这也是 </span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">已缓存组件中最久没有被访问的实例</span></strong><span class=\"ne-text\" style=\"text-decoration: underline\">会被销毁的原因。</span></p><p id=\"u451f35eb\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u072b5e17\" class=\"ne-p\"><span class=\"ne-text\">以上工作做完后，设置</span><code class=\"ne-code\"><span class=\"ne-text\">vnode.data.keepAlive = true</span></code><span class=\"ne-text\">，最后将</span><code class=\"ne-code\"><span class=\"ne-text\">vnode</span></code><span class=\"ne-text\">返回。</span></p><h2 id=\"M4YBl\"><span class=\"ne-text\">生命周期钩子</span></h2><p id=\"u18ddb2ea\" class=\"ne-p\"><span class=\"ne-text\">组件一旦被</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">缓存，那么再次渲染时，就不会执行created、mounted等钩子函数，但我们很多业务场景都是希望被缓存的组件再次被渲染时做一些事情。</span></p><p id=\"uaa243ae3\" class=\"ne-p\"><span class=\"ne-text\">Vue 提供了这两个钩子函数： </span><code class=\"ne-code\"><span class=\"ne-text\">activated</span></code><span class=\"ne-text\"> 和</span><code class=\"ne-code\"><span class=\"ne-text\">deactivated</span></code><span class=\"ne-text\">。它的执行时机是：</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;keep-alive&gt;</span></code><span class=\"ne-text\">包裹的组件激活时调用和停用时调用。</span></p><pre data-language=\"javascript\" id=\"p7BeA\" class=\"ne-codeblock language-javascript\">let A = {\n  template: '&lt;div class=&quot;a&quot;&gt;' +\n  '&lt;p&gt;A Comp&lt;/p&gt;' +\n  '&lt;/div&gt;',\n  name: 'A',\n  mounted(){\n  \tconsole.log('Comp A mounted')\n  },\n  activated(){\n  \tconsole.log('Comp A activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp A deactivated')  \n  }\n}\n\nlet B = {\n  template: '&lt;div class=&quot;b&quot;&gt;' +\n  '&lt;p&gt;B Comp&lt;/p&gt;' +\n  '&lt;/div&gt;',\n  name: 'B',\n  mounted(){\n  \tconsole.log('Comp B mounted')\n  },\n  activated(){\n  \tconsole.log('Comp B activated')  \n  },\n  deactivated(){\n  \tconsole.log('Comp B deactivated')  \n  }\n}\n\nlet vm = new Vue({\n  el: '#app',\n  template: '&lt;div&gt;' +\n  '&lt;keep-alive&gt;' +\n  '&lt;component :is=&quot;currentComp&quot;&gt;' +\n  '&lt;/component&gt;' +\n  '&lt;/keep-alive&gt;' +\n  '&lt;button @click=&quot;change&quot;&gt;switch&lt;/button&gt;' +\n  '&lt;/div&gt;',\n  data: {\n    currentComp: 'A'\n  },\n  methods: {\n    change() {\n      this.currentComp = this.currentComp === 'A' ? 'B' : 'A'\n    }\n  },\n  components: {\n    A,\n    B\n  }\n})</pre><p id=\"uaddc6ec6\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"udcf6934e\" id=\"udcf6934e\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: keep-alive实现原理</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 框架</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-16</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-16</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-86df8247745c62d526051662353c7739_r.jpg%3Fsource%3D1940ef5c&amp;refer=http%3A%2F%2Fpic2.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1672407297&amp;t=f7f5279caca9a3d4ceefbbd6876431b5</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><ul list=\"u4bb2aad6\"><li fid=\"u0e894e06\" data-lake-id=\"u78f8bea5\" id=\"u78f8bea5\"><span data-lake-id=\"u880f7a8f\" id=\"u880f7a8f\">该组件内没有常规的</span><code data-lake-id=\"u96d13f8b\" id=\"u96d13f8b\"><span data-lake-id=\"u03d7c0a2\" id=\"u03d7c0a2\">&lt;template&gt;&lt;/template&gt;</span></code><span data-lake-id=\"uf5011548\" id=\"uf5011548\">等标签，因为它不是一个常规的模板组件，取而代之的是，它内部多了一个render函数，它是一个函数式组件。执行</span><code data-lake-id=\"u006ddec1\" id=\"u006ddec1\"><span data-lake-id=\"u5d2a9409\" id=\"u5d2a9409\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u0efcffc9\" id=\"u0efcffc9\">组件渲染时，就会执行这个</span><code data-lake-id=\"u697f0bf5\" id=\"u697f0bf5\"><span data-lake-id=\"u3883e5f0\" id=\"u3883e5f0\">render</span></code><span data-lake-id=\"u34376f32\" id=\"u34376f32\">函数。</span></li><li fid=\"u0e894e06\" data-lake-id=\"u504f990c\" id=\"u504f990c\"><span data-lake-id=\"u02dffdad\" id=\"u02dffdad\">keep-alive缓存机制是根据LRU策略来设置缓存组件新鲜度，将很久未访问的组件从缓存中删除。</span></li></ul><h2 data-lake-id=\"H6gIT\" id=\"H6gIT\"><span data-lake-id=\"ucf7415f0\" id=\"ucf7415f0\">组件实现原理</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%BA%90%E7%A0%81%E4%BD%8D%E7%BD%AE%EF%BC%9Asrc%2Fcore%2Fcomponents%2Fkeep-alive.js%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keep-alive'%2C%5Cn%20%20abstract%3A%20true%2C%5Cn%20%20props%3A%20%7B%5Cn%20%20%20%20include%3A%20patternTypes%2C%5Cn%20%20%20%20exclude%3A%20patternTypes%2C%5Cn%20%20%20%20max%3A%20%5BString%2C%20Number%5D%5Cn%20%20%7D%2C%5Cn%20%20created%20()%20%7B%5Cn%20%20%20%20this.cache%20%3D%20Object.create(null)%5Cn%20%20%20%20this.keys%20%3D%20%5B%5D%5Cn%20%20%7D%2C%5Cn%20%20destroyed%20()%20%7B%5Cn%20%20%20%20for%20(const%20key%20in%20this.cache)%20%7B%5Cn%20%20%20%20%20%20pruneCacheEntry(this.cache%2C%20key%2C%20this.keys)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%2C%5Cn%20%20render%20()%20%7B%5Cn%20%20%20%20const%20slot%20%3D%20this.%24slots.default%5Cn%20%20%20%20const%20vnode%3A%20VNode%20%3D%20getFirstComponentChild(slot)%5Cn%20%20%20%20const%20componentOptions%3A%20%3FVNodeComponentOptions%20%3D%20vnode%20%26%26%20vnode.componentOptions%5Cn%20%20%20%20if%20(componentOptions)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20check%20pattern%5Cn%20%20%20%20%20%20const%20name%3A%20%3Fstring%20%3D%20getComponentName(componentOptions)%5Cn%20%20%20%20%20%20const%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cn%20%20%20%20%20%20if%20(%5Cn%20%20%20%20%20%20%20%20%2F%2F%20not%20included%5Cn%20%20%20%20%20%20%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20excluded%5Cn%20%20%20%20%20%20%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn%20%20%20%20%20%20)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20vnode%5Cn%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cn%20%20%20%20%20%20const%20key%3A%20%3Fstring%20%3D%20vnode.key%20%3D%3D%20null%5Cn%20%20%20%20%20%20%20%20%2F%2F%20same%20constructor%20may%20get%20registered%20as%20different%20local%20components%5Cn%20%20%20%20%20%20%20%20%2F%2F%20so%20cid%20alone%20is%20not%20enough%20(%233269)%5Cn%20%20%20%20%20%20%20%20%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%20%20%20%20%20%20%20%20%3A%20vnode.key%5Cn%20%20%20%20%20%20if%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%20%20%20%20%2F%2F%20make%20current%20key%20freshest%5Cn%20%20%20%20%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20%20%20%20%20keys.push(key)%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20%20%20%20%20keys.push(key)%5Cn%20%20%20%20%20%20%20%20%2F%2F%20prune%20oldest%20entry%5Cn%20%20%20%20%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20vnode.data.keepAlive%20%3D%20true%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20vnode%20%7C%7C%20(slot%20%26%26%20slot%5B0%5D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zZiEa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7840961c\" id=\"u7840961c\"><span data-lake-id=\"u7e78f84b\" id=\"u7e78f84b\">keep-alive 实际上是一个抽象组件，只对包裹的组件做处理 ，并不会和子组件建立父子关系，也不会作为节点渲染到页面上。在组件开头就设置abstract为true，代表该组件是一个抽象组件。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%BA%90%E7%A0%81%E4%BD%8D%E7%BD%AE%EF%BC%9Asrc%2Fcore%2Finstance%2Flifecycle.js%5Cnexport%20function%20initLifecycle%20(vm%3A%20Component)%20%7B%5Cn%20%20const%20options%20%3D%20vm.%24options%5Cn%5Cn%20%20%2F%2F%20locate%20first%20non-abstract%20parent%5Cn%20%20let%20parent%20%3D%20options.parent%5Cn%20%20if%20(parent%20%26%26%20!options.abstract)%20%7B%5Cn%20%20%20%20while%20(parent.%24options.abstract%20%26%26%20parent.%24parent)%20%7B%5Cn%20%20%20%20%20%20parent%20%3D%20parent.%24parent%5Cn%20%20%20%20%7D%5Cn%20%20%20%20parent.%24children.push(vm)%5Cn%20%20%7D%5Cn%20%20vm.%24parent%20%3D%20parent%5Cn%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z3Cqd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3fa29aea\" id=\"u3fa29aea\"><span data-lake-id=\"ua1f38d33\" id=\"ua1f38d33\">那么抽象组件是如何忽略这层关系的？在初始化阶段会调用initLifecycle，里面判断父级是否为抽象组件，如果是抽象组件，就选取抽象组件中的上一级作为父级，忽略与抽象组件和子组件之间的层级关系。</span></p><p data-lake-id=\"uecb74c44\" id=\"uecb74c44\"><span data-lake-id=\"u15a3fb6b\" id=\"u15a3fb6b\">keep-alive组件没有编写template模板，而是由render函数决定是否渲染结果。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20slot%20%3D%20this.%24slots.default%5Cnconst%20vnode%3A%20VNode%20%3D%20getFirstComponentChild(slot)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vbrhn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u690fbdc9\" id=\"u690fbdc9\"><span data-lake-id=\"u9cb1d05d\" id=\"u9cb1d05d\"><br /></span><span data-lake-id=\"u8db350e3\" id=\"u8db350e3\">如果keep-alive存在多个子元素，keep-alive 要求同时只有一个子元素被渲染。所以在开头会获取插槽内的子元素，调用getFirstComponentChild 获取到第一个子元素的VNode。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20check%20pattern%5Cnconst%20name%3A%20%3Fstring%20%3D%20getComponentName(componentOptions)%5Cnconst%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cnif%20(%5Cn%20%20%2F%2F%20not%20included%5Cn%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%2F%2F%20excluded%5Cn%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn)%20%7B%5Cn%20%20return%20vnode%5Cn%7D%5Cn%5Cnfunction%20matches%20(pattern%3A%20string%20%7C%20RegExp%20%7C%20Array%3Cstring%3E%2C%20name%3A%20string)%3A%20boolean%20%7B%5Cn%20%20if%20(Array.isArray(pattern))%20%7B%5Cn%20%20%20%20return%20pattern.indexOf(name)%20%3E%20-1%5Cn%20%20%7D%20else%20if%20(typeof%20pattern%20%3D%3D%3D%20'string')%20%7B%5Cn%20%20%20%20return%20pattern.split('%2C').indexOf(name)%20%3E%20-1%5Cn%20%20%7D%20else%20if%20(isRegExp(pattern))%20%7B%5Cn%20%20%20%20return%20pattern.test(name)%5Cn%20%20%7D%5Cn%20%20return%20false%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qt0mr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e84a7a0\" id=\"u1e84a7a0\"><span data-lake-id=\"u222db364\" id=\"u222db364\">接着判断的当前组件是否符合缓存条件，组件名与include不匹配或与exclude匹配都会直接退出并返回vnode，不走缓存机制。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cnconst%20key%3A%20%3Fstring%20%3D%20vnode.key%20%3D%3D%20null%5Cn%20%20%2F%2F%20same%20constructor%20may%20get%20registered%20as%20different%20local%20components%5Cn%20%20%2F%2F%20so%20cid%20alone%20is%20not%20enough%20(%233269)%5Cn%20%20%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%20%20%3A%20vnode.key%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%2F%2F%20make%20current%20key%20freshest%5Cn%20%20remove(keys%2C%20key)%5Cn%20%20keys.push(key)%5Cn%7D%20else%20%7B%5Cn%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20keys.push(key)%5Cn%20%20%2F%2F%20prune%20oldest%20entry%5Cn%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%7D%5Cn%7D%5Cnvnode.data.keepAlive%20%3D%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cRfxn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5bceef8e\" id=\"u5bceef8e\"><span data-lake-id=\"u259c0ad7\" id=\"u259c0ad7\">匹配条件通过会进入缓存机制的逻辑，如果命中缓存机制，从 cache中获取缓存的实例设置到当前的组件上，并调整key的位置将其放到最后，如果没有命中缓存，将当前vnode缓存起来，并加入到当前组件的key。如果缓存组件的数量不足，即缓存空间不足，则调用pruneCacheEntry将最旧的组件从缓存中删除，即keys[0]的组件。之后将组件的keepAlive标记为true，表示它是被缓存的组件。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20pruneCacheEntry%20(%5Cn%20%20cache%3A%20VNodeCache%2C%5Cn%20%20key%3A%20string%2C%5Cn%20%20keys%3A%20Array%3Cstring%3E%2C%5Cn%20%20current%3F%3A%20VNode%5Cn)%20%7B%5Cn%20%20const%20cached%20%3D%20cache%5Bkey%5D%5Cn%20%20if%20(cached%20%26%26%20(!current%20%7C%7C%20cached.tag%20!%3D%3D%20current.tag))%20%7B%5Cn%20%20%20%20cached.componentInstance.%24destroy()%5Cn%20%20%7D%5Cn%20%20cache%5Bkey%5D%20%3D%20null%5Cn%20%20remove(keys%2C%20key)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MkFay%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u339172a6\" id=\"u339172a6\"><span data-lake-id=\"u7cc03faa\" id=\"u7cc03faa\">pruneCacheEntry 负责将组件从缓存中删除，它会调用组件</span><code data-lake-id=\"ua3db0038\" id=\"ua3db0038\"><span data-lake-id=\"ueb950904\" id=\"ueb950904\">$destory</span></code><span data-lake-id=\"u88712e48\" id=\"u88712e48\">方法销毁组件实例，缓存组件置空，并移除对应的key。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mounted%20()%20%7B%5Cn%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%7D)%5Cn%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%7D)%5Cn%7D%5Cn%5Cnfunction%20pruneCache%20(keepAliveInstance%3A%20any%2C%20filter%3A%20Function)%20%7B%5Cn%20%20const%20%7B%20cache%2C%20keys%2C%20_vnode%20%7D%20%3D%20keepAliveInstance%5Cn%20%20for%20(const%20key%20in%20cache)%20%7B%5Cn%20%20%20%20const%20cachedNode%3A%20%3FVNode%20%3D%20cache%5Bkey%5D%5Cn%20%20%20%20if%20(cachedNode)%20%7B%5Cn%20%20%20%20%20%20const%20name%3A%20%3Fstring%20%3D%20getComponentName(cachedNode.componentOptions)%5Cn%20%20%20%20%20%20if%20(name%20%26%26%20!filter(name))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20key%2C%20keys%2C%20_vnode)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aAMH2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0ac9b60e\" id=\"u0ac9b60e\"><span data-lake-id=\"uf12cfd3a\" id=\"uf12cfd3a\">keep-alive在mounted会监听include和exclude的变化，属性发生改变时，调整缓存和keys的顺序，最终调用的也是pruneCacheEntry。</span></p><h3 data-lake-id=\"GA5Sh\" id=\"GA5Sh\"><span data-lake-id=\"u0df83498\" id=\"u0df83498\">小结 </span></h3><p data-lake-id=\"u4c973be2\" id=\"u4c973be2\"><span data-lake-id=\"u811bbc60\" id=\"u811bbc60\">cache用于缓存组件，keys存储组件的key，根据LRU策略来调整缓存组件。keep-alive的render中最后会返回组件的vnode，因此：keep-alive并非真的不会渲染，而是渲染的对象是包裹的子组件。</span></p><h2 data-lake-id=\"LLJji\" id=\"LLJji\"><span data-lake-id=\"uc297ade3\" id=\"uc297ade3\">组件渲染流程</span></h2><p data-lake-id=\"u3dafba99\" id=\"u3dafba99\"><br></p><h2 data-lake-id=\"Z91pQ\" id=\"Z91pQ\"><span data-lake-id=\"uc5ec706e\" id=\"uc5ec706e\">props</span></h2><p data-lake-id=\"u11cd9d3a\" id=\"u11cd9d3a\"><span data-lake-id=\"ud04fa8ab\" id=\"ud04fa8ab\">在选项内接收传进来的三个属性：include、exclude、max。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22props%3A%20%7B%5Cn%20%20%20%20include%3A%20%5BString%2C%20RegExp%2C%20Array%5D%2C%5Cn%20%20%20%20exclude%3A%20%5BString%2C%20RegExp%2C%20Array%5D%2C%5Cn%20%20%20%20max%3A%20%5BString%2C%20Number%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Zo8Wa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u33917b0c\"><li fid=\"uc32bf6c1\" data-lake-id=\"u29564616\" id=\"u29564616\"><code data-lake-id=\"u979ef900\" id=\"u979ef900\"><span data-lake-id=\"u2e5e642f\" id=\"u2e5e642f\">include</span></code><span data-lake-id=\"ufb9211eb\" id=\"ufb9211eb\">表示只有匹配的组件会被缓存</span></li><li fid=\"uc32bf6c1\" data-lake-id=\"ue1106153\" id=\"ue1106153\"><code data-lake-id=\"u24102f2d\" id=\"u24102f2d\"><span data-lake-id=\"u79d094a2\" id=\"u79d094a2\">exclude</span></code><span data-lake-id=\"ue707f9c0\" id=\"ue707f9c0\">表示任何匹配到的组件都不会被缓存</span></li><li fid=\"uc32bf6c1\" data-lake-id=\"ubed4400e\" id=\"ubed4400e\"><code data-lake-id=\"uc597e615\" id=\"uc597e615\"><span data-lake-id=\"ub84602c8\" id=\"ub84602c8\">max</span></code><span data-lake-id=\"u3198683c\" id=\"u3198683c\">表示缓存组件的数量，因为我们缓存的</span><code data-lake-id=\"u4ed538c5\" id=\"u4ed538c5\"><span data-lake-id=\"u17df328d\" id=\"u17df328d\">vnode</span></code><span data-lake-id=\"u784e857b\" id=\"u784e857b\">对象，它也会持有DOM，当我们缓存的组件很多时，会比较占内存，所以该配置允许我们指定缓存组件的数量。</span></li></ul><h2 data-lake-id=\"kVh6X\" id=\"kVh6X\"><span data-lake-id=\"u4ddbc8c1\" id=\"u4ddbc8c1\">created</span></h2><p data-lake-id=\"u7e8fddc9\" id=\"u7e8fddc9\"><span data-lake-id=\"u5d470251\" id=\"u5d470251\">在</span><code data-lake-id=\"u0fc85eab\" id=\"u0fc85eab\"><span data-lake-id=\"u1a03cfbb\" id=\"u1a03cfbb\">created</span></code><span data-lake-id=\"u2d2107db\" id=\"u2d2107db\">钩子函数中，定义并初始化了两个属性：</span><code data-lake-id=\"udeeb0ad9\" id=\"udeeb0ad9\"><span data-lake-id=\"ubc186f68\" id=\"ubc186f68\">this.cache</span></code><span data-lake-id=\"ua16a5503\" id=\"ua16a5503\">、</span><code data-lake-id=\"uc2a89ce3\" id=\"uc2a89ce3\"><span data-lake-id=\"u87b75d10\" id=\"u87b75d10\">this.keys</span></code><span data-lake-id=\"ue831611b\" id=\"ue831611b\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22created%20()%20%7B%5Cn%20%20%20%20this.cache%20%3D%20Object.create(null)%5Cn%20%20%20%20this.keys%20%3D%20%5B%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YQDhg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u8997838c\"><li fid=\"uc9300cb8\" data-lake-id=\"uef7a2ae0\" id=\"uef7a2ae0\"><span data-lake-id=\"u74a3c918\" id=\"u74a3c918\">this.cache是一个对象，用来存储需要缓存的组件，它以如下形式存储：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.cache%20%3D%20%7B%5Cn%20%20%20%20'key1'%3A'%E7%BB%84%E4%BB%B61'%2C%5Cn%20%20%20%20'key2'%3A'%E7%BB%84%E4%BB%B62'%2C%5Cn%20%20%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NF1vs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6cf19afd\"><li fid=\"u62402986\" data-lake-id=\"u1389204c\" id=\"u1389204c\"><code data-lake-id=\"u8555cdbe\" id=\"u8555cdbe\"><span data-lake-id=\"u3a7215d5\" id=\"u3a7215d5\">this.keys</span></code><span data-lake-id=\"u0cfcac59\" id=\"u0cfcac59\">是一个数组，用来存储每个需要缓存的组件的key，即对应的this.cache对象中的键值。</span></li></ul><h2 data-lake-id=\"lLHJQ\" id=\"lLHJQ\"><span data-lake-id=\"ucbc13886\" id=\"ucbc13886\">destroyed</span></h2><p data-lake-id=\"u6e86742f\" id=\"u6e86742f\"><span data-lake-id=\"ub038f664\" id=\"ub038f664\">当</span><code data-lake-id=\"ua2554847\" id=\"ua2554847\"><span data-lake-id=\"ued678226\" id=\"ued678226\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u2ba48844\" id=\"u2ba48844\">组件被销毁时，此时会调用</span><code data-lake-id=\"u6558d805\" id=\"u6558d805\"><span data-lake-id=\"uf13b4142\" id=\"uf13b4142\">destroyed</span></code><span data-lake-id=\"u97919b89\" id=\"u97919b89\">钩子函数，在该钩子函数里会遍历</span><code data-lake-id=\"u92a916dc\" id=\"u92a916dc\"><span data-lake-id=\"u53285051\" id=\"u53285051\">this.cache</span></code><span data-lake-id=\"u37bd54f9\" id=\"u37bd54f9\">对象，然后将那些被缓存并当前没有处于被渲染状态是组件都销毁掉。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22destroyed%20()%20%7B%5Cn%20%20%20%20for%20(const%20key%20in%20this.cache)%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(this.cache%2C%20key%2C%20this.keys)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20pruneCacheEntry%E5%87%BD%E6%95%B0%5Cnfunction%20pruneCacheEntry%20(%5Cn%20%20cache%3A%20VNodeCache%2C%5Cn%20%20key%3A%20string%2C%5Cn%20%20keys%3A%20Array%3Cstring%3E%2C%5Cn%20%20current%3F%3A%20VNode%5Cn)%20%7B%5Cn%20%20const%20cached%20%3D%20cache%5Bkey%5D%5Cn%20%20%2F*%20%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%B2%A1%E6%9C%89%E5%A4%84%E4%BA%8E%E8%A2%AB%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B0%86%E5%85%B6%E9%94%80%E6%AF%81*%2F%5Cn%20%20if%20(cached%20%26%26%20(!current%20%7C%7C%20cached.tag%20!%3D%3D%20current.tag))%20%7B%5Cn%20%20%20%20cached.componentInstance.%24destroy()%5Cn%20%20%7D%5Cn%20%20cache%5Bkey%5D%20%3D%20null%5Cn%20%20remove(keys%2C%20key)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cwwsA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"xyndn\" id=\"xyndn\"><span data-lake-id=\"u6d91d30c\" id=\"u6d91d30c\">mounted</span></h2><p data-lake-id=\"ub6be7bb5\" id=\"ub6be7bb5\"><span data-lake-id=\"u33a2a1d1\" id=\"u33a2a1d1\">在mounted钩子函数中观测</span><code data-lake-id=\"u5dde0acb\" id=\"u5dde0acb\"><span data-lake-id=\"u999875b4\" id=\"u999875b4\">include</span></code><span data-lake-id=\"u0dc2c935\" id=\"u0dc2c935\">和</span><code data-lake-id=\"u9833ebcc\" id=\"u9833ebcc\"><span data-lake-id=\"ua9c21029\" id=\"ua9c21029\">exclude</span></code><span data-lake-id=\"u90947744\" id=\"u90947744\">的变化，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mounted%20()%20%7B%5Cn%20%20%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pV3Ed%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u54e189e8\" id=\"u54e189e8\"><span data-lake-id=\"ub4ec1c5b\" id=\"ub4ec1c5b\">如果include和exclude发生了变化，即表示定义需要缓存的组件的规则或不需要缓存的组件的规则发生了变化，则执行pruneCache函数，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20pruneCache%20(keepAliveInstance%2C%20filter)%20%7B%5Cn%20%20const%20%7B%20cache%2C%20keys%2C%20_vnode%20%7D%20%3D%20keepAliveInstance%5Cn%20%20for%20(const%20key%20in%20cache)%20%7B%5Cn%20%20%20%20const%20cachedNode%20%3D%20cache%5Bkey%5D%5Cn%20%20%20%20if%20(cachedNode)%20%7B%5Cn%20%20%20%20%20%20const%20name%20%3D%20getComponentName(cachedNode.componentOptions)%5Cn%20%20%20%20%20%20if%20(name%20%26%26%20!filter(name))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20key%2C%20keys%2C%20_vnode)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22it9e5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue3ba8a28\" id=\"ue3ba8a28\"><span data-lake-id=\"uecf0a307\" id=\"uecf0a307\">在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用 </span><code data-lake-id=\"ud86f7edb\" id=\"ud86f7edb\"><span data-lake-id=\"u8832ae06\" id=\"u8832ae06\">pruneCacheEntry</span></code><span data-lake-id=\"u356740fb\" id=\"u356740fb\">将其从</span><code data-lake-id=\"u2dbb4a3e\" id=\"u2dbb4a3e\"><span data-lake-id=\"udde1420f\" id=\"udde1420f\">this.cache</span></code><span data-lake-id=\"ufdbd307b\" id=\"ufdbd307b\">对象剔除即可。</span></p><h2 data-lake-id=\"raBtY\" id=\"raBtY\"><span data-lake-id=\"u477f71b0\" id=\"u477f71b0\">render</span></h2><p data-lake-id=\"u0d1ddd26\" id=\"u0d1ddd26\"><span data-lake-id=\"u8f4f1e84\" id=\"u8f4f1e84\">在render函数中首先获取第一个子组件节点的vnode：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E8%8E%B7%E5%8F%96%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E8%8A%82%E7%82%B9%20*%2F%5Cnconst%20slot%20%3D%20this.%24slots.default%5Cnconst%20vnode%20%3D%20getFirstComponentChild(slot)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yQGAx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub1b70550\" id=\"ub1b70550\"><span data-lake-id=\"ud08e01c0\" id=\"ud08e01c0\">由于我们也是在</span><code data-lake-id=\"u6b82a8bf\" id=\"u6b82a8bf\"><span data-lake-id=\"ueb589897\" id=\"ueb589897\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u1e24e173\" id=\"u1e24e173\">标签内部写DOM，所以可以先获取到默认插槽，然后再获取到它的第一个子节点。</span></p><p data-lake-id=\"uab7a9c2d\" id=\"uab7a9c2d\"><code data-lake-id=\"u85e39477\" id=\"u85e39477\"><span data-lake-id=\"u068d8253\" id=\"u068d8253\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"ua6ac4d4c\" id=\"ua6ac4d4c\">只处理第一个子元素，所以一般和它搭配使用的有 </span><code data-lake-id=\"u7164ba07\" id=\"u7164ba07\"><span data-lake-id=\"u53588d83\" id=\"u53588d83\">component</span></code><span data-lake-id=\"u114f85e7\" id=\"u114f85e7\">动态组件或者是 </span><code data-lake-id=\"u7e91e019\" id=\"u7e91e019\"><span data-lake-id=\"u00740709\" id=\"u00740709\">router-view</span></code><span data-lake-id=\"ueb7b8603\" id=\"ueb7b8603\">。</span></p><p data-lake-id=\"u97d1cd3b\" id=\"u97d1cd3b\"><span data-lake-id=\"u63830ec3\" id=\"u63830ec3\">接下来，获取该组件节点的名称：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E8%8E%B7%E5%8F%96%E8%AF%A5%E7%BB%84%E4%BB%B6%E8%8A%82%E7%82%B9%E7%9A%84%E5%90%8D%E7%A7%B0%20*%2F%5Cnconst%20name%20%3D%20getComponentName(componentOptions)%5Cn%5Cn%2F*%20%E4%BC%98%E5%85%88%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84name%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%A6%82%E6%9E%9Cname%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%88%99%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84tag%20*%2F%5Cnfunction%20getComponentName%20(opts%3A%20%3FVNodeComponentOptions)%3A%20%3Fstring%20%7B%5Cn%20%20return%20opts%20%26%26%20(opts.Ctor.options.name%20%7C%7C%20opts.tag)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22znflo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucc94f336\" id=\"ucc94f336\"><span data-lake-id=\"ub747719e\" id=\"ub747719e\">然后用组件名称跟include、exclude中的匹配规则去匹配。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cn%2F*%20%E5%A6%82%E6%9E%9Cname%E4%B8%8Einclude%E8%A7%84%E5%88%99%E4%B8%8D%E5%8C%B9%E9%85%8D%E6%88%96%E8%80%85%E4%B8%8Eexclude%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E5%88%99%E8%A1%A8%E7%A4%BA%E4%B8%8D%E7%BC%93%E5%AD%98%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9Evnode%20*%2F%5Cnif%20(%5Cn%20%20%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%20%20%2F%2F%20excluded%5Cn%20%20%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn)%20%7B%5Cn%20%20%20%20return%20vnode%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oFBRv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a8a885e\" id=\"u0a8a885e\"><span data-lake-id=\"u35fba8f7\" id=\"u35fba8f7\">如果组件名称与include规则不匹配或者与exclude规则匹配，则表示不缓存该组件，直接返回这个组件的vnode，否则，走下一步缓存。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cn%2F*%20%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84key%20*%2F%5Cnconst%20key%20%3D%20vnode.key%20%3D%3D%20null%5Cn%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%3A%20vnode.key%5Cn%5Cn%2F*%20%E5%A6%82%E6%9E%9C%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E6%8B%BF%20vnode%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%20*%2F%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%2F*%20%E8%B0%83%E6%95%B4%E8%AF%A5%E7%BB%84%E4%BB%B6key%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%9C%B0%E6%96%B9%E5%88%A0%E6%8E%89%E5%B9%B6%E9%87%8D%E6%96%B0%E6%94%BE%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20keys.push(key)%5Cn%7D%20%5Cn%2F*%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E8%BF%9B%E7%BC%93%E5%AD%98%20*%2F%5Cnelse%20%7B%5Cn%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20keys.push(key)%5Cn%20%20%20%20%2F*%20%E5%A6%82%E6%9E%9C%E9%85%8D%E7%BD%AE%E4%BA%86max%E5%B9%B6%E4%B8%94%E7%BC%93%E5%AD%98%E7%9A%84%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%87%E4%BA%86this.max%EF%BC%8C%E5%88%99%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%2F*%20%E6%9C%80%E5%90%8E%E8%AE%BE%E7%BD%AEkeepAlive%E6%A0%87%E8%AE%B0%E4%BD%8D%20*%2F%5Cnvnode.data.keepAlive%20%3D%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ijIWw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u8836622e\"><li fid=\"u0ecebe9f\" data-lake-id=\"ua981417a\" id=\"ua981417a\"><span data-lake-id=\"u5587def6\" id=\"u5587def6\">首先获取组件的key值：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20key%20%3D%20vnode.key%20%3D%3D%20null%3F%20%5CncomponentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%3A%20vnode.key%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Iu8r4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u13be77e1\"><li fid=\"ue6e7d6fd\" data-lake-id=\"u7ecac4d9\" id=\"u7ecac4d9\"><span data-lake-id=\"u49a9ef4e\" id=\"u49a9ef4e\">拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E5%A6%82%E6%9E%9C%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E6%8B%BF%20vnode%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%20*%2F%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%2F*%20%E8%B0%83%E6%95%B4%E8%AF%A5%E7%BB%84%E4%BB%B6key%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%9C%B0%E6%96%B9%E5%88%A0%E6%8E%89%E5%B9%B6%E9%87%8D%E6%96%B0%E6%94%BE%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20keys.push(key)%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22s87Ix%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u03a4c2df\"><li fid=\"ud5092606\" data-lake-id=\"ub4d9b503\" id=\"ub4d9b503\"><span data-lake-id=\"u172f25b7\" id=\"u172f25b7\">直接从缓存中拿</span><code data-lake-id=\"u6b6a4d2f\" id=\"u6b6a4d2f\"><span data-lake-id=\"uecf07356\" id=\"uecf07356\">vnode</span></code><span data-lake-id=\"u6e054b2c\" id=\"u6e054b2c\">的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删除掉并重新放在this.keys中最后一个。</span></li><li fid=\"ud5092606\" data-lake-id=\"u53bbcdb2\" id=\"u53bbcdb2\"><span data-lake-id=\"u04481438\" id=\"u04481438\">如果this.cache对象中没有该key值：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E8%BF%9B%E7%BC%93%E5%AD%98%20*%2F%5Cnelse%20%7B%5Cn%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20keys.push(key)%5Cn%20%20%20%20%2F*%20%E5%A6%82%E6%9E%9C%E9%85%8D%E7%BD%AE%E4%BA%86max%E5%B9%B6%E4%B8%94%E7%BC%93%E5%AD%98%E7%9A%84%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%87%E4%BA%86this.max%EF%BC%8C%E5%88%99%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wiiZQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0552624c\" id=\"u0552624c\" style=\"text-indent: 2em\"><span data-lake-id=\"u71431518\" id=\"u71431518\">表明该组件还没有被缓存过，则以该组件的key为例，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中。此时，再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删除。</span></p><blockquote data-lake-id=\"ud0dcd7c0\" id=\"ud0dcd7c0\"><p data-lake-id=\"ua38d221a\" id=\"ua38d221a\"><span data-lake-id=\"u9ad5ab58\" id=\"u9ad5ab58\">问题：为什么要删除第一个缓存组件并为什么命中缓存了还要调整组件key的顺序？</span></p></blockquote><blockquote data-lake-id=\"u85ba389e\" id=\"u85ba389e\"><p data-lake-id=\"ue562661d\" id=\"ue562661d\"><span data-lake-id=\"uae3e4995\" id=\"uae3e4995\">答：这其实应用了一个缓存淘汰策略LRU。</span></p></blockquote><h3 data-lake-id=\"tw16E\" id=\"tw16E\"><span data-lake-id=\"u581a2f79\" id=\"u581a2f79\">LRU 算法</span></h3><p data-lake-id=\"uebc75bba\" id=\"uebc75bba\"><span data-lake-id=\"ue17c6e16\" id=\"ue17c6e16\">LRU（最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过 ，那么将来被访问的几率也更高”。</span></p><p data-lake-id=\"uac8b2342\" id=\"uac8b2342\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png%22%2C%22taskId%22%3A%22uc61d75db-aac1-4286-bf09-c689a4bfffd%22%2C%22clientId%22%3A%22ubef7bb93-9c10-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32668%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1202%2C%22originHeight%22%3A438%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22THIS.KEYS%201.%E6%96%B0%E5%8A%A0%E5%85%A5%E6%95%B0%E6%8D%AE%203.%E6%B7%98%E6%B1%B0%E6%95%B0%E6%8D%AE%202.%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84%E6%95%B0%E6%8D%AE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A452.66162%2C%22y%22%3A43.221573%2C%22width%22%3A167.39988%2C%22height%22%3A44.931346999999995%2C%22text%22%3A%22THIS.KEYS%22%7D%2C%7B%22x%22%3A1057.1387%2C%22y%22%3A167.93523%2C%22width%22%3A125.28480000000013%2C%22height%22%3A24.331400000000002%2C%22text%22%3A%221.%E6%96%B0%E5%8A%A0%E5%85%A5%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A81.095245%2C%22y%22%3A291.56006%2C%22width%22%3A105.84591499999999%2C%22height%22%3A23.346799999999973%2C%22text%22%3A%223.%E6%B7%98%E6%B1%B0%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A681.6766%2C%22y%22%3A374.05518%2C%22width%22%3A145.76774%2C%22height%22%3A23.75673999999998%2C%22text%22%3A%222.%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84%E6%95%B0%E6%8D%AE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22ueca676fc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ol list=\"ub2cc6182\"><li fid=\"ud2ad47ba\" data-lake-id=\"ue3eb23a4\" id=\"ue3eb23a4\"><span data-lake-id=\"ue4998c81\" id=\"ue4998c81\">将新数据从尾部插入到this.keys中；</span></li><li fid=\"ud2ad47ba\" data-lake-id=\"u250c77cd\" id=\"u250c77cd\"><span data-lake-id=\"u6ac0f0fb\" id=\"u6ac0f0fb\">每当缓存命中（即缓存数据被访问），则将数据移到this.keys的尾部。</span></li><li fid=\"ud2ad47ba\" data-lake-id=\"ue39a24b9\" id=\"ue39a24b9\"><span data-lake-id=\"u0534111c\" id=\"u0534111c\">当this.keys满时，将头部的数据丢弃</span></li></ol><p data-lake-id=\"u388fce0d\" id=\"u388fce0d\"><span data-lake-id=\"u11676ce0\" id=\"u11676ce0\">LRU核心：如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件key重新插入到this.keys的尾部，这样一来，</span><code data-lake-id=\"u99205d32\" id=\"u99205d32\"><span data-lake-id=\"u6154835a\" id=\"u6154835a\">this.keys</span></code><span data-lake-id=\"u1ba93c6c\" id=\"u1ba93c6c\">中越往头部的数据即将被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即this.keys中第一个缓存的组件。 </span><u><span data-lake-id=\"u935b47de\" id=\"u935b47de\">这也是 </span></u><strong><u><span data-lake-id=\"udba7e12c\" id=\"udba7e12c\">已缓存组件中最久没有被访问的实例</span></u></strong><u><span data-lake-id=\"u0f6164ea\" id=\"u0f6164ea\">会被销毁的原因。</span></u></p><p data-lake-id=\"u451f35eb\" id=\"u451f35eb\"><span data-lake-id=\"u8a9e0347\" id=\"u8a9e0347\">​</span><br></p><p data-lake-id=\"u072b5e17\" id=\"u072b5e17\"><span data-lake-id=\"u7829900c\" id=\"u7829900c\">以上工作做完后，设置</span><code data-lake-id=\"u0b53b9e0\" id=\"u0b53b9e0\"><span data-lake-id=\"u87b90459\" id=\"u87b90459\">vnode.data.keepAlive = true</span></code><span data-lake-id=\"u5b88a1a4\" id=\"u5b88a1a4\">，最后将</span><code data-lake-id=\"u378d03cd\" id=\"u378d03cd\"><span data-lake-id=\"uc425478c\" id=\"uc425478c\">vnode</span></code><span data-lake-id=\"uc5b4522d\" id=\"uc5b4522d\">返回。</span></p><h2 data-lake-id=\"M4YBl\" id=\"M4YBl\"><span data-lake-id=\"ub942d98a\" id=\"ub942d98a\">生命周期钩子</span></h2><p data-lake-id=\"u18ddb2ea\" id=\"u18ddb2ea\"><span data-lake-id=\"u5eb16aa0\" id=\"u5eb16aa0\">组件一旦被</span><code data-lake-id=\"ub487a50b\" id=\"ub487a50b\"><span data-lake-id=\"ub7d25eef\" id=\"ub7d25eef\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u395ea9b1\" id=\"u395ea9b1\">缓存，那么再次渲染时，就不会执行created、mounted等钩子函数，但我们很多业务场景都是希望被缓存的组件再次被渲染时做一些事情。</span></p><p data-lake-id=\"uaa243ae3\" id=\"uaa243ae3\"><span data-lake-id=\"ubd67d833\" id=\"ubd67d833\">Vue 提供了这两个钩子函数： </span><code data-lake-id=\"u0674404d\" id=\"u0674404d\"><span data-lake-id=\"u3bd975c9\" id=\"u3bd975c9\">activated</span></code><span data-lake-id=\"ub9a6605b\" id=\"ub9a6605b\"> 和</span><code data-lake-id=\"ub61a5238\" id=\"ub61a5238\"><span data-lake-id=\"u094147f5\" id=\"u094147f5\">deactivated</span></code><span data-lake-id=\"u8ad52f17\" id=\"u8ad52f17\">。它的执行时机是：</span><code data-lake-id=\"u80834349\" id=\"u80834349\"><span data-lake-id=\"u81e2ccb6\" id=\"u81e2ccb6\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u64966c5a\" id=\"u64966c5a\">包裹的组件激活时调用和停用时调用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20A%20%3D%20%7B%5Cn%20%20template%3A%20'%3Cdiv%20class%3D%5C%22a%5C%22%3E'%20%2B%5Cn%20%20'%3Cp%3EA%20Comp%3C%2Fp%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20name%3A%20'A'%2C%5Cn%20%20mounted()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20mounted')%5Cn%20%20%7D%2C%5Cn%20%20activated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20activated')%20%20%5Cn%20%20%7D%2C%5Cn%20%20deactivated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20deactivated')%20%20%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnlet%20B%20%3D%20%7B%5Cn%20%20template%3A%20'%3Cdiv%20class%3D%5C%22b%5C%22%3E'%20%2B%5Cn%20%20'%3Cp%3EB%20Comp%3C%2Fp%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20name%3A%20'B'%2C%5Cn%20%20mounted()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20mounted')%5Cn%20%20%7D%2C%5Cn%20%20activated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20activated')%20%20%5Cn%20%20%7D%2C%5Cn%20%20deactivated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20deactivated')%20%20%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnlet%20vm%20%3D%20new%20Vue(%7B%5Cn%20%20el%3A%20'%23app'%2C%5Cn%20%20template%3A%20'%3Cdiv%3E'%20%2B%5Cn%20%20'%3Ckeep-alive%3E'%20%2B%5Cn%20%20'%3Ccomponent%20%3Ais%3D%5C%22currentComp%5C%22%3E'%20%2B%5Cn%20%20'%3C%2Fcomponent%3E'%20%2B%5Cn%20%20'%3C%2Fkeep-alive%3E'%20%2B%5Cn%20%20'%3Cbutton%20%40click%3D%5C%22change%5C%22%3Eswitch%3C%2Fbutton%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20data%3A%20%7B%5Cn%20%20%20%20currentComp%3A%20'A'%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20change()%20%7B%5Cn%20%20%20%20%20%20this.currentComp%20%3D%20this.currentComp%20%3D%3D%3D%20'A'%20%3F%20'B'%20%3A%20'A'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20A%2C%5Cn%20%20%20%20B%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22p7BeA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uaddc6ec6\" id=\"uaddc6ec6\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"udcf6934e\" id=\"udcf6934e\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: keep-alive实现原理</span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 框架</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-16</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-16</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: Vue</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-86df8247745c62d526051662353c7739_r.jpg%3Fsource%3D1940ef5c&amp;refer=http%3A%2F%2Fpic2.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1672407297&amp;t=f7f5279caca9a3d4ceefbbd6876431b5</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><ul list=\"u4bb2aad6\"><li fid=\"u0e894e06\" data-lake-id=\"u78f8bea5\" id=\"u78f8bea5\"><span data-lake-id=\"u880f7a8f\" id=\"u880f7a8f\">该组件内没有常规的</span><code data-lake-id=\"u96d13f8b\" id=\"u96d13f8b\"><span data-lake-id=\"u03d7c0a2\" id=\"u03d7c0a2\">&lt;template&gt;&lt;/template&gt;</span></code><span data-lake-id=\"uf5011548\" id=\"uf5011548\">等标签，因为它不是一个常规的模板组件，取而代之的是，它内部多了一个render函数，它是一个函数式组件。执行</span><code data-lake-id=\"u006ddec1\" id=\"u006ddec1\"><span data-lake-id=\"u5d2a9409\" id=\"u5d2a9409\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u0efcffc9\" id=\"u0efcffc9\">组件渲染时，就会执行这个</span><code data-lake-id=\"u697f0bf5\" id=\"u697f0bf5\"><span data-lake-id=\"u3883e5f0\" id=\"u3883e5f0\">render</span></code><span data-lake-id=\"u34376f32\" id=\"u34376f32\">函数。</span></li><li fid=\"u0e894e06\" data-lake-id=\"u504f990c\" id=\"u504f990c\"><span data-lake-id=\"u02dffdad\" id=\"u02dffdad\">keep-alive缓存机制是根据LRU策略来设置缓存组件新鲜度，将很久未访问的组件从缓存中删除。</span></li></ul><h2 data-lake-id=\"H6gIT\" id=\"H6gIT\"><span data-lake-id=\"ucf7415f0\" id=\"ucf7415f0\">组件实现原理</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%BA%90%E7%A0%81%E4%BD%8D%E7%BD%AE%EF%BC%9Asrc%2Fcore%2Fcomponents%2Fkeep-alive.js%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keep-alive'%2C%5Cn%20%20abstract%3A%20true%2C%5Cn%20%20props%3A%20%7B%5Cn%20%20%20%20include%3A%20patternTypes%2C%5Cn%20%20%20%20exclude%3A%20patternTypes%2C%5Cn%20%20%20%20max%3A%20%5BString%2C%20Number%5D%5Cn%20%20%7D%2C%5Cn%20%20created%20()%20%7B%5Cn%20%20%20%20this.cache%20%3D%20Object.create(null)%5Cn%20%20%20%20this.keys%20%3D%20%5B%5D%5Cn%20%20%7D%2C%5Cn%20%20destroyed%20()%20%7B%5Cn%20%20%20%20for%20(const%20key%20in%20this.cache)%20%7B%5Cn%20%20%20%20%20%20pruneCacheEntry(this.cache%2C%20key%2C%20this.keys)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%2C%5Cn%20%20render%20()%20%7B%5Cn%20%20%20%20const%20slot%20%3D%20this.%24slots.default%5Cn%20%20%20%20const%20vnode%3A%20VNode%20%3D%20getFirstComponentChild(slot)%5Cn%20%20%20%20const%20componentOptions%3A%20%3FVNodeComponentOptions%20%3D%20vnode%20%26%26%20vnode.componentOptions%5Cn%20%20%20%20if%20(componentOptions)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20check%20pattern%5Cn%20%20%20%20%20%20const%20name%3A%20%3Fstring%20%3D%20getComponentName(componentOptions)%5Cn%20%20%20%20%20%20const%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cn%20%20%20%20%20%20if%20(%5Cn%20%20%20%20%20%20%20%20%2F%2F%20not%20included%5Cn%20%20%20%20%20%20%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20excluded%5Cn%20%20%20%20%20%20%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn%20%20%20%20%20%20)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20vnode%5Cn%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cn%20%20%20%20%20%20const%20key%3A%20%3Fstring%20%3D%20vnode.key%20%3D%3D%20null%5Cn%20%20%20%20%20%20%20%20%2F%2F%20same%20constructor%20may%20get%20registered%20as%20different%20local%20components%5Cn%20%20%20%20%20%20%20%20%2F%2F%20so%20cid%20alone%20is%20not%20enough%20(%233269)%5Cn%20%20%20%20%20%20%20%20%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%20%20%20%20%20%20%20%20%3A%20vnode.key%5Cn%20%20%20%20%20%20if%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%20%20%20%20%2F%2F%20make%20current%20key%20freshest%5Cn%20%20%20%20%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20%20%20%20%20keys.push(key)%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20%20%20%20%20keys.push(key)%5Cn%20%20%20%20%20%20%20%20%2F%2F%20prune%20oldest%20entry%5Cn%20%20%20%20%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20vnode.data.keepAlive%20%3D%20true%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20vnode%20%7C%7C%20(slot%20%26%26%20slot%5B0%5D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zZiEa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7840961c\" id=\"u7840961c\"><span data-lake-id=\"u7e78f84b\" id=\"u7e78f84b\">keep-alive 实际上是一个抽象组件，只对包裹的组件做处理 ，并不会和子组件建立父子关系，也不会作为节点渲染到页面上。在组件开头就设置abstract为true，代表该组件是一个抽象组件。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%BA%90%E7%A0%81%E4%BD%8D%E7%BD%AE%EF%BC%9Asrc%2Fcore%2Finstance%2Flifecycle.js%5Cnexport%20function%20initLifecycle%20(vm%3A%20Component)%20%7B%5Cn%20%20const%20options%20%3D%20vm.%24options%5Cn%5Cn%20%20%2F%2F%20locate%20first%20non-abstract%20parent%5Cn%20%20let%20parent%20%3D%20options.parent%5Cn%20%20if%20(parent%20%26%26%20!options.abstract)%20%7B%5Cn%20%20%20%20while%20(parent.%24options.abstract%20%26%26%20parent.%24parent)%20%7B%5Cn%20%20%20%20%20%20parent%20%3D%20parent.%24parent%5Cn%20%20%20%20%7D%5Cn%20%20%20%20parent.%24children.push(vm)%5Cn%20%20%7D%5Cn%20%20vm.%24parent%20%3D%20parent%5Cn%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z3Cqd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3fa29aea\" id=\"u3fa29aea\"><span data-lake-id=\"ua1f38d33\" id=\"ua1f38d33\">那么抽象组件是如何忽略这层关系的？在初始化阶段会调用initLifecycle，里面判断父级是否为抽象组件，如果是抽象组件，就选取抽象组件中的上一级作为父级，忽略与抽象组件和子组件之间的层级关系。</span></p><p data-lake-id=\"uecb74c44\" id=\"uecb74c44\"><span data-lake-id=\"u15a3fb6b\" id=\"u15a3fb6b\">keep-alive组件没有编写template模板，而是由render函数决定是否渲染结果。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20slot%20%3D%20this.%24slots.default%5Cnconst%20vnode%3A%20VNode%20%3D%20getFirstComponentChild(slot)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vbrhn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u690fbdc9\" id=\"u690fbdc9\"><span data-lake-id=\"u9cb1d05d\" id=\"u9cb1d05d\"><br /></span><span data-lake-id=\"u8db350e3\" id=\"u8db350e3\">如果keep-alive存在多个子元素，keep-alive 要求同时只有一个子元素被渲染。所以在开头会获取插槽内的子元素，调用getFirstComponentChild 获取到第一个子元素的VNode。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20check%20pattern%5Cnconst%20name%3A%20%3Fstring%20%3D%20getComponentName(componentOptions)%5Cnconst%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cnif%20(%5Cn%20%20%2F%2F%20not%20included%5Cn%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%2F%2F%20excluded%5Cn%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn)%20%7B%5Cn%20%20return%20vnode%5Cn%7D%5Cn%5Cnfunction%20matches%20(pattern%3A%20string%20%7C%20RegExp%20%7C%20Array%3Cstring%3E%2C%20name%3A%20string)%3A%20boolean%20%7B%5Cn%20%20if%20(Array.isArray(pattern))%20%7B%5Cn%20%20%20%20return%20pattern.indexOf(name)%20%3E%20-1%5Cn%20%20%7D%20else%20if%20(typeof%20pattern%20%3D%3D%3D%20'string')%20%7B%5Cn%20%20%20%20return%20pattern.split('%2C').indexOf(name)%20%3E%20-1%5Cn%20%20%7D%20else%20if%20(isRegExp(pattern))%20%7B%5Cn%20%20%20%20return%20pattern.test(name)%5Cn%20%20%7D%5Cn%20%20return%20false%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qt0mr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e84a7a0\" id=\"u1e84a7a0\"><span data-lake-id=\"u222db364\" id=\"u222db364\">接着判断的当前组件是否符合缓存条件，组件名与include不匹配或与exclude匹配都会直接退出并返回vnode，不走缓存机制。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cnconst%20key%3A%20%3Fstring%20%3D%20vnode.key%20%3D%3D%20null%5Cn%20%20%2F%2F%20same%20constructor%20may%20get%20registered%20as%20different%20local%20components%5Cn%20%20%2F%2F%20so%20cid%20alone%20is%20not%20enough%20(%233269)%5Cn%20%20%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%20%20%3A%20vnode.key%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%2F%2F%20make%20current%20key%20freshest%5Cn%20%20remove(keys%2C%20key)%5Cn%20%20keys.push(key)%5Cn%7D%20else%20%7B%5Cn%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20keys.push(key)%5Cn%20%20%2F%2F%20prune%20oldest%20entry%5Cn%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%7D%5Cn%7D%5Cnvnode.data.keepAlive%20%3D%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cRfxn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5bceef8e\" id=\"u5bceef8e\"><span data-lake-id=\"u259c0ad7\" id=\"u259c0ad7\">匹配条件通过会进入缓存机制的逻辑，如果命中缓存机制，从 cache中获取缓存的实例设置到当前的组件上，并调整key的位置将其放到最后，如果没有命中缓存，将当前vnode缓存起来，并加入到当前组件的key。如果缓存组件的数量不足，即缓存空间不足，则调用pruneCacheEntry将最旧的组件从缓存中删除，即keys[0]的组件。之后将组件的keepAlive标记为true，表示它是被缓存的组件。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20pruneCacheEntry%20(%5Cn%20%20cache%3A%20VNodeCache%2C%5Cn%20%20key%3A%20string%2C%5Cn%20%20keys%3A%20Array%3Cstring%3E%2C%5Cn%20%20current%3F%3A%20VNode%5Cn)%20%7B%5Cn%20%20const%20cached%20%3D%20cache%5Bkey%5D%5Cn%20%20if%20(cached%20%26%26%20(!current%20%7C%7C%20cached.tag%20!%3D%3D%20current.tag))%20%7B%5Cn%20%20%20%20cached.componentInstance.%24destroy()%5Cn%20%20%7D%5Cn%20%20cache%5Bkey%5D%20%3D%20null%5Cn%20%20remove(keys%2C%20key)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MkFay%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u339172a6\" id=\"u339172a6\"><span data-lake-id=\"u7cc03faa\" id=\"u7cc03faa\">pruneCacheEntry 负责将组件从缓存中删除，它会调用组件</span><code data-lake-id=\"ua3db0038\" id=\"ua3db0038\"><span data-lake-id=\"ueb950904\" id=\"ueb950904\">$destory</span></code><span data-lake-id=\"u88712e48\" id=\"u88712e48\">方法销毁组件实例，缓存组件置空，并移除对应的key。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mounted%20()%20%7B%5Cn%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%7D)%5Cn%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%7D)%5Cn%7D%5Cn%5Cnfunction%20pruneCache%20(keepAliveInstance%3A%20any%2C%20filter%3A%20Function)%20%7B%5Cn%20%20const%20%7B%20cache%2C%20keys%2C%20_vnode%20%7D%20%3D%20keepAliveInstance%5Cn%20%20for%20(const%20key%20in%20cache)%20%7B%5Cn%20%20%20%20const%20cachedNode%3A%20%3FVNode%20%3D%20cache%5Bkey%5D%5Cn%20%20%20%20if%20(cachedNode)%20%7B%5Cn%20%20%20%20%20%20const%20name%3A%20%3Fstring%20%3D%20getComponentName(cachedNode.componentOptions)%5Cn%20%20%20%20%20%20if%20(name%20%26%26%20!filter(name))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20key%2C%20keys%2C%20_vnode)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aAMH2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0ac9b60e\" id=\"u0ac9b60e\"><span data-lake-id=\"uf12cfd3a\" id=\"uf12cfd3a\">keep-alive在mounted会监听include和exclude的变化，属性发生改变时，调整缓存和keys的顺序，最终调用的也是pruneCacheEntry。</span></p><h3 data-lake-id=\"GA5Sh\" id=\"GA5Sh\"><span data-lake-id=\"u0df83498\" id=\"u0df83498\">小结 </span></h3><p data-lake-id=\"u4c973be2\" id=\"u4c973be2\"><span data-lake-id=\"u811bbc60\" id=\"u811bbc60\">cache用于缓存组件，keys存储组件的key，根据LRU策略来调整缓存组件。keep-alive的render中最后会返回组件的vnode，因此：keep-alive并非真的不会渲染，而是渲染的对象是包裹的子组件。</span></p><h2 data-lake-id=\"LLJji\" id=\"LLJji\"><span data-lake-id=\"uc297ade3\" id=\"uc297ade3\">组件渲染流程</span></h2><p data-lake-id=\"u3dafba99\" id=\"u3dafba99\"><br></p><h2 data-lake-id=\"Z91pQ\" id=\"Z91pQ\"><span data-lake-id=\"uc5ec706e\" id=\"uc5ec706e\">props</span></h2><p data-lake-id=\"u11cd9d3a\" id=\"u11cd9d3a\"><span data-lake-id=\"ud04fa8ab\" id=\"ud04fa8ab\">在选项内接收传进来的三个属性：include、exclude、max。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22props%3A%20%7B%5Cn%20%20%20%20include%3A%20%5BString%2C%20RegExp%2C%20Array%5D%2C%5Cn%20%20%20%20exclude%3A%20%5BString%2C%20RegExp%2C%20Array%5D%2C%5Cn%20%20%20%20max%3A%20%5BString%2C%20Number%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Zo8Wa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u33917b0c\"><li fid=\"uc32bf6c1\" data-lake-id=\"u29564616\" id=\"u29564616\"><code data-lake-id=\"u979ef900\" id=\"u979ef900\"><span data-lake-id=\"u2e5e642f\" id=\"u2e5e642f\">include</span></code><span data-lake-id=\"ufb9211eb\" id=\"ufb9211eb\">表示只有匹配的组件会被缓存</span></li><li fid=\"uc32bf6c1\" data-lake-id=\"ue1106153\" id=\"ue1106153\"><code data-lake-id=\"u24102f2d\" id=\"u24102f2d\"><span data-lake-id=\"u79d094a2\" id=\"u79d094a2\">exclude</span></code><span data-lake-id=\"ue707f9c0\" id=\"ue707f9c0\">表示任何匹配到的组件都不会被缓存</span></li><li fid=\"uc32bf6c1\" data-lake-id=\"ubed4400e\" id=\"ubed4400e\"><code data-lake-id=\"uc597e615\" id=\"uc597e615\"><span data-lake-id=\"ub84602c8\" id=\"ub84602c8\">max</span></code><span data-lake-id=\"u3198683c\" id=\"u3198683c\">表示缓存组件的数量，因为我们缓存的</span><code data-lake-id=\"u4ed538c5\" id=\"u4ed538c5\"><span data-lake-id=\"u17df328d\" id=\"u17df328d\">vnode</span></code><span data-lake-id=\"u784e857b\" id=\"u784e857b\">对象，它也会持有DOM，当我们缓存的组件很多时，会比较占内存，所以该配置允许我们指定缓存组件的数量。</span></li></ul><h2 data-lake-id=\"kVh6X\" id=\"kVh6X\"><span data-lake-id=\"u4ddbc8c1\" id=\"u4ddbc8c1\">created</span></h2><p data-lake-id=\"u7e8fddc9\" id=\"u7e8fddc9\"><span data-lake-id=\"u5d470251\" id=\"u5d470251\">在</span><code data-lake-id=\"u0fc85eab\" id=\"u0fc85eab\"><span data-lake-id=\"u1a03cfbb\" id=\"u1a03cfbb\">created</span></code><span data-lake-id=\"u2d2107db\" id=\"u2d2107db\">钩子函数中，定义并初始化了两个属性：</span><code data-lake-id=\"udeeb0ad9\" id=\"udeeb0ad9\"><span data-lake-id=\"ubc186f68\" id=\"ubc186f68\">this.cache</span></code><span data-lake-id=\"ua16a5503\" id=\"ua16a5503\">、</span><code data-lake-id=\"uc2a89ce3\" id=\"uc2a89ce3\"><span data-lake-id=\"u87b75d10\" id=\"u87b75d10\">this.keys</span></code><span data-lake-id=\"ue831611b\" id=\"ue831611b\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22created%20()%20%7B%5Cn%20%20%20%20this.cache%20%3D%20Object.create(null)%5Cn%20%20%20%20this.keys%20%3D%20%5B%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YQDhg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u8997838c\"><li fid=\"uc9300cb8\" data-lake-id=\"uef7a2ae0\" id=\"uef7a2ae0\"><span data-lake-id=\"u74a3c918\" id=\"u74a3c918\">this.cache是一个对象，用来存储需要缓存的组件，它以如下形式存储：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.cache%20%3D%20%7B%5Cn%20%20%20%20'key1'%3A'%E7%BB%84%E4%BB%B61'%2C%5Cn%20%20%20%20'key2'%3A'%E7%BB%84%E4%BB%B62'%2C%5Cn%20%20%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NF1vs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6cf19afd\"><li fid=\"u62402986\" data-lake-id=\"u1389204c\" id=\"u1389204c\"><code data-lake-id=\"u8555cdbe\" id=\"u8555cdbe\"><span data-lake-id=\"u3a7215d5\" id=\"u3a7215d5\">this.keys</span></code><span data-lake-id=\"u0cfcac59\" id=\"u0cfcac59\">是一个数组，用来存储每个需要缓存的组件的key，即对应的this.cache对象中的键值。</span></li></ul><h2 data-lake-id=\"lLHJQ\" id=\"lLHJQ\"><span data-lake-id=\"ucbc13886\" id=\"ucbc13886\">destroyed</span></h2><p data-lake-id=\"u6e86742f\" id=\"u6e86742f\"><span data-lake-id=\"ub038f664\" id=\"ub038f664\">当</span><code data-lake-id=\"ua2554847\" id=\"ua2554847\"><span data-lake-id=\"ued678226\" id=\"ued678226\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u2ba48844\" id=\"u2ba48844\">组件被销毁时，此时会调用</span><code data-lake-id=\"u6558d805\" id=\"u6558d805\"><span data-lake-id=\"uf13b4142\" id=\"uf13b4142\">destroyed</span></code><span data-lake-id=\"u97919b89\" id=\"u97919b89\">钩子函数，在该钩子函数里会遍历</span><code data-lake-id=\"u92a916dc\" id=\"u92a916dc\"><span data-lake-id=\"u53285051\" id=\"u53285051\">this.cache</span></code><span data-lake-id=\"u37bd54f9\" id=\"u37bd54f9\">对象，然后将那些被缓存并当前没有处于被渲染状态是组件都销毁掉。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22destroyed%20()%20%7B%5Cn%20%20%20%20for%20(const%20key%20in%20this.cache)%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(this.cache%2C%20key%2C%20this.keys)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20pruneCacheEntry%E5%87%BD%E6%95%B0%5Cnfunction%20pruneCacheEntry%20(%5Cn%20%20cache%3A%20VNodeCache%2C%5Cn%20%20key%3A%20string%2C%5Cn%20%20keys%3A%20Array%3Cstring%3E%2C%5Cn%20%20current%3F%3A%20VNode%5Cn)%20%7B%5Cn%20%20const%20cached%20%3D%20cache%5Bkey%5D%5Cn%20%20%2F*%20%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%B2%A1%E6%9C%89%E5%A4%84%E4%BA%8E%E8%A2%AB%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B0%86%E5%85%B6%E9%94%80%E6%AF%81*%2F%5Cn%20%20if%20(cached%20%26%26%20(!current%20%7C%7C%20cached.tag%20!%3D%3D%20current.tag))%20%7B%5Cn%20%20%20%20cached.componentInstance.%24destroy()%5Cn%20%20%7D%5Cn%20%20cache%5Bkey%5D%20%3D%20null%5Cn%20%20remove(keys%2C%20key)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cwwsA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"xyndn\" id=\"xyndn\"><span data-lake-id=\"u6d91d30c\" id=\"u6d91d30c\">mounted</span></h2><p data-lake-id=\"ub6be7bb5\" id=\"ub6be7bb5\"><span data-lake-id=\"u33a2a1d1\" id=\"u33a2a1d1\">在mounted钩子函数中观测</span><code data-lake-id=\"u5dde0acb\" id=\"u5dde0acb\"><span data-lake-id=\"u999875b4\" id=\"u999875b4\">include</span></code><span data-lake-id=\"u0dc2c935\" id=\"u0dc2c935\">和</span><code data-lake-id=\"u9833ebcc\" id=\"u9833ebcc\"><span data-lake-id=\"ua9c21029\" id=\"ua9c21029\">exclude</span></code><span data-lake-id=\"u90947744\" id=\"u90947744\">的变化，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22mounted%20()%20%7B%5Cn%20%20%20%20this.%24watch('include'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20this.%24watch('exclude'%2C%20val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCache(this%2C%20name%20%3D%3E%20!matches(val%2C%20name))%5Cn%20%20%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pV3Ed%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u54e189e8\" id=\"u54e189e8\"><span data-lake-id=\"ub4ec1c5b\" id=\"ub4ec1c5b\">如果include和exclude发生了变化，即表示定义需要缓存的组件的规则或不需要缓存的组件的规则发生了变化，则执行pruneCache函数，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20pruneCache%20(keepAliveInstance%2C%20filter)%20%7B%5Cn%20%20const%20%7B%20cache%2C%20keys%2C%20_vnode%20%7D%20%3D%20keepAliveInstance%5Cn%20%20for%20(const%20key%20in%20cache)%20%7B%5Cn%20%20%20%20const%20cachedNode%20%3D%20cache%5Bkey%5D%5Cn%20%20%20%20if%20(cachedNode)%20%7B%5Cn%20%20%20%20%20%20const%20name%20%3D%20getComponentName(cachedNode.componentOptions)%5Cn%20%20%20%20%20%20if%20(name%20%26%26%20!filter(name))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20key%2C%20keys%2C%20_vnode)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22it9e5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue3ba8a28\" id=\"ue3ba8a28\"><span data-lake-id=\"uecf0a307\" id=\"uecf0a307\">在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用 </span><code data-lake-id=\"ud86f7edb\" id=\"ud86f7edb\"><span data-lake-id=\"u8832ae06\" id=\"u8832ae06\">pruneCacheEntry</span></code><span data-lake-id=\"u356740fb\" id=\"u356740fb\">将其从</span><code data-lake-id=\"u2dbb4a3e\" id=\"u2dbb4a3e\"><span data-lake-id=\"udde1420f\" id=\"udde1420f\">this.cache</span></code><span data-lake-id=\"ufdbd307b\" id=\"ufdbd307b\">对象剔除即可。</span></p><h2 data-lake-id=\"raBtY\" id=\"raBtY\"><span data-lake-id=\"u477f71b0\" id=\"u477f71b0\">render</span></h2><p data-lake-id=\"u0d1ddd26\" id=\"u0d1ddd26\"><span data-lake-id=\"u8f4f1e84\" id=\"u8f4f1e84\">在render函数中首先获取第一个子组件节点的vnode：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E8%8E%B7%E5%8F%96%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E8%8A%82%E7%82%B9%20*%2F%5Cnconst%20slot%20%3D%20this.%24slots.default%5Cnconst%20vnode%20%3D%20getFirstComponentChild(slot)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yQGAx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub1b70550\" id=\"ub1b70550\"><span data-lake-id=\"ud08e01c0\" id=\"ud08e01c0\">由于我们也是在</span><code data-lake-id=\"u6b82a8bf\" id=\"u6b82a8bf\"><span data-lake-id=\"ueb589897\" id=\"ueb589897\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u1e24e173\" id=\"u1e24e173\">标签内部写DOM，所以可以先获取到默认插槽，然后再获取到它的第一个子节点。</span></p><p data-lake-id=\"uab7a9c2d\" id=\"uab7a9c2d\"><code data-lake-id=\"u85e39477\" id=\"u85e39477\"><span data-lake-id=\"u068d8253\" id=\"u068d8253\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"ua6ac4d4c\" id=\"ua6ac4d4c\">只处理第一个子元素，所以一般和它搭配使用的有 </span><code data-lake-id=\"u7164ba07\" id=\"u7164ba07\"><span data-lake-id=\"u53588d83\" id=\"u53588d83\">component</span></code><span data-lake-id=\"u114f85e7\" id=\"u114f85e7\">动态组件或者是 </span><code data-lake-id=\"u7e91e019\" id=\"u7e91e019\"><span data-lake-id=\"u00740709\" id=\"u00740709\">router-view</span></code><span data-lake-id=\"ueb7b8603\" id=\"ueb7b8603\">。</span></p><p data-lake-id=\"u97d1cd3b\" id=\"u97d1cd3b\"><span data-lake-id=\"u63830ec3\" id=\"u63830ec3\">接下来，获取该组件节点的名称：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E8%8E%B7%E5%8F%96%E8%AF%A5%E7%BB%84%E4%BB%B6%E8%8A%82%E7%82%B9%E7%9A%84%E5%90%8D%E7%A7%B0%20*%2F%5Cnconst%20name%20%3D%20getComponentName(componentOptions)%5Cn%5Cn%2F*%20%E4%BC%98%E5%85%88%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84name%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%A6%82%E6%9E%9Cname%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%88%99%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84tag%20*%2F%5Cnfunction%20getComponentName%20(opts%3A%20%3FVNodeComponentOptions)%3A%20%3Fstring%20%7B%5Cn%20%20return%20opts%20%26%26%20(opts.Ctor.options.name%20%7C%7C%20opts.tag)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22znflo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucc94f336\" id=\"ucc94f336\"><span data-lake-id=\"ub747719e\" id=\"ub747719e\">然后用组件名称跟include、exclude中的匹配规则去匹配。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20include%2C%20exclude%20%7D%20%3D%20this%5Cn%2F*%20%E5%A6%82%E6%9E%9Cname%E4%B8%8Einclude%E8%A7%84%E5%88%99%E4%B8%8D%E5%8C%B9%E9%85%8D%E6%88%96%E8%80%85%E4%B8%8Eexclude%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E5%88%99%E8%A1%A8%E7%A4%BA%E4%B8%8D%E7%BC%93%E5%AD%98%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9Evnode%20*%2F%5Cnif%20(%5Cn%20%20%20%20(include%20%26%26%20(!name%20%7C%7C%20!matches(include%2C%20name)))%20%7C%7C%5Cn%20%20%20%20%2F%2F%20excluded%5Cn%20%20%20%20(exclude%20%26%26%20name%20%26%26%20matches(exclude%2C%20name))%5Cn)%20%7B%5Cn%20%20%20%20return%20vnode%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oFBRv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a8a885e\" id=\"u0a8a885e\"><span data-lake-id=\"u35fba8f7\" id=\"u35fba8f7\">如果组件名称与include规则不匹配或者与exclude规则匹配，则表示不缓存该组件，直接返回这个组件的vnode，否则，走下一步缓存。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20cache%2C%20keys%20%7D%20%3D%20this%5Cn%2F*%20%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E7%9A%84key%20*%2F%5Cnconst%20key%20%3D%20vnode.key%20%3D%3D%20null%5Cn%3F%20componentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%3A%20vnode.key%5Cn%5Cn%2F*%20%E5%A6%82%E6%9E%9C%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E6%8B%BF%20vnode%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%20*%2F%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%2F*%20%E8%B0%83%E6%95%B4%E8%AF%A5%E7%BB%84%E4%BB%B6key%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%9C%B0%E6%96%B9%E5%88%A0%E6%8E%89%E5%B9%B6%E9%87%8D%E6%96%B0%E6%94%BE%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20keys.push(key)%5Cn%7D%20%5Cn%2F*%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E8%BF%9B%E7%BC%93%E5%AD%98%20*%2F%5Cnelse%20%7B%5Cn%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20keys.push(key)%5Cn%20%20%20%20%2F*%20%E5%A6%82%E6%9E%9C%E9%85%8D%E7%BD%AE%E4%BA%86max%E5%B9%B6%E4%B8%94%E7%BC%93%E5%AD%98%E7%9A%84%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%87%E4%BA%86this.max%EF%BC%8C%E5%88%99%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%2F*%20%E6%9C%80%E5%90%8E%E8%AE%BE%E7%BD%AEkeepAlive%E6%A0%87%E8%AE%B0%E4%BD%8D%20*%2F%5Cnvnode.data.keepAlive%20%3D%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ijIWw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u8836622e\"><li fid=\"u0ecebe9f\" data-lake-id=\"ua981417a\" id=\"ua981417a\"><span data-lake-id=\"u5587def6\" id=\"u5587def6\">首先获取组件的key值：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20key%20%3D%20vnode.key%20%3D%3D%20null%3F%20%5CncomponentOptions.Ctor.cid%20%2B%20(componentOptions.tag%20%3F%20%60%3A%3A%24%7BcomponentOptions.tag%7D%60%20%3A%20'')%5Cn%3A%20vnode.key%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Iu8r4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u13be77e1\"><li fid=\"ue6e7d6fd\" data-lake-id=\"u7ecac4d9\" id=\"u7ecac4d9\"><span data-lake-id=\"u49a9ef4e\" id=\"u49a9ef4e\">拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E5%A6%82%E6%9E%9C%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E6%8B%BF%20vnode%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%20*%2F%5Cnif%20(cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20vnode.componentInstance%20%3D%20cache%5Bkey%5D.componentInstance%5Cn%20%20%20%20%2F*%20%E8%B0%83%E6%95%B4%E8%AF%A5%E7%BB%84%E4%BB%B6key%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%9C%B0%E6%96%B9%E5%88%A0%E6%8E%89%E5%B9%B6%E9%87%8D%E6%96%B0%E6%94%BE%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20remove(keys%2C%20key)%5Cn%20%20%20%20keys.push(key)%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22s87Ix%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u03a4c2df\"><li fid=\"ud5092606\" data-lake-id=\"ub4d9b503\" id=\"ub4d9b503\"><span data-lake-id=\"u172f25b7\" id=\"u172f25b7\">直接从缓存中拿</span><code data-lake-id=\"u6b6a4d2f\" id=\"u6b6a4d2f\"><span data-lake-id=\"uecf07356\" id=\"uecf07356\">vnode</span></code><span data-lake-id=\"u6e054b2c\" id=\"u6e054b2c\">的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删除掉并重新放在this.keys中最后一个。</span></li><li fid=\"ud5092606\" data-lake-id=\"u53bbcdb2\" id=\"u53bbcdb2\"><span data-lake-id=\"u04481438\" id=\"u04481438\">如果this.cache对象中没有该key值：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%91%BD%E4%B8%AD%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%99%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E8%BF%9B%E7%BC%93%E5%AD%98%20*%2F%5Cnelse%20%7B%5Cn%20%20%20%20cache%5Bkey%5D%20%3D%20vnode%5Cn%20%20%20%20keys.push(key)%5Cn%20%20%20%20%2F*%20%E5%A6%82%E6%9E%9C%E9%85%8D%E7%BD%AE%E4%BA%86max%E5%B9%B6%E4%B8%94%E7%BC%93%E5%AD%98%E7%9A%84%E9%95%BF%E5%BA%A6%E8%B6%85%E8%BF%87%E4%BA%86this.max%EF%BC%8C%E5%88%99%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E4%B8%AA%20*%2F%5Cn%20%20%20%20if%20(this.max%20%26%26%20keys.length%20%3E%20parseInt(this.max))%20%7B%5Cn%20%20%20%20%20%20%20%20pruneCacheEntry(cache%2C%20keys%5B0%5D%2C%20keys%2C%20this._vnode)%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wiiZQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0552624c\" id=\"u0552624c\" style=\"text-indent: 2em\"><span data-lake-id=\"u71431518\" id=\"u71431518\">表明该组件还没有被缓存过，则以该组件的key为例，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中。此时，再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删除。</span></p><blockquote data-lake-id=\"ud0dcd7c0\" id=\"ud0dcd7c0\"><p data-lake-id=\"ua38d221a\" id=\"ua38d221a\"><span data-lake-id=\"u9ad5ab58\" id=\"u9ad5ab58\">问题：为什么要删除第一个缓存组件并为什么命中缓存了还要调整组件key的顺序？</span></p></blockquote><blockquote data-lake-id=\"u85ba389e\" id=\"u85ba389e\"><p data-lake-id=\"ue562661d\" id=\"ue562661d\"><span data-lake-id=\"uae3e4995\" id=\"uae3e4995\">答：这其实应用了一个缓存淘汰策略LRU。</span></p></blockquote><h3 data-lake-id=\"tw16E\" id=\"tw16E\"><span data-lake-id=\"u581a2f79\" id=\"u581a2f79\">LRU 算法</span></h3><p data-lake-id=\"uebc75bba\" id=\"uebc75bba\"><span data-lake-id=\"ue17c6e16\" id=\"ue17c6e16\">LRU（最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过 ，那么将来被访问的几率也更高”。</span></p><p data-lake-id=\"uac8b2342\" id=\"uac8b2342\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png%22%2C%22taskId%22%3A%22uc61d75db-aac1-4286-bf09-c689a4bfffd%22%2C%22clientId%22%3A%22ubef7bb93-9c10-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32668%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1202%2C%22originHeight%22%3A438%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22THIS.KEYS%201.%E6%96%B0%E5%8A%A0%E5%85%A5%E6%95%B0%E6%8D%AE%203.%E6%B7%98%E6%B1%B0%E6%95%B0%E6%8D%AE%202.%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84%E6%95%B0%E6%8D%AE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A452.66162%2C%22y%22%3A43.221573%2C%22width%22%3A167.39988%2C%22height%22%3A44.931346999999995%2C%22text%22%3A%22THIS.KEYS%22%7D%2C%7B%22x%22%3A1057.1387%2C%22y%22%3A167.93523%2C%22width%22%3A125.28480000000013%2C%22height%22%3A24.331400000000002%2C%22text%22%3A%221.%E6%96%B0%E5%8A%A0%E5%85%A5%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A81.095245%2C%22y%22%3A291.56006%2C%22width%22%3A105.84591499999999%2C%22height%22%3A23.346799999999973%2C%22text%22%3A%223.%E6%B7%98%E6%B1%B0%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A681.6766%2C%22y%22%3A374.05518%2C%22width%22%3A145.76774%2C%22height%22%3A23.75673999999998%2C%22text%22%3A%222.%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84%E6%95%B0%E6%8D%AE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22ueca676fc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ol list=\"ub2cc6182\"><li fid=\"ud2ad47ba\" data-lake-id=\"ue3eb23a4\" id=\"ue3eb23a4\"><span data-lake-id=\"ue4998c81\" id=\"ue4998c81\">将新数据从尾部插入到this.keys中；</span></li><li fid=\"ud2ad47ba\" data-lake-id=\"u250c77cd\" id=\"u250c77cd\"><span data-lake-id=\"u6ac0f0fb\" id=\"u6ac0f0fb\">每当缓存命中（即缓存数据被访问），则将数据移到this.keys的尾部。</span></li><li fid=\"ud2ad47ba\" data-lake-id=\"ue39a24b9\" id=\"ue39a24b9\"><span data-lake-id=\"u0534111c\" id=\"u0534111c\">当this.keys满时，将头部的数据丢弃</span></li></ol><p data-lake-id=\"u388fce0d\" id=\"u388fce0d\"><span data-lake-id=\"u11676ce0\" id=\"u11676ce0\">LRU核心：如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件key重新插入到this.keys的尾部，这样一来，</span><code data-lake-id=\"u99205d32\" id=\"u99205d32\"><span data-lake-id=\"u6154835a\" id=\"u6154835a\">this.keys</span></code><span data-lake-id=\"u1ba93c6c\" id=\"u1ba93c6c\">中越往头部的数据即将被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即this.keys中第一个缓存的组件。 </span><u><span data-lake-id=\"u935b47de\" id=\"u935b47de\">这也是 </span></u><strong><u><span data-lake-id=\"udba7e12c\" id=\"udba7e12c\">已缓存组件中最久没有被访问的实例</span></u></strong><u><span data-lake-id=\"u0f6164ea\" id=\"u0f6164ea\">会被销毁的原因。</span></u></p><p data-lake-id=\"u451f35eb\" id=\"u451f35eb\"><span data-lake-id=\"u8a9e0347\" id=\"u8a9e0347\">​</span><br></p><p data-lake-id=\"u072b5e17\" id=\"u072b5e17\"><span data-lake-id=\"u7829900c\" id=\"u7829900c\">以上工作做完后，设置</span><code data-lake-id=\"u0b53b9e0\" id=\"u0b53b9e0\"><span data-lake-id=\"u87b90459\" id=\"u87b90459\">vnode.data.keepAlive = true</span></code><span data-lake-id=\"u5b88a1a4\" id=\"u5b88a1a4\">，最后将</span><code data-lake-id=\"u378d03cd\" id=\"u378d03cd\"><span data-lake-id=\"uc425478c\" id=\"uc425478c\">vnode</span></code><span data-lake-id=\"uc5b4522d\" id=\"uc5b4522d\">返回。</span></p><h2 data-lake-id=\"M4YBl\" id=\"M4YBl\"><span data-lake-id=\"ub942d98a\" id=\"ub942d98a\">生命周期钩子</span></h2><p data-lake-id=\"u18ddb2ea\" id=\"u18ddb2ea\"><span data-lake-id=\"u5eb16aa0\" id=\"u5eb16aa0\">组件一旦被</span><code data-lake-id=\"ub487a50b\" id=\"ub487a50b\"><span data-lake-id=\"ub7d25eef\" id=\"ub7d25eef\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u395ea9b1\" id=\"u395ea9b1\">缓存，那么再次渲染时，就不会执行created、mounted等钩子函数，但我们很多业务场景都是希望被缓存的组件再次被渲染时做一些事情。</span></p><p data-lake-id=\"uaa243ae3\" id=\"uaa243ae3\"><span data-lake-id=\"ubd67d833\" id=\"ubd67d833\">Vue 提供了这两个钩子函数： </span><code data-lake-id=\"u0674404d\" id=\"u0674404d\"><span data-lake-id=\"u3bd975c9\" id=\"u3bd975c9\">activated</span></code><span data-lake-id=\"ub9a6605b\" id=\"ub9a6605b\"> 和</span><code data-lake-id=\"ub61a5238\" id=\"ub61a5238\"><span data-lake-id=\"u094147f5\" id=\"u094147f5\">deactivated</span></code><span data-lake-id=\"u8ad52f17\" id=\"u8ad52f17\">。它的执行时机是：</span><code data-lake-id=\"u80834349\" id=\"u80834349\"><span data-lake-id=\"u81e2ccb6\" id=\"u81e2ccb6\">&lt;keep-alive&gt;</span></code><span data-lake-id=\"u64966c5a\" id=\"u64966c5a\">包裹的组件激活时调用和停用时调用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20A%20%3D%20%7B%5Cn%20%20template%3A%20'%3Cdiv%20class%3D%5C%22a%5C%22%3E'%20%2B%5Cn%20%20'%3Cp%3EA%20Comp%3C%2Fp%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20name%3A%20'A'%2C%5Cn%20%20mounted()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20mounted')%5Cn%20%20%7D%2C%5Cn%20%20activated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20activated')%20%20%5Cn%20%20%7D%2C%5Cn%20%20deactivated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20A%20deactivated')%20%20%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnlet%20B%20%3D%20%7B%5Cn%20%20template%3A%20'%3Cdiv%20class%3D%5C%22b%5C%22%3E'%20%2B%5Cn%20%20'%3Cp%3EB%20Comp%3C%2Fp%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20name%3A%20'B'%2C%5Cn%20%20mounted()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20mounted')%5Cn%20%20%7D%2C%5Cn%20%20activated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20activated')%20%20%5Cn%20%20%7D%2C%5Cn%20%20deactivated()%7B%5Cn%20%20%5Ctconsole.log('Comp%20B%20deactivated')%20%20%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnlet%20vm%20%3D%20new%20Vue(%7B%5Cn%20%20el%3A%20'%23app'%2C%5Cn%20%20template%3A%20'%3Cdiv%3E'%20%2B%5Cn%20%20'%3Ckeep-alive%3E'%20%2B%5Cn%20%20'%3Ccomponent%20%3Ais%3D%5C%22currentComp%5C%22%3E'%20%2B%5Cn%20%20'%3C%2Fcomponent%3E'%20%2B%5Cn%20%20'%3C%2Fkeep-alive%3E'%20%2B%5Cn%20%20'%3Cbutton%20%40click%3D%5C%22change%5C%22%3Eswitch%3C%2Fbutton%3E'%20%2B%5Cn%20%20'%3C%2Fdiv%3E'%2C%5Cn%20%20data%3A%20%7B%5Cn%20%20%20%20currentComp%3A%20'A'%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20change()%20%7B%5Cn%20%20%20%20%20%20this.currentComp%20%3D%20this.currentComp%20%3D%3D%3D%20'A'%20%3F%20'B'%20%3A%20'A'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20A%2C%5Cn%20%20%20%20B%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22p7BeA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uaddc6ec6\" id=\"uaddc6ec6\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-30T13:38:24.000Z",
    "deleted_at": null,
    "created_at": "2022-11-27T07:47:15.000Z",
    "updated_at": "2022-11-30T13:48:21.000Z",
    "published_at": "2022-11-30T13:48:21.000Z",
    "first_published_at": "2022-11-27T08:17:41.795Z",
    "word_count": 3329,
    "cover": "https://cdn.nlark.com/yuque/0/2022/png/2324645/1669539855977-f44fffe7-d88d-4394-9221-e3ddcd65fec3.png",
    "description": "--- title: keep-alive实现原理categories: 框架date: 2022-11-16updated: 2022-11-16tags: Vuecover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106324789,
    "slug": "utlhxzug7pwdacov",
    "title": "Vite vs Webpack vs esbuild",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: Vite vs Webpack vs esbuild <br />categories: 前端工程化<br />date: 2022-11-01<br />updated: 2022-11-01<br />tags: [Vite,Webpack,Esbuild]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp2.itc.cn%2Fimages01%2F20210623%2F9a91d9e5d6db4fefbc90e6d79dc23ba5.png&refer=http%3A%2F%2Fp2.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267898&t=1619e8d6ed4ddf8d7ce4d141972652b2<br />---\n<a name=\"y4CgD\"></a>\n# Vite和Webpack之对比\n开发阶段：Vite的速度远快于Webpack<br />主要原因：**Webpack是先打包再启动开发服务器，Vite是直接启动开发服务器，然后按需编译依赖文件。**<br />详细过程：\n\n1. webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果；\n2. Vite直接启动开发服务器，请求哪个模块再对哪个模块进行实时编译；\n3. 由于现代浏览器本身就支持ES Modules，会主动发起请求去获取所需文件。Vite充分利用这一点，将开发环境下的模块文件，作为浏览器要执行的文件，而不是像webpack先打包，交给浏览器执行的文件是打包后的；\n4. 由于Vite启动时无需打包，也就无需分析模块依赖、编译，所以启动速度非常快。当浏览器请求需要的模块时，再对模块进行编译，这种按需动态编译的模式，极大地缩短了编译时间，当项目越大，文件越多，Vite的开发时优势越明显；\n5. 在HRM方面，当某个模块内容改变时，让浏览器去重新请求该模块即可，而不是像webpack重新将该模块的所有依赖重新编译；\n6. 当需要打包到生产环境时，Vite使用传统的rollup进行打包，所以，vite的优势体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJS。\n<a name=\"tm0Ny\"></a>\n# Vite为什么“快”？\n<a name=\"sr4SV\"></a>\n## 问题现状\n<a name=\"gMsh3\"></a>\n### 1. ES模块化支持的问题\n\n- 以前的浏览器不支持ES Module\n```javascript\n// index.js\n\nimport { add } from './add.js'\nimport { sub } from './sub.js'\nconsole.log(add(1, 2))\nconsole.log(sub(1, 2))\n\n// add.js\nexport const add = (a, b) => a + b \n\n// sub.js\nexport const sub = (a, b) => a - b \n```\n这样的一段代码放在浏览器不能直接运行。<br />解决方案：可以使用打包工具（如Webpack、Rollup、Parcel），将index.js、add.js、sub.js这三个文件打包在一个bundle.js文件中，然后在项目`index.html`中直接引入`bundle.js`，从而达到代码效果。\n<a name=\"mckwu\"></a>\n### 2. 项目启动与代码更新的问题\n\n- 项目启动：随着项目越来越大，启动一个项目可能需要几分钟\n- 代码更新：随着项目越来越大，修改一小段代码，保存后都要等待几秒才更新\n<a name=\"ln7Uw\"></a>\n## 解决问题\n<a name=\"CcHh3\"></a>\n### 1. 解决启动项目缓慢\nVite 在打包时，将模块分成两个区域`依赖`和`源码`：\n\n- 依赖：一般是那种在开发中不会改变的JS，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用esbuild来进行预构建依赖，esbuild使用的是Go进行编写，比JS编写的打包器预构建依赖快10-100倍。\n- 源码：一般是那种修改几率比较大的文件，例如JSX、CSS、Vue这些需要转换且时常会被修改编辑的文件。同时这些文件不是一下子全部加载，而是可以按需加载（例如路由懒加载）。Vite会将文件转换后，以`ES Module`的方式直接交给浏览器，因为现在的浏览器大多数都直接支持es module，这使性能提高很多。\n\n原因如下图：<br />第一张图，是以前的打包模式，<br />![1668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png#averageHue=%232f3741&clientId=u0058c815-b7e9-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=408&id=uf56b9e97&margin=%5Bobject%20Object%5D&name=1668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png&originHeight=408&originWidth=732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55374&status=done&style=none&taskId=ubb96c9f1-fe8c-4837-83ee-2e3d29343fb&title=&width=732)\n",
    "body_draft": "--- <br />title: Vite vs Webpack vs esbuild <br />categories: 前端工程化<br />date: 2022-11-01<br />updated: 2022-11-01<br />tags: [Vite,Webpack,Esbuild]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp2.itc.cn%2Fimages01%2F20210623%2F9a91d9e5d6db4fefbc90e6d79dc23ba5.png&refer=http%3A%2F%2Fp2.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267898&t=1619e8d6ed4ddf8d7ce4d141972652b2<br />---\n<a name=\"y4CgD\"></a>\n# Vite和Webpack之对比\n开发阶段：Vite的速度远快于Webpack<br />主要原因：**Webpack是先打包再启动开发服务器，Vite是直接启动开发服务器，然后按需编译依赖文件。**<br />详细过程：\n\n1. webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果；\n2. Vite直接启动开发服务器，请求哪个模块再对哪个模块进行实时编译；\n3. 由于现代浏览器本身就支持ES Modules，会主动发起请求去获取所需文件。Vite充分利用这一点，将开发环境下的模块文件，作为浏览器要执行的文件，而不是像webpack先打包，交给浏览器执行的文件是打包后的；\n4. 由于Vite启动时无需打包，也就无需分析模块依赖、编译，所以启动速度非常快。当浏览器请求需要的模块时，再对模块进行编译，这种按需动态编译的模式，极大地缩短了编译时间，当项目越大，文件越多，Vite的开发时优势越明显；\n5. 在HRM方面，当某个模块内容改变时，让浏览器去重新请求该模块即可，而不是像webpack重新将该模块的所有依赖重新编译；\n6. 当需要打包到生产环境时，Vite使用传统的rollup进行打包，所以，vite的优势体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJS。\n<a name=\"tm0Ny\"></a>\n# Vite为什么“快”？\n<a name=\"sr4SV\"></a>\n## 问题现状\n<a name=\"gMsh3\"></a>\n### 1. ES模块化支持的问题\n\n- 以前的浏览器不支持ES Module\n```javascript\n// index.js\n\nimport { add } from './add.js'\nimport { sub } from './sub.js'\nconsole.log(add(1, 2))\nconsole.log(sub(1, 2))\n\n// add.js\nexport const add = (a, b) => a + b \n\n// sub.js\nexport const sub = (a, b) => a - b \n```\n这样的一段代码放在浏览器不能直接运行。<br />解决方案：可以使用打包工具（如Webpack、Rollup、Parcel），将index.js、add.js、sub.js这三个文件打包在一个bundle.js文件中，然后在项目`index.html`中直接引入`bundle.js`，从而达到代码效果。\n<a name=\"mckwu\"></a>\n### 2. 项目启动与代码更新的问题\n\n- 项目启动：随着项目越来越大，启动一个项目可能需要几分钟\n- 代码更新：随着项目越来越大，修改一小段代码，保存后都要等待几秒才更新\n<a name=\"ln7Uw\"></a>\n## 解决问题\n<a name=\"CcHh3\"></a>\n### 1. 解决启动项目缓慢\nVite 在打包时，将模块分成两个区域`依赖`和`源码`：\n\n- 依赖：一般是那种在开发中不会改变的JS，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用esbuild来进行预构建依赖，esbuild使用的是Go进行编写，比JS编写的打包器预构建依赖快10-100倍。\n- 源码：一般是那种修改几率比较大的文件，例如JSX、CSS、Vue这些需要转换且时常会被修改编辑的文件。同时这些文件不是一下子全部加载，而是可以按需加载（例如路由懒加载）。Vite会将文件转换后，以`ES Module`的方式直接交给浏览器，因为现在的浏览器大多数都直接支持es module，这使性能提高很多。\n\n原因如下图：<br />第一张图，是以前的打包模式，<br />![1668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png#averageHue=%232f3741&clientId=u0058c815-b7e9-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=408&id=uf56b9e97&margin=%5Bobject%20Object%5D&name=1668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png&originHeight=408&originWidth=732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55374&status=done&style=none&taskId=ubb96c9f1-fe8c-4837-83ee-2e3d29343fb&title=&width=732)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ue6b0aec1\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"u28df9ae7\" class=\"ne-p\"><span class=\"ne-text\">title: Vite vs Webpack vs esbuild </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: 前端工程化</span></p><p id=\"u4d079136\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-01</span></p><p id=\"ub4d28a08\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-01</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: [Vite,Webpack,Esbuild]</span></p><p id=\"u8a4b9f8f\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp2.itc.cn%2Fimages01%2F20210623%2F9a91d9e5d6db4fefbc90e6d79dc23ba5.png&amp;refer=http%3A%2F%2Fp2.itc.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267898&amp;t=1619e8d6ed4ddf8d7ce4d141972652b2</span></p><p id=\"ud767d639\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><h1 id=\"y4CgD\"><span class=\"ne-text\">Vite和Webpack之对比</span></h1><p id=\"ue033c6fb\" class=\"ne-p\"><span class=\"ne-text\">开发阶段：Vite的速度远快于Webpack</span></p><p id=\"u8a1e5fd1\" class=\"ne-p\"><span class=\"ne-text\">主要原因：</span><strong><span class=\"ne-text\">Webpack是先打包再启动开发服务器，Vite是直接启动开发服务器，然后按需编译依赖文件。</span></strong></p><p id=\"u8e98e4b8\" class=\"ne-p\"><span class=\"ne-text\">详细过程：</span></p><ol class=\"ne-ol\"><li id=\"uc44f5e68\"><span class=\"ne-text\">webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果；</span></li><li id=\"u6338faad\"><span class=\"ne-text\">Vite</span><span class=\"ne-text\" style=\"text-decoration: underline\">直接启动</span><span class=\"ne-text\">开发服务器，请求哪个模块再对哪个模块进行实时编译；</span></li><li id=\"ud84f0255\"><span class=\"ne-text\">由于现代浏览器本身就支持ES Modules，会主动发起请求去获取所需文件。Vite充分利用这一点，将开发环境下的模块文件，作为浏览器要执行的文件，而不是像webpack先打包，交给浏览器执行的文件是打包后的；</span></li><li id=\"u2fcdc6e1\"><span class=\"ne-text\">由于Vite启动时无需打包，也就无需分析模块依赖、编译，所以启动速度非常快。当浏览器请求需要的模块时，再对模块进行编译，这种按需动态编译的模式，极大地缩短了编译时间，当项目越大，文件越多，Vite的开发时优势越明显；</span></li><li id=\"u330c8674\"><span class=\"ne-text\">在HRM方面，当某个模块内容改变时，让浏览器去重新请求该模块即可，而不是像webpack重新将该模块的所有依赖重新编译；</span></li><li id=\"u7bb9a5dd\"><span class=\"ne-text\">当需要打包到生产环境时，Vite使用传统的rollup进行打包，所以，vite的优势体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJS。</span></li></ol><h1 id=\"tm0Ny\"><span class=\"ne-text\">Vite为什么“快”？</span></h1><h2 id=\"sr4SV\"><span class=\"ne-text\">问题现状</span></h2><h3 id=\"gMsh3\"><span class=\"ne-text\">1. ES模块化支持的问题</span></h3><ul class=\"ne-ul\"><li id=\"uf39daca7\"><span class=\"ne-text\">以前的浏览器不支持ES Module</span></li></ul><pre data-language=\"javascript\" id=\"AIy1s\" class=\"ne-codeblock language-javascript\">// index.js\n\nimport { add } from './add.js'\nimport { sub } from './sub.js'\nconsole.log(add(1, 2))\nconsole.log(sub(1, 2))\n\n// add.js\nexport const add = (a, b) =&gt; a + b \n\n// sub.js\nexport const sub = (a, b) =&gt; a - b </pre><p id=\"u6c59d56f\" class=\"ne-p\"><span class=\"ne-text\">这样的一段代码放在浏览器不能直接运行。</span></p><p id=\"u6afa13aa\" class=\"ne-p\"><span class=\"ne-text\">解决方案：可以使用打包工具（如Webpack、Rollup、Parcel），将index.js、add.js、sub.js这三个文件打包在一个bundle.js文件中，然后在项目</span><code class=\"ne-code\"><span class=\"ne-text\">index.html</span></code><span class=\"ne-text\">中直接引入</span><code class=\"ne-code\"><span class=\"ne-text\">bundle.js</span></code><span class=\"ne-text\">，从而达到代码效果。</span></p><h3 id=\"mckwu\"><span class=\"ne-text\">2. 项目启动与代码更新的问题</span></h3><ul class=\"ne-ul\"><li id=\"ufdfd326e\"><span class=\"ne-text\">项目启动：随着项目越来越大，启动一个项目可能需要几分钟</span></li><li id=\"u9719d827\"><span class=\"ne-text\">代码更新：随着项目越来越大，修改一小段代码，保存后都要等待几秒才更新</span></li></ul><h2 id=\"ln7Uw\"><span class=\"ne-text\">解决问题</span></h2><h3 id=\"CcHh3\"><span class=\"ne-text\">1. 解决启动项目缓慢</span></h3><p id=\"u884a7c28\" class=\"ne-p\"><span class=\"ne-text\">Vite 在打包时，将模块分成两个区域</span><code class=\"ne-code\"><span class=\"ne-text\">依赖</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">源码</span></code><span class=\"ne-text\">：</span></p><ul class=\"ne-ul\"><li id=\"u32c3fd45\"><span class=\"ne-text\">依赖：一般是那种在开发中不会改变的JS，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用esbuild来进行预构建依赖，esbuild使用的是Go进行编写，比JS编写的打包器预构建依赖快10-100倍。</span></li><li id=\"u48a7e8a9\"><span class=\"ne-text\">源码：一般是那种修改几率比较大的文件，例如JSX、CSS、Vue这些需要转换且时常会被修改编辑的文件。同时这些文件不是一下子全部加载，而是可以按需加载（例如路由懒加载）。Vite会将文件转换后，以</span><code class=\"ne-code\"><span class=\"ne-text\">ES Module</span></code><span class=\"ne-text\">的方式直接交给浏览器，因为现在的浏览器大多数都直接支持es module，这使性能提高很多。</span></li></ul><p id=\"ued4a1e1e\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">原因如下图：</span></p><p id=\"ud5cc1a09\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">第一张图，是以前的打包模式，<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png\" width=\"732\" id=\"uf56b9e97\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ue6b0aec1\" id=\"ue6b0aec1\"><span data-lake-id=\"ubae4c690\" id=\"ubae4c690\">--- </span></p><p data-lake-id=\"u28df9ae7\" id=\"u28df9ae7\"><span data-lake-id=\"u160f1639\" id=\"u160f1639\">title: Vite vs Webpack vs esbuild </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 前端工程化</span></p><p data-lake-id=\"u4d079136\" id=\"u4d079136\"><span data-lake-id=\"ucf45bcbd\" id=\"ucf45bcbd\">date: 2022-11-01</span></p><p data-lake-id=\"ub4d28a08\" id=\"ub4d28a08\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-01</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [Vite,Webpack,Esbuild]</span></p><p data-lake-id=\"u8a4b9f8f\" id=\"u8a4b9f8f\"><span data-lake-id=\"ub9315238\" id=\"ub9315238\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp2.itc.cn%2Fimages01%2F20210623%2F9a91d9e5d6db4fefbc90e6d79dc23ba5.png&amp;refer=http%3A%2F%2Fp2.itc.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267898&amp;t=1619e8d6ed4ddf8d7ce4d141972652b2</span></p><p data-lake-id=\"ud767d639\" id=\"ud767d639\"><span data-lake-id=\"uabc94e55\" id=\"uabc94e55\">---</span></p><h1 data-lake-id=\"y4CgD\" id=\"y4CgD\"><span data-lake-id=\"udf3f6b9b\" id=\"udf3f6b9b\">Vite和Webpack之对比</span></h1><p data-lake-id=\"ue033c6fb\" id=\"ue033c6fb\"><span data-lake-id=\"u459cd5f6\" id=\"u459cd5f6\">开发阶段：Vite的速度远快于Webpack</span></p><p data-lake-id=\"u8a1e5fd1\" id=\"u8a1e5fd1\"><span data-lake-id=\"ud7315736\" id=\"ud7315736\">主要原因：</span><strong><span data-lake-id=\"u3e08fdd6\" id=\"u3e08fdd6\">Webpack是先打包再启动开发服务器，Vite是直接启动开发服务器，然后按需编译依赖文件。</span></strong></p><p data-lake-id=\"u8e98e4b8\" id=\"u8e98e4b8\"><span data-lake-id=\"u7bfd0d20\" id=\"u7bfd0d20\">详细过程：</span></p><ol list=\"ua60b9211\"><li fid=\"u5447339c\" data-lake-id=\"uc44f5e68\" id=\"uc44f5e68\"><span data-lake-id=\"u59b9c9ff\" id=\"u59b9c9ff\">webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果；</span></li><li fid=\"u5447339c\" data-lake-id=\"u6338faad\" id=\"u6338faad\"><span data-lake-id=\"ub217565c\" id=\"ub217565c\">Vite</span><u><span data-lake-id=\"ua5b844bc\" id=\"ua5b844bc\">直接启动</span></u><span data-lake-id=\"ue0e28728\" id=\"ue0e28728\">开发服务器，请求哪个模块再对哪个模块进行实时编译；</span></li><li fid=\"u5447339c\" data-lake-id=\"ud84f0255\" id=\"ud84f0255\"><span data-lake-id=\"ue952eba9\" id=\"ue952eba9\">由于现代浏览器本身就支持ES Modules，会主动发起请求去获取所需文件。Vite充分利用这一点，将开发环境下的模块文件，作为浏览器要执行的文件，而不是像webpack先打包，交给浏览器执行的文件是打包后的；</span></li><li fid=\"u5447339c\" data-lake-id=\"u2fcdc6e1\" id=\"u2fcdc6e1\"><span data-lake-id=\"ub2181575\" id=\"ub2181575\">由于Vite启动时无需打包，也就无需分析模块依赖、编译，所以启动速度非常快。当浏览器请求需要的模块时，再对模块进行编译，这种按需动态编译的模式，极大地缩短了编译时间，当项目越大，文件越多，Vite的开发时优势越明显；</span></li><li fid=\"u5447339c\" data-lake-id=\"u330c8674\" id=\"u330c8674\"><span data-lake-id=\"u6a3acedb\" id=\"u6a3acedb\">在HRM方面，当某个模块内容改变时，让浏览器去重新请求该模块即可，而不是像webpack重新将该模块的所有依赖重新编译；</span></li><li fid=\"u5447339c\" data-lake-id=\"u7bb9a5dd\" id=\"u7bb9a5dd\"><span data-lake-id=\"u1b2dfbb2\" id=\"u1b2dfbb2\">当需要打包到生产环境时，Vite使用传统的rollup进行打包，所以，vite的优势体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJS。</span></li></ol><h1 data-lake-id=\"tm0Ny\" id=\"tm0Ny\"><span data-lake-id=\"u92042b66\" id=\"u92042b66\">Vite为什么“快”？</span></h1><h2 data-lake-id=\"sr4SV\" id=\"sr4SV\"><span data-lake-id=\"ub93b37cc\" id=\"ub93b37cc\">问题现状</span></h2><h3 data-lake-id=\"gMsh3\" id=\"gMsh3\"><span data-lake-id=\"uf1743cbb\" id=\"uf1743cbb\">1. ES模块化支持的问题</span></h3><ul list=\"ue9bc1abf\"><li fid=\"u081db92c\" data-lake-id=\"uf39daca7\" id=\"uf39daca7\"><span data-lake-id=\"ufdace296\" id=\"ufdace296\">以前的浏览器不支持ES Module</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20index.js%5Cn%5Cnimport%20%7B%20add%20%7D%20from%20'.%2Fadd.js'%5Cnimport%20%7B%20sub%20%7D%20from%20'.%2Fsub.js'%5Cnconsole.log(add(1%2C%202))%5Cnconsole.log(sub(1%2C%202))%5Cn%5Cn%2F%2F%20add.js%5Cnexport%20const%20add%20%3D%20(a%2C%20b)%20%3D%3E%20a%20%2B%20b%20%5Cn%5Cn%2F%2F%20sub.js%5Cnexport%20const%20sub%20%3D%20(a%2C%20b)%20%3D%3E%20a%20-%20b%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AIy1s%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6c59d56f\" id=\"u6c59d56f\"><span data-lake-id=\"u1ce801b1\" id=\"u1ce801b1\">这样的一段代码放在浏览器不能直接运行。</span></p><p data-lake-id=\"u6afa13aa\" id=\"u6afa13aa\"><span data-lake-id=\"u08443c0c\" id=\"u08443c0c\">解决方案：可以使用打包工具（如Webpack、Rollup、Parcel），将index.js、add.js、sub.js这三个文件打包在一个bundle.js文件中，然后在项目</span><code data-lake-id=\"u78d9e820\" id=\"u78d9e820\"><span data-lake-id=\"u136ef741\" id=\"u136ef741\">index.html</span></code><span data-lake-id=\"udac90f71\" id=\"udac90f71\">中直接引入</span><code data-lake-id=\"u71c62b13\" id=\"u71c62b13\"><span data-lake-id=\"u2481fbd9\" id=\"u2481fbd9\">bundle.js</span></code><span data-lake-id=\"ube7a43ca\" id=\"ube7a43ca\">，从而达到代码效果。</span></p><h3 data-lake-id=\"mckwu\" id=\"mckwu\"><span data-lake-id=\"u87ec3723\" id=\"u87ec3723\">2. 项目启动与代码更新的问题</span></h3><ul list=\"uc86fc130\"><li fid=\"u8b58ca58\" data-lake-id=\"ufdfd326e\" id=\"ufdfd326e\"><span data-lake-id=\"udc4ac870\" id=\"udc4ac870\">项目启动：随着项目越来越大，启动一个项目可能需要几分钟</span></li><li fid=\"u8b58ca58\" data-lake-id=\"u9719d827\" id=\"u9719d827\"><span data-lake-id=\"ub554c061\" id=\"ub554c061\">代码更新：随着项目越来越大，修改一小段代码，保存后都要等待几秒才更新</span></li></ul><h2 data-lake-id=\"ln7Uw\" id=\"ln7Uw\"><span data-lake-id=\"ub62b4118\" id=\"ub62b4118\">解决问题</span></h2><h3 data-lake-id=\"CcHh3\" id=\"CcHh3\"><span data-lake-id=\"uf743b45c\" id=\"uf743b45c\">1. 解决启动项目缓慢</span></h3><p data-lake-id=\"u884a7c28\" id=\"u884a7c28\"><span data-lake-id=\"u80578576\" id=\"u80578576\">Vite 在打包时，将模块分成两个区域</span><code data-lake-id=\"u79a4590e\" id=\"u79a4590e\"><span data-lake-id=\"u68421621\" id=\"u68421621\">依赖</span></code><span data-lake-id=\"u72556430\" id=\"u72556430\">和</span><code data-lake-id=\"ud94b13ce\" id=\"ud94b13ce\"><span data-lake-id=\"u2ebeddfe\" id=\"u2ebeddfe\">源码</span></code><span data-lake-id=\"u2792c224\" id=\"u2792c224\">：</span></p><ul list=\"u89870c3b\"><li fid=\"ue7baaab1\" data-lake-id=\"u32c3fd45\" id=\"u32c3fd45\"><span data-lake-id=\"u139d0a8c\" id=\"u139d0a8c\">依赖：一般是那种在开发中不会改变的JS，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用esbuild来进行预构建依赖，esbuild使用的是Go进行编写，比JS编写的打包器预构建依赖快10-100倍。</span></li><li fid=\"ue7baaab1\" data-lake-id=\"u48a7e8a9\" id=\"u48a7e8a9\"><span data-lake-id=\"u2c326276\" id=\"u2c326276\">源码：一般是那种修改几率比较大的文件，例如JSX、CSS、Vue这些需要转换且时常会被修改编辑的文件。同时这些文件不是一下子全部加载，而是可以按需加载（例如路由懒加载）。Vite会将文件转换后，以</span><code data-lake-id=\"u7c557e8c\" id=\"u7c557e8c\"><span data-lake-id=\"u0af69d6c\" id=\"u0af69d6c\">ES Module</span></code><span data-lake-id=\"ue8db98f1\" id=\"ue8db98f1\">的方式直接交给浏览器，因为现在的浏览器大多数都直接支持es module，这使性能提高很多。</span></li></ul><p data-lake-id=\"ued4a1e1e\" id=\"ued4a1e1e\" style=\"text-indent: 2em\"><span data-lake-id=\"uf5743435\" id=\"uf5743435\">原因如下图：</span></p><p data-lake-id=\"ud5cc1a09\" id=\"ud5cc1a09\" style=\"text-indent: 2em\"><span data-lake-id=\"u8153ef23\" id=\"u8153ef23\">第一张图，是以前的打包模式，<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png%22%2C%22taskId%22%3A%22ubb96c9f1-fe8c-4837-83ee-2e3d29343fb%22%2C%22clientId%22%3A%22u0058c815-b7e9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A732%2C%22height%22%3A408%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png%22%2C%22size%22%3A55374%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A408%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BUNDLE%20BASED%20DEV%20S%20SERVER%20MODULE%20MODUIE%20ROUTE%20SERVER%20BUNDLE%20ENTRY%20MODULE%20ROUTE%20READY%20MODULE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A40.043438%2C%22y%22%3A27.115393%2C%22width%22%3A222.61113199999997%2C%22height%22%3A27.842522999999996%2C%22text%22%3A%22BUNDLE%20BASED%20DEV%20S%22%7D%2C%7B%22x%22%3A256.08603%2C%22y%22%3A34.18884%2C%22width%22%3A81.30376999999999%2C%22height%22%3A17.902503000000003%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A332.149%2C%22y%22%3A110.04819%2C%22width%22%3A43.741780000000006%2C%22height%22%3A10.61632999999999%2C%22text%22%3A%22MODULE%22%7D%2C%7B%22x%22%3A331.86703%2C%22y%22%3A163.93964%2C%22width%22%3A43.777499999999975%2C%22height%22%3A10.058880000000016%2C%22text%22%3A%22MODUIE%22%7D%2C%7B%22x%22%3A212.50966%2C%22y%22%3A164.5023%2C%22width%22%3A36.2946%2C%22height%22%3A9.533240000000006%2C%22text%22%3A%22ROUTE%22%7D%2C%7B%22x%22%3A608.9008%2C%22y%22%3A201.63786%2C%22width%22%3A55.26296000000002%2C%22height%22%3A14.507280000000009%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A481.5142%2C%22y%22%3A210.15442%2C%22width%22%3A55.45906999999994%2C%22height%22%3A14.753740000000022%2C%22text%22%3A%22BUNDLE%22%7D%2C%7B%22x%22%3A81.045616%2C%22y%22%3A213.32765%2C%22width%22%3A35.61722400000001%2C%22height%22%3A10.447309999999987%2C%22text%22%3A%22ENTRY%22%7D%2C%7B%22x%22%3A331.86368%2C%22y%22%3A212.61821%2C%22width%22%3A44.31218999999999%2C%22height%22%3A10.803470000000004%2C%22text%22%3A%22MODULE%22%7D%2C%7B%22x%22%3A213.05891%2C%22y%22%3A213.87514%2C%22width%22%3A35.57578000000001%2C%22height%22%3A9.614830000000012%2C%22text%22%3A%22ROUTE%22%7D%2C%7B%22x%22%3A615.14264%2C%22y%22%3A220.83333%2C%22width%22%3A44.32395999999994%2C%22height%22%3A13.2269%2C%22text%22%3A%22READY%22%7D%2C%7B%22x%22%3A332.05167%2C%22y%22%3A262.25995%2C%22width%22%3A44.089290000000005%2C%22height%22%3A10.405610000000024%2C%22text%22%3A%22MODULE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3741%22%2C%22id%22%3A%22uf56b9e97%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ue6b0aec1\" id=\"ue6b0aec1\"><span data-lake-id=\"ubae4c690\" id=\"ubae4c690\">--- </span></p><p data-lake-id=\"u28df9ae7\" id=\"u28df9ae7\"><span data-lake-id=\"u160f1639\" id=\"u160f1639\">title: Vite vs Webpack vs esbuild </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 前端工程化</span></p><p data-lake-id=\"u4d079136\" id=\"u4d079136\"><span data-lake-id=\"ucf45bcbd\" id=\"ucf45bcbd\">date: 2022-11-01</span></p><p data-lake-id=\"ub4d28a08\" id=\"ub4d28a08\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-01</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [Vite,Webpack,Esbuild]</span></p><p data-lake-id=\"u8a4b9f8f\" id=\"u8a4b9f8f\"><span data-lake-id=\"ub9315238\" id=\"ub9315238\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp2.itc.cn%2Fimages01%2F20210623%2F9a91d9e5d6db4fefbc90e6d79dc23ba5.png&amp;refer=http%3A%2F%2Fp2.itc.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267898&amp;t=1619e8d6ed4ddf8d7ce4d141972652b2</span></p><p data-lake-id=\"ud767d639\" id=\"ud767d639\"><span data-lake-id=\"uabc94e55\" id=\"uabc94e55\">---</span></p><h1 data-lake-id=\"y4CgD\" id=\"y4CgD\"><span data-lake-id=\"udf3f6b9b\" id=\"udf3f6b9b\">Vite和Webpack之对比</span></h1><p data-lake-id=\"ue033c6fb\" id=\"ue033c6fb\"><span data-lake-id=\"u459cd5f6\" id=\"u459cd5f6\">开发阶段：Vite的速度远快于Webpack</span></p><p data-lake-id=\"u8a1e5fd1\" id=\"u8a1e5fd1\"><span data-lake-id=\"ud7315736\" id=\"ud7315736\">主要原因：</span><strong><span data-lake-id=\"u3e08fdd6\" id=\"u3e08fdd6\">Webpack是先打包再启动开发服务器，Vite是直接启动开发服务器，然后按需编译依赖文件。</span></strong></p><p data-lake-id=\"u8e98e4b8\" id=\"u8e98e4b8\"><span data-lake-id=\"u7bfd0d20\" id=\"u7bfd0d20\">详细过程：</span></p><ol list=\"ua60b9211\"><li fid=\"u5447339c\" data-lake-id=\"uc44f5e68\" id=\"uc44f5e68\"><span data-lake-id=\"u59b9c9ff\" id=\"u59b9c9ff\">webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果；</span></li><li fid=\"u5447339c\" data-lake-id=\"u6338faad\" id=\"u6338faad\"><span data-lake-id=\"ub217565c\" id=\"ub217565c\">Vite</span><u><span data-lake-id=\"ua5b844bc\" id=\"ua5b844bc\">直接启动</span></u><span data-lake-id=\"ue0e28728\" id=\"ue0e28728\">开发服务器，请求哪个模块再对哪个模块进行实时编译；</span></li><li fid=\"u5447339c\" data-lake-id=\"ud84f0255\" id=\"ud84f0255\"><span data-lake-id=\"ue952eba9\" id=\"ue952eba9\">由于现代浏览器本身就支持ES Modules，会主动发起请求去获取所需文件。Vite充分利用这一点，将开发环境下的模块文件，作为浏览器要执行的文件，而不是像webpack先打包，交给浏览器执行的文件是打包后的；</span></li><li fid=\"u5447339c\" data-lake-id=\"u2fcdc6e1\" id=\"u2fcdc6e1\"><span data-lake-id=\"ub2181575\" id=\"ub2181575\">由于Vite启动时无需打包，也就无需分析模块依赖、编译，所以启动速度非常快。当浏览器请求需要的模块时，再对模块进行编译，这种按需动态编译的模式，极大地缩短了编译时间，当项目越大，文件越多，Vite的开发时优势越明显；</span></li><li fid=\"u5447339c\" data-lake-id=\"u330c8674\" id=\"u330c8674\"><span data-lake-id=\"u6a3acedb\" id=\"u6a3acedb\">在HRM方面，当某个模块内容改变时，让浏览器去重新请求该模块即可，而不是像webpack重新将该模块的所有依赖重新编译；</span></li><li fid=\"u5447339c\" data-lake-id=\"u7bb9a5dd\" id=\"u7bb9a5dd\"><span data-lake-id=\"u1b2dfbb2\" id=\"u1b2dfbb2\">当需要打包到生产环境时，Vite使用传统的rollup进行打包，所以，vite的优势体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJS。</span></li></ol><h1 data-lake-id=\"tm0Ny\" id=\"tm0Ny\"><span data-lake-id=\"u92042b66\" id=\"u92042b66\">Vite为什么“快”？</span></h1><h2 data-lake-id=\"sr4SV\" id=\"sr4SV\"><span data-lake-id=\"ub93b37cc\" id=\"ub93b37cc\">问题现状</span></h2><h3 data-lake-id=\"gMsh3\" id=\"gMsh3\"><span data-lake-id=\"uf1743cbb\" id=\"uf1743cbb\">1. ES模块化支持的问题</span></h3><ul list=\"ue9bc1abf\"><li fid=\"u081db92c\" data-lake-id=\"uf39daca7\" id=\"uf39daca7\"><span data-lake-id=\"ufdace296\" id=\"ufdace296\">以前的浏览器不支持ES Module</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20index.js%5Cn%5Cnimport%20%7B%20add%20%7D%20from%20'.%2Fadd.js'%5Cnimport%20%7B%20sub%20%7D%20from%20'.%2Fsub.js'%5Cnconsole.log(add(1%2C%202))%5Cnconsole.log(sub(1%2C%202))%5Cn%5Cn%2F%2F%20add.js%5Cnexport%20const%20add%20%3D%20(a%2C%20b)%20%3D%3E%20a%20%2B%20b%20%5Cn%5Cn%2F%2F%20sub.js%5Cnexport%20const%20sub%20%3D%20(a%2C%20b)%20%3D%3E%20a%20-%20b%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AIy1s%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6c59d56f\" id=\"u6c59d56f\"><span data-lake-id=\"u1ce801b1\" id=\"u1ce801b1\">这样的一段代码放在浏览器不能直接运行。</span></p><p data-lake-id=\"u6afa13aa\" id=\"u6afa13aa\"><span data-lake-id=\"u08443c0c\" id=\"u08443c0c\">解决方案：可以使用打包工具（如Webpack、Rollup、Parcel），将index.js、add.js、sub.js这三个文件打包在一个bundle.js文件中，然后在项目</span><code data-lake-id=\"u78d9e820\" id=\"u78d9e820\"><span data-lake-id=\"u136ef741\" id=\"u136ef741\">index.html</span></code><span data-lake-id=\"udac90f71\" id=\"udac90f71\">中直接引入</span><code data-lake-id=\"u71c62b13\" id=\"u71c62b13\"><span data-lake-id=\"u2481fbd9\" id=\"u2481fbd9\">bundle.js</span></code><span data-lake-id=\"ube7a43ca\" id=\"ube7a43ca\">，从而达到代码效果。</span></p><h3 data-lake-id=\"mckwu\" id=\"mckwu\"><span data-lake-id=\"u87ec3723\" id=\"u87ec3723\">2. 项目启动与代码更新的问题</span></h3><ul list=\"uc86fc130\"><li fid=\"u8b58ca58\" data-lake-id=\"ufdfd326e\" id=\"ufdfd326e\"><span data-lake-id=\"udc4ac870\" id=\"udc4ac870\">项目启动：随着项目越来越大，启动一个项目可能需要几分钟</span></li><li fid=\"u8b58ca58\" data-lake-id=\"u9719d827\" id=\"u9719d827\"><span data-lake-id=\"ub554c061\" id=\"ub554c061\">代码更新：随着项目越来越大，修改一小段代码，保存后都要等待几秒才更新</span></li></ul><h2 data-lake-id=\"ln7Uw\" id=\"ln7Uw\"><span data-lake-id=\"ub62b4118\" id=\"ub62b4118\">解决问题</span></h2><h3 data-lake-id=\"CcHh3\" id=\"CcHh3\"><span data-lake-id=\"uf743b45c\" id=\"uf743b45c\">1. 解决启动项目缓慢</span></h3><p data-lake-id=\"u884a7c28\" id=\"u884a7c28\"><span data-lake-id=\"u80578576\" id=\"u80578576\">Vite 在打包时，将模块分成两个区域</span><code data-lake-id=\"u79a4590e\" id=\"u79a4590e\"><span data-lake-id=\"u68421621\" id=\"u68421621\">依赖</span></code><span data-lake-id=\"u72556430\" id=\"u72556430\">和</span><code data-lake-id=\"ud94b13ce\" id=\"ud94b13ce\"><span data-lake-id=\"u2ebeddfe\" id=\"u2ebeddfe\">源码</span></code><span data-lake-id=\"u2792c224\" id=\"u2792c224\">：</span></p><ul list=\"u89870c3b\"><li fid=\"ue7baaab1\" data-lake-id=\"u32c3fd45\" id=\"u32c3fd45\"><span data-lake-id=\"u139d0a8c\" id=\"u139d0a8c\">依赖：一般是那种在开发中不会改变的JS，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用esbuild来进行预构建依赖，esbuild使用的是Go进行编写，比JS编写的打包器预构建依赖快10-100倍。</span></li><li fid=\"ue7baaab1\" data-lake-id=\"u48a7e8a9\" id=\"u48a7e8a9\"><span data-lake-id=\"u2c326276\" id=\"u2c326276\">源码：一般是那种修改几率比较大的文件，例如JSX、CSS、Vue这些需要转换且时常会被修改编辑的文件。同时这些文件不是一下子全部加载，而是可以按需加载（例如路由懒加载）。Vite会将文件转换后，以</span><code data-lake-id=\"u7c557e8c\" id=\"u7c557e8c\"><span data-lake-id=\"u0af69d6c\" id=\"u0af69d6c\">ES Module</span></code><span data-lake-id=\"ue8db98f1\" id=\"ue8db98f1\">的方式直接交给浏览器，因为现在的浏览器大多数都直接支持es module，这使性能提高很多。</span></li></ul><p data-lake-id=\"ued4a1e1e\" id=\"ued4a1e1e\" style=\"text-indent: 2em\"><span data-lake-id=\"uf5743435\" id=\"uf5743435\">原因如下图：</span></p><p data-lake-id=\"ud5cc1a09\" id=\"ud5cc1a09\" style=\"text-indent: 2em\"><span data-lake-id=\"u8153ef23\" id=\"u8153ef23\">第一张图，是以前的打包模式，<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png%22%2C%22taskId%22%3A%22ubb96c9f1-fe8c-4837-83ee-2e3d29343fb%22%2C%22clientId%22%3A%22u0058c815-b7e9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A732%2C%22height%22%3A408%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221668601120853_43F96D26-9591-4a51-926F-A76249646CD6.png%22%2C%22size%22%3A55374%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A408%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BUNDLE%20BASED%20DEV%20S%20SERVER%20MODULE%20MODUIE%20ROUTE%20SERVER%20BUNDLE%20ENTRY%20MODULE%20ROUTE%20READY%20MODULE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A40.043438%2C%22y%22%3A27.115393%2C%22width%22%3A222.61113199999997%2C%22height%22%3A27.842522999999996%2C%22text%22%3A%22BUNDLE%20BASED%20DEV%20S%22%7D%2C%7B%22x%22%3A256.08603%2C%22y%22%3A34.18884%2C%22width%22%3A81.30376999999999%2C%22height%22%3A17.902503000000003%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A332.149%2C%22y%22%3A110.04819%2C%22width%22%3A43.741780000000006%2C%22height%22%3A10.61632999999999%2C%22text%22%3A%22MODULE%22%7D%2C%7B%22x%22%3A331.86703%2C%22y%22%3A163.93964%2C%22width%22%3A43.777499999999975%2C%22height%22%3A10.058880000000016%2C%22text%22%3A%22MODUIE%22%7D%2C%7B%22x%22%3A212.50966%2C%22y%22%3A164.5023%2C%22width%22%3A36.2946%2C%22height%22%3A9.533240000000006%2C%22text%22%3A%22ROUTE%22%7D%2C%7B%22x%22%3A608.9008%2C%22y%22%3A201.63786%2C%22width%22%3A55.26296000000002%2C%22height%22%3A14.507280000000009%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A481.5142%2C%22y%22%3A210.15442%2C%22width%22%3A55.45906999999994%2C%22height%22%3A14.753740000000022%2C%22text%22%3A%22BUNDLE%22%7D%2C%7B%22x%22%3A81.045616%2C%22y%22%3A213.32765%2C%22width%22%3A35.61722400000001%2C%22height%22%3A10.447309999999987%2C%22text%22%3A%22ENTRY%22%7D%2C%7B%22x%22%3A331.86368%2C%22y%22%3A212.61821%2C%22width%22%3A44.31218999999999%2C%22height%22%3A10.803470000000004%2C%22text%22%3A%22MODULE%22%7D%2C%7B%22x%22%3A213.05891%2C%22y%22%3A213.87514%2C%22width%22%3A35.57578000000001%2C%22height%22%3A9.614830000000012%2C%22text%22%3A%22ROUTE%22%7D%2C%7B%22x%22%3A615.14264%2C%22y%22%3A220.83333%2C%22width%22%3A44.32395999999994%2C%22height%22%3A13.2269%2C%22text%22%3A%22READY%22%7D%2C%7B%22x%22%3A332.05167%2C%22y%22%3A262.25995%2C%22width%22%3A44.089290000000005%2C%22height%22%3A10.405610000000024%2C%22text%22%3A%22MODULE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3741%22%2C%22id%22%3A%22uf56b9e97%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-17T09:05:17.000Z",
    "deleted_at": null,
    "created_at": "2022-11-16T08:51:59.000Z",
    "updated_at": "2022-11-17T09:05:18.000Z",
    "published_at": "2022-11-17T09:05:17.000Z",
    "first_published_at": "2022-11-16T09:33:19.996Z",
    "word_count": 963,
    "cover": "https://cdn.nlark.com/yuque/0/2022/png/2324645/1668606127115-567c8a0b-dc4a-4546-bc92-3cd841e9ad03.png",
    "description": "--- title: Vite vs Webpack vs esbuild categories: 前端工程化date: 2022-11-01updated: 2022-11-01tags: [Vite,Webpack,Esbuild]cover: https://gimg2.baidu.co...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106268001,
    "slug": "hl6yp4ao1ebb8t7w",
    "title": "JS高频面试题",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: JS高频面试题 <br />categories: JS<br />date: 2022-11-13<br />updated: 2022-11-13<br />tags: JS<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F7275569-78f8b42bb54aec85.jpg&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671266536&t=e242d8866a11e11ce85f7bd2674b4d7b<br />--- \n<a name=\"ZolgE\"></a>\n## apply、call、bind的区别\n\n- 三者都可以改变函数的this对象指向\n- 三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window\n- 三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入\n- bind是返回绑定this之后的函数，需要手动执行函数，apply、call 则是立即执行\n<a name=\"yuKWf\"></a>\n## new操作符的实现原理\nnew操作符的执⾏过程：<br />（1）⾸先创建了⼀个新的空对象<br />（2）设置原型，将对象的原型设置为函数的 prototype 对象。<br />（3）让函数的 this 指向这个对象，执⾏构造函数的代码（为这个新对象添加属性）<br />（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引⽤类型，就返回这个引⽤类<br />型的对象。\n```javascript\nfunction objectFactory() {\nlet newObject = null;\nlet constructor = Array.prototype.shift.call(arguments);\nlet result = null;\n// 判断参数是否是⼀个函数\nif (typeof constructor !== \"function\") {\nconsole.error(\"type error\");\nreturn;\n}\n// 新建⼀个空对象，对象的原型为构造函数的 prototype 对象\nnewObject = Object.create(constructor.prototype);\n// 将 this 指向新建对象，并执⾏函数\nresult = constructor.apply(newObject, arguments);\n// 判断返回对象\nlet flag = result && (typeof result === \"object\" || typeof result ===\n\"function\");\n// 判断返回结果\nreturn flag ? result : newObject;\n}\n// 使⽤⽅法\nobjectFactory(构造函数, 初始化参数);\n```\n<a name=\"EuRYC\"></a>\n## map()和foreach()的区别\n<a name=\"ogOb0\"></a>\n### 简洁回答\n都是⽤来遍历数组的，两者区别如下：\n\n- forEach()⽅法会针对每⼀个元素执⾏提供的函数，对数据的操作会改变原数组，该⽅法没有返回\n\n值；\n\n- map()⽅法不会改变原数组的值，返回⼀个新数组，新数组中的值为原数组调⽤函数处理之后的\n\n值；\n<a name=\"LgnBg\"></a>\n### 相同点\n\n1. 都是循环遍历数组的每一项\n2. 都相当于封装好的单层for循环，三个值都相同\n3. 每次执行匿名函数都支持三个参数，参数分别为item（当前每一项）、index（索引值）、arr（原数组）\n4. 匿名函数中的this都是指向window\n5. 只能遍历数组\n<a name=\"gJBw2\"></a>\n### 不同点\n\n- map()会分配内存空间存储新数组并有返回值，forEach()没有返回值\n- forEach()允许calllback更改原始数组的元素，map()返回新的数组，map()不会对空数组进行检测\n- forEach()遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。\n- map遍历后的数组通常会生成一个新的数组，新数组的值发生变化，当前遍历的数组值不会变化。\n- map的速度大于forEach\n<a name=\"qMAb9\"></a>\n### 使用场景\n\n1. forEach()适用于你并不打算改变数据的时候\n2. map()适用于你要改变数据的时候。不仅在于它更快，而且返回一个新数组。（因此可以使用复合（composition）（map(),filter(),reduce()等组合使用））\n\n性能上来说，for>forEach>map。\n<a name=\"fNTcb\"></a>\n## Symbol\n\n1. 什么是Symbol？\n\nSymbol是ES6新增的一种数据类型，被划分为**基本数据类型**。不能用 `new`。\n\n- 基本数据类型：字符串、数值、布尔、undefined、null、Symbol。\n- 引用数据类型：Object\n2. 作用\n\n用来表示一个独一无二的值。\n\n3. 格式：`let xxx = Symbol('标识字符串')`\n4. 为什么需要Symbol？\n\n为了避免第三方框框架的同名属性被覆盖。\n> 在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。\n\n5. 如果区分Symbol？\n\n在通过Symbol生成一个独一无二的值时，可以设置一个标记<br />这个标记仅仅用于区分，没有其他任何意义。\n\n6. 如果特殊情况需要读取这个标记，\n- Symbol类型可以转化为boolean或字符串，转化为字符串时前面会加上Symbol(wxy)，不方便\n- 可以直接通过description属性获取Symbol函数的字符串标识参数\n7. 使用Symbol类型作为属性名\n> 对象的属性要么是字符串，要么是Symbol类型\n\n- 默认是字符串，所以不加`\"\"`也可以；如果需要类型为Symbol，需要使用`[]`。\n- 不能用`.`来访问，因为点运算符后面总是字符串。\n- Symbol值作为属性名时，该属性还是公开属性，不是私有属性。\n8. 例子：\n```javascript\n//后面的括号可以给symbol做上标记便于识别\nlet name = Symbol(\"name\");\nlet say = Symbol(\"say\");\nlet obj = {\n    //如果想 使用变量作为对象属性的名称，必须加上中括号，.运算符后面跟着的都是字符串\n    [name]: \"lnj\",\n    [say]: function() {\n        console.log(\"say\");\n    },\n    // name: \"rose\",\n};\n// obj.name = \"it6661\";\nobj[Symbol(\"name\")] = \"it666\";\nconsole.log(obj);\nconsole.log(Reflect.ownKeys(obj));\n```\n> {\n>   [Symbol(name)]: 'lnj',\n>   [Symbol(say)]: [Function: [say]],\n>   [Symbol(name)]: 'it666'\n> }\n> [ Symbol(name), Symbol(say), Symbol(name) ]\n\n没有覆盖原来的name，因为都是独一无二的，那么就默认创建一个name的属性。\n<a name=\"PKuqe\"></a>\n### 注意点\n\n1. Symbol是基本数据类型，不能加new\n2. 后面括号可以传入一个字符串，只是一个标记，方便阅读，没有任何意义。\n3. 类型转化的时候，不可转化为数值，只能转化为字符串和布尔值。\n```javascript\nconsole.log(String(name));\nconsole.log(Boolean(name));\nconsole.log(Number(name)); // Cannot convert a Symbol value to a number\n```\n\n4. 不能做任何运算\n```javascript\nlet name=Symbol('name');\nconsole.log(name+111)\nconsole.log(name+'ccc')\n//全部报错 Cannot convert a Symbol value to a number\n```\n\n5. Symbol生成的值作为属性或方法的时候，一定要保存下来，否则后续无法使用。\n```javascript\nlet name=Symbol('name');\nlet obj={\n  // name:'lnj',\n    [Symbol('name')]:'lbj'\n}\nconsole.log(obj.name);  //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个\n```\n应该改为如下：\n```javascript\nlet name = Symbol(\"name\");\nlet obj = {\n    [name]: \"lnj1\",\n    // [Symbol(\"name\")]: \"lbj\",\n};\n// console.log(obj.name); //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个\nconsole.log(Reflect.ownKeys(obj));\nconsole.log(obj[name]);\n```\n> [ Symbol(name) ]\n> lnj1\n\n6. for循环遍历对象时无法遍历出Symbol的属性和方法\n```javascript\nlet name=Symbol('name');\nlet obj={\n  [name]:'lnj',\n    age:12,\n    teacher:'wyx'\n}\nfor(let key in obj){\n    console.log(key)   //只能打印出age和teacher\n}\n//这个方法可以单独取出Symbol(name)\nconsole.log(Object.getOwnPropertySymbols(obj))\n```\n<a name=\"bRIp6\"></a>\n### Symbol的应用\n\n1. 在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。\n2. 消除魔术字符串\n> 魔术字符串：在代码中多次出现，与代码形成强耦合的某一个具体的字符串或数值。风格良好的代码应该尽量消除魔术字符串，改由含义清晰的变量代替。‘\n\n```javascript\nconst gender = {\n   //这样就说明man就是一个独一无二的值，不用再man:'man'   \n    man: Symbol(),\n    woman: Symbol(),\n}\nfunction isMan(gender) {\n    switch (gender) {\n        case gender.man:\n            console.log('男性');\n            break;\n        case gender.woman:\n            console.log('女性');\n            break\n    }\n}\nisMan(gender.man)  //男性\n```\n\n3. 为对象定义一些非私有的、但又希望只用于内部的方法。\n> 由于以Symbol值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。\n> 注意：Symbol并不能实现真正的私有变量的效果，只是不能通过常规的遍历方法拿到Symbol类型的属性而已。\n\n**对象的遍历方法**：\n\n- for(let xx in obj)：i代表key\n- for(let xx of obj)：不是自带的\n- Object.keys(obj)：返回包含的key的数组\n- Object.values(obj)：返回包含value的数组\n- Object.getOwnPropertyNames()：返回包含key的数组\n\n上述的所有方法都遍历不到Symbol类型的（注意：是遍历时取不到Symbol，并不是我们访问不到对象的Symbol类型）<br />**可以遍历到Symbol的方法：**\n\n- **Object.getOwnPropertySymbols()**：返回对象中只包含Symbol类型key的数组\n- **Reflect.ownKeys()**：返回对象中所有类型key的数组（包含Symbol）\n```javascript\nlet _password = Symbol('password')\nconst obj = {\n    name: '小明',\n    gender: 'male',\n    [_password]: '11038'\n}\nfor (let item in obj) {\n    console.log(item);\n}\nconsole.log(Object.keys(obj));\nconsole.log(Object.values(obj));\nconsole.log(Object.getOwnPropertyNames(obj));\nconsole.log(Object.getOwnPropertySymbols(obj));\nconsole.log(Reflect.ownKeys(obj))\n// 输出11038，所以还是可以直接访问到symbol类型的属性，所以symbol并不能真正实现私有变量的设定，所以一般只用于定义一些非私有的、但又希望只用于内部的方法\nconsole.log(obj[_password]);\n```\n输出如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png#averageHue=%23212121&clientId=u2b09cbdb-2331-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=116&id=u196ca470&margin=%5Bobject%20Object%5D&name=image.png&originHeight=245&originWidth=583&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46307&status=done&style=none&taskId=uda6b3e15-79e2-4aa7-982d-49fe7eb8eb8&title=&width=275)\n<a name=\"wAmPW\"></a>\n### Symbol自带的方法\n<a name=\"ZBbKp\"></a>\n#### 1. `Symbol.for()`\n重新使用同一个Symbol值。<br />接收一个字符串作为参数，搜索是否有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建一个以该字符串为名称的Symbol值，并将其注册到全局。\n```javascript\nlet s1 = Symbol.for('foo');\nlet s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\n<a name=\"ezFW0\"></a>\n#### 2. `Symbol.keyFor()`\n返回一个已登记的Symbol类型值的`key`。<br />由于`Symbol()`写法没有登记机制，所以每次调用都会返回一个不同的值。\n```javascript\nlet s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nlet s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n<a name=\"hZIrL\"></a>\n## Map和Object区别\n|  | Map | Object |\n| --- | --- | --- |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键 | Object有一个原型，原型链上的键名有可能和自己在对象上设置的键名有冲突 |\n| 键的类型 | Map的键可以是**任意值**，包括函数、对象或任意基本类型 | Object的键必须是**String或Symbol** |\n| 键的顺序 | Map中的**key**是**有序**的。因此，当迭代的时候，Map对象以**插入的顺序**返回键值 | Object的键是**无序**的 |\n| Size | Map的键值对个数可以轻易地通过**size**属性获取 | Object建值对个数只能**手动计算** |\n| 迭代 | Map是iterable的，所以可以**直接被迭代** | 迭代Object需要以某种方式**获取它的键然后才能迭代** |\n| 性能 | 在频繁增删键值对的场景下表现更好 | 在频繁添加和删除键值对的场景下**未做出优化** |\n\n<a name=\"N2G8K\"></a>\n## Map和WeakMap区别\n<a name=\"jjMeF\"></a>\n### Map \nmap本质上是键值对的集合，但是普通Object的中的键值只能是字符串或Symbol。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。<br />实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n```javascript\nconst map = [\n  [\"name\",\"张三\"],\n  [\"age\",18],\n]\n```\nMap数据结构有以下操作方法：\n\n- size：`map.size()`返回Map结构的成员总数\n- set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- delete(key)：该方法删除某个key，返回true，如果删除失败，返回false。\n- clear()：map.clear() 清除所有成员，没有返回值\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器\n- values()：返回键值的遍历器\n- entries()：返回所有成员的遍历器\n- forEach()：遍历Map的所有成员\n```javascript\nconst map = new Map([\n  [\"foo\",1],\n  [\"bar\",2],\n])\nfor(let key of map.keys()){\n\tconsole.log(key); // foo bar\n}\nfor(let value of map.values()){\n\tconsole.log(value); // 1 2\n}\nfor(let items of map.entries()){\n\tconsole.log(items); // [\"foo\",1] [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n\tconsole.log(key,value); // foo 1 bar 2\n})\n```\n<a name=\"ZTsz5\"></a>\n### WeakMap\nWeakMap对象也是一组键值对的集合，其中的键是**弱引用**。**其键必须是对象，**原始数据类型不能作为key值，而值可以是任意的。<br />该对象也有以下几种方法：\n\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：删除某个键，返回true，如果删除失败，返回false。\n\n其clear() 方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。<br />**WeakMap的设计目的**：\n\n- 有时想在某个对象上存放一些数据，但是这会形成对于这个对象的引用。一旦不需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n- 而WeakMap的**键名所引用的对象都是弱引用**， 即**垃圾回收机制不将该引用考虑在内。**因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，**不用手动删除引用**。\n<a name=\"AtFqQ\"></a>\n### 总结\n\n- Map数据结构，类似于对象，也是键值对的集合，但是“键”的范围**不限于**字符串，各种类型的值（包括对象）都可以作为键。\n- WeakMap 结构与Map结构类似，也是用于生成键值对的集合。但是WeakMap**只接受对象作为键名**（null除外），不接受其他类型的值作为键名。**而且WeakMap的键名所指向的对象是弱引用，不计入垃圾回收机制。**\n<a name=\"QPbAT\"></a>\n## JS内置对象\n全局的对象（global objects）或称标准内置对象。即全局作用域中的对象，全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n<a name=\"GDmze\"></a>\n### 标准内置对象的分类\n\n1. 值属性：这些全局属性返回一个简单值，这些值没有自己的属性和方法。\n\n如：Infinity、NaN、undefined、null字面量。\n\n2. 函数属性：全局属性可以直接调用，不需要再调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n\n如：eval()、parseFloat()、parseInt()等。\n\n3. 基本对象：是定义或使用其他对象的基础。包括一般对象、函数对象和错误对象。\n\n如：Object、Function、Boolean、Symbol、Error等。\n\n4. 数字和日期对象：用来表示数字、日期和执行数学计算的对象。\n\n如：Number、Math、Date。\n\n5. 字符串：用来表示和操作字符串的对象。\n\n如：String、RegExp\n\n6. 可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。\n\n如：Array。\n\n7. 使用键的集合对象：这些集合对象在存储时会使用到键，支持按照插入顺序来迭代元素。\n\n如：Map、Set、WeakMap、WeakSet。\n\n8. 矢量集合：SIMD矢量集合中的数据会被组织为一个数据序列。\n\n如：SIMD等。\n\n9. 结构化数据：这些对象用来表示和操作结构化的缓冲区数据，或使用JSON编码的数据。\n\n如：JSON数据。\n\n10. 控制抽象对象。如：Promise、Generator等。\n11. 反射。如：Reflect、Proxy。\n12. 国际化：为了支持多语言处理而加入的ECMAScript的对象。\n\n如：Intl、Intl.Collator 等。\n\n13. WebAssembly\n14. 其他。如 arguments\n<a name=\"ydNG9\"></a>\n### 总结\n\n1. JS中的内置对象主要指的是在程序执行前存在全局作用域中的由JS定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。\n2. 一般经常用到的如 全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数 如 Date、Object 等，还有提供数学计算的单体内置对象如 Math对象等。\n<a name=\"XVr1I\"></a>\n## JS脚本延迟加载的方式\n\n- defer：异步加载，延迟执行（html加载完再执行）\n- async：异步加载，加载完立即执行（会阻塞html页面解析）\n- 动态创建DOM方式：对文档加载事件进行监听，当文档加载完后，再动态创建script标签来引入JS脚本。\n- setTimeout延迟方法：设置一个定时器来延迟加载JS脚本文件\n- 让JS最后加载：将JS脚本文件放在文档底部，来使JS脚本尽可能最后加载执行。\n<a name=\"SpWzB\"></a>\n## JS类数组对象\nJS类数组对象：一个拥有length属性和若干索引属性的对象。<br />和数组类似，但不能调用数组的方法。<br />常见的类数组对象有：\n\n- argument 和 DOM 方法的返回结果\n- 函数（因为含有length属性值，代表可接收的参数个数）\n\n类数组转换为数组的方法：\n\n1. 通过 call 调用数组的 slice 方法来实现转换\n```javascript\nArray.prototype.slice.call(arrayLike); \n```\n\n2. 通过call调用数组的splice方法来实现转换\n```javascript\nArray.prototype.splice.call(arrayLike,0);\n```\n\n3. 通过apply调用数组的 concat 方法来实现转换\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n4. 通过Array.from() 实现转换\n```javascript\nArray.from(arrayLike);\n```\n<a name=\"PPTXu\"></a>\n## 数组有哪些原生方法\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join()，其中join()可以指定转换为字符串时的分隔符\n- 数组尾部操作的方法：pop()和 push()，push() 方法可以传入多个参数\n- 数组首部操作的方法：shift() 删除和 unshift() 添加\n- 重排序的方法：reverse() 和 sort()，sort() 可传入一个函数进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置\n- 数组连接：concat() 返回拼接好的数组，不影响原数组。\n- 数组截取：splice()\n- 影响原数组特定项的索引的方法，indexOf()和 lastIndexOf() \n- 迭代方法：every()、some()、filter()、map()、forEach()方法\n- 数组归并方法：reduce()、reduceRight()方法\n<a name=\"w9O8P\"></a>\n## Promise.race() 应用场景\n> race() 和 all() 一样，接受的参数是一个每项都是Promise的数组，但是与all不同的是，当**最先执行完**的事件执行完后，就直接返回该promise对象的值。\n> 如果第一个promise对象状态变成resolved，则自身的状态就变成了resolved；反之，第一个promise变成rejected，则自身状态就会变成rejected。\n\n**Promise.race() 应用场景**：\n\n- http请求时，做超时判断时，设置一个定时器，当定时器时间到了时间就在页面提醒请求超时。\n```javascript\n// 请求某个图片资源\nfunction requestImg() {\n  var p = new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onload = function () {\n      resolve(img);\n    };\n    img.src = \"http://www.baidu.com/img/flexiable/logo/pc/result.png\";\n  });\n  return p;\n}\n// 延时函数，用于给请求计时\nfunction timeout() {\n  var p = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(\"图片请求操时\");\n    }, 5000);\n  });\n  return p;\n}\nPromise.race([requestImg(), timeout()])\n  .then(function (results) {\n    console.log(results);\n  })\n  .catch(function (reason) {\n    console.log(reason);\n  });\n```\n<a name=\"k94WT\"></a>\n## Promise.all() 应用场景\n> 它可以将多个promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功时返回一个**结构数组**，而失败时则返回**最先被reject失败状态的值。**\n\n**Promise.all() 中传入的是数组，返回的也是数组，并会进行映射，传入的Promise对象返回值是按照顺序在数组中排列的，但是注意他们执行的顺序并不是按照顺序的，除非可迭代对象为空。**\n> **注意：Promise.all 获得的成功结果的数组中的数据顺序和Promise.all()接收的数组顺序是一致的，这样当遇到多个请求并根据请求顺序获取和使用数据的场景，可以使用 Promise.all来解决。**\n\n<a name=\"CSPWq\"></a>\n## 使用requestAnimationFrame实现一个循环定时器\n```javascript\nfunction setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n  }\n}\ntimer = window.requestAnimationFrame(loop)\n\treturn timer\n}\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n```\n⾸先 requestAnimationFrame ⾃带函数节流功能，基本可以保证在 16.6 毫秒内只执⾏⼀次（不掉<br />帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。\n",
    "body_draft": "--- <br />title: JS高频面试题 <br />categories: JS<br />date: 2022-11-13<br />updated: 2022-11-13<br />tags: JS<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F7275569-78f8b42bb54aec85.jpg&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671266536&t=e242d8866a11e11ce85f7bd2674b4d7b<br />--- \n<a name=\"ZolgE\"></a>\n## apply、call、bind的区别\n\n- 三者都可以改变函数的this对象指向\n- 三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window\n- 三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入\n- bind是返回绑定this之后的函数，需要手动执行函数，apply、call 则是立即执行\n<a name=\"yuKWf\"></a>\n## new操作符的实现原理\nnew操作符的执⾏过程：<br />（1）⾸先创建了⼀个新的空对象<br />（2）设置原型，将对象的原型设置为函数的 prototype 对象。<br />（3）让函数的 this 指向这个对象，执⾏构造函数的代码（为这个新对象添加属性）<br />（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引⽤类型，就返回这个引⽤类<br />型的对象。\n```javascript\nfunction objectFactory() {\nlet newObject = null;\nlet constructor = Array.prototype.shift.call(arguments);\nlet result = null;\n// 判断参数是否是⼀个函数\nif (typeof constructor !== \"function\") {\nconsole.error(\"type error\");\nreturn;\n}\n// 新建⼀个空对象，对象的原型为构造函数的 prototype 对象\nnewObject = Object.create(constructor.prototype);\n// 将 this 指向新建对象，并执⾏函数\nresult = constructor.apply(newObject, arguments);\n// 判断返回对象\nlet flag = result && (typeof result === \"object\" || typeof result ===\n\"function\");\n// 判断返回结果\nreturn flag ? result : newObject;\n}\n// 使⽤⽅法\nobjectFactory(构造函数, 初始化参数);\n```\n<a name=\"EuRYC\"></a>\n## map()和foreach()的区别\n<a name=\"ogOb0\"></a>\n### 简洁回答\n都是⽤来遍历数组的，两者区别如下：\n\n- forEach()⽅法会针对每⼀个元素执⾏提供的函数，对数据的操作会改变原数组，该⽅法没有返回\n\n值；\n\n- map()⽅法不会改变原数组的值，返回⼀个新数组，新数组中的值为原数组调⽤函数处理之后的\n\n值；\n<a name=\"LgnBg\"></a>\n### 相同点\n\n1. 都是循环遍历数组的每一项\n2. 都相当于封装好的单层for循环，三个值都相同\n3. 每次执行匿名函数都支持三个参数，参数分别为item（当前每一项）、index（索引值）、arr（原数组）\n4. 匿名函数中的this都是指向window\n5. 只能遍历数组\n<a name=\"gJBw2\"></a>\n### 不同点\n\n- map()会分配内存空间存储新数组并有返回值，forEach()没有返回值\n- forEach()允许calllback更改原始数组的元素，map()返回新的数组，map()不会对空数组进行检测\n- forEach()遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。\n- map遍历后的数组通常会生成一个新的数组，新数组的值发生变化，当前遍历的数组值不会变化。\n- map的速度大于forEach\n<a name=\"qMAb9\"></a>\n### 使用场景\n\n1. forEach()适用于你并不打算改变数据的时候\n2. map()适用于你要改变数据的时候。不仅在于它更快，而且返回一个新数组。（因此可以使用复合（composition）（map(),filter(),reduce()等组合使用））\n\n性能上来说，for>forEach>map。\n<a name=\"fNTcb\"></a>\n## Symbol\n\n1. 什么是Symbol？\n\nSymbol是ES6新增的一种数据类型，被划分为**基本数据类型**。不能用 `new`。\n\n- 基本数据类型：字符串、数值、布尔、undefined、null、Symbol。\n- 引用数据类型：Object\n2. 作用\n\n用来表示一个独一无二的值。\n\n3. 格式：`let xxx = Symbol('标识字符串')`\n4. 为什么需要Symbol？\n\n为了避免第三方框框架的同名属性被覆盖。\n> 在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。\n\n5. 如果区分Symbol？\n\n在通过Symbol生成一个独一无二的值时，可以设置一个标记<br />这个标记仅仅用于区分，没有其他任何意义。\n\n6. 如果特殊情况需要读取这个标记，\n- Symbol类型可以转化为boolean或字符串，转化为字符串时前面会加上Symbol(wxy)，不方便\n- 可以直接通过description属性获取Symbol函数的字符串标识参数\n7. 使用Symbol类型作为属性名\n> 对象的属性要么是字符串，要么是Symbol类型\n\n- 默认是字符串，所以不加`\"\"`也可以；如果需要类型为Symbol，需要使用`[]`。\n- 不能用`.`来访问，因为点运算符后面总是字符串。\n- Symbol值作为属性名时，该属性还是公开属性，不是私有属性。\n8. 例子：\n```javascript\n//后面的括号可以给symbol做上标记便于识别\nlet name = Symbol(\"name\");\nlet say = Symbol(\"say\");\nlet obj = {\n    //如果想 使用变量作为对象属性的名称，必须加上中括号，.运算符后面跟着的都是字符串\n    [name]: \"lnj\",\n    [say]: function() {\n        console.log(\"say\");\n    },\n    // name: \"rose\",\n};\n// obj.name = \"it6661\";\nobj[Symbol(\"name\")] = \"it666\";\nconsole.log(obj);\nconsole.log(Reflect.ownKeys(obj));\n```\n> {\n>   [Symbol(name)]: 'lnj',\n>   [Symbol(say)]: [Function: [say]],\n>   [Symbol(name)]: 'it666'\n> }\n> [ Symbol(name), Symbol(say), Symbol(name) ]\n\n没有覆盖原来的name，因为都是独一无二的，那么就默认创建一个name的属性。\n<a name=\"PKuqe\"></a>\n### 注意点\n\n1. Symbol是基本数据类型，不能加new\n2. 后面括号可以传入一个字符串，只是一个标记，方便阅读，没有任何意义。\n3. 类型转化的时候，不可转化为数值，只能转化为字符串和布尔值。\n```javascript\nconsole.log(String(name));\nconsole.log(Boolean(name));\nconsole.log(Number(name)); // Cannot convert a Symbol value to a number\n```\n\n4. 不能做任何运算\n```javascript\nlet name=Symbol('name');\nconsole.log(name+111)\nconsole.log(name+'ccc')\n//全部报错 Cannot convert a Symbol value to a number\n```\n\n5. Symbol生成的值作为属性或方法的时候，一定要保存下来，否则后续无法使用。\n```javascript\nlet name=Symbol('name');\nlet obj={\n  // name:'lnj',\n    [Symbol('name')]:'lbj'\n}\nconsole.log(obj.name);  //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个\n```\n应该改为如下：\n```javascript\nlet name = Symbol(\"name\");\nlet obj = {\n    [name]: \"lnj1\",\n    // [Symbol(\"name\")]: \"lbj\",\n};\n// console.log(obj.name); //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个\nconsole.log(Reflect.ownKeys(obj));\nconsole.log(obj[name]);\n```\n> [ Symbol(name) ]\n> lnj1\n\n6. for循环遍历对象时无法遍历出Symbol的属性和方法\n```javascript\nlet name=Symbol('name');\nlet obj={\n  [name]:'lnj',\n    age:12,\n    teacher:'wyx'\n}\nfor(let key in obj){\n    console.log(key)   //只能打印出age和teacher\n}\n//这个方法可以单独取出Symbol(name)\nconsole.log(Object.getOwnPropertySymbols(obj))\n```\n<a name=\"bRIp6\"></a>\n### Symbol的应用\n\n1. 在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。\n2. 消除魔术字符串\n> 魔术字符串：在代码中多次出现，与代码形成强耦合的某一个具体的字符串或数值。风格良好的代码应该尽量消除魔术字符串，改由含义清晰的变量代替。‘\n\n```javascript\nconst gender = {\n   //这样就说明man就是一个独一无二的值，不用再man:'man'   \n    man: Symbol(),\n    woman: Symbol(),\n}\nfunction isMan(gender) {\n    switch (gender) {\n        case gender.man:\n            console.log('男性');\n            break;\n        case gender.woman:\n            console.log('女性');\n            break\n    }\n}\nisMan(gender.man)  //男性\n```\n\n3. 为对象定义一些非私有的、但又希望只用于内部的方法。\n> 由于以Symbol值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。\n> 注意：Symbol并不能实现真正的私有变量的效果，只是不能通过常规的遍历方法拿到Symbol类型的属性而已。\n\n**对象的遍历方法**：\n\n- for(let xx in obj)：i代表key\n- for(let xx of obj)：不是自带的\n- Object.keys(obj)：返回包含的key的数组\n- Object.values(obj)：返回包含value的数组\n- Object.getOwnPropertyNames()：返回包含key的数组\n\n上述的所有方法都遍历不到Symbol类型的（注意：是遍历时取不到Symbol，并不是我们访问不到对象的Symbol类型）<br />**可以遍历到Symbol的方法：**\n\n- **Object.getOwnPropertySymbols()**：返回对象中只包含Symbol类型key的数组\n- **Reflect.ownKeys()**：返回对象中所有类型key的数组（包含Symbol）\n```javascript\nlet _password = Symbol('password')\nconst obj = {\n    name: '小明',\n    gender: 'male',\n    [_password]: '11038'\n}\nfor (let item in obj) {\n    console.log(item);\n}\nconsole.log(Object.keys(obj));\nconsole.log(Object.values(obj));\nconsole.log(Object.getOwnPropertyNames(obj));\nconsole.log(Object.getOwnPropertySymbols(obj));\nconsole.log(Reflect.ownKeys(obj))\n// 输出11038，所以还是可以直接访问到symbol类型的属性，所以symbol并不能真正实现私有变量的设定，所以一般只用于定义一些非私有的、但又希望只用于内部的方法\nconsole.log(obj[_password]);\n```\n输出如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/2324645/1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png#averageHue=%23212121&clientId=u2b09cbdb-2331-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=116&id=u196ca470&margin=%5Bobject%20Object%5D&name=image.png&originHeight=245&originWidth=583&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46307&status=done&style=none&taskId=uda6b3e15-79e2-4aa7-982d-49fe7eb8eb8&title=&width=275)\n<a name=\"wAmPW\"></a>\n### Symbol自带的方法\n<a name=\"ZBbKp\"></a>\n#### 1. `Symbol.for()`\n重新使用同一个Symbol值。<br />接收一个字符串作为参数，搜索是否有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建一个以该字符串为名称的Symbol值，并将其注册到全局。\n```javascript\nlet s1 = Symbol.for('foo');\nlet s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\n<a name=\"ezFW0\"></a>\n#### 2. `Symbol.keyFor()`\n返回一个已登记的Symbol类型值的`key`。<br />由于`Symbol()`写法没有登记机制，所以每次调用都会返回一个不同的值。\n```javascript\nlet s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nlet s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n<a name=\"hZIrL\"></a>\n## Map和Object区别\n|  | Map | Object |\n| --- | --- | --- |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键 | Object有一个原型，原型链上的键名有可能和自己在对象上设置的键名有冲突 |\n| 键的类型 | Map的键可以是**任意值**，包括函数、对象或任意基本类型 | Object的键必须是**String或Symbol** |\n| 键的顺序 | Map中的**key**是**有序**的。因此，当迭代的时候，Map对象以**插入的顺序**返回键值 | Object的键是**无序**的 |\n| Size | Map的键值对个数可以轻易地通过**size**属性获取 | Object建值对个数只能**手动计算** |\n| 迭代 | Map是iterable的，所以可以**直接被迭代** | 迭代Object需要以某种方式**获取它的键然后才能迭代** |\n| 性能 | 在频繁增删键值对的场景下表现更好 | 在频繁添加和删除键值对的场景下**未做出优化** |\n\n<a name=\"N2G8K\"></a>\n## Map和WeakMap区别\n<a name=\"jjMeF\"></a>\n### Map \nmap本质上是键值对的集合，但是普通Object的中的键值只能是字符串或Symbol。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。<br />实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n```javascript\nconst map = [\n  [\"name\",\"张三\"],\n  [\"age\",18],\n]\n```\nMap数据结构有以下操作方法：\n\n- size：`map.size()`返回Map结构的成员总数\n- set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- delete(key)：该方法删除某个key，返回true，如果删除失败，返回false。\n- clear()：map.clear() 清除所有成员，没有返回值\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器\n- values()：返回键值的遍历器\n- entries()：返回所有成员的遍历器\n- forEach()：遍历Map的所有成员\n```javascript\nconst map = new Map([\n  [\"foo\",1],\n  [\"bar\",2],\n])\nfor(let key of map.keys()){\n\tconsole.log(key); // foo bar\n}\nfor(let value of map.values()){\n\tconsole.log(value); // 1 2\n}\nfor(let items of map.entries()){\n\tconsole.log(items); // [\"foo\",1] [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n\tconsole.log(key,value); // foo 1 bar 2\n})\n```\n<a name=\"ZTsz5\"></a>\n### WeakMap\nWeakMap对象也是一组键值对的集合，其中的键是**弱引用**。**其键必须是对象，**原始数据类型不能作为key值，而值可以是任意的。<br />该对象也有以下几种方法：\n\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：删除某个键，返回true，如果删除失败，返回false。\n\n其clear() 方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。<br />**WeakMap的设计目的**：\n\n- 有时想在某个对象上存放一些数据，但是这会形成对于这个对象的引用。一旦不需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n- 而WeakMap的**键名所引用的对象都是弱引用**， 即**垃圾回收机制不将该引用考虑在内。**因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，**不用手动删除引用**。\n<a name=\"AtFqQ\"></a>\n### 总结\n\n- Map数据结构，类似于对象，也是键值对的集合，但是“键”的范围**不限于**字符串，各种类型的值（包括对象）都可以作为键。\n- WeakMap 结构与Map结构类似，也是用于生成键值对的集合。但是WeakMap**只接受对象作为键名**（null除外），不接受其他类型的值作为键名。**而且WeakMap的键名所指向的对象是弱引用，不计入垃圾回收机制。**\n<a name=\"QPbAT\"></a>\n## JS内置对象\n全局的对象（global objects）或称标准内置对象。即全局作用域中的对象，全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n<a name=\"GDmze\"></a>\n### 标准内置对象的分类\n\n1. 值属性：这些全局属性返回一个简单值，这些值没有自己的属性和方法。\n\n如：Infinity、NaN、undefined、null字面量。\n\n2. 函数属性：全局属性可以直接调用，不需要再调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n\n如：eval()、parseFloat()、parseInt()等。\n\n3. 基本对象：是定义或使用其他对象的基础。包括一般对象、函数对象和错误对象。\n\n如：Object、Function、Boolean、Symbol、Error等。\n\n4. 数字和日期对象：用来表示数字、日期和执行数学计算的对象。\n\n如：Number、Math、Date。\n\n5. 字符串：用来表示和操作字符串的对象。\n\n如：String、RegExp\n\n6. 可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。\n\n如：Array。\n\n7. 使用键的集合对象：这些集合对象在存储时会使用到键，支持按照插入顺序来迭代元素。\n\n如：Map、Set、WeakMap、WeakSet。\n\n8. 矢量集合：SIMD矢量集合中的数据会被组织为一个数据序列。\n\n如：SIMD等。\n\n9. 结构化数据：这些对象用来表示和操作结构化的缓冲区数据，或使用JSON编码的数据。\n\n如：JSON数据。\n\n10. 控制抽象对象。如：Promise、Generator等。\n11. 反射。如：Reflect、Proxy。\n12. 国际化：为了支持多语言处理而加入的ECMAScript的对象。\n\n如：Intl、Intl.Collator 等。\n\n13. WebAssembly\n14. 其他。如 arguments\n<a name=\"ydNG9\"></a>\n### 总结\n\n1. JS中的内置对象主要指的是在程序执行前存在全局作用域中的由JS定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。\n2. 一般经常用到的如 全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数 如 Date、Object 等，还有提供数学计算的单体内置对象如 Math对象等。\n<a name=\"XVr1I\"></a>\n## JS脚本延迟加载的方式\n\n- defer：异步加载，延迟执行（html加载完再执行）\n- async：异步加载，加载完立即执行（会阻塞html页面解析）\n- 动态创建DOM方式：对文档加载事件进行监听，当文档加载完后，再动态创建script标签来引入JS脚本。\n- setTimeout延迟方法：设置一个定时器来延迟加载JS脚本文件\n- 让JS最后加载：将JS脚本文件放在文档底部，来使JS脚本尽可能最后加载执行。\n<a name=\"SpWzB\"></a>\n## JS类数组对象\nJS类数组对象：一个拥有length属性和若干索引属性的对象。<br />和数组类似，但不能调用数组的方法。<br />常见的类数组对象有：\n\n- argument 和 DOM 方法的返回结果\n- 函数（因为含有length属性值，代表可接收的参数个数）\n\n类数组转换为数组的方法：\n\n1. 通过 call 调用数组的 slice 方法来实现转换\n```javascript\nArray.prototype.slice.call(arrayLike); \n```\n\n2. 通过call调用数组的splice方法来实现转换\n```javascript\nArray.prototype.splice.call(arrayLike,0);\n```\n\n3. 通过apply调用数组的 concat 方法来实现转换\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n4. 通过Array.from() 实现转换\n```javascript\nArray.from(arrayLike);\n```\n<a name=\"PPTXu\"></a>\n## 数组有哪些原生方法\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join()，其中join()可以指定转换为字符串时的分隔符\n- 数组尾部操作的方法：pop()和 push()，push() 方法可以传入多个参数\n- 数组首部操作的方法：shift() 删除和 unshift() 添加\n- 重排序的方法：reverse() 和 sort()，sort() 可传入一个函数进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置\n- 数组连接：concat() 返回拼接好的数组，不影响原数组。\n- 数组截取：splice()\n- 影响原数组特定项的索引的方法，indexOf()和 lastIndexOf() \n- 迭代方法：every()、some()、filter()、map()、forEach()方法\n- 数组归并方法：reduce()、reduceRight()方法\n<a name=\"w9O8P\"></a>\n## Promise.race() 应用场景\n> race() 和 all() 一样，接受的参数是一个每项都是Promise的数组，但是与all不同的是，当**最先执行完**的事件执行完后，就直接返回该promise对象的值。\n> 如果第一个promise对象状态变成resolved，则自身的状态就变成了resolved；反之，第一个promise变成rejected，则自身状态就会变成rejected。\n\n**Promise.race() 应用场景**：\n\n- http请求时，做超时判断时，设置一个定时器，当定时器时间到了时间就在页面提醒请求超时。\n```javascript\n// 请求某个图片资源\nfunction requestImg() {\n  var p = new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onload = function () {\n      resolve(img);\n    };\n    img.src = \"http://www.baidu.com/img/flexiable/logo/pc/result.png\";\n  });\n  return p;\n}\n// 延时函数，用于给请求计时\nfunction timeout() {\n  var p = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(\"图片请求操时\");\n    }, 5000);\n  });\n  return p;\n}\nPromise.race([requestImg(), timeout()])\n  .then(function (results) {\n    console.log(results);\n  })\n  .catch(function (reason) {\n    console.log(reason);\n  });\n```\n<a name=\"k94WT\"></a>\n## Promise.all() 应用场景\n> 它可以将多个promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功时返回一个**结构数组**，而失败时则返回**最先被reject失败状态的值。**\n\n**Promise.all() 中传入的是数组，返回的也是数组，并会进行映射，传入的Promise对象返回值是按照顺序在数组中排列的，但是注意他们执行的顺序并不是按照顺序的，除非可迭代对象为空。**\n> **注意：Promise.all 获得的成功结果的数组中的数据顺序和Promise.all()接收的数组顺序是一致的，这样当遇到多个请求并根据请求顺序获取和使用数据的场景，可以使用 Promise.all来解决。**\n\n<a name=\"CSPWq\"></a>\n## 使用requestAnimationFrame实现一个循环定时器\n```javascript\nfunction setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n  }\n}\ntimer = window.requestAnimationFrame(loop)\n\treturn timer\n}\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n```\n⾸先 requestAnimationFrame ⾃带函数节流功能，基本可以保证在 16.6 毫秒内只执⾏⼀次（不掉<br />帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u191f528d\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: JS高频面试题 </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: JS</span></p><p id=\"u0c591b02\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-13</span></p><p id=\"uaa3b820d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-13</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: JS</span></p><p id=\"u15405a15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F7275569-78f8b42bb54aec85.jpg&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266536&amp;t=e242d8866a11e11ce85f7bd2674b4d7b</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h2 id=\"ZolgE\"><span class=\"ne-text\">apply、call、bind的区别</span></h2><ul class=\"ne-ul\"><li id=\"u6bdab0b4\"><span class=\"ne-text\">三者都可以改变函数的this对象指向</span></li><li id=\"udff3d079\"><span class=\"ne-text\">三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window</span></li><li id=\"uc34d297e\"><span class=\"ne-text\">三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</span></li><li id=\"uf1f6cdeb\"><span class=\"ne-text\">bind是返回绑定this之后的函数，需要手动执行函数，apply、call 则是立即执行</span></li></ul><h2 id=\"yuKWf\"><span class=\"ne-text\">new操作符的实现原理</span></h2><p id=\"u2e39dccc\" class=\"ne-p\"><span class=\"ne-text\">new操作符的执⾏过程：</span></p><p id=\"u5fc8def3\" class=\"ne-p\"><span class=\"ne-text\">（1）⾸先创建了⼀个新的空对象</span></p><p id=\"u91b99bd5\" class=\"ne-p\"><span class=\"ne-text\">（2）设置原型，将对象的原型设置为函数的 prototype 对象。</span></p><p id=\"uc08c9e71\" class=\"ne-p\"><span class=\"ne-text\">（3）让函数的 this 指向这个对象，执⾏构造函数的代码（为这个新对象添加属性）</span></p><p id=\"u5dd9eefa\" class=\"ne-p\"><span class=\"ne-text\">（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引⽤类型，就返回这个引⽤类</span></p><p id=\"u9e775328\" class=\"ne-p\"><span class=\"ne-text\">型的对象。</span></p><pre data-language=\"javascript\" id=\"HxWQB\" class=\"ne-codeblock language-javascript\">function objectFactory() {\nlet newObject = null;\nlet constructor = Array.prototype.shift.call(arguments);\nlet result = null;\n// 判断参数是否是⼀个函数\nif (typeof constructor !== &quot;function&quot;) {\nconsole.error(&quot;type error&quot;);\nreturn;\n}\n// 新建⼀个空对象，对象的原型为构造函数的 prototype 对象\nnewObject = Object.create(constructor.prototype);\n// 将 this 指向新建对象，并执⾏函数\nresult = constructor.apply(newObject, arguments);\n// 判断返回对象\nlet flag = result &amp;&amp; (typeof result === &quot;object&quot; || typeof result ===\n&quot;function&quot;);\n// 判断返回结果\nreturn flag ? result : newObject;\n}\n// 使⽤⽅法\nobjectFactory(构造函数, 初始化参数);</pre><h2 id=\"EuRYC\"><span class=\"ne-text\">map()和foreach()的区别</span></h2><h3 id=\"ogOb0\"><span class=\"ne-text\">简洁回答</span></h3><p id=\"u7a3aea33\" class=\"ne-p\"><span class=\"ne-text\">都是⽤来遍历数组的，两者区别如下：</span></p><ul class=\"ne-ul\"><li id=\"u24f06412\"><span class=\"ne-text\">forEach()⽅法会针对每⼀个元素执⾏提供的函数，对数据的操作会改变原数组，该⽅法没有返回</span></li></ul><p id=\"uaf7ac181\" class=\"ne-p\"><span class=\"ne-text\">值；</span></p><ul class=\"ne-ul\"><li id=\"u25e2e9ad\"><span class=\"ne-text\">map()⽅法不会改变原数组的值，返回⼀个新数组，新数组中的值为原数组调⽤函数处理之后的</span></li></ul><p id=\"u4eff17df\" class=\"ne-p\"><span class=\"ne-text\">值；</span></p><h3 id=\"LgnBg\"><span class=\"ne-text\">相同点</span></h3><ol class=\"ne-ol\"><li id=\"uc81910d8\"><span class=\"ne-text\">都是循环遍历数组的每一项</span></li><li id=\"uc92e479b\"><span class=\"ne-text\">都相当于封装好的单层for循环，三个值都相同</span></li><li id=\"u5ede89bf\"><span class=\"ne-text\">每次执行匿名函数都支持三个参数，参数分别为item（当前每一项）、index（索引值）、arr（原数组）</span></li><li id=\"ua6b771b6\"><span class=\"ne-text\">匿名函数中的this都是指向window</span></li><li id=\"uc61e0fa0\"><span class=\"ne-text\">只能遍历数组</span></li></ol><h3 id=\"gJBw2\"><span class=\"ne-text\">不同点</span></h3><ul class=\"ne-ul\"><li id=\"uaa3c5be7\"><span class=\"ne-text\">map()会分配内存空间存储新数组并有返回值，forEach()没有返回值</span></li><li id=\"uc5dcb627\"><span class=\"ne-text\">forEach()允许calllback更改原始数组的元素，map()返回新的数组，map()不会对空数组进行检测</span></li><li id=\"ub3699f29\"><span class=\"ne-text\">forEach()遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。</span></li><li id=\"uf52ca49a\"><span class=\"ne-text\">map遍历后的数组通常会生成一个新的数组，新数组的值发生变化，当前遍历的数组值不会变化。</span></li><li id=\"ua05c9eab\"><span class=\"ne-text\">map的速度大于forEach</span></li></ul><h3 id=\"qMAb9\"><span class=\"ne-text\">使用场景</span></h3><ol class=\"ne-ol\"><li id=\"ua4984c5a\"><span class=\"ne-text\">forEach()适用于你并不打算改变数据的时候</span></li><li id=\"u1faeb043\"><span class=\"ne-text\">map()适用于你要改变数据的时候。不仅在于它更快，而且返回一个新数组。（因此可以使用复合（composition）（map(),filter(),reduce()等组合使用））</span></li></ol><p id=\"ub47a1f9b\" class=\"ne-p\"><span class=\"ne-text\">性能上来说，for&gt;forEach&gt;map。</span></p><h2 id=\"fNTcb\"><span class=\"ne-text\">Symbol</span></h2><ol class=\"ne-ol\"><li id=\"u83c42b6d\"><span class=\"ne-text\">什么是Symbol？</span></li></ol><p id=\"u4ba1b7d7\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">Symbol是ES6新增的一种数据类型，被划分为</span><strong><span class=\"ne-text\">基本数据类型</span></strong><span class=\"ne-text\">。不能用 </span><code class=\"ne-code\"><span class=\"ne-text\">new</span></code><span class=\"ne-text\">。</span></p><ul class=\"ne-ul\"><li id=\"ua21ebc77\"><span class=\"ne-text\">基本数据类型：字符串、数值、布尔、undefined、null、Symbol。</span></li><li id=\"u37091692\"><span class=\"ne-text\">引用数据类型：Object</span></li></ul><ol start=\"2\" class=\"ne-ol\"><li id=\"ua5c50a5a\"><span class=\"ne-text\">作用</span></li></ol><p id=\"u07e440cd\" class=\"ne-p\"><span class=\"ne-text\">用来表示一个独一无二的值。</span></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u8323c438\"><span class=\"ne-text\">格式：</span><code class=\"ne-code\"><span class=\"ne-text\">let xxx = Symbol('标识字符串')</span></code></li><li id=\"u2c83ce55\"><span class=\"ne-text\">为什么需要Symbol？</span></li></ol><p id=\"u1a3e155d\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">为了避免第三方框框架的同名属性被覆盖。</span></p><div class=\"ne-quote\" style=\"margin-left: 2em\"><p id=\"ubf547b48\" class=\"ne-p\"><span class=\"ne-text\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></p></div><ol start=\"5\" class=\"ne-ol\"><li id=\"u791b2d4b\"><span class=\"ne-text\">如果区分Symbol？</span></li></ol><p id=\"u99726587\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">在通过Symbol生成一个独一无二的值时，可以设置一个标记</span></p><p id=\"u59dd8786\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">这个标记仅仅用于区分，没有其他任何意义。</span></p><ol start=\"6\" class=\"ne-ol\"><li id=\"u8d6baf17\"><span class=\"ne-text\">如果特殊情况需要读取这个标记，</span></li></ol><ul class=\"ne-ul\"><li id=\"ud73ce616\"><span class=\"ne-text\">Symbol类型可以转化为boolean或字符串，转化为字符串时前面会加上Symbol(wxy)，不方便</span></li><li id=\"ub5657a7d\"><span class=\"ne-text\">可以直接通过description属性获取Symbol函数的字符串标识参数</span></li></ul><ol start=\"7\" class=\"ne-ol\"><li id=\"u76de8cd9\"><span class=\"ne-text\">使用Symbol类型作为属性名</span></li></ol><div class=\"ne-quote\" style=\"margin-left: 2em\"><p id=\"u84c1fe0a\" class=\"ne-p\"><span class=\"ne-text\">对象的属性要么是字符串，要么是Symbol类型</span></p></div><ul class=\"ne-ul\"><li id=\"u5f898a70\"><span class=\"ne-text\">默认是字符串，所以不加</span><code class=\"ne-code\"><span class=\"ne-text\">&quot;&quot;</span></code><span class=\"ne-text\">也可以；如果需要类型为Symbol，需要使用</span><code class=\"ne-code\"><span class=\"ne-text\">[]</span></code><span class=\"ne-text\">。</span></li><li id=\"u26b3983a\"><span class=\"ne-text\">不能用</span><code class=\"ne-code\"><span class=\"ne-text\">.</span></code><span class=\"ne-text\">来访问，因为点运算符后面总是字符串。</span></li><li id=\"u8648d662\"><span class=\"ne-text\">Symbol值作为属性名时，该属性还是公开属性，不是私有属性。</span></li></ul><ol start=\"8\" class=\"ne-ol\"><li id=\"uad898f22\"><span class=\"ne-text\">例子：</span></li></ol><pre data-language=\"javascript\" id=\"KbTRx\" class=\"ne-codeblock language-javascript\">//后面的括号可以给symbol做上标记便于识别\nlet name = Symbol(&quot;name&quot;);\nlet say = Symbol(&quot;say&quot;);\nlet obj = {\n    //如果想 使用变量作为对象属性的名称，必须加上中括号，.运算符后面跟着的都是字符串\n    [name]: &quot;lnj&quot;,\n    [say]: function() {\n        console.log(&quot;say&quot;);\n    },\n    // name: &quot;rose&quot;,\n};\n// obj.name = &quot;it6661&quot;;\nobj[Symbol(&quot;name&quot;)] = &quot;it666&quot;;\nconsole.log(obj);\nconsole.log(Reflect.ownKeys(obj));</pre><div class=\"ne-quote\"><p id=\"uc4e8b106\" class=\"ne-p\"><span class=\"ne-text\">{</span></p><p id=\"ub2bf8ae8\" class=\"ne-p\"><span class=\"ne-text\">  [Symbol(name)]: 'lnj',</span></p><p id=\"u8a53f6f3\" class=\"ne-p\"><span class=\"ne-text\">  [Symbol(say)]: [Function: [say]],</span></p><p id=\"u8bf87a90\" class=\"ne-p\"><span class=\"ne-text\">  [Symbol(name)]: 'it666'</span></p><p id=\"udf34f821\" class=\"ne-p\"><span class=\"ne-text\">}</span></p><p id=\"uea186e60\" class=\"ne-p\"><span class=\"ne-text\">[ Symbol(name), Symbol(say), Symbol(name) ]</span></p></div><p id=\"u389f2d31\" class=\"ne-p\"><span class=\"ne-text\">没有覆盖原来的name，因为都是独一无二的，那么就默认创建一个name的属性。</span></p><h3 id=\"PKuqe\"><span class=\"ne-text\">注意点</span></h3><ol class=\"ne-ol\"><li id=\"ud0d58967\"><span class=\"ne-text\">Symbol是基本数据类型，不能加new</span></li><li id=\"u776509e4\"><span class=\"ne-text\">后面括号可以传入一个字符串，只是一个标记，方便阅读，没有任何意义。</span></li><li id=\"u7086a86c\"><span class=\"ne-text\">类型转化的时候，不可转化为数值，只能转化为字符串和布尔值。</span></li></ol><pre data-language=\"javascript\" id=\"cMRkp\" class=\"ne-codeblock language-javascript\">console.log(String(name));\nconsole.log(Boolean(name));\nconsole.log(Number(name)); // Cannot convert a Symbol value to a number</pre><ol start=\"4\" class=\"ne-ol\"><li id=\"u3fd16d74\"><span class=\"ne-text\">不能做任何运算</span></li></ol><pre data-language=\"javascript\" id=\"qAMCc\" class=\"ne-codeblock language-javascript\">let name=Symbol('name');\nconsole.log(name+111)\nconsole.log(name+'ccc')\n//全部报错 Cannot convert a Symbol value to a number</pre><ol start=\"5\" class=\"ne-ol\"><li id=\"uce6a6007\"><span class=\"ne-text\">Symbol生成的值作为属性或方法的时候，一定要保存下来，否则后续无法使用。</span></li></ol><pre data-language=\"javascript\" id=\"v77MM\" class=\"ne-codeblock language-javascript\">let name=Symbol('name');\nlet obj={\n  // name:'lnj',\n    [Symbol('name')]:'lbj'\n}\nconsole.log(obj.name);  //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个</pre><p id=\"u7464468f\" class=\"ne-p\"><span class=\"ne-text\">应该改为如下：</span></p><pre data-language=\"javascript\" id=\"kKMvX\" class=\"ne-codeblock language-javascript\">let name = Symbol(&quot;name&quot;);\nlet obj = {\n    [name]: &quot;lnj1&quot;,\n    // [Symbol(&quot;name&quot;)]: &quot;lbj&quot;,\n};\n// console.log(obj.name); //访问不到，因为  [Symbol('name')]又是一个新的值，和上面的name不是同一个\nconsole.log(Reflect.ownKeys(obj));\nconsole.log(obj[name]);</pre><div class=\"ne-quote\"><p id=\"ueee19c8f\" class=\"ne-p\"><span class=\"ne-text\">[ Symbol(name) ]</span></p><p id=\"u21bead9f\" class=\"ne-p\"><span class=\"ne-text\">lnj1</span></p></div><ol start=\"6\" class=\"ne-ol\"><li id=\"u7a057185\"><span class=\"ne-text\">for循环遍历对象时无法遍历出Symbol的属性和方法</span></li></ol><pre data-language=\"javascript\" id=\"ikBuz\" class=\"ne-codeblock language-javascript\">let name=Symbol('name');\nlet obj={\n  [name]:'lnj',\n    age:12,\n    teacher:'wyx'\n}\nfor(let key in obj){\n    console.log(key)   //只能打印出age和teacher\n}\n//这个方法可以单独取出Symbol(name)\nconsole.log(Object.getOwnPropertySymbols(obj))</pre><h3 id=\"bRIp6\"><span class=\"ne-text\">Symbol的应用</span></h3><ol class=\"ne-ol\"><li id=\"u4e1ec221\"><span class=\"ne-text\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></li><li id=\"ub601210a\"><span class=\"ne-text\">消除魔术字符串</span></li></ol><div class=\"ne-quote\" style=\"margin-left: 2em\"><p id=\"u8d0c3fa6\" class=\"ne-p\"><span class=\"ne-text\">魔术字符串：在代码中多次出现，与代码形成强耦合的某一个具体的字符串或数值。风格良好的代码应该尽量消除魔术字符串，改由含义清晰的变量代替。‘</span></p></div><pre data-language=\"javascript\" id=\"GChhH\" class=\"ne-codeblock language-javascript\">const gender = {\n   //这样就说明man就是一个独一无二的值，不用再man:'man'   \n    man: Symbol(),\n    woman: Symbol(),\n}\nfunction isMan(gender) {\n    switch (gender) {\n        case gender.man:\n            console.log('男性');\n            break;\n        case gender.woman:\n            console.log('女性');\n            break\n    }\n}\nisMan(gender.man)  //男性</pre><ol start=\"3\" class=\"ne-ol\"><li id=\"ud9b0e442\"><span class=\"ne-text\">为对象定义一些非私有的、但又希望只用于内部的方法。</span></li></ol><div class=\"ne-quote\" style=\"margin-left: 2em\"><p id=\"u375b8621\" class=\"ne-p\"><span class=\"ne-text\">由于以Symbol值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</span></p><p id=\"u91f2d56b\" class=\"ne-p\"><span class=\"ne-text\">注意：Symbol并不能实现真正的私有变量的效果，只是不能通过常规的遍历方法拿到Symbol类型的属性而已。</span><strong><span class=\"ne-text\"></span></strong></p></div><p id=\"u47a54e0b\" class=\"ne-p\"><strong><span class=\"ne-text\">对象的遍历方法</span></strong><span class=\"ne-text\">：</span></p><ul class=\"ne-ul\"><li id=\"ue9a3f0f8\"><span class=\"ne-text\">for(let xx in obj)：i代表key</span></li><li id=\"u0b6ff3b5\"><span class=\"ne-text\">for(let xx of obj)：不是自带的</span></li><li id=\"u7e08b740\"><span class=\"ne-text\">Object.keys(obj)：返回包含的key的数组</span></li><li id=\"ua3870bab\"><span class=\"ne-text\">Object.values(obj)：返回包含value的数组</span></li><li id=\"ue8b94391\"><span class=\"ne-text\">Object.getOwnPropertyNames()：返回包含key的数组</span></li></ul><p id=\"uff9d61bc\" class=\"ne-p\"><span class=\"ne-text\">上述的所有方法都遍历不到Symbol类型的（注意：是遍历时取不到Symbol，并不是我们访问不到对象的Symbol类型）</span></p><p id=\"u39a24844\" class=\"ne-p\"><strong><span class=\"ne-text\">可以遍历到Symbol的方法：</span></strong></p><ul class=\"ne-ul\"><li id=\"ue6812e4e\"><strong><span class=\"ne-text\">Object.getOwnPropertySymbols()</span></strong><span class=\"ne-text\">：返回对象中只包含Symbol类型key的数组</span></li><li id=\"u8d1d2561\"><strong><span class=\"ne-text\">Reflect.ownKeys()</span></strong><span class=\"ne-text\">：返回对象中所有类型key的数组（包含Symbol）</span></li></ul><pre data-language=\"javascript\" id=\"b3zmv\" class=\"ne-codeblock language-javascript\">let _password = Symbol('password')\nconst obj = {\n    name: '小明',\n    gender: 'male',\n    [_password]: '11038'\n}\nfor (let item in obj) {\n    console.log(item);\n}\nconsole.log(Object.keys(obj));\nconsole.log(Object.values(obj));\nconsole.log(Object.getOwnPropertyNames(obj));\nconsole.log(Object.getOwnPropertySymbols(obj));\nconsole.log(Reflect.ownKeys(obj))\n// 输出11038，所以还是可以直接访问到symbol类型的属性，所以symbol并不能真正实现私有变量的设定，所以一般只用于定义一些非私有的、但又希望只用于内部的方法\nconsole.log(obj[_password]);</pre><p id=\"ub6d28c4f\" class=\"ne-p\"><span class=\"ne-text\">输出如下：</span></p><p id=\"u6f5cddec\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2324645/1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png\" width=\"275\" id=\"u196ca470\" class=\"ne-image\"></p><h3 id=\"wAmPW\"><span class=\"ne-text\">Symbol自带的方法</span></h3><h4 id=\"ZBbKp\"><span class=\"ne-text\">1. </span><code class=\"ne-code\"><span class=\"ne-text\">Symbol.for()</span></code></h4><p id=\"u8543ee7e\" class=\"ne-p\"><span class=\"ne-text\" style=\"text-decoration: underline\">重新使用同一个Symbol值。</span></p><p id=\"ue8a74dbc\" class=\"ne-p\"><span class=\"ne-text\">接收一个字符串作为参数，搜索是否有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建一个以该字符串为名称的Symbol值，并将其注册到全局。</span></p><pre data-language=\"javascript\" id=\"d4Ilt\" class=\"ne-codeblock language-javascript\">let s1 = Symbol.for('foo');\nlet s2 = Symbol.for('foo');\n\ns1 === s2 // true</pre><h4 id=\"ezFW0\"><span class=\"ne-text\">2. </span><code class=\"ne-code\"><span class=\"ne-text\">Symbol.keyFor()</span></code></h4><p id=\"ue8538d75\" class=\"ne-p\"><span class=\"ne-text\" style=\"text-decoration: underline\">返回一个已登记的Symbol类型值的</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"text-decoration: underline\">key</span></code><span class=\"ne-text\" style=\"text-decoration: underline\">。</span></p><p id=\"ua831422d\" class=\"ne-p\"><span class=\"ne-text\">由于</span><code class=\"ne-code\"><span class=\"ne-text\">Symbol()</span></code><span class=\"ne-text\">写法没有登记机制，所以每次调用都会返回一个不同的值。</span></p><pre data-language=\"javascript\" id=\"WTdtT\" class=\"ne-codeblock language-javascript\">let s1 = Symbol.for(&quot;foo&quot;);\nSymbol.keyFor(s1) // &quot;foo&quot;\n\nlet s2 = Symbol(&quot;foo&quot;);\nSymbol.keyFor(s2) // undefined</pre><h2 id=\"hZIrL\"><span class=\"ne-text\">Map和Object区别</span></h2><table id=\"gSZLR\" class=\"ne-table\" style=\"width: 579px\"><tbody><tr style=\"height: 33px\"><td width=\"193\"></td><td width=\"193\"><p id=\"u0c10bd72\" class=\"ne-p\"><span class=\"ne-text\">Map</span></p></td><td width=\"193\"><p id=\"u9adedb96\" class=\"ne-p\"><span class=\"ne-text\">Object</span></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"u29c176ec\" class=\"ne-p\"><span class=\"ne-text\">意外的键</span></p></td><td width=\"193\"><p id=\"u3a8a62e7\" class=\"ne-p\"><span class=\"ne-text\">Map默认情况不包含任何键，只包含显式插入的键</span></p></td><td width=\"193\"><p id=\"ucac95cb2\" class=\"ne-p\"><span class=\"ne-text\">Object有一个原型，原型链上的键名有可能和自己在对象上设置的键名有冲突</span></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"u1b8e415c\" class=\"ne-p\"><span class=\"ne-text\">键的类型</span></p></td><td width=\"193\"><p id=\"u594b9218\" class=\"ne-p\"><span class=\"ne-text\">Map的键可以是</span><strong><span class=\"ne-text\">任意值</span></strong><span class=\"ne-text\">，包括函数、对象或任意基本类型</span></p></td><td width=\"193\"><p id=\"u71c9a331\" class=\"ne-p\"><span class=\"ne-text\">Object的键必须是</span><strong><span class=\"ne-text\">String或Symbol</span></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"ua43fd71e\" class=\"ne-p\"><span class=\"ne-text\">键的顺序</span></p></td><td width=\"193\"><p id=\"u5ebbb823\" class=\"ne-p\"><span class=\"ne-text\">Map中的</span><strong><span class=\"ne-text\">key</span></strong><span class=\"ne-text\">是</span><strong><span class=\"ne-text\">有序</span></strong><span class=\"ne-text\">的。因此，当迭代的时候，Map对象以</span><strong><span class=\"ne-text\">插入的顺序</span></strong><span class=\"ne-text\">返回键值</span></p></td><td width=\"193\"><p id=\"u7f053dcb\" class=\"ne-p\"><span class=\"ne-text\">Object的键是</span><strong><span class=\"ne-text\">无序</span></strong><span class=\"ne-text\">的</span></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"u1d5cefa1\" class=\"ne-p\"><span class=\"ne-text\">Size</span></p></td><td width=\"193\"><p id=\"uaebcc5cb\" class=\"ne-p\"><span class=\"ne-text\">Map的键值对个数可以轻易地通过</span><strong><span class=\"ne-text\">size</span></strong><span class=\"ne-text\">属性获取</span></p></td><td width=\"193\"><p id=\"u423d838d\" class=\"ne-p\"><span class=\"ne-text\">Object建值对个数只能</span><strong><span class=\"ne-text\">手动计算</span></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"u2e3c7b42\" class=\"ne-p\"><span class=\"ne-text\">迭代</span></p></td><td width=\"193\"><p id=\"u8d87dd99\" class=\"ne-p\"><span class=\"ne-text\">Map是iterable的，所以可以</span><strong><span class=\"ne-text\">直接被迭代</span></strong></p></td><td width=\"193\"><p id=\"ua3ad2d62\" class=\"ne-p\"><span class=\"ne-text\">迭代Object需要以某种方式</span><strong><span class=\"ne-text\">获取它的键然后才能迭代</span></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"193\"><p id=\"u66e096f9\" class=\"ne-p\"><span class=\"ne-text\">性能</span></p></td><td width=\"193\"><p id=\"uc07f4794\" class=\"ne-p\"><span class=\"ne-text\">在频繁增删键值对的场景下表现更好</span></p></td><td width=\"193\"><p id=\"ueaeee7be\" class=\"ne-p\"><span class=\"ne-text\">在频繁添加和删除键值对的场景下</span><strong><span class=\"ne-text\">未做出优化</span></strong></p></td></tr></tbody></table><h2 id=\"N2G8K\"><span class=\"ne-text\">Map和WeakMap区别</span></h2><h3 id=\"jjMeF\"><span class=\"ne-text\">Map </span></h3><p id=\"u69b54603\" class=\"ne-p\"><span class=\"ne-text\">map本质上是键值对的集合，但是普通Object的中的键值只能是字符串或Symbol。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</span></p><p id=\"u6571a952\" class=\"ne-p\"><span class=\"ne-text\">实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</span></p><pre data-language=\"javascript\" id=\"Czmyw\" class=\"ne-codeblock language-javascript\">const map = [\n  [&quot;name&quot;,&quot;张三&quot;],\n  [&quot;age&quot;,18],\n]</pre><p id=\"u5757c0e2\" class=\"ne-p\"><span class=\"ne-text\">Map数据结构有以下操作方法：</span></p><ul class=\"ne-ul\"><li id=\"u540be3ee\"><span class=\"ne-text\">size：</span><code class=\"ne-code\"><span class=\"ne-text\">map.size()</span></code><span class=\"ne-text\">返回Map结构的成员总数</span></li><li id=\"u8aef7ad9\"><span class=\"ne-text\">set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li id=\"u6eaf2244\"><span class=\"ne-text\">get(key)：该方法读取key对应的键值，如果找不到key，返回undefined</span></li><li id=\"ue2d3a94e\"><span class=\"ne-text\">has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li id=\"uafb3b0c1\"><span class=\"ne-text\">delete(key)：该方法删除某个key，返回true，如果删除失败，返回false。</span></li><li id=\"ubef71f69\"><span class=\"ne-text\">clear()：map.clear() 清除所有成员，没有返回值</span></li></ul><p id=\"u6fedadfb\" class=\"ne-p\"><span class=\"ne-text\">Map结构原生提供是三个遍历器生成函数和一个遍历方法</span></p><ul class=\"ne-ul\"><li id=\"uddc7d765\"><span class=\"ne-text\">keys()：返回键名的遍历器</span></li><li id=\"uc4c6bf13\"><span class=\"ne-text\">values()：返回键值的遍历器</span></li><li id=\"uaa8f5f7c\"><span class=\"ne-text\">entries()：返回所有成员的遍历器</span></li><li id=\"ua1503e62\"><span class=\"ne-text\">forEach()：遍历Map的所有成员</span></li></ul><pre data-language=\"javascript\" id=\"ZmVp1\" class=\"ne-codeblock language-javascript\">const map = new Map([\n  [&quot;foo&quot;,1],\n  [&quot;bar&quot;,2],\n])\nfor(let key of map.keys()){\n\tconsole.log(key); // foo bar\n}\nfor(let value of map.values()){\n\tconsole.log(value); // 1 2\n}\nfor(let items of map.entries()){\n\tconsole.log(items); // [&quot;foo&quot;,1] [&quot;bar&quot;,2]\n}\nmap.forEach( (value,key,map) =&gt; {\n\tconsole.log(key,value); // foo 1 bar 2\n})</pre><h3 id=\"ZTsz5\"><span class=\"ne-text\">WeakMap</span></h3><p id=\"ud97cbf18\" class=\"ne-p\"><span class=\"ne-text\">WeakMap对象也是一组键值对的集合，其中的键是</span><strong><span class=\"ne-text\">弱引用</span></strong><span class=\"ne-text\">。</span><strong><span class=\"ne-text\">其键必须是对象，</span></strong><span class=\"ne-text\">原始数据类型不能作为key值，而值可以是任意的。</span></p><p id=\"uf793b7af\" class=\"ne-p\"><span class=\"ne-text\">该对象也有以下几种方法：</span></p><ul class=\"ne-ul\"><li id=\"u3a5a516c\"><strong><span class=\"ne-text\">set(key,value)</span></strong><span class=\"ne-text\">：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li id=\"uc8a73b30\"><strong><span class=\"ne-text\">get(key)</span></strong><span class=\"ne-text\">：读取key对应的键值，如果找不到key，返回undefined。</span></li><li id=\"uce9ff6f7\"><strong><span class=\"ne-text\">has(key)</span></strong><span class=\"ne-text\">：返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li id=\"u0cefdb13\"><strong><span class=\"ne-text\">delete(key)</span></strong><span class=\"ne-text\">：删除某个键，返回true，如果删除失败，返回false。</span></li></ul><p id=\"u3be716ed\" class=\"ne-p\"><span class=\"ne-text\">其clear() 方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</span></p><p id=\"u66795184\" class=\"ne-p\"><strong><span class=\"ne-text\">WeakMap的设计目的</span></strong><span class=\"ne-text\">：</span></p><ul class=\"ne-ul\"><li id=\"u29bbb081\"><span class=\"ne-text\">有时想在某个对象上存放一些数据，但是这会形成对于这个对象的引用。一旦不需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</span></li><li id=\"uea0d4d3a\"><span class=\"ne-text\">而WeakMap的</span><strong><span class=\"ne-text\">键名所引用的对象都是弱引用</span></strong><span class=\"ne-text\">， 即</span><strong><span class=\"ne-text\">垃圾回收机制不将该引用考虑在内。</span></strong><span class=\"ne-text\">因此，</span><span class=\"ne-text\" style=\"text-decoration: underline\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，</span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">不用手动删除引用</span></strong><span class=\"ne-text\" style=\"text-decoration: underline\">。</span></li></ul><h3 id=\"AtFqQ\"><span class=\"ne-text\">总结</span></h3><ul class=\"ne-ul\"><li id=\"udead43b6\"><span class=\"ne-text\">Map数据结构，类似于对象，也是键值对的集合，但是“键”的范围</span><strong><span class=\"ne-text\">不限于</span></strong><span class=\"ne-text\">字符串，各种类型的值（包括对象）都可以作为键。</span></li><li id=\"u0a920e6a\"><span class=\"ne-text\">WeakMap 结构与Map结构类似，也是用于生成键值对的集合。但是WeakMap</span><strong><span class=\"ne-text\">只接受对象作为键名</span></strong><span class=\"ne-text\">（null除外），不接受其他类型的值作为键名。</span><strong><span class=\"ne-text\">而且WeakMap的键名所指向的对象是弱引用，不计入垃圾回收机制。</span></strong></li></ul><h2 id=\"QPbAT\"><span class=\"ne-text\">JS内置对象</span></h2><p id=\"u68107cff\" class=\"ne-p\"><span class=\"ne-text\">全局的对象（global objects）或称标准内置对象。即全局作用域中的对象，全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</span></p><h3 id=\"GDmze\"><span class=\"ne-text\">标准内置对象的分类</span></h3><ol class=\"ne-ol\"><li id=\"uc23d6b97\"><span class=\"ne-text\">值属性：这些全局属性返回一个简单值，这些值没有自己的属性和方法。</span></li></ol><p id=\"u9f4efac8\" class=\"ne-p\"><span class=\"ne-text\">如：Infinity、NaN、undefined、null字面量。</span></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u86e9fbc1\"><span class=\"ne-text\">函数属性：全局属性可以直接调用，不需要再调用时指定所属对象，执行结束后会将结果直接返回给调用者。</span></li></ol><p id=\"u624d0258\" class=\"ne-p\"><span class=\"ne-text\">如：eval()、parseFloat()、parseInt()等。</span></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u55a99a97\"><span class=\"ne-text\">基本对象：是定义或使用其他对象的基础。包括一般对象、函数对象和错误对象。</span></li></ol><p id=\"uf7e7e006\" class=\"ne-p\"><span class=\"ne-text\">如：Object、Function、Boolean、Symbol、Error等。</span></p><ol start=\"4\" class=\"ne-ol\"><li id=\"u23ee3e5a\"><span class=\"ne-text\">数字和日期对象：用来表示数字、日期和执行数学计算的对象。</span></li></ol><p id=\"u5c0b00b1\" class=\"ne-p\"><span class=\"ne-text\">如：Number、Math、Date。</span></p><ol start=\"5\" class=\"ne-ol\"><li id=\"ud3a20997\"><span class=\"ne-text\">字符串：用来表示和操作字符串的对象。</span></li></ol><p id=\"u45692a13\" class=\"ne-p\"><span class=\"ne-text\">如：String、RegExp</span></p><ol start=\"6\" class=\"ne-ol\"><li id=\"u773443c8\"><span class=\"ne-text\">可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。</span></li></ol><p id=\"u3a8889c1\" class=\"ne-p\"><span class=\"ne-text\">如：Array。</span></p><ol start=\"7\" class=\"ne-ol\"><li id=\"u78d2bcc8\"><span class=\"ne-text\">使用键的集合对象：这些集合对象在存储时会使用到键，支持按照插入顺序来迭代元素。</span></li></ol><p id=\"uab399f02\" class=\"ne-p\"><span class=\"ne-text\">如：Map、Set、WeakMap、WeakSet。</span></p><ol start=\"8\" class=\"ne-ol\"><li id=\"u569a8dea\"><span class=\"ne-text\">矢量集合：SIMD矢量集合中的数据会被组织为一个数据序列。</span></li></ol><p id=\"uc81d90d7\" class=\"ne-p\"><span class=\"ne-text\">如：SIMD等。</span></p><ol start=\"9\" class=\"ne-ol\"><li id=\"ua7bdbc95\"><span class=\"ne-text\">结构化数据：这些对象用来表示和操作结构化的缓冲区数据，或使用JSON编码的数据。</span></li></ol><p id=\"u99ac3828\" class=\"ne-p\"><span class=\"ne-text\">如：JSON数据。</span></p><ol start=\"10\" class=\"ne-ol\"><li id=\"u0a56068d\"><span class=\"ne-text\">控制抽象对象。如：Promise、Generator等。</span></li><li id=\"u68c0891a\"><span class=\"ne-text\">反射。如：Reflect、Proxy。</span></li><li id=\"u53acdda4\"><span class=\"ne-text\">国际化：为了支持多语言处理而加入的ECMAScript的对象。</span></li></ol><p id=\"u1147f191\" class=\"ne-p\"><span class=\"ne-text\">如：Intl、Intl.Collator 等。</span></p><ol start=\"13\" class=\"ne-ol\"><li id=\"u6688626c\"><span class=\"ne-text\">WebAssembly</span></li><li id=\"u01e56467\"><span class=\"ne-text\">其他。如 arguments</span></li></ol><h3 id=\"ydNG9\"><span class=\"ne-text\">总结</span></h3><ol class=\"ne-ol\"><li id=\"u78c1cefb\"><span class=\"ne-text\">JS中的内置对象主要指的是在程序执行前存在全局作用域中的由JS定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。</span></li><li id=\"uc1b624a6\"><span class=\"ne-text\">一般经常用到的如 全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数 如 Date、Object 等，还有提供数学计算的单体内置对象如 Math对象等。</span></li></ol><h2 id=\"XVr1I\"><span class=\"ne-text\">JS脚本延迟加载的方式</span></h2><ul class=\"ne-ul\"><li id=\"uf1970c6a\"><span class=\"ne-text\">defer：异步加载，延迟执行（html加载完再执行）</span></li><li id=\"ue03bccd5\"><span class=\"ne-text\">async：异步加载，加载完立即执行（会阻塞html页面解析）</span></li><li id=\"u44c528ce\"><span class=\"ne-text\">动态创建DOM方式：对文档加载事件进行监听，当文档加载完后，再动态创建script标签来引入JS脚本。</span></li><li id=\"u9d1c9e9e\"><span class=\"ne-text\">setTimeout延迟方法：设置一个定时器来延迟加载JS脚本文件</span></li><li id=\"ua1acb99e\"><span class=\"ne-text\">让JS最后加载：将JS脚本文件放在文档底部，来使JS脚本尽可能最后加载执行。</span></li></ul><h2 id=\"SpWzB\"><span class=\"ne-text\">JS类数组对象</span></h2><p id=\"u21f2a8c0\" class=\"ne-p\"><span class=\"ne-text\">JS类数组对象：一个拥有length属性和若干索引属性的对象。</span></p><p id=\"u082b64d5\" class=\"ne-p\"><span class=\"ne-text\">和数组类似，但不能调用数组的方法。</span></p><p id=\"u6f2cdedf\" class=\"ne-p\"><span class=\"ne-text\">常见的类数组对象有：</span></p><ul class=\"ne-ul\"><li id=\"u699ad047\"><span class=\"ne-text\">argument 和 DOM 方法的返回结果</span></li><li id=\"uc035f43d\"><span class=\"ne-text\">函数（因为含有length属性值，代表可接收的参数个数）</span></li></ul><p id=\"ucda206b9\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u46f25c1e\" class=\"ne-p\"><span class=\"ne-text\">类数组转换为数组的方法：</span></p><ol class=\"ne-ol\"><li id=\"ud3ad2b8a\"><span class=\"ne-text\">通过 call 调用数组的 slice 方法来实现转换</span></li></ol><pre data-language=\"javascript\" id=\"MKucG\" class=\"ne-codeblock language-javascript\">Array.prototype.slice.call(arrayLike); </pre><ol start=\"2\" class=\"ne-ol\"><li id=\"u61998ad7\"><span class=\"ne-text\">通过call调用数组的splice方法来实现转换</span></li></ol><pre data-language=\"javascript\" id=\"aeZDm\" class=\"ne-codeblock language-javascript\">Array.prototype.splice.call(arrayLike,0);</pre><ol start=\"3\" class=\"ne-ol\"><li id=\"u8f316d9c\"><span class=\"ne-text\">通过apply调用数组的 concat 方法来实现转换</span></li></ol><pre data-language=\"javascript\" id=\"OqPIF\" class=\"ne-codeblock language-javascript\">Array.prototype.concat.apply([], arrayLike);</pre><ol start=\"4\" class=\"ne-ol\"><li id=\"u39a1c4e3\"><span class=\"ne-text\">通过Array.from() 实现转换</span></li></ol><pre data-language=\"javascript\" id=\"OKWMy\" class=\"ne-codeblock language-javascript\">Array.from(arrayLike);</pre><h2 id=\"PPTXu\"><span class=\"ne-text\">数组有哪些原生方法</span></h2><ul class=\"ne-ul\"><li id=\"u7b7adae3\"><span class=\"ne-text\">数组和字符串的转换方法：toString()、toLocalString()、join()，其中join()可以指定转换为字符串时的分隔符</span></li><li id=\"uad91bf9f\"><span class=\"ne-text\">数组尾部操作的方法：pop()和 push()，push() 方法可以传入多个参数</span></li><li id=\"ua4fc3a25\"><span class=\"ne-text\">数组首部操作的方法：shift() 删除和 unshift() 添加</span></li><li id=\"ua59d9d8b\"><span class=\"ne-text\">重排序的方法：reverse() 和 sort()，sort() 可传入一个函数进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置</span></li><li id=\"ubc9e7871\"><span class=\"ne-text\">数组连接：concat() 返回拼接好的数组，不影响原数组。</span></li><li id=\"uc18db9bd\"><span class=\"ne-text\">数组截取：splice()</span></li><li id=\"u61e1fc3a\"><span class=\"ne-text\">影响原数组特定项的索引的方法，indexOf()和 lastIndexOf() </span></li><li id=\"u5cb443d3\"><span class=\"ne-text\">迭代方法：every()、some()、filter()、map()、forEach()方法</span></li><li id=\"u3cd2e702\"><span class=\"ne-text\">数组归并方法：reduce()、reduceRight()方法</span></li></ul><h2 id=\"w9O8P\"><span class=\"ne-text\">Promise.race() 应用场景</span></h2><div class=\"ne-quote\"><p id=\"u8b52ba88\" class=\"ne-p\"><span class=\"ne-text\">race() 和 all() 一样，接受的参数是一个每项都是Promise的数组，但是与all不同的是，当</span><strong><span class=\"ne-text\" style=\"text-decoration: underline\">最先执行完</span></strong><span class=\"ne-text\">的事件执行完后，就直接返回该promise对象的值。</span></p><p id=\"ue38e8a64\" class=\"ne-p\"><span class=\"ne-text\">如果第一个promise对象状态变成resolved，则自身的状态就变成了resolved；反之，第一个promise变成rejected，则自身状态就会变成rejected。</span></p></div><p id=\"u94adf03d\" class=\"ne-p\"><strong><span class=\"ne-text\">Promise.race() 应用场景</span></strong><span class=\"ne-text\">：</span></p><ul class=\"ne-ul\"><li id=\"u1637e5f9\"><span class=\"ne-text\">http请求时，做超时判断时，设置一个定时器，当定时器时间到了时间就在页面提醒请求超时。</span></li></ul><pre data-language=\"javascript\" id=\"PbAr2\" class=\"ne-codeblock language-javascript\">// 请求某个图片资源\nfunction requestImg() {\n  var p = new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onload = function () {\n      resolve(img);\n    };\n    img.src = &quot;http://www.baidu.com/img/flexiable/logo/pc/result.png&quot;;\n  });\n  return p;\n}\n// 延时函数，用于给请求计时\nfunction timeout() {\n  var p = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(&quot;图片请求操时&quot;);\n    }, 5000);\n  });\n  return p;\n}\nPromise.race([requestImg(), timeout()])\n  .then(function (results) {\n    console.log(results);\n  })\n  .catch(function (reason) {\n    console.log(reason);\n  });</pre><h2 id=\"k94WT\"><span class=\"ne-text\">Promise.all() 应用场景</span></h2><div class=\"ne-quote\"><p id=\"u6391473d\" class=\"ne-p\"><span class=\"ne-text\">它可以将多个promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功时返回一个</span><strong><span class=\"ne-text\">结构数组</span></strong><span class=\"ne-text\">，而失败时则返回</span><strong><span class=\"ne-text\">最先被reject失败状态的值。</span></strong></p></div><p id=\"u4841d637\" class=\"ne-p\"><strong><span class=\"ne-text\">Promise.all() 中传入的是数组，返回的也是数组，并会进行映射，传入的Promise对象返回值是按照顺序在数组中排列的，但是注意他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</span></strong></p><div class=\"ne-quote\"><p id=\"u0f695745\" class=\"ne-p\"><strong><span class=\"ne-text\">注意：Promise.all 获得的成功结果的数组中的数据顺序和Promise.all()接收的数组顺序是一致的，这样当遇到</span></strong><strong><span class=\"ne-text\" style=\"text-decoration: underline\">多个请求并根据请求顺序获取和使用数据</span></strong><strong><span class=\"ne-text\">的场景，可以使用 Promise.all来解决。</span></strong></p></div><h2 id=\"CSPWq\"><span class=\"ne-text\">使用requestAnimationFrame实现一个循环定时器</span></h2><pre data-language=\"javascript\" id=\"jh7zK\" class=\"ne-codeblock language-javascript\">function setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () =&gt; {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime &gt;= interval) {\n      startTime = endTime = now()\n      callback(timer)\n  }\n}\ntimer = window.requestAnimationFrame(loop)\n\treturn timer\n}\nlet a = 0\nsetInterval(timer =&gt; {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)</pre><p id=\"ueb0e21dd\" class=\"ne-p\"><span class=\"ne-text\">⾸先 requestAnimationFrame ⾃带函数节流功能，基本可以保证在 16.6 毫秒内只执⾏⼀次（不掉</span></p><p id=\"u60ca6967\" class=\"ne-p\"><span class=\"ne-text\">帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u191f528d\" id=\"u191f528d\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS高频面试题 </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-13</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-13</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: JS</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F7275569-78f8b42bb54aec85.jpg&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266536&amp;t=e242d8866a11e11ce85f7bd2674b4d7b</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"ZolgE\" id=\"ZolgE\"><span data-lake-id=\"u4ed87c25\" id=\"u4ed87c25\">apply、call、bind的区别</span></h2><ul list=\"u07ec95a7\"><li fid=\"u39da92f1\" data-lake-id=\"u6bdab0b4\" id=\"u6bdab0b4\"><span data-lake-id=\"u14f3eb67\" id=\"u14f3eb67\">三者都可以改变函数的this对象指向</span></li><li fid=\"u39da92f1\" data-lake-id=\"udff3d079\" id=\"udff3d079\"><span data-lake-id=\"u4b30799f\" id=\"u4b30799f\">三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window</span></li><li fid=\"u39da92f1\" data-lake-id=\"uc34d297e\" id=\"uc34d297e\"><span data-lake-id=\"ua6ad47f5\" id=\"ua6ad47f5\">三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</span></li><li fid=\"u39da92f1\" data-lake-id=\"uf1f6cdeb\" id=\"uf1f6cdeb\"><span data-lake-id=\"ufc1457f0\" id=\"ufc1457f0\">bind是返回绑定this之后的函数，需要手动执行函数，apply、call 则是立即执行</span></li></ul><h2 data-lake-id=\"yuKWf\" id=\"yuKWf\"><span data-lake-id=\"ua2630855\" id=\"ua2630855\">new操作符的实现原理</span></h2><p data-lake-id=\"u2e39dccc\" id=\"u2e39dccc\"><span data-lake-id=\"uf7a03099\" id=\"uf7a03099\">new操作符的执⾏过程：</span></p><p data-lake-id=\"u5fc8def3\" id=\"u5fc8def3\"><span data-lake-id=\"uefa723fe\" id=\"uefa723fe\">（1）⾸先创建了⼀个新的空对象</span></p><p data-lake-id=\"u91b99bd5\" id=\"u91b99bd5\"><span data-lake-id=\"u17e21575\" id=\"u17e21575\">（2）设置原型，将对象的原型设置为函数的 prototype 对象。</span></p><p data-lake-id=\"uc08c9e71\" id=\"uc08c9e71\"><span data-lake-id=\"uf5c63973\" id=\"uf5c63973\">（3）让函数的 this 指向这个对象，执⾏构造函数的代码（为这个新对象添加属性）</span></p><p data-lake-id=\"u5dd9eefa\" id=\"u5dd9eefa\"><span data-lake-id=\"uaba8e1a1\" id=\"uaba8e1a1\">（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引⽤类型，就返回这个引⽤类</span></p><p data-lake-id=\"u9e775328\" id=\"u9e775328\"><span data-lake-id=\"u4d7169f0\" id=\"u4d7169f0\">型的对象。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20objectFactory()%20%7B%5Cnlet%20newObject%20%3D%20null%3B%5Cnlet%20constructor%20%3D%20Array.prototype.shift.call(arguments)%3B%5Cnlet%20result%20%3D%20null%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF%E2%BC%80%E4%B8%AA%E5%87%BD%E6%95%B0%5Cnif%20(typeof%20constructor%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cnconsole.error(%5C%22type%20error%5C%22)%3B%5Cnreturn%3B%5Cn%7D%5Cn%2F%2F%20%E6%96%B0%E5%BB%BA%E2%BC%80%E4%B8%AA%E7%A9%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%20prototype%20%E5%AF%B9%E8%B1%A1%5CnnewObject%20%3D%20Object.create(constructor.prototype)%3B%5Cn%2F%2F%20%E5%B0%86%20this%20%E6%8C%87%E5%90%91%E6%96%B0%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%B9%B6%E6%89%A7%E2%BE%8F%E5%87%BD%E6%95%B0%5Cnresult%20%3D%20constructor.apply(newObject%2C%20arguments)%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%5Cnlet%20flag%20%3D%20result%20%26%26%20(typeof%20result%20%3D%3D%3D%20%5C%22object%5C%22%20%7C%7C%20typeof%20result%20%3D%3D%3D%5Cn%5C%22function%5C%22)%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cnreturn%20flag%20%3F%20result%20%3A%20newObject%3B%5Cn%7D%5Cn%2F%2F%20%E4%BD%BF%E2%BD%A4%E2%BD%85%E6%B3%95%5CnobjectFactory(%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%2C%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HxWQB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"EuRYC\" id=\"EuRYC\"><span data-lake-id=\"uae942fc9\" id=\"uae942fc9\">map()和foreach()的区别</span></h2><h3 data-lake-id=\"ogOb0\" id=\"ogOb0\"><span data-lake-id=\"ued1856aa\" id=\"ued1856aa\">简洁回答</span></h3><p data-lake-id=\"u7a3aea33\" id=\"u7a3aea33\"><span data-lake-id=\"ubcf5f5b6\" id=\"ubcf5f5b6\">都是⽤来遍历数组的，两者区别如下：</span></p><ul list=\"ud3e74295\"><li fid=\"u555dd7c7\" data-lake-id=\"u24f06412\" id=\"u24f06412\"><span data-lake-id=\"uda3e28c4\" id=\"uda3e28c4\">forEach()⽅法会针对每⼀个元素执⾏提供的函数，对数据的操作会改变原数组，该⽅法没有返回</span></li></ul><p data-lake-id=\"uaf7ac181\" id=\"uaf7ac181\"><span data-lake-id=\"u63b33eaf\" id=\"u63b33eaf\">值；</span></p><ul list=\"ud6f1821e\"><li fid=\"u17f5a1a7\" data-lake-id=\"u25e2e9ad\" id=\"u25e2e9ad\"><span data-lake-id=\"uf5e5e82e\" id=\"uf5e5e82e\">map()⽅法不会改变原数组的值，返回⼀个新数组，新数组中的值为原数组调⽤函数处理之后的</span></li></ul><p data-lake-id=\"u4eff17df\" id=\"u4eff17df\"><span data-lake-id=\"u95eaa78e\" id=\"u95eaa78e\">值；</span></p><h3 data-lake-id=\"LgnBg\" id=\"LgnBg\"><span data-lake-id=\"ua7d3a021\" id=\"ua7d3a021\">相同点</span></h3><ol list=\"u152663aa\"><li fid=\"u1b110533\" data-lake-id=\"uc81910d8\" id=\"uc81910d8\"><span data-lake-id=\"u233e51e3\" id=\"u233e51e3\">都是循环遍历数组的每一项</span></li><li fid=\"u1b110533\" data-lake-id=\"uc92e479b\" id=\"uc92e479b\"><span data-lake-id=\"u8573b682\" id=\"u8573b682\">都相当于封装好的单层for循环，三个值都相同</span></li><li fid=\"u1b110533\" data-lake-id=\"u5ede89bf\" id=\"u5ede89bf\"><span data-lake-id=\"uf445ca20\" id=\"uf445ca20\">每次执行匿名函数都支持三个参数，参数分别为item（当前每一项）、index（索引值）、arr（原数组）</span></li><li fid=\"u1b110533\" data-lake-id=\"ua6b771b6\" id=\"ua6b771b6\"><span data-lake-id=\"ua6990f34\" id=\"ua6990f34\">匿名函数中的this都是指向window</span></li><li fid=\"u1b110533\" data-lake-id=\"uc61e0fa0\" id=\"uc61e0fa0\"><span data-lake-id=\"u8cc432c0\" id=\"u8cc432c0\">只能遍历数组</span></li></ol><h3 data-lake-id=\"gJBw2\" id=\"gJBw2\"><span data-lake-id=\"ua62c8557\" id=\"ua62c8557\">不同点</span></h3><ul list=\"u1335ff5e\"><li fid=\"u97fc3c4e\" data-lake-id=\"uaa3c5be7\" id=\"uaa3c5be7\"><span data-lake-id=\"ubb200f28\" id=\"ubb200f28\">map()会分配内存空间存储新数组并有返回值，forEach()没有返回值</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"uc5dcb627\" id=\"uc5dcb627\"><span data-lake-id=\"u88a872e4\" id=\"u88a872e4\">forEach()允许calllback更改原始数组的元素，map()返回新的数组，map()不会对空数组进行检测</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"ub3699f29\" id=\"ub3699f29\"><span data-lake-id=\"u6f9b27d7\" id=\"u6f9b27d7\">forEach()遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"uf52ca49a\" id=\"uf52ca49a\"><span data-lake-id=\"u827a391c\" id=\"u827a391c\">map遍历后的数组通常会生成一个新的数组，新数组的值发生变化，当前遍历的数组值不会变化。</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"ua05c9eab\" id=\"ua05c9eab\"><span data-lake-id=\"u6d7f55ad\" id=\"u6d7f55ad\">map的速度大于forEach</span></li></ul><h3 data-lake-id=\"qMAb9\" id=\"qMAb9\"><span data-lake-id=\"uf4f1bed0\" id=\"uf4f1bed0\">使用场景</span></h3><ol list=\"ua39ecbfd\"><li fid=\"uc5eb4a37\" data-lake-id=\"ua4984c5a\" id=\"ua4984c5a\"><span data-lake-id=\"u19f6e020\" id=\"u19f6e020\">forEach()适用于你并不打算改变数据的时候</span></li><li fid=\"uc5eb4a37\" data-lake-id=\"u1faeb043\" id=\"u1faeb043\"><span data-lake-id=\"u9261656d\" id=\"u9261656d\">map()适用于你要改变数据的时候。不仅在于它更快，而且返回一个新数组。（因此可以使用复合（composition）（map(),filter(),reduce()等组合使用））</span></li></ol><p data-lake-id=\"ub47a1f9b\" id=\"ub47a1f9b\"><span data-lake-id=\"u6400cd45\" id=\"u6400cd45\">性能上来说，for&gt;forEach&gt;map。</span></p><h2 data-lake-id=\"fNTcb\" id=\"fNTcb\"><span data-lake-id=\"udae3adf9\" id=\"udae3adf9\">Symbol</span></h2><ol list=\"u24991fc3\"><li fid=\"u6c32d8f1\" data-lake-id=\"u83c42b6d\" id=\"u83c42b6d\"><span data-lake-id=\"uf1ca22b3\" id=\"uf1ca22b3\">什么是Symbol？</span></li></ol><p data-lake-id=\"u4ba1b7d7\" id=\"u4ba1b7d7\" style=\"text-indent: 2em\"><span data-lake-id=\"u184c60ea\" id=\"u184c60ea\">Symbol是ES6新增的一种数据类型，被划分为</span><strong><span data-lake-id=\"u4290f69a\" id=\"u4290f69a\">基本数据类型</span></strong><span data-lake-id=\"ud5f52f5f\" id=\"ud5f52f5f\">。不能用 </span><code data-lake-id=\"u8c07b6e6\" id=\"u8c07b6e6\"><span data-lake-id=\"u3b0db586\" id=\"u3b0db586\">new</span></code><span data-lake-id=\"u75541d5e\" id=\"u75541d5e\">。</span></p><ul list=\"u5e2856f7\"><li fid=\"u6ccf7f8a\" data-lake-id=\"ua21ebc77\" id=\"ua21ebc77\"><span data-lake-id=\"ucc9cb7e6\" id=\"ucc9cb7e6\">基本数据类型：字符串、数值、布尔、undefined、null、Symbol。</span></li><li fid=\"u6ccf7f8a\" data-lake-id=\"u37091692\" id=\"u37091692\"><span data-lake-id=\"ubbbf09da\" id=\"ubbbf09da\">引用数据类型：Object</span></li></ul><ol list=\"u3b9dcdd7\" start=\"2\"><li fid=\"u8b96bea1\" data-lake-id=\"ua5c50a5a\" id=\"ua5c50a5a\"><span data-lake-id=\"uf8405b8c\" id=\"uf8405b8c\">作用</span></li></ol><p data-lake-id=\"u07e440cd\" id=\"u07e440cd\"><span data-lake-id=\"u23a49187\" id=\"u23a49187\">用来表示一个独一无二的值。</span></p><ol list=\"uf65cc4e4\" start=\"3\"><li fid=\"u796ac187\" data-lake-id=\"u8323c438\" id=\"u8323c438\"><span data-lake-id=\"u27940de6\" id=\"u27940de6\">格式：</span><code data-lake-id=\"u4a664624\" id=\"u4a664624\"><span data-lake-id=\"u1cdfe7ae\" id=\"u1cdfe7ae\">let xxx = Symbol('标识字符串')</span></code></li><li fid=\"u796ac187\" data-lake-id=\"u2c83ce55\" id=\"u2c83ce55\"><span data-lake-id=\"ue5686142\" id=\"ue5686142\">为什么需要Symbol？</span></li></ol><p data-lake-id=\"u1a3e155d\" id=\"u1a3e155d\" style=\"text-indent: 2em\"><span data-lake-id=\"u37301165\" id=\"u37301165\">为了避免第三方框框架的同名属性被覆盖。</span></p><blockquote data-lake-id=\"u6cdb980b\" id=\"u6cdb980b\" style=\"padding-left: 2em\"><p data-lake-id=\"ubf547b48\" id=\"ubf547b48\"><span data-lake-id=\"ue8037304\" id=\"ue8037304\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></p></blockquote><ol list=\"ued0bdf73\" start=\"5\"><li fid=\"u2f3be6c2\" data-lake-id=\"u791b2d4b\" id=\"u791b2d4b\"><span data-lake-id=\"u23da1184\" id=\"u23da1184\">如果区分Symbol？</span></li></ol><p data-lake-id=\"u99726587\" id=\"u99726587\" style=\"text-indent: 2em\"><span data-lake-id=\"u01f4a6b3\" id=\"u01f4a6b3\">在通过Symbol生成一个独一无二的值时，可以设置一个标记</span></p><p data-lake-id=\"u59dd8786\" id=\"u59dd8786\" style=\"text-indent: 2em\"><span data-lake-id=\"u981044ac\" id=\"u981044ac\">这个标记仅仅用于区分，没有其他任何意义。</span></p><ol list=\"udc182035\" start=\"6\"><li fid=\"u8964f751\" data-lake-id=\"u8d6baf17\" id=\"u8d6baf17\"><span data-lake-id=\"u502922b4\" id=\"u502922b4\">如果特殊情况需要读取这个标记，</span></li></ol><ul list=\"uea6e2aec\"><li fid=\"uae9aadcd\" data-lake-id=\"ud73ce616\" id=\"ud73ce616\"><span data-lake-id=\"uc57cd015\" id=\"uc57cd015\">Symbol类型可以转化为boolean或字符串，转化为字符串时前面会加上Symbol(wxy)，不方便</span></li><li fid=\"uae9aadcd\" data-lake-id=\"ub5657a7d\" id=\"ub5657a7d\"><span data-lake-id=\"ub79e4f5b\" id=\"ub79e4f5b\">可以直接通过description属性获取Symbol函数的字符串标识参数</span></li></ul><ol list=\"u9dc85897\" start=\"7\"><li fid=\"uc78472fe\" data-lake-id=\"u76de8cd9\" id=\"u76de8cd9\"><span data-lake-id=\"u87225889\" id=\"u87225889\">使用Symbol类型作为属性名</span></li></ol><blockquote data-lake-id=\"u09282575\" id=\"u09282575\" style=\"padding-left: 2em\"><p data-lake-id=\"u84c1fe0a\" id=\"u84c1fe0a\"><span data-lake-id=\"u6fca0291\" id=\"u6fca0291\">对象的属性要么是字符串，要么是Symbol类型</span></p></blockquote><ul list=\"u27713a6c\"><li fid=\"u4e107979\" data-lake-id=\"u5f898a70\" id=\"u5f898a70\"><span data-lake-id=\"uf9426ce3\" id=\"uf9426ce3\">默认是字符串，所以不加</span><code data-lake-id=\"u410fb57d\" id=\"u410fb57d\"><span data-lake-id=\"ub52b0987\" id=\"ub52b0987\">&quot;&quot;</span></code><span data-lake-id=\"u31175675\" id=\"u31175675\">也可以；如果需要类型为Symbol，需要使用</span><code data-lake-id=\"ub4853563\" id=\"ub4853563\"><span data-lake-id=\"ubd388a31\" id=\"ubd388a31\">[]</span></code><span data-lake-id=\"u8e2b3a45\" id=\"u8e2b3a45\">。</span></li><li fid=\"u4e107979\" data-lake-id=\"u26b3983a\" id=\"u26b3983a\"><span data-lake-id=\"ud42b8d26\" id=\"ud42b8d26\">不能用</span><code data-lake-id=\"u52f4301e\" id=\"u52f4301e\"><span data-lake-id=\"ubd0df431\" id=\"ubd0df431\">.</span></code><span data-lake-id=\"ufd502dd0\" id=\"ufd502dd0\">来访问，因为点运算符后面总是字符串。</span></li><li fid=\"u4e107979\" data-lake-id=\"u8648d662\" id=\"u8648d662\"><span data-lake-id=\"ub4ecced6\" id=\"ub4ecced6\">Symbol值作为属性名时，该属性还是公开属性，不是私有属性。</span></li></ul><ol list=\"u033ef65e\" start=\"8\"><li fid=\"ub5b7f779\" data-lake-id=\"uad898f22\" id=\"uad898f22\"><span data-lake-id=\"u751c41ff\" id=\"u751c41ff\">例子：</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%90%8E%E9%9D%A2%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%8F%AF%E4%BB%A5%E7%BB%99symbol%E5%81%9A%E4%B8%8A%E6%A0%87%E8%AE%B0%E4%BE%BF%E4%BA%8E%E8%AF%86%E5%88%AB%5Cnlet%20name%20%3D%20Symbol(%5C%22name%5C%22)%3B%5Cnlet%20say%20%3D%20Symbol(%5C%22say%5C%22)%3B%5Cnlet%20obj%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%83%B3%20%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%90%8D%E7%A7%B0%EF%BC%8C%E5%BF%85%E9%A1%BB%E5%8A%A0%E4%B8%8A%E4%B8%AD%E6%8B%AC%E5%8F%B7%EF%BC%8C.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%90%8E%E9%9D%A2%E8%B7%9F%E7%9D%80%E7%9A%84%E9%83%BD%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cn%20%20%20%20%5Bname%5D%3A%20%5C%22lnj%5C%22%2C%5Cn%20%20%20%20%5Bsay%5D%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(%5C%22say%5C%22)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20name%3A%20%5C%22rose%5C%22%2C%5Cn%7D%3B%5Cn%2F%2F%20obj.name%20%3D%20%5C%22it6661%5C%22%3B%5Cnobj%5BSymbol(%5C%22name%5C%22)%5D%20%3D%20%5C%22it666%5C%22%3B%5Cnconsole.log(obj)%3B%5Cnconsole.log(Reflect.ownKeys(obj))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KbTRx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u5c458fbe\" id=\"u5c458fbe\"><p data-lake-id=\"uc4e8b106\" id=\"uc4e8b106\"><span data-lake-id=\"ufc96ae08\" id=\"ufc96ae08\">{</span></p><p data-lake-id=\"ub2bf8ae8\" id=\"ub2bf8ae8\"><span data-lake-id=\"u7ae59d0c\" id=\"u7ae59d0c\">  [Symbol(name)]: 'lnj',</span></p><p data-lake-id=\"u8a53f6f3\" id=\"u8a53f6f3\"><span data-lake-id=\"u0d8e88a2\" id=\"u0d8e88a2\">  [Symbol(say)]: [Function: [say]],</span></p><p data-lake-id=\"u8bf87a90\" id=\"u8bf87a90\"><span data-lake-id=\"uaf1b07ba\" id=\"uaf1b07ba\">  [Symbol(name)]: 'it666'</span></p><p data-lake-id=\"udf34f821\" id=\"udf34f821\"><span data-lake-id=\"uee640fc0\" id=\"uee640fc0\">}</span></p><p data-lake-id=\"uea186e60\" id=\"uea186e60\"><span data-lake-id=\"u0fc925f8\" id=\"u0fc925f8\">[ Symbol(name), Symbol(say), Symbol(name) ]</span></p></blockquote><p data-lake-id=\"u389f2d31\" id=\"u389f2d31\"><span data-lake-id=\"u6435f421\" id=\"u6435f421\">没有覆盖原来的name，因为都是独一无二的，那么就默认创建一个name的属性。</span></p><h3 data-lake-id=\"PKuqe\" id=\"PKuqe\"><span data-lake-id=\"u4d7d906f\" id=\"u4d7d906f\">注意点</span></h3><ol list=\"u0468c5db\"><li fid=\"u06497ca0\" data-lake-id=\"ud0d58967\" id=\"ud0d58967\"><span data-lake-id=\"u9415c704\" id=\"u9415c704\">Symbol是基本数据类型，不能加new</span></li><li fid=\"u06497ca0\" data-lake-id=\"u776509e4\" id=\"u776509e4\"><span data-lake-id=\"ue912a0a5\" id=\"ue912a0a5\">后面括号可以传入一个字符串，只是一个标记，方便阅读，没有任何意义。</span></li><li fid=\"u06497ca0\" data-lake-id=\"u7086a86c\" id=\"u7086a86c\"><span data-lake-id=\"u20f8ec19\" id=\"u20f8ec19\">类型转化的时候，不可转化为数值，只能转化为字符串和布尔值。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(String(name))%3B%5Cnconsole.log(Boolean(name))%3B%5Cnconsole.log(Number(name))%3B%20%2F%2F%20Cannot%20convert%20a%20Symbol%20value%20to%20a%20number%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cMRkp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u1fd64c61\" start=\"4\"><li fid=\"ubf28a9ce\" data-lake-id=\"u3fd16d74\" id=\"u3fd16d74\"><span data-lake-id=\"u033e53c7\" id=\"u033e53c7\">不能做任何运算</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnconsole.log(name%2B111)%5Cnconsole.log(name%2B'ccc')%5Cn%2F%2F%E5%85%A8%E9%83%A8%E6%8A%A5%E9%94%99%20Cannot%20convert%20a%20Symbol%20value%20to%20a%20number%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qAMCc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u0179c47e\" start=\"5\"><li fid=\"ufae85291\" data-lake-id=\"uce6a6007\" id=\"uce6a6007\"><span data-lake-id=\"u5b5148a7\" id=\"u5b5148a7\">Symbol生成的值作为属性或方法的时候，一定要保存下来，否则后续无法使用。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnlet%20obj%3D%7B%5Cn%20%20%2F%2F%20name%3A'lnj'%2C%5Cn%20%20%20%20%5BSymbol('name')%5D%3A'lbj'%5Cn%7D%5Cnconsole.log(obj.name)%3B%20%20%2F%2F%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%20%20%5BSymbol('name')%5D%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84name%E4%B8%8D%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22v77MM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7464468f\" id=\"u7464468f\"><span data-lake-id=\"u2cd67c21\" id=\"u2cd67c21\">应该改为如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%20%3D%20Symbol(%5C%22name%5C%22)%3B%5Cnlet%20obj%20%3D%20%7B%5Cn%20%20%20%20%5Bname%5D%3A%20%5C%22lnj1%5C%22%2C%5Cn%20%20%20%20%2F%2F%20%5BSymbol(%5C%22name%5C%22)%5D%3A%20%5C%22lbj%5C%22%2C%5Cn%7D%3B%5Cn%2F%2F%20console.log(obj.name)%3B%20%2F%2F%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%20%20%5BSymbol('name')%5D%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84name%E4%B8%8D%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%5Cnconsole.log(Reflect.ownKeys(obj))%3B%5Cnconsole.log(obj%5Bname%5D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kKMvX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u6dbf2f19\" id=\"u6dbf2f19\"><p data-lake-id=\"ueee19c8f\" id=\"ueee19c8f\"><span data-lake-id=\"ufbc74536\" id=\"ufbc74536\">[ Symbol(name) ]</span></p><p data-lake-id=\"u21bead9f\" id=\"u21bead9f\"><span data-lake-id=\"ua7541ce2\" id=\"ua7541ce2\">lnj1</span></p></blockquote><ol list=\"ud9d45160\" start=\"6\"><li fid=\"u3137bd0f\" data-lake-id=\"u7a057185\" id=\"u7a057185\"><span data-lake-id=\"u10c54028\" id=\"u10c54028\">for循环遍历对象时无法遍历出Symbol的属性和方法</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnlet%20obj%3D%7B%5Cn%20%20%5Bname%5D%3A'lnj'%2C%5Cn%20%20%20%20age%3A12%2C%5Cn%20%20%20%20teacher%3A'wyx'%5Cn%7D%5Cnfor(let%20key%20in%20obj)%7B%5Cn%20%20%20%20console.log(key)%20%20%20%2F%2F%E5%8F%AA%E8%83%BD%E6%89%93%E5%8D%B0%E5%87%BAage%E5%92%8Cteacher%5Cn%7D%5Cn%2F%2F%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%8D%95%E7%8B%AC%E5%8F%96%E5%87%BASymbol(name)%5Cnconsole.log(Object.getOwnPropertySymbols(obj))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ikBuz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"bRIp6\" id=\"bRIp6\"><span data-lake-id=\"u254abb34\" id=\"u254abb34\">Symbol的应用</span></h3><ol list=\"u690f0e57\"><li fid=\"ua112d1bd\" data-lake-id=\"u4e1ec221\" id=\"u4e1ec221\"><span data-lake-id=\"u889ee668\" id=\"u889ee668\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></li><li fid=\"ua112d1bd\" data-lake-id=\"ub601210a\" id=\"ub601210a\"><span data-lake-id=\"u6cc20519\" id=\"u6cc20519\">消除魔术字符串</span></li></ol><blockquote data-lake-id=\"u40d13c63\" id=\"u40d13c63\" style=\"padding-left: 2em\"><p data-lake-id=\"u8d0c3fa6\" id=\"u8d0c3fa6\"><span data-lake-id=\"ub70b59c8\" id=\"ub70b59c8\">魔术字符串：在代码中多次出现，与代码形成强耦合的某一个具体的字符串或数值。风格良好的代码应该尽量消除魔术字符串，改由含义清晰的变量代替。‘</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20gender%20%3D%20%7B%5Cn%20%20%20%2F%2F%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%AF%B4%E6%98%8Eman%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%80%BC%EF%BC%8C%E4%B8%8D%E7%94%A8%E5%86%8Dman%3A'man'%20%20%20%5Cn%20%20%20%20man%3A%20Symbol()%2C%5Cn%20%20%20%20woman%3A%20Symbol()%2C%5Cn%7D%5Cnfunction%20isMan(gender)%20%7B%5Cn%20%20%20%20switch%20(gender)%20%7B%5Cn%20%20%20%20%20%20%20%20case%20gender.man%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E7%94%B7%E6%80%A7')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20case%20gender.woman%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E5%A5%B3%E6%80%A7')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%5Cn%20%20%20%20%7D%5Cn%7D%5CnisMan(gender.man)%20%20%2F%2F%E7%94%B7%E6%80%A7%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GChhH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u25135ff0\" start=\"3\"><li fid=\"uc96c0670\" data-lake-id=\"ud9b0e442\" id=\"ud9b0e442\"><span data-lake-id=\"u9f71b790\" id=\"u9f71b790\">为对象定义一些非私有的、但又希望只用于内部的方法。</span></li></ol><blockquote data-lake-id=\"u0cda45e7\" id=\"u0cda45e7\" style=\"padding-left: 2em\"><p data-lake-id=\"u375b8621\" id=\"u375b8621\"><span data-lake-id=\"u58ade380\" id=\"u58ade380\">由于以Symbol值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</span></p><p data-lake-id=\"u91f2d56b\" id=\"u91f2d56b\"><span data-lake-id=\"ud5c0b71c\" id=\"ud5c0b71c\">注意：Symbol并不能实现真正的私有变量的效果，只是不能通过常规的遍历方法拿到Symbol类型的属性而已。</span><strong><span data-lake-id=\"u487e0ee4\" id=\"u487e0ee4\">​</span></strong></p></blockquote><p data-lake-id=\"u47a54e0b\" id=\"u47a54e0b\"><strong><span data-lake-id=\"u33b230ef\" id=\"u33b230ef\">对象的遍历方法</span></strong><span data-lake-id=\"u84cc2fa9\" id=\"u84cc2fa9\">：</span></p><ul list=\"u33021964\"><li fid=\"u5f914a62\" data-lake-id=\"ue9a3f0f8\" id=\"ue9a3f0f8\"><span data-lake-id=\"u22d3926f\" id=\"u22d3926f\">for(let xx in obj)：i代表key</span></li><li fid=\"u5f914a62\" data-lake-id=\"u0b6ff3b5\" id=\"u0b6ff3b5\"><span data-lake-id=\"u25b6d72f\" id=\"u25b6d72f\">for(let xx of obj)：不是自带的</span></li><li fid=\"u5f914a62\" data-lake-id=\"u7e08b740\" id=\"u7e08b740\"><span data-lake-id=\"u6b135041\" id=\"u6b135041\">Object.keys(obj)：返回包含的key的数组</span></li><li fid=\"u5f914a62\" data-lake-id=\"ua3870bab\" id=\"ua3870bab\"><span data-lake-id=\"u94700e14\" id=\"u94700e14\">Object.values(obj)：返回包含value的数组</span></li><li fid=\"u5f914a62\" data-lake-id=\"ue8b94391\" id=\"ue8b94391\"><span data-lake-id=\"u84a512a2\" id=\"u84a512a2\">Object.getOwnPropertyNames()：返回包含key的数组</span></li></ul><p data-lake-id=\"uff9d61bc\" id=\"uff9d61bc\"><span data-lake-id=\"u70a70ea9\" id=\"u70a70ea9\">上述的所有方法都遍历不到Symbol类型的（注意：是遍历时取不到Symbol，并不是我们访问不到对象的Symbol类型）</span></p><p data-lake-id=\"u39a24844\" id=\"u39a24844\"><strong><span data-lake-id=\"u37837acd\" id=\"u37837acd\">可以遍历到Symbol的方法：</span></strong></p><ul list=\"u5bd44c7d\"><li fid=\"u5d780946\" data-lake-id=\"ue6812e4e\" id=\"ue6812e4e\"><strong><span data-lake-id=\"u96d15dc6\" id=\"u96d15dc6\">Object.getOwnPropertySymbols()</span></strong><span data-lake-id=\"u498cca83\" id=\"u498cca83\">：返回对象中只包含Symbol类型key的数组</span></li><li fid=\"u5d780946\" data-lake-id=\"u8d1d2561\" id=\"u8d1d2561\"><strong><span data-lake-id=\"u29f2b4c5\" id=\"u29f2b4c5\">Reflect.ownKeys()</span></strong><span data-lake-id=\"u27791941\" id=\"u27791941\">：返回对象中所有类型key的数组（包含Symbol）</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20_password%20%3D%20Symbol('password')%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'%E5%B0%8F%E6%98%8E'%2C%5Cn%20%20%20%20gender%3A%20'male'%2C%5Cn%20%20%20%20%5B_password%5D%3A%20'11038'%5Cn%7D%5Cnfor%20(let%20item%20in%20obj)%20%7B%5Cn%20%20%20%20console.log(item)%3B%5Cn%7D%5Cnconsole.log(Object.keys(obj))%3B%5Cnconsole.log(Object.values(obj))%3B%5Cnconsole.log(Object.getOwnPropertyNames(obj))%3B%5Cnconsole.log(Object.getOwnPropertySymbols(obj))%3B%5Cnconsole.log(Reflect.ownKeys(obj))%5Cn%2F%2F%20%E8%BE%93%E5%87%BA11038%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%98%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%88%B0symbol%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%89%80%E4%BB%A5symbol%E5%B9%B6%E4%B8%8D%E8%83%BD%E7%9C%9F%E6%AD%A3%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BE%E5%AE%9A%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%80%E8%88%AC%E5%8F%AA%E7%94%A8%E4%BA%8E%E5%AE%9A%E4%B9%89%E4%B8%80%E4%BA%9B%E9%9D%9E%E7%A7%81%E6%9C%89%E7%9A%84%E3%80%81%E4%BD%86%E5%8F%88%E5%B8%8C%E6%9C%9B%E5%8F%AA%E7%94%A8%E4%BA%8E%E5%86%85%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95%5Cnconsole.log(obj%5B_password%5D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b3zmv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub6d28c4f\" id=\"ub6d28c4f\"><span data-lake-id=\"udcb2079f\" id=\"udcb2079f\">输出如下：</span></p><p data-lake-id=\"u6f5cddec\" id=\"u6f5cddec\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png%22%2C%22taskId%22%3A%22uda6b3e15-79e2-4aa7-982d-49fe7eb8eb8%22%2C%22clientId%22%3A%22u2b09cbdb-2331-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A275%2C%22height%22%3A116%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A46307%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A583%2C%22originHeight%22%3A245%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NAME%20GENDER%20I%20GENDER%20NAME%20%E5%B0%8F%E6%98%8E%20MALE%20LI%20'GENDER'%20NAME%20SYMBOL(PASSWORD)%20SYMBOL(PASSWORD)%20%5D%20'GENDER'%20NAME%2011038%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A17.835613%2C%22y%22%3A10.28653%2C%22width%22%3A56.185383%2C%22height%22%3A16.532913%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A16.404135%2C%22y%22%3A39.320583%2C%22width%22%3A88.48623500000001%2C%22height%22%3A21.397437000000004%2C%22text%22%3A%22GENDER%22%7D%2C%7B%22x%22%3A283.29572%2C%22y%22%3A63.699017%2C%22width%22%3A13.722409999999968%2C%22height%22%3A33.523523%2C%22text%22%3A%22I%22%7D%2C%7B%22x%22%3A169.04576%2C%22y%22%3A65.59649%2C%22width%22%3A90.67936999999998%2C%22height%22%3A28.280149999999992%2C%22text%22%3A%22GENDER%22%7D%2C%7B%22x%22%3A59.44093%2C%22y%22%3A71.73817%2C%22width%22%3A57.067060000000005%2C%22height%22%3A17.633496000000008%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A56.391617%2C%22y%22%3A92.70355%2C%22width%22%3A64.32137300000001%2C%22height%22%3A29.49544999999999%2C%22text%22%3A%22%E5%B0%8F%E6%98%8E%22%7D%2C%7B%22x%22%3A169.89551%2C%22y%22%3A97.78831%2C%22width%22%3A60.10534000000001%2C%22height%22%3A22.076800000000006%2C%22text%22%3A%22MALE%22%7D%2C%7B%22x%22%3A283.78152%2C%22y%22%3A127.35834%2C%22width%22%3A13.303110000000004%2C%22height%22%3A58.46708000000001%2C%22text%22%3A%22LI%22%7D%2C%7B%22x%22%3A166.38359%2C%22y%22%3A127.61558%2C%22width%22%3A96.13987999999998%2C%22height%22%3A26.898140000000012%2C%22text%22%3A%22'GENDER'%22%7D%2C%7B%22x%22%3A58.253582%2C%22y%22%3A132.58513%2C%22width%22%3A59.170162%2C%22height%22%3A17.249590000000012%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A45.125946%2C%22y%22%3A156.71448%2C%22width%22%3A221.192454%2C%22height%22%3A28.156199999999984%2C%22text%22%3A%22SYMBOL(PASSWORD)%22%7D%2C%7B%22x%22%3A295.69482%2C%22y%22%3A186.42665%2C%22width%22%3A255.91798%2C%22height%22%3A30.39458000000002%2C%22text%22%3A%22SYMBOL(PASSWORD)%20%5D%22%7D%2C%7B%22x%22%3A164.94514%2C%22y%22%3A189.3633%2C%22width%22%3A100.78666000000001%2C%22height%22%3A25.321739999999977%2C%22text%22%3A%22'GENDER'%22%7D%2C%7B%22x%22%3A59.025814%2C%22y%22%3A192.88441%2C%22width%22%3A68.091286%2C%22height%22%3A19.300389999999993%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A17.268585%2C%22y%22%3A220.85193%2C%22width%22%3A72.02459%2C%22height%22%3A21.05176%2C%22text%22%3A%2211038%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23212121%22%2C%22id%22%3A%22u196ca470%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"wAmPW\" id=\"wAmPW\"><span data-lake-id=\"ucd1e1ca2\" id=\"ucd1e1ca2\">Symbol自带的方法</span></h3><h4 data-lake-id=\"ZBbKp\" id=\"ZBbKp\"><span data-lake-id=\"u68018dfd\" id=\"u68018dfd\">1. </span><code data-lake-id=\"u14edd727\" id=\"u14edd727\"><span data-lake-id=\"udb77d3db\" id=\"udb77d3db\">Symbol.for()</span></code></h4><p data-lake-id=\"u8543ee7e\" id=\"u8543ee7e\"><u><span data-lake-id=\"u496a72a9\" id=\"u496a72a9\">重新使用同一个Symbol值。</span></u></p><p data-lake-id=\"ue8a74dbc\" id=\"ue8a74dbc\"><span data-lake-id=\"ue0b30960\" id=\"ue0b30960\">接收一个字符串作为参数，搜索是否有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建一个以该字符串为名称的Symbol值，并将其注册到全局。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20s1%20%3D%20Symbol.for('foo')%3B%5Cnlet%20s2%20%3D%20Symbol.for('foo')%3B%5Cn%5Cns1%20%3D%3D%3D%20s2%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d4Ilt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"ezFW0\" id=\"ezFW0\"><span data-lake-id=\"u9bebd769\" id=\"u9bebd769\">2. </span><code data-lake-id=\"u39070501\" id=\"u39070501\"><span data-lake-id=\"u6ff855c9\" id=\"u6ff855c9\">Symbol.keyFor()</span></code></h4><p data-lake-id=\"ue8538d75\" id=\"ue8538d75\"><u><span data-lake-id=\"u7cfa2fb1\" id=\"u7cfa2fb1\">返回一个已登记的Symbol类型值的</span></u><code data-lake-id=\"u87fab790\" id=\"u87fab790\"><u><span data-lake-id=\"ufa16d82e\" id=\"ufa16d82e\">key</span></u></code><u><span data-lake-id=\"u3c6f78ad\" id=\"u3c6f78ad\">。</span></u></p><p data-lake-id=\"ua831422d\" id=\"ua831422d\"><span data-lake-id=\"udc6f6145\" id=\"udc6f6145\">由于</span><code data-lake-id=\"ud99e8e29\" id=\"ud99e8e29\"><span data-lake-id=\"ua1479a57\" id=\"ua1479a57\">Symbol()</span></code><span data-lake-id=\"u13d195cd\" id=\"u13d195cd\">写法没有登记机制，所以每次调用都会返回一个不同的值。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20s1%20%3D%20Symbol.for(%5C%22foo%5C%22)%3B%5CnSymbol.keyFor(s1)%20%2F%2F%20%5C%22foo%5C%22%5Cn%5Cnlet%20s2%20%3D%20Symbol(%5C%22foo%5C%22)%3B%5CnSymbol.keyFor(s2)%20%2F%2F%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WTdtT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"hZIrL\" id=\"hZIrL\"><span data-lake-id=\"u372e1139\" id=\"u372e1139\">Map和Object区别</span></h2><table data-lake-id=\"gSZLR\" id=\"gSZLR\" margin=\"true\" width-mode=\"contain\" class=\"lake-table\" style=\"width: 579px\"><colgroup><col width=\"193\"><col width=\"193\"><col width=\"193\"></colgroup><tbody><tr data-lake-id=\"uaf5debc6\" id=\"uaf5debc6\"><td data-lake-id=\"ufd1ec073\" id=\"ufd1ec073\"></td><td data-lake-id=\"u389f0dd3\" id=\"u389f0dd3\"><p data-lake-id=\"u0c10bd72\" id=\"u0c10bd72\"><span data-lake-id=\"u5667c347\" id=\"u5667c347\">Map</span></p></td><td data-lake-id=\"u36a27eb3\" id=\"u36a27eb3\"><p data-lake-id=\"u9adedb96\" id=\"u9adedb96\"><span data-lake-id=\"u00f1095e\" id=\"u00f1095e\">Object</span></p></td></tr><tr data-lake-id=\"ue417e838\" id=\"ue417e838\"><td data-lake-id=\"u20819286\" id=\"u20819286\"><p data-lake-id=\"u29c176ec\" id=\"u29c176ec\"><span data-lake-id=\"u24bd2d31\" id=\"u24bd2d31\">意外的键</span></p></td><td data-lake-id=\"u75a7848e\" id=\"u75a7848e\"><p data-lake-id=\"u3a8a62e7\" id=\"u3a8a62e7\"><span data-lake-id=\"u9d088a5a\" id=\"u9d088a5a\">Map默认情况不包含任何键，只包含显式插入的键</span></p></td><td data-lake-id=\"ue1410836\" id=\"ue1410836\"><p data-lake-id=\"ucac95cb2\" id=\"ucac95cb2\"><span data-lake-id=\"u19aefccb\" id=\"u19aefccb\">Object有一个原型，原型链上的键名有可能和自己在对象上设置的键名有冲突</span></p></td></tr><tr data-lake-id=\"u1a0f1e6d\" id=\"u1a0f1e6d\"><td data-lake-id=\"u1f2b22b2\" id=\"u1f2b22b2\"><p data-lake-id=\"u1b8e415c\" id=\"u1b8e415c\"><span data-lake-id=\"ud40afe98\" id=\"ud40afe98\">键的类型</span></p></td><td data-lake-id=\"ucf23afea\" id=\"ucf23afea\"><p data-lake-id=\"u594b9218\" id=\"u594b9218\"><span data-lake-id=\"ua6ba2bb4\" id=\"ua6ba2bb4\">Map的键可以是</span><strong><span data-lake-id=\"ued98d6eb\" id=\"ued98d6eb\">任意值</span></strong><span data-lake-id=\"u49c8260f\" id=\"u49c8260f\">，包括函数、对象或任意基本类型</span></p></td><td data-lake-id=\"ub64fdfa4\" id=\"ub64fdfa4\"><p data-lake-id=\"u71c9a331\" id=\"u71c9a331\"><span data-lake-id=\"u165d0d3e\" id=\"u165d0d3e\">Object的键必须是</span><strong><span data-lake-id=\"u933de930\" id=\"u933de930\">String或Symbol</span></strong></p></td></tr><tr data-lake-id=\"uce020e25\" id=\"uce020e25\"><td data-lake-id=\"u1cc54bf8\" id=\"u1cc54bf8\"><p data-lake-id=\"ua43fd71e\" id=\"ua43fd71e\"><span data-lake-id=\"u13bb6651\" id=\"u13bb6651\">键的顺序</span></p></td><td data-lake-id=\"ua35dccce\" id=\"ua35dccce\"><p data-lake-id=\"u5ebbb823\" id=\"u5ebbb823\"><span data-lake-id=\"u77ae10d1\" id=\"u77ae10d1\">Map中的</span><strong><span data-lake-id=\"u643ac46b\" id=\"u643ac46b\">key</span></strong><span data-lake-id=\"u88cd7b60\" id=\"u88cd7b60\">是</span><strong><span data-lake-id=\"u2b9c81c5\" id=\"u2b9c81c5\">有序</span></strong><span data-lake-id=\"uf3e9db1e\" id=\"uf3e9db1e\">的。因此，当迭代的时候，Map对象以</span><strong><span data-lake-id=\"ub0095288\" id=\"ub0095288\">插入的顺序</span></strong><span data-lake-id=\"u9d4ceab2\" id=\"u9d4ceab2\">返回键值</span></p></td><td data-lake-id=\"ua99c70a3\" id=\"ua99c70a3\"><p data-lake-id=\"u7f053dcb\" id=\"u7f053dcb\"><span data-lake-id=\"u424d2085\" id=\"u424d2085\">Object的键是</span><strong><span data-lake-id=\"u98961dba\" id=\"u98961dba\">无序</span></strong><span data-lake-id=\"u6746f394\" id=\"u6746f394\">的</span></p></td></tr><tr data-lake-id=\"u327109fb\" id=\"u327109fb\"><td data-lake-id=\"u2535e53c\" id=\"u2535e53c\"><p data-lake-id=\"u1d5cefa1\" id=\"u1d5cefa1\"><span data-lake-id=\"u6ff489d3\" id=\"u6ff489d3\">Size</span></p></td><td data-lake-id=\"u7ef72b8f\" id=\"u7ef72b8f\"><p data-lake-id=\"uaebcc5cb\" id=\"uaebcc5cb\"><span data-lake-id=\"ue4ed139b\" id=\"ue4ed139b\">Map的键值对个数可以轻易地通过</span><strong><span data-lake-id=\"uf052561f\" id=\"uf052561f\">size</span></strong><span data-lake-id=\"ufb95cb2b\" id=\"ufb95cb2b\">属性获取</span></p></td><td data-lake-id=\"ua99f76a9\" id=\"ua99f76a9\"><p data-lake-id=\"u423d838d\" id=\"u423d838d\"><span data-lake-id=\"u53123bba\" id=\"u53123bba\">Object建值对个数只能</span><strong><span data-lake-id=\"u0795ec3a\" id=\"u0795ec3a\">手动计算</span></strong></p></td></tr><tr data-lake-id=\"u7db24806\" id=\"u7db24806\"><td data-lake-id=\"u909bcfcd\" id=\"u909bcfcd\"><p data-lake-id=\"u2e3c7b42\" id=\"u2e3c7b42\"><span data-lake-id=\"ubf18bb7c\" id=\"ubf18bb7c\">迭代</span></p></td><td data-lake-id=\"u8b5da74f\" id=\"u8b5da74f\"><p data-lake-id=\"u8d87dd99\" id=\"u8d87dd99\"><span data-lake-id=\"u59fa0589\" id=\"u59fa0589\">Map是iterable的，所以可以</span><strong><span data-lake-id=\"u83effa9d\" id=\"u83effa9d\">直接被迭代</span></strong></p></td><td data-lake-id=\"u735ea899\" id=\"u735ea899\"><p data-lake-id=\"ua3ad2d62\" id=\"ua3ad2d62\"><span data-lake-id=\"u2615f875\" id=\"u2615f875\">迭代Object需要以某种方式</span><strong><span data-lake-id=\"u2a01f4da\" id=\"u2a01f4da\">获取它的键然后才能迭代</span></strong></p></td></tr><tr data-lake-id=\"u9256710a\" id=\"u9256710a\"><td data-lake-id=\"u86ce7bfc\" id=\"u86ce7bfc\"><p data-lake-id=\"u66e096f9\" id=\"u66e096f9\"><span data-lake-id=\"u8a9a3e79\" id=\"u8a9a3e79\">性能</span></p></td><td data-lake-id=\"u809c04f7\" id=\"u809c04f7\"><p data-lake-id=\"uc07f4794\" id=\"uc07f4794\"><span data-lake-id=\"ue0f90096\" id=\"ue0f90096\">在频繁增删键值对的场景下表现更好</span></p></td><td data-lake-id=\"u36fccccd\" id=\"u36fccccd\"><p data-lake-id=\"ueaeee7be\" id=\"ueaeee7be\"><span data-lake-id=\"u0e5888ce\" id=\"u0e5888ce\">在频繁添加和删除键值对的场景下</span><strong><span data-lake-id=\"u81a9478c\" id=\"u81a9478c\">未做出优化</span></strong></p></td></tr></tbody></table><h2 data-lake-id=\"N2G8K\" id=\"N2G8K\"><span data-lake-id=\"u6ca8cd4b\" id=\"u6ca8cd4b\">Map和WeakMap区别</span></h2><h3 data-lake-id=\"jjMeF\" id=\"jjMeF\"><span data-lake-id=\"u6931846b\" id=\"u6931846b\">Map </span></h3><p data-lake-id=\"u69b54603\" id=\"u69b54603\"><span data-lake-id=\"ue01b1f22\" id=\"ue01b1f22\">map本质上是键值对的集合，但是普通Object的中的键值只能是字符串或Symbol。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</span></p><p data-lake-id=\"u6571a952\" id=\"u6571a952\"><span data-lake-id=\"u5cce6b8d\" id=\"u5cce6b8d\">实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20%5B%5Cn%20%20%5B%5C%22name%5C%22%2C%5C%22%E5%BC%A0%E4%B8%89%5C%22%5D%2C%5Cn%20%20%5B%5C%22age%5C%22%2C18%5D%2C%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Czmyw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5757c0e2\" id=\"u5757c0e2\"><span data-lake-id=\"ubc4c3d31\" id=\"ubc4c3d31\">Map数据结构有以下操作方法：</span></p><ul list=\"uf92b910b\"><li fid=\"ub4b02301\" data-lake-id=\"u540be3ee\" id=\"u540be3ee\"><span data-lake-id=\"ue4983cdb\" id=\"ue4983cdb\">size：</span><code data-lake-id=\"u9a74279d\" id=\"u9a74279d\"><span data-lake-id=\"udf386328\" id=\"udf386328\">map.size()</span></code><span data-lake-id=\"u03a83388\" id=\"u03a83388\">返回Map结构的成员总数</span></li><li fid=\"ub4b02301\" data-lake-id=\"u8aef7ad9\" id=\"u8aef7ad9\"><span data-lake-id=\"u18725609\" id=\"u18725609\">set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"ub4b02301\" data-lake-id=\"u6eaf2244\" id=\"u6eaf2244\"><span data-lake-id=\"u28d3dd8e\" id=\"u28d3dd8e\">get(key)：该方法读取key对应的键值，如果找不到key，返回undefined</span></li><li fid=\"ub4b02301\" data-lake-id=\"ue2d3a94e\" id=\"ue2d3a94e\"><span data-lake-id=\"ud35ef554\" id=\"ud35ef554\">has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"ub4b02301\" data-lake-id=\"uafb3b0c1\" id=\"uafb3b0c1\"><span data-lake-id=\"u6e93064b\" id=\"u6e93064b\">delete(key)：该方法删除某个key，返回true，如果删除失败，返回false。</span></li><li fid=\"ub4b02301\" data-lake-id=\"ubef71f69\" id=\"ubef71f69\"><span data-lake-id=\"uf5715e8d\" id=\"uf5715e8d\">clear()：map.clear() 清除所有成员，没有返回值</span></li></ul><p data-lake-id=\"u6fedadfb\" id=\"u6fedadfb\"><span data-lake-id=\"u4424ec18\" id=\"u4424ec18\">Map结构原生提供是三个遍历器生成函数和一个遍历方法</span></p><ul list=\"uce83304c\"><li fid=\"ue18db2ef\" data-lake-id=\"uddc7d765\" id=\"uddc7d765\"><span data-lake-id=\"uddce29f9\" id=\"uddce29f9\">keys()：返回键名的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"uc4c6bf13\" id=\"uc4c6bf13\"><span data-lake-id=\"uc48df02e\" id=\"uc48df02e\">values()：返回键值的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"uaa8f5f7c\" id=\"uaa8f5f7c\"><span data-lake-id=\"u56969e42\" id=\"u56969e42\">entries()：返回所有成员的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"ua1503e62\" id=\"ua1503e62\"><span data-lake-id=\"udcf43fbe\" id=\"udcf43fbe\">forEach()：遍历Map的所有成员</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20new%20Map(%5B%5Cn%20%20%5B%5C%22foo%5C%22%2C1%5D%2C%5Cn%20%20%5B%5C%22bar%5C%22%2C2%5D%2C%5Cn%5D)%5Cnfor(let%20key%20of%20map.keys())%7B%5Cn%5Ctconsole.log(key)%3B%20%2F%2F%20foo%20bar%5Cn%7D%5Cnfor(let%20value%20of%20map.values())%7B%5Cn%5Ctconsole.log(value)%3B%20%2F%2F%201%202%5Cn%7D%5Cnfor(let%20items%20of%20map.entries())%7B%5Cn%5Ctconsole.log(items)%3B%20%2F%2F%20%5B%5C%22foo%5C%22%2C1%5D%20%5B%5C%22bar%5C%22%2C2%5D%5Cn%7D%5Cnmap.forEach(%20(value%2Ckey%2Cmap)%20%3D%3E%20%7B%5Cn%5Ctconsole.log(key%2Cvalue)%3B%20%2F%2F%20foo%201%20bar%202%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZmVp1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ZTsz5\" id=\"ZTsz5\"><span data-lake-id=\"u0f2a8a9b\" id=\"u0f2a8a9b\">WeakMap</span></h3><p data-lake-id=\"ud97cbf18\" id=\"ud97cbf18\"><span data-lake-id=\"ud79ece94\" id=\"ud79ece94\">WeakMap对象也是一组键值对的集合，其中的键是</span><strong><span data-lake-id=\"u312e16e5\" id=\"u312e16e5\">弱引用</span></strong><span data-lake-id=\"u467ed0ef\" id=\"u467ed0ef\">。</span><strong><span data-lake-id=\"uce49f8e7\" id=\"uce49f8e7\">其键必须是对象，</span></strong><span data-lake-id=\"uc19cbc25\" id=\"uc19cbc25\">原始数据类型不能作为key值，而值可以是任意的。</span></p><p data-lake-id=\"uf793b7af\" id=\"uf793b7af\"><span data-lake-id=\"u5ebc76d2\" id=\"u5ebc76d2\">该对象也有以下几种方法：</span></p><ul list=\"u829bd7d5\"><li fid=\"u14f38f06\" data-lake-id=\"u3a5a516c\" id=\"u3a5a516c\"><strong><span data-lake-id=\"uab740337\" id=\"uab740337\">set(key,value)</span></strong><span data-lake-id=\"u10d0aa8b\" id=\"u10d0aa8b\">：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"u14f38f06\" data-lake-id=\"uc8a73b30\" id=\"uc8a73b30\"><strong><span data-lake-id=\"udeff3ae3\" id=\"udeff3ae3\">get(key)</span></strong><span data-lake-id=\"ucaf312b4\" id=\"ucaf312b4\">：读取key对应的键值，如果找不到key，返回undefined。</span></li><li fid=\"u14f38f06\" data-lake-id=\"uce9ff6f7\" id=\"uce9ff6f7\"><strong><span data-lake-id=\"u7b10bc91\" id=\"u7b10bc91\">has(key)</span></strong><span data-lake-id=\"ua18caaf0\" id=\"ua18caaf0\">：返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"u14f38f06\" data-lake-id=\"u0cefdb13\" id=\"u0cefdb13\"><strong><span data-lake-id=\"uc46b287e\" id=\"uc46b287e\">delete(key)</span></strong><span data-lake-id=\"u2fddc134\" id=\"u2fddc134\">：删除某个键，返回true，如果删除失败，返回false。</span></li></ul><p data-lake-id=\"u3be716ed\" id=\"u3be716ed\"><span data-lake-id=\"u2c404ca5\" id=\"u2c404ca5\">其clear() 方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</span></p><p data-lake-id=\"u66795184\" id=\"u66795184\"><strong><span data-lake-id=\"u55bd299c\" id=\"u55bd299c\">WeakMap的设计目的</span></strong><span data-lake-id=\"ua62d27a1\" id=\"ua62d27a1\">：</span></p><ul list=\"ub7eebdf4\"><li fid=\"u9bf42fee\" data-lake-id=\"u29bbb081\" id=\"u29bbb081\"><span data-lake-id=\"u693be38a\" id=\"u693be38a\">有时想在某个对象上存放一些数据，但是这会形成对于这个对象的引用。一旦不需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</span></li><li fid=\"u9bf42fee\" data-lake-id=\"uea0d4d3a\" id=\"uea0d4d3a\"><span data-lake-id=\"ua7a22d3c\" id=\"ua7a22d3c\">而WeakMap的</span><strong><span data-lake-id=\"u869f974f\" id=\"u869f974f\">键名所引用的对象都是弱引用</span></strong><span data-lake-id=\"uf7be4937\" id=\"uf7be4937\">， 即</span><strong><span data-lake-id=\"ua66a119f\" id=\"ua66a119f\">垃圾回收机制不将该引用考虑在内。</span></strong><span data-lake-id=\"ub8f99eb5\" id=\"ub8f99eb5\">因此，</span><u><span data-lake-id=\"ufaedfe5e\" id=\"ufaedfe5e\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，</span></u><u><strong><span data-lake-id=\"u0419d93f\" id=\"u0419d93f\">不用手动删除引用</span></strong></u><u><span data-lake-id=\"u75645eb6\" id=\"u75645eb6\">。</span></u></li></ul><h3 data-lake-id=\"AtFqQ\" id=\"AtFqQ\"><span data-lake-id=\"ud2009fc8\" id=\"ud2009fc8\">总结</span></h3><ul list=\"u3c9748a8\"><li fid=\"uae7e69d5\" data-lake-id=\"udead43b6\" id=\"udead43b6\"><span data-lake-id=\"u38748e97\" id=\"u38748e97\">Map数据结构，类似于对象，也是键值对的集合，但是“键”的范围</span><strong><span data-lake-id=\"ufa887d56\" id=\"ufa887d56\">不限于</span></strong><span data-lake-id=\"u29209773\" id=\"u29209773\">字符串，各种类型的值（包括对象）都可以作为键。</span></li><li fid=\"uae7e69d5\" data-lake-id=\"u0a920e6a\" id=\"u0a920e6a\"><span data-lake-id=\"u75924813\" id=\"u75924813\">WeakMap 结构与Map结构类似，也是用于生成键值对的集合。但是WeakMap</span><strong><span data-lake-id=\"u7d86db0b\" id=\"u7d86db0b\">只接受对象作为键名</span></strong><span data-lake-id=\"ub8da37c2\" id=\"ub8da37c2\">（null除外），不接受其他类型的值作为键名。</span><strong><span data-lake-id=\"ud1d32490\" id=\"ud1d32490\">而且WeakMap的键名所指向的对象是弱引用，不计入垃圾回收机制。</span></strong></li></ul><h2 data-lake-id=\"QPbAT\" id=\"QPbAT\"><span data-lake-id=\"u354c8a89\" id=\"u354c8a89\">JS内置对象</span></h2><p data-lake-id=\"u68107cff\" id=\"u68107cff\"><span data-lake-id=\"u6a34fb6f\" id=\"u6a34fb6f\">全局的对象（global objects）或称标准内置对象。即全局作用域中的对象，全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</span></p><h3 data-lake-id=\"GDmze\" id=\"GDmze\"><span data-lake-id=\"u62c9e2d1\" id=\"u62c9e2d1\">标准内置对象的分类</span></h3><ol list=\"u3f863e44\"><li fid=\"ue18e0b74\" data-lake-id=\"uc23d6b97\" id=\"uc23d6b97\"><span data-lake-id=\"u230493d9\" id=\"u230493d9\">值属性：这些全局属性返回一个简单值，这些值没有自己的属性和方法。</span></li></ol><p data-lake-id=\"u9f4efac8\" id=\"u9f4efac8\"><span data-lake-id=\"u3f170bf5\" id=\"u3f170bf5\">如：Infinity、NaN、undefined、null字面量。</span></p><ol list=\"u14df4b96\" start=\"2\"><li fid=\"u0bf07c03\" data-lake-id=\"u86e9fbc1\" id=\"u86e9fbc1\"><span data-lake-id=\"u35025990\" id=\"u35025990\">函数属性：全局属性可以直接调用，不需要再调用时指定所属对象，执行结束后会将结果直接返回给调用者。</span></li></ol><p data-lake-id=\"u624d0258\" id=\"u624d0258\"><span data-lake-id=\"u5ea41b18\" id=\"u5ea41b18\">如：eval()、parseFloat()、parseInt()等。</span></p><ol list=\"udcbde13d\" start=\"3\"><li fid=\"u3165bbb9\" data-lake-id=\"u55a99a97\" id=\"u55a99a97\"><span data-lake-id=\"u65366634\" id=\"u65366634\">基本对象：是定义或使用其他对象的基础。包括一般对象、函数对象和错误对象。</span></li></ol><p data-lake-id=\"uf7e7e006\" id=\"uf7e7e006\"><span data-lake-id=\"u127381ee\" id=\"u127381ee\">如：Object、Function、Boolean、Symbol、Error等。</span></p><ol list=\"u17f8f892\" start=\"4\"><li fid=\"ua04e890a\" data-lake-id=\"u23ee3e5a\" id=\"u23ee3e5a\"><span data-lake-id=\"u13279a1e\" id=\"u13279a1e\">数字和日期对象：用来表示数字、日期和执行数学计算的对象。</span></li></ol><p data-lake-id=\"u5c0b00b1\" id=\"u5c0b00b1\"><span data-lake-id=\"u1d59797f\" id=\"u1d59797f\">如：Number、Math、Date。</span></p><ol list=\"udc612ae8\" start=\"5\"><li fid=\"ueccbc205\" data-lake-id=\"ud3a20997\" id=\"ud3a20997\"><span data-lake-id=\"u4f07298f\" id=\"u4f07298f\">字符串：用来表示和操作字符串的对象。</span></li></ol><p data-lake-id=\"u45692a13\" id=\"u45692a13\"><span data-lake-id=\"u6e874de3\" id=\"u6e874de3\">如：String、RegExp</span></p><ol list=\"u71292eb7\" start=\"6\"><li fid=\"u199fd10b\" data-lake-id=\"u773443c8\" id=\"u773443c8\"><span data-lake-id=\"ubb18140b\" id=\"ubb18140b\">可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。</span></li></ol><p data-lake-id=\"u3a8889c1\" id=\"u3a8889c1\"><span data-lake-id=\"u3a60427e\" id=\"u3a60427e\">如：Array。</span></p><ol list=\"u190037b0\" start=\"7\"><li fid=\"uded79c29\" data-lake-id=\"u78d2bcc8\" id=\"u78d2bcc8\"><span data-lake-id=\"u800bcb22\" id=\"u800bcb22\">使用键的集合对象：这些集合对象在存储时会使用到键，支持按照插入顺序来迭代元素。</span></li></ol><p data-lake-id=\"uab399f02\" id=\"uab399f02\"><span data-lake-id=\"u7f7224b8\" id=\"u7f7224b8\">如：Map、Set、WeakMap、WeakSet。</span></p><ol list=\"uc2f0388e\" start=\"8\"><li fid=\"u8cfeed78\" data-lake-id=\"u569a8dea\" id=\"u569a8dea\"><span data-lake-id=\"u46a574ce\" id=\"u46a574ce\">矢量集合：SIMD矢量集合中的数据会被组织为一个数据序列。</span></li></ol><p data-lake-id=\"uc81d90d7\" id=\"uc81d90d7\"><span data-lake-id=\"u19583e25\" id=\"u19583e25\">如：SIMD等。</span></p><ol list=\"u630eadfe\" start=\"9\"><li fid=\"ub0a179e2\" data-lake-id=\"ua7bdbc95\" id=\"ua7bdbc95\"><span data-lake-id=\"u14b365de\" id=\"u14b365de\">结构化数据：这些对象用来表示和操作结构化的缓冲区数据，或使用JSON编码的数据。</span></li></ol><p data-lake-id=\"u99ac3828\" id=\"u99ac3828\"><span data-lake-id=\"u33f93eb7\" id=\"u33f93eb7\">如：JSON数据。</span></p><ol list=\"ud6d44b3a\" start=\"10\"><li fid=\"udbb8938b\" data-lake-id=\"u0a56068d\" id=\"u0a56068d\"><span data-lake-id=\"u8b61f8af\" id=\"u8b61f8af\">控制抽象对象。如：Promise、Generator等。</span></li><li fid=\"udbb8938b\" data-lake-id=\"u68c0891a\" id=\"u68c0891a\"><span data-lake-id=\"u57e85904\" id=\"u57e85904\">反射。如：Reflect、Proxy。</span></li><li fid=\"udbb8938b\" data-lake-id=\"u53acdda4\" id=\"u53acdda4\"><span data-lake-id=\"u330d7b90\" id=\"u330d7b90\">国际化：为了支持多语言处理而加入的ECMAScript的对象。</span></li></ol><p data-lake-id=\"u1147f191\" id=\"u1147f191\"><span data-lake-id=\"ufc130369\" id=\"ufc130369\">如：Intl、Intl.Collator 等。</span></p><ol list=\"ue427b8a9\" start=\"13\"><li fid=\"u28233c6d\" data-lake-id=\"u6688626c\" id=\"u6688626c\"><span data-lake-id=\"u05edd8bf\" id=\"u05edd8bf\">WebAssembly</span></li><li fid=\"u28233c6d\" data-lake-id=\"u01e56467\" id=\"u01e56467\"><span data-lake-id=\"uafbaac43\" id=\"uafbaac43\">其他。如 arguments</span></li></ol><h3 data-lake-id=\"ydNG9\" id=\"ydNG9\"><span data-lake-id=\"u74d98dde\" id=\"u74d98dde\">总结</span></h3><ol list=\"u9971651c\"><li fid=\"u5750c4f4\" data-lake-id=\"u78c1cefb\" id=\"u78c1cefb\"><span data-lake-id=\"ud76b981b\" id=\"ud76b981b\">JS中的内置对象主要指的是在程序执行前存在全局作用域中的由JS定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。</span></li><li fid=\"u5750c4f4\" data-lake-id=\"uc1b624a6\" id=\"uc1b624a6\"><span data-lake-id=\"u048d2493\" id=\"u048d2493\">一般经常用到的如 全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数 如 Date、Object 等，还有提供数学计算的单体内置对象如 Math对象等。</span></li></ol><h2 data-lake-id=\"XVr1I\" id=\"XVr1I\"><span data-lake-id=\"u4fadeca6\" id=\"u4fadeca6\">JS脚本延迟加载的方式</span></h2><ul list=\"u7184e0e7\"><li fid=\"u992cb4d2\" data-lake-id=\"uf1970c6a\" id=\"uf1970c6a\"><span data-lake-id=\"ud958e017\" id=\"ud958e017\">defer：异步加载，延迟执行（html加载完再执行）</span></li><li fid=\"u992cb4d2\" data-lake-id=\"ue03bccd5\" id=\"ue03bccd5\"><span data-lake-id=\"u48358456\" id=\"u48358456\">async：异步加载，加载完立即执行（会阻塞html页面解析）</span></li><li fid=\"u992cb4d2\" data-lake-id=\"u44c528ce\" id=\"u44c528ce\"><span data-lake-id=\"uf1a87af5\" id=\"uf1a87af5\">动态创建DOM方式：对文档加载事件进行监听，当文档加载完后，再动态创建script标签来引入JS脚本。</span></li><li fid=\"u992cb4d2\" data-lake-id=\"u9d1c9e9e\" id=\"u9d1c9e9e\"><span data-lake-id=\"u881afe4c\" id=\"u881afe4c\">setTimeout延迟方法：设置一个定时器来延迟加载JS脚本文件</span></li><li fid=\"u992cb4d2\" data-lake-id=\"ua1acb99e\" id=\"ua1acb99e\"><span data-lake-id=\"ua5679060\" id=\"ua5679060\">让JS最后加载：将JS脚本文件放在文档底部，来使JS脚本尽可能最后加载执行。</span></li></ul><h2 data-lake-id=\"SpWzB\" id=\"SpWzB\"><span data-lake-id=\"u34570cfe\" id=\"u34570cfe\">JS类数组对象</span></h2><p data-lake-id=\"u21f2a8c0\" id=\"u21f2a8c0\"><span data-lake-id=\"u316b62fb\" id=\"u316b62fb\">JS类数组对象：一个拥有length属性和若干索引属性的对象。</span></p><p data-lake-id=\"u082b64d5\" id=\"u082b64d5\"><span data-lake-id=\"u8b3a264a\" id=\"u8b3a264a\">和数组类似，但不能调用数组的方法。</span></p><p data-lake-id=\"u6f2cdedf\" id=\"u6f2cdedf\"><span data-lake-id=\"u6f791aa8\" id=\"u6f791aa8\">常见的类数组对象有：</span></p><ul list=\"u41beef12\"><li fid=\"ud3daed2c\" data-lake-id=\"u699ad047\" id=\"u699ad047\"><span data-lake-id=\"u8d5b80b9\" id=\"u8d5b80b9\">argument 和 DOM 方法的返回结果</span></li><li fid=\"ud3daed2c\" data-lake-id=\"uc035f43d\" id=\"uc035f43d\"><span data-lake-id=\"u2fa15529\" id=\"u2fa15529\">函数（因为含有length属性值，代表可接收的参数个数）</span></li></ul><p data-lake-id=\"ucda206b9\" id=\"ucda206b9\"><span data-lake-id=\"u05051ff9\" id=\"u05051ff9\">​</span><br></p><p data-lake-id=\"u46f25c1e\" id=\"u46f25c1e\"><span data-lake-id=\"u3d3dcf75\" id=\"u3d3dcf75\">类数组转换为数组的方法：</span></p><ol list=\"u5583a35b\"><li fid=\"ud7e01a2c\" data-lake-id=\"ud3ad2b8a\" id=\"ud3ad2b8a\"><span data-lake-id=\"u8992f9b9\" id=\"u8992f9b9\">通过 call 调用数组的 slice 方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.slice.call(arrayLike)%3B%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MKucG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u1a492e6e\" start=\"2\"><li fid=\"u5081fdd1\" data-lake-id=\"u61998ad7\" id=\"u61998ad7\"><span data-lake-id=\"u8d7f8119\" id=\"u8d7f8119\">通过call调用数组的splice方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.splice.call(arrayLike%2C0)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aeZDm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u76834d8d\" start=\"3\"><li fid=\"u6a4d4f7c\" data-lake-id=\"u8f316d9c\" id=\"u8f316d9c\"><span data-lake-id=\"u313b5032\" id=\"u313b5032\">通过apply调用数组的 concat 方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.concat.apply(%5B%5D%2C%20arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OqPIF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"ue7f3cac0\" start=\"4\"><li fid=\"u6ec5a2b5\" data-lake-id=\"u39a1c4e3\" id=\"u39a1c4e3\"><span data-lake-id=\"u7cd1765d\" id=\"u7cd1765d\">通过Array.from() 实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.from(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OKWMy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"PPTXu\" id=\"PPTXu\"><span data-lake-id=\"ub5928b8a\" id=\"ub5928b8a\">数组有哪些原生方法</span></h2><ul list=\"uf0857a65\"><li fid=\"u33df9f3b\" data-lake-id=\"u7b7adae3\" id=\"u7b7adae3\"><span data-lake-id=\"u30d2cd08\" id=\"u30d2cd08\">数组和字符串的转换方法：toString()、toLocalString()、join()，其中join()可以指定转换为字符串时的分隔符</span></li><li fid=\"u33df9f3b\" data-lake-id=\"uad91bf9f\" id=\"uad91bf9f\"><span data-lake-id=\"u11613003\" id=\"u11613003\">数组尾部操作的方法：pop()和 push()，push() 方法可以传入多个参数</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ua4fc3a25\" id=\"ua4fc3a25\"><span data-lake-id=\"u2abd0b2d\" id=\"u2abd0b2d\">数组首部操作的方法：shift() 删除和 unshift() 添加</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ua59d9d8b\" id=\"ua59d9d8b\"><span data-lake-id=\"ufb507ae9\" id=\"ufb507ae9\">重排序的方法：reverse() 和 sort()，sort() 可传入一个函数进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ubc9e7871\" id=\"ubc9e7871\"><span data-lake-id=\"u2e950a76\" id=\"u2e950a76\">数组连接：concat() 返回拼接好的数组，不影响原数组。</span></li><li fid=\"u33df9f3b\" data-lake-id=\"uc18db9bd\" id=\"uc18db9bd\"><span data-lake-id=\"u8fdad126\" id=\"u8fdad126\">数组截取：splice()</span></li><li fid=\"u33df9f3b\" data-lake-id=\"u61e1fc3a\" id=\"u61e1fc3a\"><span data-lake-id=\"u32a86ca5\" id=\"u32a86ca5\">影响原数组特定项的索引的方法，indexOf()和 lastIndexOf() </span></li><li fid=\"u33df9f3b\" data-lake-id=\"u5cb443d3\" id=\"u5cb443d3\"><span data-lake-id=\"u2dc18e89\" id=\"u2dc18e89\">迭代方法：every()、some()、filter()、map()、forEach()方法</span></li><li fid=\"u33df9f3b\" data-lake-id=\"u3cd2e702\" id=\"u3cd2e702\"><span data-lake-id=\"ufe17b2b6\" id=\"ufe17b2b6\">数组归并方法：reduce()、reduceRight()方法</span></li></ul><h2 data-lake-id=\"w9O8P\" id=\"w9O8P\"><span data-lake-id=\"ue0f47fec\" id=\"ue0f47fec\">Promise.race() 应用场景</span></h2><blockquote data-lake-id=\"ub5c59186\" id=\"ub5c59186\"><p data-lake-id=\"u8b52ba88\" id=\"u8b52ba88\"><span data-lake-id=\"uc4aaf02e\" id=\"uc4aaf02e\">race() 和 all() 一样，接受的参数是一个每项都是Promise的数组，但是与all不同的是，当</span><strong><u><span data-lake-id=\"u5bfc8b5d\" id=\"u5bfc8b5d\">最先执行完</span></u></strong><span data-lake-id=\"u7e2f9370\" id=\"u7e2f9370\">的事件执行完后，就直接返回该promise对象的值。</span></p><p data-lake-id=\"ue38e8a64\" id=\"ue38e8a64\"><span data-lake-id=\"u2b86a42c\" id=\"u2b86a42c\">如果第一个promise对象状态变成resolved，则自身的状态就变成了resolved；反之，第一个promise变成rejected，则自身状态就会变成rejected。</span></p></blockquote><p data-lake-id=\"u94adf03d\" id=\"u94adf03d\"><strong><span data-lake-id=\"ucdf1a8fb\" id=\"ucdf1a8fb\">Promise.race() 应用场景</span></strong><span data-lake-id=\"ub71b103d\" id=\"ub71b103d\">：</span></p><ul list=\"u8353400d\"><li fid=\"u73ccb280\" data-lake-id=\"u1637e5f9\" id=\"u1637e5f9\"><span data-lake-id=\"ub01e7d85\" id=\"ub01e7d85\">http请求时，做超时判断时，设置一个定时器，当定时器时间到了时间就在页面提醒请求超时。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E6%9F%90%E4%B8%AA%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%5Cnfunction%20requestImg()%20%7B%5Cn%20%20var%20p%20%3D%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%5Cn%20%20%20%20var%20img%20%3D%20new%20Image()%3B%5Cn%20%20%20%20img.onload%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20resolve(img)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20img.src%20%3D%20%5C%22http%3A%2F%2Fwww.baidu.com%2Fimg%2Fflexiable%2Flogo%2Fpc%2Fresult.png%5C%22%3B%5Cn%20%20%7D)%3B%5Cn%20%20return%20p%3B%5Cn%7D%5Cn%2F%2F%20%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BB%99%E8%AF%B7%E6%B1%82%E8%AE%A1%E6%97%B6%5Cnfunction%20timeout()%20%7B%5Cn%20%20var%20p%20%3D%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%5Cn%20%20%20%20setTimeout(function%20()%20%7B%5Cn%20%20%20%20%20%20reject(%5C%22%E5%9B%BE%E7%89%87%E8%AF%B7%E6%B1%82%E6%93%8D%E6%97%B6%5C%22)%3B%5Cn%20%20%20%20%7D%2C%205000)%3B%5Cn%20%20%7D)%3B%5Cn%20%20return%20p%3B%5Cn%7D%5CnPromise.race(%5BrequestImg()%2C%20timeout()%5D)%5Cn%20%20.then(function%20(results)%20%7B%5Cn%20%20%20%20console.log(results)%3B%5Cn%20%20%7D)%5Cn%20%20.catch(function%20(reason)%20%7B%5Cn%20%20%20%20console.log(reason)%3B%5Cn%20%20%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E7%94%A8Promise%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%88%A4%E6%96%AD%E5%9B%BE%E7%89%87%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E6%88%90%E5%8A%9F%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PbAr2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"k94WT\" id=\"k94WT\"><span data-lake-id=\"u1c981dc1\" id=\"u1c981dc1\">Promise.all() 应用场景</span></h2><blockquote data-lake-id=\"u4ce3c53c\" id=\"u4ce3c53c\"><p data-lake-id=\"u6391473d\" id=\"u6391473d\"><span data-lake-id=\"u774fa797\" id=\"u774fa797\">它可以将多个promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功时返回一个</span><strong><span data-lake-id=\"u80893a42\" id=\"u80893a42\">结构数组</span></strong><span data-lake-id=\"u50b5eac1\" id=\"u50b5eac1\">，而失败时则返回</span><strong><span data-lake-id=\"u1016030b\" id=\"u1016030b\">最先被reject失败状态的值。</span></strong></p></blockquote><p data-lake-id=\"u4841d637\" id=\"u4841d637\"><strong><span data-lake-id=\"u01415d0a\" id=\"u01415d0a\">Promise.all() 中传入的是数组，返回的也是数组，并会进行映射，传入的Promise对象返回值是按照顺序在数组中排列的，但是注意他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</span></strong></p><blockquote data-lake-id=\"u40243d15\" id=\"u40243d15\"><p data-lake-id=\"u0f695745\" id=\"u0f695745\"><strong><span data-lake-id=\"u47842d1b\" id=\"u47842d1b\">注意：Promise.all 获得的成功结果的数组中的数据顺序和Promise.all()接收的数组顺序是一致的，这样当遇到</span></strong><strong><u><span data-lake-id=\"u32171f47\" id=\"u32171f47\">多个请求并根据请求顺序获取和使用数据</span></u></strong><strong><span data-lake-id=\"u5e0b012b\" id=\"u5e0b012b\">的场景，可以使用 Promise.all来解决。</span></strong></p></blockquote><h2 data-lake-id=\"CSPWq\" id=\"CSPWq\"><span data-lake-id=\"u4744caab\" id=\"u4744caab\">使用requestAnimationFrame实现一个循环定时器</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20setInterval(callback%2C%20interval)%20%7B%5Cn%20%20let%20timer%5Cn%20%20const%20now%20%3D%20Date.now%5Cn%20%20let%20startTime%20%3D%20now()%5Cn%20%20let%20endTime%20%3D%20startTime%5Cn%20%20const%20loop%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20timer%20%3D%20window.requestAnimationFrame(loop)%5Cn%20%20%20%20endTime%20%3D%20now()%5Cn%20%20%20%20if%20(endTime%20-%20startTime%20%3E%3D%20interval)%20%7B%5Cn%20%20%20%20%20%20startTime%20%3D%20endTime%20%3D%20now()%5Cn%20%20%20%20%20%20callback(timer)%5Cn%20%20%7D%5Cn%7D%5Cntimer%20%3D%20window.requestAnimationFrame(loop)%5Cn%5Ctreturn%20timer%5Cn%7D%5Cnlet%20a%20%3D%200%5CnsetInterval(timer%20%3D%3E%20%7B%5Cn%20%20console.log(1)%5Cn%20%20a%2B%2B%5Cn%20%20if%20(a%20%3D%3D%3D%203)%20cancelAnimationFrame(timer)%5Cn%7D%2C%201000)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jh7zK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ueb0e21dd\" id=\"ueb0e21dd\"><span data-lake-id=\"uf9dd8b48\" id=\"uf9dd8b48\">⾸先 requestAnimationFrame ⾃带函数节流功能，基本可以保证在 16.6 毫秒内只执⾏⼀次（不掉</span></p><p data-lake-id=\"u60ca6967\" id=\"u60ca6967\"><span data-lake-id=\"ue4e95292\" id=\"ue4e95292\">帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u191f528d\" id=\"u191f528d\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS高频面试题 </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: JS</span></p><p data-lake-id=\"u0c591b02\" id=\"u0c591b02\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-13</span></p><p data-lake-id=\"uaa3b820d\" id=\"uaa3b820d\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-13</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: JS</span></p><p data-lake-id=\"u15405a15\" id=\"u15405a15\"><span data-lake-id=\"ud7e35e02\" id=\"ud7e35e02\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F7275569-78f8b42bb54aec85.jpg&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266536&amp;t=e242d8866a11e11ce85f7bd2674b4d7b</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"ZolgE\" id=\"ZolgE\"><span data-lake-id=\"u4ed87c25\" id=\"u4ed87c25\">apply、call、bind的区别</span></h2><ul list=\"u07ec95a7\"><li fid=\"u39da92f1\" data-lake-id=\"u6bdab0b4\" id=\"u6bdab0b4\"><span data-lake-id=\"u14f3eb67\" id=\"u14f3eb67\">三者都可以改变函数的this对象指向</span></li><li fid=\"u39da92f1\" data-lake-id=\"udff3d079\" id=\"udff3d079\"><span data-lake-id=\"u4b30799f\" id=\"u4b30799f\">三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window</span></li><li fid=\"u39da92f1\" data-lake-id=\"uc34d297e\" id=\"uc34d297e\"><span data-lake-id=\"ua6ad47f5\" id=\"ua6ad47f5\">三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</span></li><li fid=\"u39da92f1\" data-lake-id=\"uf1f6cdeb\" id=\"uf1f6cdeb\"><span data-lake-id=\"ufc1457f0\" id=\"ufc1457f0\">bind是返回绑定this之后的函数，需要手动执行函数，apply、call 则是立即执行</span></li></ul><h2 data-lake-id=\"yuKWf\" id=\"yuKWf\"><span data-lake-id=\"ua2630855\" id=\"ua2630855\">new操作符的实现原理</span></h2><p data-lake-id=\"u2e39dccc\" id=\"u2e39dccc\"><span data-lake-id=\"uf7a03099\" id=\"uf7a03099\">new操作符的执⾏过程：</span></p><p data-lake-id=\"u5fc8def3\" id=\"u5fc8def3\"><span data-lake-id=\"uefa723fe\" id=\"uefa723fe\">（1）⾸先创建了⼀个新的空对象</span></p><p data-lake-id=\"u91b99bd5\" id=\"u91b99bd5\"><span data-lake-id=\"u17e21575\" id=\"u17e21575\">（2）设置原型，将对象的原型设置为函数的 prototype 对象。</span></p><p data-lake-id=\"uc08c9e71\" id=\"uc08c9e71\"><span data-lake-id=\"uf5c63973\" id=\"uf5c63973\">（3）让函数的 this 指向这个对象，执⾏构造函数的代码（为这个新对象添加属性）</span></p><p data-lake-id=\"u5dd9eefa\" id=\"u5dd9eefa\"><span data-lake-id=\"uaba8e1a1\" id=\"uaba8e1a1\">（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引⽤类型，就返回这个引⽤类</span></p><p data-lake-id=\"u9e775328\" id=\"u9e775328\"><span data-lake-id=\"u4d7169f0\" id=\"u4d7169f0\">型的对象。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20objectFactory()%20%7B%5Cnlet%20newObject%20%3D%20null%3B%5Cnlet%20constructor%20%3D%20Array.prototype.shift.call(arguments)%3B%5Cnlet%20result%20%3D%20null%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF%E2%BC%80%E4%B8%AA%E5%87%BD%E6%95%B0%5Cnif%20(typeof%20constructor%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cnconsole.error(%5C%22type%20error%5C%22)%3B%5Cnreturn%3B%5Cn%7D%5Cn%2F%2F%20%E6%96%B0%E5%BB%BA%E2%BC%80%E4%B8%AA%E7%A9%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%20prototype%20%E5%AF%B9%E8%B1%A1%5CnnewObject%20%3D%20Object.create(constructor.prototype)%3B%5Cn%2F%2F%20%E5%B0%86%20this%20%E6%8C%87%E5%90%91%E6%96%B0%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%B9%B6%E6%89%A7%E2%BE%8F%E5%87%BD%E6%95%B0%5Cnresult%20%3D%20constructor.apply(newObject%2C%20arguments)%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%5Cnlet%20flag%20%3D%20result%20%26%26%20(typeof%20result%20%3D%3D%3D%20%5C%22object%5C%22%20%7C%7C%20typeof%20result%20%3D%3D%3D%5Cn%5C%22function%5C%22)%3B%5Cn%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cnreturn%20flag%20%3F%20result%20%3A%20newObject%3B%5Cn%7D%5Cn%2F%2F%20%E4%BD%BF%E2%BD%A4%E2%BD%85%E6%B3%95%5CnobjectFactory(%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%2C%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HxWQB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"EuRYC\" id=\"EuRYC\"><span data-lake-id=\"uae942fc9\" id=\"uae942fc9\">map()和foreach()的区别</span></h2><h3 data-lake-id=\"ogOb0\" id=\"ogOb0\"><span data-lake-id=\"ued1856aa\" id=\"ued1856aa\">简洁回答</span></h3><p data-lake-id=\"u7a3aea33\" id=\"u7a3aea33\"><span data-lake-id=\"ubcf5f5b6\" id=\"ubcf5f5b6\">都是⽤来遍历数组的，两者区别如下：</span></p><ul list=\"ud3e74295\"><li fid=\"u555dd7c7\" data-lake-id=\"u24f06412\" id=\"u24f06412\"><span data-lake-id=\"uda3e28c4\" id=\"uda3e28c4\">forEach()⽅法会针对每⼀个元素执⾏提供的函数，对数据的操作会改变原数组，该⽅法没有返回</span></li></ul><p data-lake-id=\"uaf7ac181\" id=\"uaf7ac181\"><span data-lake-id=\"u63b33eaf\" id=\"u63b33eaf\">值；</span></p><ul list=\"ud6f1821e\"><li fid=\"u17f5a1a7\" data-lake-id=\"u25e2e9ad\" id=\"u25e2e9ad\"><span data-lake-id=\"uf5e5e82e\" id=\"uf5e5e82e\">map()⽅法不会改变原数组的值，返回⼀个新数组，新数组中的值为原数组调⽤函数处理之后的</span></li></ul><p data-lake-id=\"u4eff17df\" id=\"u4eff17df\"><span data-lake-id=\"u95eaa78e\" id=\"u95eaa78e\">值；</span></p><h3 data-lake-id=\"LgnBg\" id=\"LgnBg\"><span data-lake-id=\"ua7d3a021\" id=\"ua7d3a021\">相同点</span></h3><ol list=\"u152663aa\"><li fid=\"u1b110533\" data-lake-id=\"uc81910d8\" id=\"uc81910d8\"><span data-lake-id=\"u233e51e3\" id=\"u233e51e3\">都是循环遍历数组的每一项</span></li><li fid=\"u1b110533\" data-lake-id=\"uc92e479b\" id=\"uc92e479b\"><span data-lake-id=\"u8573b682\" id=\"u8573b682\">都相当于封装好的单层for循环，三个值都相同</span></li><li fid=\"u1b110533\" data-lake-id=\"u5ede89bf\" id=\"u5ede89bf\"><span data-lake-id=\"uf445ca20\" id=\"uf445ca20\">每次执行匿名函数都支持三个参数，参数分别为item（当前每一项）、index（索引值）、arr（原数组）</span></li><li fid=\"u1b110533\" data-lake-id=\"ua6b771b6\" id=\"ua6b771b6\"><span data-lake-id=\"ua6990f34\" id=\"ua6990f34\">匿名函数中的this都是指向window</span></li><li fid=\"u1b110533\" data-lake-id=\"uc61e0fa0\" id=\"uc61e0fa0\"><span data-lake-id=\"u8cc432c0\" id=\"u8cc432c0\">只能遍历数组</span></li></ol><h3 data-lake-id=\"gJBw2\" id=\"gJBw2\"><span data-lake-id=\"ua62c8557\" id=\"ua62c8557\">不同点</span></h3><ul list=\"u1335ff5e\"><li fid=\"u97fc3c4e\" data-lake-id=\"uaa3c5be7\" id=\"uaa3c5be7\"><span data-lake-id=\"ubb200f28\" id=\"ubb200f28\">map()会分配内存空间存储新数组并有返回值，forEach()没有返回值</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"uc5dcb627\" id=\"uc5dcb627\"><span data-lake-id=\"u88a872e4\" id=\"u88a872e4\">forEach()允许calllback更改原始数组的元素，map()返回新的数组，map()不会对空数组进行检测</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"ub3699f29\" id=\"ub3699f29\"><span data-lake-id=\"u6f9b27d7\" id=\"u6f9b27d7\">forEach()遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"uf52ca49a\" id=\"uf52ca49a\"><span data-lake-id=\"u827a391c\" id=\"u827a391c\">map遍历后的数组通常会生成一个新的数组，新数组的值发生变化，当前遍历的数组值不会变化。</span></li><li fid=\"u97fc3c4e\" data-lake-id=\"ua05c9eab\" id=\"ua05c9eab\"><span data-lake-id=\"u6d7f55ad\" id=\"u6d7f55ad\">map的速度大于forEach</span></li></ul><h3 data-lake-id=\"qMAb9\" id=\"qMAb9\"><span data-lake-id=\"uf4f1bed0\" id=\"uf4f1bed0\">使用场景</span></h3><ol list=\"ua39ecbfd\"><li fid=\"uc5eb4a37\" data-lake-id=\"ua4984c5a\" id=\"ua4984c5a\"><span data-lake-id=\"u19f6e020\" id=\"u19f6e020\">forEach()适用于你并不打算改变数据的时候</span></li><li fid=\"uc5eb4a37\" data-lake-id=\"u1faeb043\" id=\"u1faeb043\"><span data-lake-id=\"u9261656d\" id=\"u9261656d\">map()适用于你要改变数据的时候。不仅在于它更快，而且返回一个新数组。（因此可以使用复合（composition）（map(),filter(),reduce()等组合使用））</span></li></ol><p data-lake-id=\"ub47a1f9b\" id=\"ub47a1f9b\"><span data-lake-id=\"u6400cd45\" id=\"u6400cd45\">性能上来说，for&gt;forEach&gt;map。</span></p><h2 data-lake-id=\"fNTcb\" id=\"fNTcb\"><span data-lake-id=\"udae3adf9\" id=\"udae3adf9\">Symbol</span></h2><ol list=\"u24991fc3\"><li fid=\"u6c32d8f1\" data-lake-id=\"u83c42b6d\" id=\"u83c42b6d\"><span data-lake-id=\"uf1ca22b3\" id=\"uf1ca22b3\">什么是Symbol？</span></li></ol><p data-lake-id=\"u4ba1b7d7\" id=\"u4ba1b7d7\" style=\"text-indent: 2em\"><span data-lake-id=\"u184c60ea\" id=\"u184c60ea\">Symbol是ES6新增的一种数据类型，被划分为</span><strong><span data-lake-id=\"u4290f69a\" id=\"u4290f69a\">基本数据类型</span></strong><span data-lake-id=\"ud5f52f5f\" id=\"ud5f52f5f\">。不能用 </span><code data-lake-id=\"u8c07b6e6\" id=\"u8c07b6e6\"><span data-lake-id=\"u3b0db586\" id=\"u3b0db586\">new</span></code><span data-lake-id=\"u75541d5e\" id=\"u75541d5e\">。</span></p><ul list=\"u5e2856f7\"><li fid=\"u6ccf7f8a\" data-lake-id=\"ua21ebc77\" id=\"ua21ebc77\"><span data-lake-id=\"ucc9cb7e6\" id=\"ucc9cb7e6\">基本数据类型：字符串、数值、布尔、undefined、null、Symbol。</span></li><li fid=\"u6ccf7f8a\" data-lake-id=\"u37091692\" id=\"u37091692\"><span data-lake-id=\"ubbbf09da\" id=\"ubbbf09da\">引用数据类型：Object</span></li></ul><ol list=\"u3b9dcdd7\" start=\"2\"><li fid=\"u8b96bea1\" data-lake-id=\"ua5c50a5a\" id=\"ua5c50a5a\"><span data-lake-id=\"uf8405b8c\" id=\"uf8405b8c\">作用</span></li></ol><p data-lake-id=\"u07e440cd\" id=\"u07e440cd\"><span data-lake-id=\"u23a49187\" id=\"u23a49187\">用来表示一个独一无二的值。</span></p><ol list=\"uf65cc4e4\" start=\"3\"><li fid=\"u796ac187\" data-lake-id=\"u8323c438\" id=\"u8323c438\"><span data-lake-id=\"u27940de6\" id=\"u27940de6\">格式：</span><code data-lake-id=\"u4a664624\" id=\"u4a664624\"><span data-lake-id=\"u1cdfe7ae\" id=\"u1cdfe7ae\">let xxx = Symbol('标识字符串')</span></code></li><li fid=\"u796ac187\" data-lake-id=\"u2c83ce55\" id=\"u2c83ce55\"><span data-lake-id=\"ue5686142\" id=\"ue5686142\">为什么需要Symbol？</span></li></ol><p data-lake-id=\"u1a3e155d\" id=\"u1a3e155d\" style=\"text-indent: 2em\"><span data-lake-id=\"u37301165\" id=\"u37301165\">为了避免第三方框框架的同名属性被覆盖。</span></p><blockquote data-lake-id=\"u6cdb980b\" id=\"u6cdb980b\" style=\"padding-left: 2em\"><p data-lake-id=\"ubf547b48\" id=\"ubf547b48\"><span data-lake-id=\"ue8037304\" id=\"ue8037304\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></p></blockquote><ol list=\"ued0bdf73\" start=\"5\"><li fid=\"u2f3be6c2\" data-lake-id=\"u791b2d4b\" id=\"u791b2d4b\"><span data-lake-id=\"u23da1184\" id=\"u23da1184\">如果区分Symbol？</span></li></ol><p data-lake-id=\"u99726587\" id=\"u99726587\" style=\"text-indent: 2em\"><span data-lake-id=\"u01f4a6b3\" id=\"u01f4a6b3\">在通过Symbol生成一个独一无二的值时，可以设置一个标记</span></p><p data-lake-id=\"u59dd8786\" id=\"u59dd8786\" style=\"text-indent: 2em\"><span data-lake-id=\"u981044ac\" id=\"u981044ac\">这个标记仅仅用于区分，没有其他任何意义。</span></p><ol list=\"udc182035\" start=\"6\"><li fid=\"u8964f751\" data-lake-id=\"u8d6baf17\" id=\"u8d6baf17\"><span data-lake-id=\"u502922b4\" id=\"u502922b4\">如果特殊情况需要读取这个标记，</span></li></ol><ul list=\"uea6e2aec\"><li fid=\"uae9aadcd\" data-lake-id=\"ud73ce616\" id=\"ud73ce616\"><span data-lake-id=\"uc57cd015\" id=\"uc57cd015\">Symbol类型可以转化为boolean或字符串，转化为字符串时前面会加上Symbol(wxy)，不方便</span></li><li fid=\"uae9aadcd\" data-lake-id=\"ub5657a7d\" id=\"ub5657a7d\"><span data-lake-id=\"ub79e4f5b\" id=\"ub79e4f5b\">可以直接通过description属性获取Symbol函数的字符串标识参数</span></li></ul><ol list=\"u9dc85897\" start=\"7\"><li fid=\"uc78472fe\" data-lake-id=\"u76de8cd9\" id=\"u76de8cd9\"><span data-lake-id=\"u87225889\" id=\"u87225889\">使用Symbol类型作为属性名</span></li></ol><blockquote data-lake-id=\"u09282575\" id=\"u09282575\" style=\"padding-left: 2em\"><p data-lake-id=\"u84c1fe0a\" id=\"u84c1fe0a\"><span data-lake-id=\"u6fca0291\" id=\"u6fca0291\">对象的属性要么是字符串，要么是Symbol类型</span></p></blockquote><ul list=\"u27713a6c\"><li fid=\"u4e107979\" data-lake-id=\"u5f898a70\" id=\"u5f898a70\"><span data-lake-id=\"uf9426ce3\" id=\"uf9426ce3\">默认是字符串，所以不加</span><code data-lake-id=\"u410fb57d\" id=\"u410fb57d\"><span data-lake-id=\"ub52b0987\" id=\"ub52b0987\">&quot;&quot;</span></code><span data-lake-id=\"u31175675\" id=\"u31175675\">也可以；如果需要类型为Symbol，需要使用</span><code data-lake-id=\"ub4853563\" id=\"ub4853563\"><span data-lake-id=\"ubd388a31\" id=\"ubd388a31\">[]</span></code><span data-lake-id=\"u8e2b3a45\" id=\"u8e2b3a45\">。</span></li><li fid=\"u4e107979\" data-lake-id=\"u26b3983a\" id=\"u26b3983a\"><span data-lake-id=\"ud42b8d26\" id=\"ud42b8d26\">不能用</span><code data-lake-id=\"u52f4301e\" id=\"u52f4301e\"><span data-lake-id=\"ubd0df431\" id=\"ubd0df431\">.</span></code><span data-lake-id=\"ufd502dd0\" id=\"ufd502dd0\">来访问，因为点运算符后面总是字符串。</span></li><li fid=\"u4e107979\" data-lake-id=\"u8648d662\" id=\"u8648d662\"><span data-lake-id=\"ub4ecced6\" id=\"ub4ecced6\">Symbol值作为属性名时，该属性还是公开属性，不是私有属性。</span></li></ul><ol list=\"u033ef65e\" start=\"8\"><li fid=\"ub5b7f779\" data-lake-id=\"uad898f22\" id=\"uad898f22\"><span data-lake-id=\"u751c41ff\" id=\"u751c41ff\">例子：</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%90%8E%E9%9D%A2%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%8F%AF%E4%BB%A5%E7%BB%99symbol%E5%81%9A%E4%B8%8A%E6%A0%87%E8%AE%B0%E4%BE%BF%E4%BA%8E%E8%AF%86%E5%88%AB%5Cnlet%20name%20%3D%20Symbol(%5C%22name%5C%22)%3B%5Cnlet%20say%20%3D%20Symbol(%5C%22say%5C%22)%3B%5Cnlet%20obj%20%3D%20%7B%5Cn%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%83%B3%20%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%90%8D%E7%A7%B0%EF%BC%8C%E5%BF%85%E9%A1%BB%E5%8A%A0%E4%B8%8A%E4%B8%AD%E6%8B%AC%E5%8F%B7%EF%BC%8C.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%90%8E%E9%9D%A2%E8%B7%9F%E7%9D%80%E7%9A%84%E9%83%BD%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cn%20%20%20%20%5Bname%5D%3A%20%5C%22lnj%5C%22%2C%5Cn%20%20%20%20%5Bsay%5D%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(%5C%22say%5C%22)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20name%3A%20%5C%22rose%5C%22%2C%5Cn%7D%3B%5Cn%2F%2F%20obj.name%20%3D%20%5C%22it6661%5C%22%3B%5Cnobj%5BSymbol(%5C%22name%5C%22)%5D%20%3D%20%5C%22it666%5C%22%3B%5Cnconsole.log(obj)%3B%5Cnconsole.log(Reflect.ownKeys(obj))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KbTRx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u5c458fbe\" id=\"u5c458fbe\"><p data-lake-id=\"uc4e8b106\" id=\"uc4e8b106\"><span data-lake-id=\"ufc96ae08\" id=\"ufc96ae08\">{</span></p><p data-lake-id=\"ub2bf8ae8\" id=\"ub2bf8ae8\"><span data-lake-id=\"u7ae59d0c\" id=\"u7ae59d0c\">  [Symbol(name)]: 'lnj',</span></p><p data-lake-id=\"u8a53f6f3\" id=\"u8a53f6f3\"><span data-lake-id=\"u0d8e88a2\" id=\"u0d8e88a2\">  [Symbol(say)]: [Function: [say]],</span></p><p data-lake-id=\"u8bf87a90\" id=\"u8bf87a90\"><span data-lake-id=\"uaf1b07ba\" id=\"uaf1b07ba\">  [Symbol(name)]: 'it666'</span></p><p data-lake-id=\"udf34f821\" id=\"udf34f821\"><span data-lake-id=\"uee640fc0\" id=\"uee640fc0\">}</span></p><p data-lake-id=\"uea186e60\" id=\"uea186e60\"><span data-lake-id=\"u0fc925f8\" id=\"u0fc925f8\">[ Symbol(name), Symbol(say), Symbol(name) ]</span></p></blockquote><p data-lake-id=\"u389f2d31\" id=\"u389f2d31\"><span data-lake-id=\"u6435f421\" id=\"u6435f421\">没有覆盖原来的name，因为都是独一无二的，那么就默认创建一个name的属性。</span></p><h3 data-lake-id=\"PKuqe\" id=\"PKuqe\"><span data-lake-id=\"u4d7d906f\" id=\"u4d7d906f\">注意点</span></h3><ol list=\"u0468c5db\"><li fid=\"u06497ca0\" data-lake-id=\"ud0d58967\" id=\"ud0d58967\"><span data-lake-id=\"u9415c704\" id=\"u9415c704\">Symbol是基本数据类型，不能加new</span></li><li fid=\"u06497ca0\" data-lake-id=\"u776509e4\" id=\"u776509e4\"><span data-lake-id=\"ue912a0a5\" id=\"ue912a0a5\">后面括号可以传入一个字符串，只是一个标记，方便阅读，没有任何意义。</span></li><li fid=\"u06497ca0\" data-lake-id=\"u7086a86c\" id=\"u7086a86c\"><span data-lake-id=\"u20f8ec19\" id=\"u20f8ec19\">类型转化的时候，不可转化为数值，只能转化为字符串和布尔值。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(String(name))%3B%5Cnconsole.log(Boolean(name))%3B%5Cnconsole.log(Number(name))%3B%20%2F%2F%20Cannot%20convert%20a%20Symbol%20value%20to%20a%20number%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cMRkp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u1fd64c61\" start=\"4\"><li fid=\"ubf28a9ce\" data-lake-id=\"u3fd16d74\" id=\"u3fd16d74\"><span data-lake-id=\"u033e53c7\" id=\"u033e53c7\">不能做任何运算</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnconsole.log(name%2B111)%5Cnconsole.log(name%2B'ccc')%5Cn%2F%2F%E5%85%A8%E9%83%A8%E6%8A%A5%E9%94%99%20Cannot%20convert%20a%20Symbol%20value%20to%20a%20number%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qAMCc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u0179c47e\" start=\"5\"><li fid=\"ufae85291\" data-lake-id=\"uce6a6007\" id=\"uce6a6007\"><span data-lake-id=\"u5b5148a7\" id=\"u5b5148a7\">Symbol生成的值作为属性或方法的时候，一定要保存下来，否则后续无法使用。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnlet%20obj%3D%7B%5Cn%20%20%2F%2F%20name%3A'lnj'%2C%5Cn%20%20%20%20%5BSymbol('name')%5D%3A'lbj'%5Cn%7D%5Cnconsole.log(obj.name)%3B%20%20%2F%2F%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%20%20%5BSymbol('name')%5D%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84name%E4%B8%8D%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22v77MM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7464468f\" id=\"u7464468f\"><span data-lake-id=\"u2cd67c21\" id=\"u2cd67c21\">应该改为如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%20%3D%20Symbol(%5C%22name%5C%22)%3B%5Cnlet%20obj%20%3D%20%7B%5Cn%20%20%20%20%5Bname%5D%3A%20%5C%22lnj1%5C%22%2C%5Cn%20%20%20%20%2F%2F%20%5BSymbol(%5C%22name%5C%22)%5D%3A%20%5C%22lbj%5C%22%2C%5Cn%7D%3B%5Cn%2F%2F%20console.log(obj.name)%3B%20%2F%2F%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%20%20%5BSymbol('name')%5D%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84name%E4%B8%8D%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%5Cnconsole.log(Reflect.ownKeys(obj))%3B%5Cnconsole.log(obj%5Bname%5D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kKMvX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u6dbf2f19\" id=\"u6dbf2f19\"><p data-lake-id=\"ueee19c8f\" id=\"ueee19c8f\"><span data-lake-id=\"ufbc74536\" id=\"ufbc74536\">[ Symbol(name) ]</span></p><p data-lake-id=\"u21bead9f\" id=\"u21bead9f\"><span data-lake-id=\"ua7541ce2\" id=\"ua7541ce2\">lnj1</span></p></blockquote><ol list=\"ud9d45160\" start=\"6\"><li fid=\"u3137bd0f\" data-lake-id=\"u7a057185\" id=\"u7a057185\"><span data-lake-id=\"u10c54028\" id=\"u10c54028\">for循环遍历对象时无法遍历出Symbol的属性和方法</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20name%3DSymbol('name')%3B%5Cnlet%20obj%3D%7B%5Cn%20%20%5Bname%5D%3A'lnj'%2C%5Cn%20%20%20%20age%3A12%2C%5Cn%20%20%20%20teacher%3A'wyx'%5Cn%7D%5Cnfor(let%20key%20in%20obj)%7B%5Cn%20%20%20%20console.log(key)%20%20%20%2F%2F%E5%8F%AA%E8%83%BD%E6%89%93%E5%8D%B0%E5%87%BAage%E5%92%8Cteacher%5Cn%7D%5Cn%2F%2F%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%8D%95%E7%8B%AC%E5%8F%96%E5%87%BASymbol(name)%5Cnconsole.log(Object.getOwnPropertySymbols(obj))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ikBuz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"bRIp6\" id=\"bRIp6\"><span data-lake-id=\"u254abb34\" id=\"u254abb34\">Symbol的应用</span></h3><ol list=\"u690f0e57\"><li fid=\"ua112d1bd\" data-lake-id=\"u4e1ec221\" id=\"u4e1ec221\"><span data-lake-id=\"u889ee668\" id=\"u889ee668\">在企业开发中，如果需要对一些第三方的插件、框架进行自定义时，可能会因为添加了同名的属性或方法，将框架中原有的属性或方法覆盖掉，为了避免这种情况的发生，框架的作者告诉我们就可以使用Symbol作为属性或方法的名称。</span></li><li fid=\"ua112d1bd\" data-lake-id=\"ub601210a\" id=\"ub601210a\"><span data-lake-id=\"u6cc20519\" id=\"u6cc20519\">消除魔术字符串</span></li></ol><blockquote data-lake-id=\"u40d13c63\" id=\"u40d13c63\" style=\"padding-left: 2em\"><p data-lake-id=\"u8d0c3fa6\" id=\"u8d0c3fa6\"><span data-lake-id=\"ub70b59c8\" id=\"ub70b59c8\">魔术字符串：在代码中多次出现，与代码形成强耦合的某一个具体的字符串或数值。风格良好的代码应该尽量消除魔术字符串，改由含义清晰的变量代替。‘</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20gender%20%3D%20%7B%5Cn%20%20%20%2F%2F%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%AF%B4%E6%98%8Eman%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%80%BC%EF%BC%8C%E4%B8%8D%E7%94%A8%E5%86%8Dman%3A'man'%20%20%20%5Cn%20%20%20%20man%3A%20Symbol()%2C%5Cn%20%20%20%20woman%3A%20Symbol()%2C%5Cn%7D%5Cnfunction%20isMan(gender)%20%7B%5Cn%20%20%20%20switch%20(gender)%20%7B%5Cn%20%20%20%20%20%20%20%20case%20gender.man%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E7%94%B7%E6%80%A7')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20case%20gender.woman%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E5%A5%B3%E6%80%A7')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%5Cn%20%20%20%20%7D%5Cn%7D%5CnisMan(gender.man)%20%20%2F%2F%E7%94%B7%E6%80%A7%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GChhH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u25135ff0\" start=\"3\"><li fid=\"uc96c0670\" data-lake-id=\"ud9b0e442\" id=\"ud9b0e442\"><span data-lake-id=\"u9f71b790\" id=\"u9f71b790\">为对象定义一些非私有的、但又希望只用于内部的方法。</span></li></ol><blockquote data-lake-id=\"u0cda45e7\" id=\"u0cda45e7\" style=\"padding-left: 2em\"><p data-lake-id=\"u375b8621\" id=\"u375b8621\"><span data-lake-id=\"u58ade380\" id=\"u58ade380\">由于以Symbol值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</span></p><p data-lake-id=\"u91f2d56b\" id=\"u91f2d56b\"><span data-lake-id=\"ud5c0b71c\" id=\"ud5c0b71c\">注意：Symbol并不能实现真正的私有变量的效果，只是不能通过常规的遍历方法拿到Symbol类型的属性而已。</span><strong><span data-lake-id=\"u487e0ee4\" id=\"u487e0ee4\">​</span></strong></p></blockquote><p data-lake-id=\"u47a54e0b\" id=\"u47a54e0b\"><strong><span data-lake-id=\"u33b230ef\" id=\"u33b230ef\">对象的遍历方法</span></strong><span data-lake-id=\"u84cc2fa9\" id=\"u84cc2fa9\">：</span></p><ul list=\"u33021964\"><li fid=\"u5f914a62\" data-lake-id=\"ue9a3f0f8\" id=\"ue9a3f0f8\"><span data-lake-id=\"u22d3926f\" id=\"u22d3926f\">for(let xx in obj)：i代表key</span></li><li fid=\"u5f914a62\" data-lake-id=\"u0b6ff3b5\" id=\"u0b6ff3b5\"><span data-lake-id=\"u25b6d72f\" id=\"u25b6d72f\">for(let xx of obj)：不是自带的</span></li><li fid=\"u5f914a62\" data-lake-id=\"u7e08b740\" id=\"u7e08b740\"><span data-lake-id=\"u6b135041\" id=\"u6b135041\">Object.keys(obj)：返回包含的key的数组</span></li><li fid=\"u5f914a62\" data-lake-id=\"ua3870bab\" id=\"ua3870bab\"><span data-lake-id=\"u94700e14\" id=\"u94700e14\">Object.values(obj)：返回包含value的数组</span></li><li fid=\"u5f914a62\" data-lake-id=\"ue8b94391\" id=\"ue8b94391\"><span data-lake-id=\"u84a512a2\" id=\"u84a512a2\">Object.getOwnPropertyNames()：返回包含key的数组</span></li></ul><p data-lake-id=\"uff9d61bc\" id=\"uff9d61bc\"><span data-lake-id=\"u70a70ea9\" id=\"u70a70ea9\">上述的所有方法都遍历不到Symbol类型的（注意：是遍历时取不到Symbol，并不是我们访问不到对象的Symbol类型）</span></p><p data-lake-id=\"u39a24844\" id=\"u39a24844\"><strong><span data-lake-id=\"u37837acd\" id=\"u37837acd\">可以遍历到Symbol的方法：</span></strong></p><ul list=\"u5bd44c7d\"><li fid=\"u5d780946\" data-lake-id=\"ue6812e4e\" id=\"ue6812e4e\"><strong><span data-lake-id=\"u96d15dc6\" id=\"u96d15dc6\">Object.getOwnPropertySymbols()</span></strong><span data-lake-id=\"u498cca83\" id=\"u498cca83\">：返回对象中只包含Symbol类型key的数组</span></li><li fid=\"u5d780946\" data-lake-id=\"u8d1d2561\" id=\"u8d1d2561\"><strong><span data-lake-id=\"u29f2b4c5\" id=\"u29f2b4c5\">Reflect.ownKeys()</span></strong><span data-lake-id=\"u27791941\" id=\"u27791941\">：返回对象中所有类型key的数组（包含Symbol）</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20_password%20%3D%20Symbol('password')%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'%E5%B0%8F%E6%98%8E'%2C%5Cn%20%20%20%20gender%3A%20'male'%2C%5Cn%20%20%20%20%5B_password%5D%3A%20'11038'%5Cn%7D%5Cnfor%20(let%20item%20in%20obj)%20%7B%5Cn%20%20%20%20console.log(item)%3B%5Cn%7D%5Cnconsole.log(Object.keys(obj))%3B%5Cnconsole.log(Object.values(obj))%3B%5Cnconsole.log(Object.getOwnPropertyNames(obj))%3B%5Cnconsole.log(Object.getOwnPropertySymbols(obj))%3B%5Cnconsole.log(Reflect.ownKeys(obj))%5Cn%2F%2F%20%E8%BE%93%E5%87%BA11038%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%98%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%88%B0symbol%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%89%80%E4%BB%A5symbol%E5%B9%B6%E4%B8%8D%E8%83%BD%E7%9C%9F%E6%AD%A3%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BE%E5%AE%9A%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%80%E8%88%AC%E5%8F%AA%E7%94%A8%E4%BA%8E%E5%AE%9A%E4%B9%89%E4%B8%80%E4%BA%9B%E9%9D%9E%E7%A7%81%E6%9C%89%E7%9A%84%E3%80%81%E4%BD%86%E5%8F%88%E5%B8%8C%E6%9C%9B%E5%8F%AA%E7%94%A8%E4%BA%8E%E5%86%85%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95%5Cnconsole.log(obj%5B_password%5D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b3zmv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub6d28c4f\" id=\"ub6d28c4f\"><span data-lake-id=\"udcb2079f\" id=\"udcb2079f\">输出如下：</span></p><p data-lake-id=\"u6f5cddec\" id=\"u6f5cddec\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F2324645%2F1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png%22%2C%22taskId%22%3A%22uda6b3e15-79e2-4aa7-982d-49fe7eb8eb8%22%2C%22clientId%22%3A%22u2b09cbdb-2331-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A275%2C%22height%22%3A116%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A46307%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A583%2C%22originHeight%22%3A245%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NAME%20GENDER%20I%20GENDER%20NAME%20%E5%B0%8F%E6%98%8E%20MALE%20LI%20'GENDER'%20NAME%20SYMBOL(PASSWORD)%20SYMBOL(PASSWORD)%20%5D%20'GENDER'%20NAME%2011038%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A17.835613%2C%22y%22%3A10.28653%2C%22width%22%3A56.185383%2C%22height%22%3A16.532913%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A16.404135%2C%22y%22%3A39.320583%2C%22width%22%3A88.48623500000001%2C%22height%22%3A21.397437000000004%2C%22text%22%3A%22GENDER%22%7D%2C%7B%22x%22%3A283.29572%2C%22y%22%3A63.699017%2C%22width%22%3A13.722409999999968%2C%22height%22%3A33.523523%2C%22text%22%3A%22I%22%7D%2C%7B%22x%22%3A169.04576%2C%22y%22%3A65.59649%2C%22width%22%3A90.67936999999998%2C%22height%22%3A28.280149999999992%2C%22text%22%3A%22GENDER%22%7D%2C%7B%22x%22%3A59.44093%2C%22y%22%3A71.73817%2C%22width%22%3A57.067060000000005%2C%22height%22%3A17.633496000000008%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A56.391617%2C%22y%22%3A92.70355%2C%22width%22%3A64.32137300000001%2C%22height%22%3A29.49544999999999%2C%22text%22%3A%22%E5%B0%8F%E6%98%8E%22%7D%2C%7B%22x%22%3A169.89551%2C%22y%22%3A97.78831%2C%22width%22%3A60.10534000000001%2C%22height%22%3A22.076800000000006%2C%22text%22%3A%22MALE%22%7D%2C%7B%22x%22%3A283.78152%2C%22y%22%3A127.35834%2C%22width%22%3A13.303110000000004%2C%22height%22%3A58.46708000000001%2C%22text%22%3A%22LI%22%7D%2C%7B%22x%22%3A166.38359%2C%22y%22%3A127.61558%2C%22width%22%3A96.13987999999998%2C%22height%22%3A26.898140000000012%2C%22text%22%3A%22'GENDER'%22%7D%2C%7B%22x%22%3A58.253582%2C%22y%22%3A132.58513%2C%22width%22%3A59.170162%2C%22height%22%3A17.249590000000012%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A45.125946%2C%22y%22%3A156.71448%2C%22width%22%3A221.192454%2C%22height%22%3A28.156199999999984%2C%22text%22%3A%22SYMBOL(PASSWORD)%22%7D%2C%7B%22x%22%3A295.69482%2C%22y%22%3A186.42665%2C%22width%22%3A255.91798%2C%22height%22%3A30.39458000000002%2C%22text%22%3A%22SYMBOL(PASSWORD)%20%5D%22%7D%2C%7B%22x%22%3A164.94514%2C%22y%22%3A189.3633%2C%22width%22%3A100.78666000000001%2C%22height%22%3A25.321739999999977%2C%22text%22%3A%22'GENDER'%22%7D%2C%7B%22x%22%3A59.025814%2C%22y%22%3A192.88441%2C%22width%22%3A68.091286%2C%22height%22%3A19.300389999999993%2C%22text%22%3A%22NAME%22%7D%2C%7B%22x%22%3A17.268585%2C%22y%22%3A220.85193%2C%22width%22%3A72.02459%2C%22height%22%3A21.05176%2C%22text%22%3A%2211038%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23212121%22%2C%22id%22%3A%22u196ca470%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"wAmPW\" id=\"wAmPW\"><span data-lake-id=\"ucd1e1ca2\" id=\"ucd1e1ca2\">Symbol自带的方法</span></h3><h4 data-lake-id=\"ZBbKp\" id=\"ZBbKp\"><span data-lake-id=\"u68018dfd\" id=\"u68018dfd\">1. </span><code data-lake-id=\"u14edd727\" id=\"u14edd727\"><span data-lake-id=\"udb77d3db\" id=\"udb77d3db\">Symbol.for()</span></code></h4><p data-lake-id=\"u8543ee7e\" id=\"u8543ee7e\"><u><span data-lake-id=\"u496a72a9\" id=\"u496a72a9\">重新使用同一个Symbol值。</span></u></p><p data-lake-id=\"ue8a74dbc\" id=\"ue8a74dbc\"><span data-lake-id=\"ue0b30960\" id=\"ue0b30960\">接收一个字符串作为参数，搜索是否有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建一个以该字符串为名称的Symbol值，并将其注册到全局。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20s1%20%3D%20Symbol.for('foo')%3B%5Cnlet%20s2%20%3D%20Symbol.for('foo')%3B%5Cn%5Cns1%20%3D%3D%3D%20s2%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d4Ilt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"ezFW0\" id=\"ezFW0\"><span data-lake-id=\"u9bebd769\" id=\"u9bebd769\">2. </span><code data-lake-id=\"u39070501\" id=\"u39070501\"><span data-lake-id=\"u6ff855c9\" id=\"u6ff855c9\">Symbol.keyFor()</span></code></h4><p data-lake-id=\"ue8538d75\" id=\"ue8538d75\"><u><span data-lake-id=\"u7cfa2fb1\" id=\"u7cfa2fb1\">返回一个已登记的Symbol类型值的</span></u><code data-lake-id=\"u87fab790\" id=\"u87fab790\"><u><span data-lake-id=\"ufa16d82e\" id=\"ufa16d82e\">key</span></u></code><u><span data-lake-id=\"u3c6f78ad\" id=\"u3c6f78ad\">。</span></u></p><p data-lake-id=\"ua831422d\" id=\"ua831422d\"><span data-lake-id=\"udc6f6145\" id=\"udc6f6145\">由于</span><code data-lake-id=\"ud99e8e29\" id=\"ud99e8e29\"><span data-lake-id=\"ua1479a57\" id=\"ua1479a57\">Symbol()</span></code><span data-lake-id=\"u13d195cd\" id=\"u13d195cd\">写法没有登记机制，所以每次调用都会返回一个不同的值。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20s1%20%3D%20Symbol.for(%5C%22foo%5C%22)%3B%5CnSymbol.keyFor(s1)%20%2F%2F%20%5C%22foo%5C%22%5Cn%5Cnlet%20s2%20%3D%20Symbol(%5C%22foo%5C%22)%3B%5CnSymbol.keyFor(s2)%20%2F%2F%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WTdtT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"hZIrL\" id=\"hZIrL\"><span data-lake-id=\"u372e1139\" id=\"u372e1139\">Map和Object区别</span></h2><table data-lake-id=\"gSZLR\" id=\"gSZLR\" margin=\"true\" width-mode=\"contain\" class=\"lake-table\" style=\"width: 579px\"><colgroup><col width=\"193\"><col width=\"193\"><col width=\"193\"></colgroup><tbody><tr data-lake-id=\"uaf5debc6\" id=\"uaf5debc6\"><td data-lake-id=\"ufd1ec073\" id=\"ufd1ec073\"></td><td data-lake-id=\"u389f0dd3\" id=\"u389f0dd3\"><p data-lake-id=\"u0c10bd72\" id=\"u0c10bd72\"><span data-lake-id=\"u5667c347\" id=\"u5667c347\">Map</span></p></td><td data-lake-id=\"u36a27eb3\" id=\"u36a27eb3\"><p data-lake-id=\"u9adedb96\" id=\"u9adedb96\"><span data-lake-id=\"u00f1095e\" id=\"u00f1095e\">Object</span></p></td></tr><tr data-lake-id=\"ue417e838\" id=\"ue417e838\"><td data-lake-id=\"u20819286\" id=\"u20819286\"><p data-lake-id=\"u29c176ec\" id=\"u29c176ec\"><span data-lake-id=\"u24bd2d31\" id=\"u24bd2d31\">意外的键</span></p></td><td data-lake-id=\"u75a7848e\" id=\"u75a7848e\"><p data-lake-id=\"u3a8a62e7\" id=\"u3a8a62e7\"><span data-lake-id=\"u9d088a5a\" id=\"u9d088a5a\">Map默认情况不包含任何键，只包含显式插入的键</span></p></td><td data-lake-id=\"ue1410836\" id=\"ue1410836\"><p data-lake-id=\"ucac95cb2\" id=\"ucac95cb2\"><span data-lake-id=\"u19aefccb\" id=\"u19aefccb\">Object有一个原型，原型链上的键名有可能和自己在对象上设置的键名有冲突</span></p></td></tr><tr data-lake-id=\"u1a0f1e6d\" id=\"u1a0f1e6d\"><td data-lake-id=\"u1f2b22b2\" id=\"u1f2b22b2\"><p data-lake-id=\"u1b8e415c\" id=\"u1b8e415c\"><span data-lake-id=\"ud40afe98\" id=\"ud40afe98\">键的类型</span></p></td><td data-lake-id=\"ucf23afea\" id=\"ucf23afea\"><p data-lake-id=\"u594b9218\" id=\"u594b9218\"><span data-lake-id=\"ua6ba2bb4\" id=\"ua6ba2bb4\">Map的键可以是</span><strong><span data-lake-id=\"ued98d6eb\" id=\"ued98d6eb\">任意值</span></strong><span data-lake-id=\"u49c8260f\" id=\"u49c8260f\">，包括函数、对象或任意基本类型</span></p></td><td data-lake-id=\"ub64fdfa4\" id=\"ub64fdfa4\"><p data-lake-id=\"u71c9a331\" id=\"u71c9a331\"><span data-lake-id=\"u165d0d3e\" id=\"u165d0d3e\">Object的键必须是</span><strong><span data-lake-id=\"u933de930\" id=\"u933de930\">String或Symbol</span></strong></p></td></tr><tr data-lake-id=\"uce020e25\" id=\"uce020e25\"><td data-lake-id=\"u1cc54bf8\" id=\"u1cc54bf8\"><p data-lake-id=\"ua43fd71e\" id=\"ua43fd71e\"><span data-lake-id=\"u13bb6651\" id=\"u13bb6651\">键的顺序</span></p></td><td data-lake-id=\"ua35dccce\" id=\"ua35dccce\"><p data-lake-id=\"u5ebbb823\" id=\"u5ebbb823\"><span data-lake-id=\"u77ae10d1\" id=\"u77ae10d1\">Map中的</span><strong><span data-lake-id=\"u643ac46b\" id=\"u643ac46b\">key</span></strong><span data-lake-id=\"u88cd7b60\" id=\"u88cd7b60\">是</span><strong><span data-lake-id=\"u2b9c81c5\" id=\"u2b9c81c5\">有序</span></strong><span data-lake-id=\"uf3e9db1e\" id=\"uf3e9db1e\">的。因此，当迭代的时候，Map对象以</span><strong><span data-lake-id=\"ub0095288\" id=\"ub0095288\">插入的顺序</span></strong><span data-lake-id=\"u9d4ceab2\" id=\"u9d4ceab2\">返回键值</span></p></td><td data-lake-id=\"ua99c70a3\" id=\"ua99c70a3\"><p data-lake-id=\"u7f053dcb\" id=\"u7f053dcb\"><span data-lake-id=\"u424d2085\" id=\"u424d2085\">Object的键是</span><strong><span data-lake-id=\"u98961dba\" id=\"u98961dba\">无序</span></strong><span data-lake-id=\"u6746f394\" id=\"u6746f394\">的</span></p></td></tr><tr data-lake-id=\"u327109fb\" id=\"u327109fb\"><td data-lake-id=\"u2535e53c\" id=\"u2535e53c\"><p data-lake-id=\"u1d5cefa1\" id=\"u1d5cefa1\"><span data-lake-id=\"u6ff489d3\" id=\"u6ff489d3\">Size</span></p></td><td data-lake-id=\"u7ef72b8f\" id=\"u7ef72b8f\"><p data-lake-id=\"uaebcc5cb\" id=\"uaebcc5cb\"><span data-lake-id=\"ue4ed139b\" id=\"ue4ed139b\">Map的键值对个数可以轻易地通过</span><strong><span data-lake-id=\"uf052561f\" id=\"uf052561f\">size</span></strong><span data-lake-id=\"ufb95cb2b\" id=\"ufb95cb2b\">属性获取</span></p></td><td data-lake-id=\"ua99f76a9\" id=\"ua99f76a9\"><p data-lake-id=\"u423d838d\" id=\"u423d838d\"><span data-lake-id=\"u53123bba\" id=\"u53123bba\">Object建值对个数只能</span><strong><span data-lake-id=\"u0795ec3a\" id=\"u0795ec3a\">手动计算</span></strong></p></td></tr><tr data-lake-id=\"u7db24806\" id=\"u7db24806\"><td data-lake-id=\"u909bcfcd\" id=\"u909bcfcd\"><p data-lake-id=\"u2e3c7b42\" id=\"u2e3c7b42\"><span data-lake-id=\"ubf18bb7c\" id=\"ubf18bb7c\">迭代</span></p></td><td data-lake-id=\"u8b5da74f\" id=\"u8b5da74f\"><p data-lake-id=\"u8d87dd99\" id=\"u8d87dd99\"><span data-lake-id=\"u59fa0589\" id=\"u59fa0589\">Map是iterable的，所以可以</span><strong><span data-lake-id=\"u83effa9d\" id=\"u83effa9d\">直接被迭代</span></strong></p></td><td data-lake-id=\"u735ea899\" id=\"u735ea899\"><p data-lake-id=\"ua3ad2d62\" id=\"ua3ad2d62\"><span data-lake-id=\"u2615f875\" id=\"u2615f875\">迭代Object需要以某种方式</span><strong><span data-lake-id=\"u2a01f4da\" id=\"u2a01f4da\">获取它的键然后才能迭代</span></strong></p></td></tr><tr data-lake-id=\"u9256710a\" id=\"u9256710a\"><td data-lake-id=\"u86ce7bfc\" id=\"u86ce7bfc\"><p data-lake-id=\"u66e096f9\" id=\"u66e096f9\"><span data-lake-id=\"u8a9a3e79\" id=\"u8a9a3e79\">性能</span></p></td><td data-lake-id=\"u809c04f7\" id=\"u809c04f7\"><p data-lake-id=\"uc07f4794\" id=\"uc07f4794\"><span data-lake-id=\"ue0f90096\" id=\"ue0f90096\">在频繁增删键值对的场景下表现更好</span></p></td><td data-lake-id=\"u36fccccd\" id=\"u36fccccd\"><p data-lake-id=\"ueaeee7be\" id=\"ueaeee7be\"><span data-lake-id=\"u0e5888ce\" id=\"u0e5888ce\">在频繁添加和删除键值对的场景下</span><strong><span data-lake-id=\"u81a9478c\" id=\"u81a9478c\">未做出优化</span></strong></p></td></tr></tbody></table><h2 data-lake-id=\"N2G8K\" id=\"N2G8K\"><span data-lake-id=\"u6ca8cd4b\" id=\"u6ca8cd4b\">Map和WeakMap区别</span></h2><h3 data-lake-id=\"jjMeF\" id=\"jjMeF\"><span data-lake-id=\"u6931846b\" id=\"u6931846b\">Map </span></h3><p data-lake-id=\"u69b54603\" id=\"u69b54603\"><span data-lake-id=\"ue01b1f22\" id=\"ue01b1f22\">map本质上是键值对的集合，但是普通Object的中的键值只能是字符串或Symbol。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</span></p><p data-lake-id=\"u6571a952\" id=\"u6571a952\"><span data-lake-id=\"u5cce6b8d\" id=\"u5cce6b8d\">实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20%5B%5Cn%20%20%5B%5C%22name%5C%22%2C%5C%22%E5%BC%A0%E4%B8%89%5C%22%5D%2C%5Cn%20%20%5B%5C%22age%5C%22%2C18%5D%2C%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Czmyw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5757c0e2\" id=\"u5757c0e2\"><span data-lake-id=\"ubc4c3d31\" id=\"ubc4c3d31\">Map数据结构有以下操作方法：</span></p><ul list=\"uf92b910b\"><li fid=\"ub4b02301\" data-lake-id=\"u540be3ee\" id=\"u540be3ee\"><span data-lake-id=\"ue4983cdb\" id=\"ue4983cdb\">size：</span><code data-lake-id=\"u9a74279d\" id=\"u9a74279d\"><span data-lake-id=\"udf386328\" id=\"udf386328\">map.size()</span></code><span data-lake-id=\"u03a83388\" id=\"u03a83388\">返回Map结构的成员总数</span></li><li fid=\"ub4b02301\" data-lake-id=\"u8aef7ad9\" id=\"u8aef7ad9\"><span data-lake-id=\"u18725609\" id=\"u18725609\">set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"ub4b02301\" data-lake-id=\"u6eaf2244\" id=\"u6eaf2244\"><span data-lake-id=\"u28d3dd8e\" id=\"u28d3dd8e\">get(key)：该方法读取key对应的键值，如果找不到key，返回undefined</span></li><li fid=\"ub4b02301\" data-lake-id=\"ue2d3a94e\" id=\"ue2d3a94e\"><span data-lake-id=\"ud35ef554\" id=\"ud35ef554\">has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"ub4b02301\" data-lake-id=\"uafb3b0c1\" id=\"uafb3b0c1\"><span data-lake-id=\"u6e93064b\" id=\"u6e93064b\">delete(key)：该方法删除某个key，返回true，如果删除失败，返回false。</span></li><li fid=\"ub4b02301\" data-lake-id=\"ubef71f69\" id=\"ubef71f69\"><span data-lake-id=\"uf5715e8d\" id=\"uf5715e8d\">clear()：map.clear() 清除所有成员，没有返回值</span></li></ul><p data-lake-id=\"u6fedadfb\" id=\"u6fedadfb\"><span data-lake-id=\"u4424ec18\" id=\"u4424ec18\">Map结构原生提供是三个遍历器生成函数和一个遍历方法</span></p><ul list=\"uce83304c\"><li fid=\"ue18db2ef\" data-lake-id=\"uddc7d765\" id=\"uddc7d765\"><span data-lake-id=\"uddce29f9\" id=\"uddce29f9\">keys()：返回键名的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"uc4c6bf13\" id=\"uc4c6bf13\"><span data-lake-id=\"uc48df02e\" id=\"uc48df02e\">values()：返回键值的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"uaa8f5f7c\" id=\"uaa8f5f7c\"><span data-lake-id=\"u56969e42\" id=\"u56969e42\">entries()：返回所有成员的遍历器</span></li><li fid=\"ue18db2ef\" data-lake-id=\"ua1503e62\" id=\"ua1503e62\"><span data-lake-id=\"udcf43fbe\" id=\"udcf43fbe\">forEach()：遍历Map的所有成员</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20new%20Map(%5B%5Cn%20%20%5B%5C%22foo%5C%22%2C1%5D%2C%5Cn%20%20%5B%5C%22bar%5C%22%2C2%5D%2C%5Cn%5D)%5Cnfor(let%20key%20of%20map.keys())%7B%5Cn%5Ctconsole.log(key)%3B%20%2F%2F%20foo%20bar%5Cn%7D%5Cnfor(let%20value%20of%20map.values())%7B%5Cn%5Ctconsole.log(value)%3B%20%2F%2F%201%202%5Cn%7D%5Cnfor(let%20items%20of%20map.entries())%7B%5Cn%5Ctconsole.log(items)%3B%20%2F%2F%20%5B%5C%22foo%5C%22%2C1%5D%20%5B%5C%22bar%5C%22%2C2%5D%5Cn%7D%5Cnmap.forEach(%20(value%2Ckey%2Cmap)%20%3D%3E%20%7B%5Cn%5Ctconsole.log(key%2Cvalue)%3B%20%2F%2F%20foo%201%20bar%202%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZmVp1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ZTsz5\" id=\"ZTsz5\"><span data-lake-id=\"u0f2a8a9b\" id=\"u0f2a8a9b\">WeakMap</span></h3><p data-lake-id=\"ud97cbf18\" id=\"ud97cbf18\"><span data-lake-id=\"ud79ece94\" id=\"ud79ece94\">WeakMap对象也是一组键值对的集合，其中的键是</span><strong><span data-lake-id=\"u312e16e5\" id=\"u312e16e5\">弱引用</span></strong><span data-lake-id=\"u467ed0ef\" id=\"u467ed0ef\">。</span><strong><span data-lake-id=\"uce49f8e7\" id=\"uce49f8e7\">其键必须是对象，</span></strong><span data-lake-id=\"uc19cbc25\" id=\"uc19cbc25\">原始数据类型不能作为key值，而值可以是任意的。</span></p><p data-lake-id=\"uf793b7af\" id=\"uf793b7af\"><span data-lake-id=\"u5ebc76d2\" id=\"u5ebc76d2\">该对象也有以下几种方法：</span></p><ul list=\"u829bd7d5\"><li fid=\"u14f38f06\" data-lake-id=\"u3a5a516c\" id=\"u3a5a516c\"><strong><span data-lake-id=\"uab740337\" id=\"uab740337\">set(key,value)</span></strong><span data-lake-id=\"u10d0aa8b\" id=\"u10d0aa8b\">：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"u14f38f06\" data-lake-id=\"uc8a73b30\" id=\"uc8a73b30\"><strong><span data-lake-id=\"udeff3ae3\" id=\"udeff3ae3\">get(key)</span></strong><span data-lake-id=\"ucaf312b4\" id=\"ucaf312b4\">：读取key对应的键值，如果找不到key，返回undefined。</span></li><li fid=\"u14f38f06\" data-lake-id=\"uce9ff6f7\" id=\"uce9ff6f7\"><strong><span data-lake-id=\"u7b10bc91\" id=\"u7b10bc91\">has(key)</span></strong><span data-lake-id=\"ua18caaf0\" id=\"ua18caaf0\">：返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"u14f38f06\" data-lake-id=\"u0cefdb13\" id=\"u0cefdb13\"><strong><span data-lake-id=\"uc46b287e\" id=\"uc46b287e\">delete(key)</span></strong><span data-lake-id=\"u2fddc134\" id=\"u2fddc134\">：删除某个键，返回true，如果删除失败，返回false。</span></li></ul><p data-lake-id=\"u3be716ed\" id=\"u3be716ed\"><span data-lake-id=\"u2c404ca5\" id=\"u2c404ca5\">其clear() 方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</span></p><p data-lake-id=\"u66795184\" id=\"u66795184\"><strong><span data-lake-id=\"u55bd299c\" id=\"u55bd299c\">WeakMap的设计目的</span></strong><span data-lake-id=\"ua62d27a1\" id=\"ua62d27a1\">：</span></p><ul list=\"ub7eebdf4\"><li fid=\"u9bf42fee\" data-lake-id=\"u29bbb081\" id=\"u29bbb081\"><span data-lake-id=\"u693be38a\" id=\"u693be38a\">有时想在某个对象上存放一些数据，但是这会形成对于这个对象的引用。一旦不需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</span></li><li fid=\"u9bf42fee\" data-lake-id=\"uea0d4d3a\" id=\"uea0d4d3a\"><span data-lake-id=\"ua7a22d3c\" id=\"ua7a22d3c\">而WeakMap的</span><strong><span data-lake-id=\"u869f974f\" id=\"u869f974f\">键名所引用的对象都是弱引用</span></strong><span data-lake-id=\"uf7be4937\" id=\"uf7be4937\">， 即</span><strong><span data-lake-id=\"ua66a119f\" id=\"ua66a119f\">垃圾回收机制不将该引用考虑在内。</span></strong><span data-lake-id=\"ub8f99eb5\" id=\"ub8f99eb5\">因此，</span><u><span data-lake-id=\"ufaedfe5e\" id=\"ufaedfe5e\">只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，</span></u><u><strong><span data-lake-id=\"u0419d93f\" id=\"u0419d93f\">不用手动删除引用</span></strong></u><u><span data-lake-id=\"u75645eb6\" id=\"u75645eb6\">。</span></u></li></ul><h3 data-lake-id=\"AtFqQ\" id=\"AtFqQ\"><span data-lake-id=\"ud2009fc8\" id=\"ud2009fc8\">总结</span></h3><ul list=\"u3c9748a8\"><li fid=\"uae7e69d5\" data-lake-id=\"udead43b6\" id=\"udead43b6\"><span data-lake-id=\"u38748e97\" id=\"u38748e97\">Map数据结构，类似于对象，也是键值对的集合，但是“键”的范围</span><strong><span data-lake-id=\"ufa887d56\" id=\"ufa887d56\">不限于</span></strong><span data-lake-id=\"u29209773\" id=\"u29209773\">字符串，各种类型的值（包括对象）都可以作为键。</span></li><li fid=\"uae7e69d5\" data-lake-id=\"u0a920e6a\" id=\"u0a920e6a\"><span data-lake-id=\"u75924813\" id=\"u75924813\">WeakMap 结构与Map结构类似，也是用于生成键值对的集合。但是WeakMap</span><strong><span data-lake-id=\"u7d86db0b\" id=\"u7d86db0b\">只接受对象作为键名</span></strong><span data-lake-id=\"ub8da37c2\" id=\"ub8da37c2\">（null除外），不接受其他类型的值作为键名。</span><strong><span data-lake-id=\"ud1d32490\" id=\"ud1d32490\">而且WeakMap的键名所指向的对象是弱引用，不计入垃圾回收机制。</span></strong></li></ul><h2 data-lake-id=\"QPbAT\" id=\"QPbAT\"><span data-lake-id=\"u354c8a89\" id=\"u354c8a89\">JS内置对象</span></h2><p data-lake-id=\"u68107cff\" id=\"u68107cff\"><span data-lake-id=\"u6a34fb6f\" id=\"u6a34fb6f\">全局的对象（global objects）或称标准内置对象。即全局作用域中的对象，全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</span></p><h3 data-lake-id=\"GDmze\" id=\"GDmze\"><span data-lake-id=\"u62c9e2d1\" id=\"u62c9e2d1\">标准内置对象的分类</span></h3><ol list=\"u3f863e44\"><li fid=\"ue18e0b74\" data-lake-id=\"uc23d6b97\" id=\"uc23d6b97\"><span data-lake-id=\"u230493d9\" id=\"u230493d9\">值属性：这些全局属性返回一个简单值，这些值没有自己的属性和方法。</span></li></ol><p data-lake-id=\"u9f4efac8\" id=\"u9f4efac8\"><span data-lake-id=\"u3f170bf5\" id=\"u3f170bf5\">如：Infinity、NaN、undefined、null字面量。</span></p><ol list=\"u14df4b96\" start=\"2\"><li fid=\"u0bf07c03\" data-lake-id=\"u86e9fbc1\" id=\"u86e9fbc1\"><span data-lake-id=\"u35025990\" id=\"u35025990\">函数属性：全局属性可以直接调用，不需要再调用时指定所属对象，执行结束后会将结果直接返回给调用者。</span></li></ol><p data-lake-id=\"u624d0258\" id=\"u624d0258\"><span data-lake-id=\"u5ea41b18\" id=\"u5ea41b18\">如：eval()、parseFloat()、parseInt()等。</span></p><ol list=\"udcbde13d\" start=\"3\"><li fid=\"u3165bbb9\" data-lake-id=\"u55a99a97\" id=\"u55a99a97\"><span data-lake-id=\"u65366634\" id=\"u65366634\">基本对象：是定义或使用其他对象的基础。包括一般对象、函数对象和错误对象。</span></li></ol><p data-lake-id=\"uf7e7e006\" id=\"uf7e7e006\"><span data-lake-id=\"u127381ee\" id=\"u127381ee\">如：Object、Function、Boolean、Symbol、Error等。</span></p><ol list=\"u17f8f892\" start=\"4\"><li fid=\"ua04e890a\" data-lake-id=\"u23ee3e5a\" id=\"u23ee3e5a\"><span data-lake-id=\"u13279a1e\" id=\"u13279a1e\">数字和日期对象：用来表示数字、日期和执行数学计算的对象。</span></li></ol><p data-lake-id=\"u5c0b00b1\" id=\"u5c0b00b1\"><span data-lake-id=\"u1d59797f\" id=\"u1d59797f\">如：Number、Math、Date。</span></p><ol list=\"udc612ae8\" start=\"5\"><li fid=\"ueccbc205\" data-lake-id=\"ud3a20997\" id=\"ud3a20997\"><span data-lake-id=\"u4f07298f\" id=\"u4f07298f\">字符串：用来表示和操作字符串的对象。</span></li></ol><p data-lake-id=\"u45692a13\" id=\"u45692a13\"><span data-lake-id=\"u6e874de3\" id=\"u6e874de3\">如：String、RegExp</span></p><ol list=\"u71292eb7\" start=\"6\"><li fid=\"u199fd10b\" data-lake-id=\"u773443c8\" id=\"u773443c8\"><span data-lake-id=\"ubb18140b\" id=\"ubb18140b\">可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。</span></li></ol><p data-lake-id=\"u3a8889c1\" id=\"u3a8889c1\"><span data-lake-id=\"u3a60427e\" id=\"u3a60427e\">如：Array。</span></p><ol list=\"u190037b0\" start=\"7\"><li fid=\"uded79c29\" data-lake-id=\"u78d2bcc8\" id=\"u78d2bcc8\"><span data-lake-id=\"u800bcb22\" id=\"u800bcb22\">使用键的集合对象：这些集合对象在存储时会使用到键，支持按照插入顺序来迭代元素。</span></li></ol><p data-lake-id=\"uab399f02\" id=\"uab399f02\"><span data-lake-id=\"u7f7224b8\" id=\"u7f7224b8\">如：Map、Set、WeakMap、WeakSet。</span></p><ol list=\"uc2f0388e\" start=\"8\"><li fid=\"u8cfeed78\" data-lake-id=\"u569a8dea\" id=\"u569a8dea\"><span data-lake-id=\"u46a574ce\" id=\"u46a574ce\">矢量集合：SIMD矢量集合中的数据会被组织为一个数据序列。</span></li></ol><p data-lake-id=\"uc81d90d7\" id=\"uc81d90d7\"><span data-lake-id=\"u19583e25\" id=\"u19583e25\">如：SIMD等。</span></p><ol list=\"u630eadfe\" start=\"9\"><li fid=\"ub0a179e2\" data-lake-id=\"ua7bdbc95\" id=\"ua7bdbc95\"><span data-lake-id=\"u14b365de\" id=\"u14b365de\">结构化数据：这些对象用来表示和操作结构化的缓冲区数据，或使用JSON编码的数据。</span></li></ol><p data-lake-id=\"u99ac3828\" id=\"u99ac3828\"><span data-lake-id=\"u33f93eb7\" id=\"u33f93eb7\">如：JSON数据。</span></p><ol list=\"ud6d44b3a\" start=\"10\"><li fid=\"udbb8938b\" data-lake-id=\"u0a56068d\" id=\"u0a56068d\"><span data-lake-id=\"u8b61f8af\" id=\"u8b61f8af\">控制抽象对象。如：Promise、Generator等。</span></li><li fid=\"udbb8938b\" data-lake-id=\"u68c0891a\" id=\"u68c0891a\"><span data-lake-id=\"u57e85904\" id=\"u57e85904\">反射。如：Reflect、Proxy。</span></li><li fid=\"udbb8938b\" data-lake-id=\"u53acdda4\" id=\"u53acdda4\"><span data-lake-id=\"u330d7b90\" id=\"u330d7b90\">国际化：为了支持多语言处理而加入的ECMAScript的对象。</span></li></ol><p data-lake-id=\"u1147f191\" id=\"u1147f191\"><span data-lake-id=\"ufc130369\" id=\"ufc130369\">如：Intl、Intl.Collator 等。</span></p><ol list=\"ue427b8a9\" start=\"13\"><li fid=\"u28233c6d\" data-lake-id=\"u6688626c\" id=\"u6688626c\"><span data-lake-id=\"u05edd8bf\" id=\"u05edd8bf\">WebAssembly</span></li><li fid=\"u28233c6d\" data-lake-id=\"u01e56467\" id=\"u01e56467\"><span data-lake-id=\"uafbaac43\" id=\"uafbaac43\">其他。如 arguments</span></li></ol><h3 data-lake-id=\"ydNG9\" id=\"ydNG9\"><span data-lake-id=\"u74d98dde\" id=\"u74d98dde\">总结</span></h3><ol list=\"u9971651c\"><li fid=\"u5750c4f4\" data-lake-id=\"u78c1cefb\" id=\"u78c1cefb\"><span data-lake-id=\"ud76b981b\" id=\"ud76b981b\">JS中的内置对象主要指的是在程序执行前存在全局作用域中的由JS定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。</span></li><li fid=\"u5750c4f4\" data-lake-id=\"uc1b624a6\" id=\"uc1b624a6\"><span data-lake-id=\"u048d2493\" id=\"u048d2493\">一般经常用到的如 全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数 如 Date、Object 等，还有提供数学计算的单体内置对象如 Math对象等。</span></li></ol><h2 data-lake-id=\"XVr1I\" id=\"XVr1I\"><span data-lake-id=\"u4fadeca6\" id=\"u4fadeca6\">JS脚本延迟加载的方式</span></h2><ul list=\"u7184e0e7\"><li fid=\"u992cb4d2\" data-lake-id=\"uf1970c6a\" id=\"uf1970c6a\"><span data-lake-id=\"ud958e017\" id=\"ud958e017\">defer：异步加载，延迟执行（html加载完再执行）</span></li><li fid=\"u992cb4d2\" data-lake-id=\"ue03bccd5\" id=\"ue03bccd5\"><span data-lake-id=\"u48358456\" id=\"u48358456\">async：异步加载，加载完立即执行（会阻塞html页面解析）</span></li><li fid=\"u992cb4d2\" data-lake-id=\"u44c528ce\" id=\"u44c528ce\"><span data-lake-id=\"uf1a87af5\" id=\"uf1a87af5\">动态创建DOM方式：对文档加载事件进行监听，当文档加载完后，再动态创建script标签来引入JS脚本。</span></li><li fid=\"u992cb4d2\" data-lake-id=\"u9d1c9e9e\" id=\"u9d1c9e9e\"><span data-lake-id=\"u881afe4c\" id=\"u881afe4c\">setTimeout延迟方法：设置一个定时器来延迟加载JS脚本文件</span></li><li fid=\"u992cb4d2\" data-lake-id=\"ua1acb99e\" id=\"ua1acb99e\"><span data-lake-id=\"ua5679060\" id=\"ua5679060\">让JS最后加载：将JS脚本文件放在文档底部，来使JS脚本尽可能最后加载执行。</span></li></ul><h2 data-lake-id=\"SpWzB\" id=\"SpWzB\"><span data-lake-id=\"u34570cfe\" id=\"u34570cfe\">JS类数组对象</span></h2><p data-lake-id=\"u21f2a8c0\" id=\"u21f2a8c0\"><span data-lake-id=\"u316b62fb\" id=\"u316b62fb\">JS类数组对象：一个拥有length属性和若干索引属性的对象。</span></p><p data-lake-id=\"u082b64d5\" id=\"u082b64d5\"><span data-lake-id=\"u8b3a264a\" id=\"u8b3a264a\">和数组类似，但不能调用数组的方法。</span></p><p data-lake-id=\"u6f2cdedf\" id=\"u6f2cdedf\"><span data-lake-id=\"u6f791aa8\" id=\"u6f791aa8\">常见的类数组对象有：</span></p><ul list=\"u41beef12\"><li fid=\"ud3daed2c\" data-lake-id=\"u699ad047\" id=\"u699ad047\"><span data-lake-id=\"u8d5b80b9\" id=\"u8d5b80b9\">argument 和 DOM 方法的返回结果</span></li><li fid=\"ud3daed2c\" data-lake-id=\"uc035f43d\" id=\"uc035f43d\"><span data-lake-id=\"u2fa15529\" id=\"u2fa15529\">函数（因为含有length属性值，代表可接收的参数个数）</span></li></ul><p data-lake-id=\"ucda206b9\" id=\"ucda206b9\"><span data-lake-id=\"u05051ff9\" id=\"u05051ff9\">​</span><br></p><p data-lake-id=\"u46f25c1e\" id=\"u46f25c1e\"><span data-lake-id=\"u3d3dcf75\" id=\"u3d3dcf75\">类数组转换为数组的方法：</span></p><ol list=\"u5583a35b\"><li fid=\"ud7e01a2c\" data-lake-id=\"ud3ad2b8a\" id=\"ud3ad2b8a\"><span data-lake-id=\"u8992f9b9\" id=\"u8992f9b9\">通过 call 调用数组的 slice 方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.slice.call(arrayLike)%3B%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MKucG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u1a492e6e\" start=\"2\"><li fid=\"u5081fdd1\" data-lake-id=\"u61998ad7\" id=\"u61998ad7\"><span data-lake-id=\"u8d7f8119\" id=\"u8d7f8119\">通过call调用数组的splice方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.splice.call(arrayLike%2C0)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aeZDm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u76834d8d\" start=\"3\"><li fid=\"u6a4d4f7c\" data-lake-id=\"u8f316d9c\" id=\"u8f316d9c\"><span data-lake-id=\"u313b5032\" id=\"u313b5032\">通过apply调用数组的 concat 方法来实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.concat.apply(%5B%5D%2C%20arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OqPIF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"ue7f3cac0\" start=\"4\"><li fid=\"u6ec5a2b5\" data-lake-id=\"u39a1c4e3\" id=\"u39a1c4e3\"><span data-lake-id=\"u7cd1765d\" id=\"u7cd1765d\">通过Array.from() 实现转换</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.from(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OKWMy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"PPTXu\" id=\"PPTXu\"><span data-lake-id=\"ub5928b8a\" id=\"ub5928b8a\">数组有哪些原生方法</span></h2><ul list=\"uf0857a65\"><li fid=\"u33df9f3b\" data-lake-id=\"u7b7adae3\" id=\"u7b7adae3\"><span data-lake-id=\"u30d2cd08\" id=\"u30d2cd08\">数组和字符串的转换方法：toString()、toLocalString()、join()，其中join()可以指定转换为字符串时的分隔符</span></li><li fid=\"u33df9f3b\" data-lake-id=\"uad91bf9f\" id=\"uad91bf9f\"><span data-lake-id=\"u11613003\" id=\"u11613003\">数组尾部操作的方法：pop()和 push()，push() 方法可以传入多个参数</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ua4fc3a25\" id=\"ua4fc3a25\"><span data-lake-id=\"u2abd0b2d\" id=\"u2abd0b2d\">数组首部操作的方法：shift() 删除和 unshift() 添加</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ua59d9d8b\" id=\"ua59d9d8b\"><span data-lake-id=\"ufb507ae9\" id=\"ufb507ae9\">重排序的方法：reverse() 和 sort()，sort() 可传入一个函数进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置</span></li><li fid=\"u33df9f3b\" data-lake-id=\"ubc9e7871\" id=\"ubc9e7871\"><span data-lake-id=\"u2e950a76\" id=\"u2e950a76\">数组连接：concat() 返回拼接好的数组，不影响原数组。</span></li><li fid=\"u33df9f3b\" data-lake-id=\"uc18db9bd\" id=\"uc18db9bd\"><span data-lake-id=\"u8fdad126\" id=\"u8fdad126\">数组截取：splice()</span></li><li fid=\"u33df9f3b\" data-lake-id=\"u61e1fc3a\" id=\"u61e1fc3a\"><span data-lake-id=\"u32a86ca5\" id=\"u32a86ca5\">影响原数组特定项的索引的方法，indexOf()和 lastIndexOf() </span></li><li fid=\"u33df9f3b\" data-lake-id=\"u5cb443d3\" id=\"u5cb443d3\"><span data-lake-id=\"u2dc18e89\" id=\"u2dc18e89\">迭代方法：every()、some()、filter()、map()、forEach()方法</span></li><li fid=\"u33df9f3b\" data-lake-id=\"u3cd2e702\" id=\"u3cd2e702\"><span data-lake-id=\"ufe17b2b6\" id=\"ufe17b2b6\">数组归并方法：reduce()、reduceRight()方法</span></li></ul><h2 data-lake-id=\"w9O8P\" id=\"w9O8P\"><span data-lake-id=\"ue0f47fec\" id=\"ue0f47fec\">Promise.race() 应用场景</span></h2><blockquote data-lake-id=\"ub5c59186\" id=\"ub5c59186\"><p data-lake-id=\"u8b52ba88\" id=\"u8b52ba88\"><span data-lake-id=\"uc4aaf02e\" id=\"uc4aaf02e\">race() 和 all() 一样，接受的参数是一个每项都是Promise的数组，但是与all不同的是，当</span><strong><u><span data-lake-id=\"u5bfc8b5d\" id=\"u5bfc8b5d\">最先执行完</span></u></strong><span data-lake-id=\"u7e2f9370\" id=\"u7e2f9370\">的事件执行完后，就直接返回该promise对象的值。</span></p><p data-lake-id=\"ue38e8a64\" id=\"ue38e8a64\"><span data-lake-id=\"u2b86a42c\" id=\"u2b86a42c\">如果第一个promise对象状态变成resolved，则自身的状态就变成了resolved；反之，第一个promise变成rejected，则自身状态就会变成rejected。</span></p></blockquote><p data-lake-id=\"u94adf03d\" id=\"u94adf03d\"><strong><span data-lake-id=\"ucdf1a8fb\" id=\"ucdf1a8fb\">Promise.race() 应用场景</span></strong><span data-lake-id=\"ub71b103d\" id=\"ub71b103d\">：</span></p><ul list=\"u8353400d\"><li fid=\"u73ccb280\" data-lake-id=\"u1637e5f9\" id=\"u1637e5f9\"><span data-lake-id=\"ub01e7d85\" id=\"ub01e7d85\">http请求时，做超时判断时，设置一个定时器，当定时器时间到了时间就在页面提醒请求超时。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E6%9F%90%E4%B8%AA%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%5Cnfunction%20requestImg()%20%7B%5Cn%20%20var%20p%20%3D%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%5Cn%20%20%20%20var%20img%20%3D%20new%20Image()%3B%5Cn%20%20%20%20img.onload%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20resolve(img)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20img.src%20%3D%20%5C%22http%3A%2F%2Fwww.baidu.com%2Fimg%2Fflexiable%2Flogo%2Fpc%2Fresult.png%5C%22%3B%5Cn%20%20%7D)%3B%5Cn%20%20return%20p%3B%5Cn%7D%5Cn%2F%2F%20%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BB%99%E8%AF%B7%E6%B1%82%E8%AE%A1%E6%97%B6%5Cnfunction%20timeout()%20%7B%5Cn%20%20var%20p%20%3D%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%5Cn%20%20%20%20setTimeout(function%20()%20%7B%5Cn%20%20%20%20%20%20reject(%5C%22%E5%9B%BE%E7%89%87%E8%AF%B7%E6%B1%82%E6%93%8D%E6%97%B6%5C%22)%3B%5Cn%20%20%20%20%7D%2C%205000)%3B%5Cn%20%20%7D)%3B%5Cn%20%20return%20p%3B%5Cn%7D%5CnPromise.race(%5BrequestImg()%2C%20timeout()%5D)%5Cn%20%20.then(function%20(results)%20%7B%5Cn%20%20%20%20console.log(results)%3B%5Cn%20%20%7D)%5Cn%20%20.catch(function%20(reason)%20%7B%5Cn%20%20%20%20console.log(reason)%3B%5Cn%20%20%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%E7%94%A8Promise%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%88%A4%E6%96%AD%E5%9B%BE%E7%89%87%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E6%88%90%E5%8A%9F%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PbAr2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"k94WT\" id=\"k94WT\"><span data-lake-id=\"u1c981dc1\" id=\"u1c981dc1\">Promise.all() 应用场景</span></h2><blockquote data-lake-id=\"u4ce3c53c\" id=\"u4ce3c53c\"><p data-lake-id=\"u6391473d\" id=\"u6391473d\"><span data-lake-id=\"u774fa797\" id=\"u774fa797\">它可以将多个promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功时返回一个</span><strong><span data-lake-id=\"u80893a42\" id=\"u80893a42\">结构数组</span></strong><span data-lake-id=\"u50b5eac1\" id=\"u50b5eac1\">，而失败时则返回</span><strong><span data-lake-id=\"u1016030b\" id=\"u1016030b\">最先被reject失败状态的值。</span></strong></p></blockquote><p data-lake-id=\"u4841d637\" id=\"u4841d637\"><strong><span data-lake-id=\"u01415d0a\" id=\"u01415d0a\">Promise.all() 中传入的是数组，返回的也是数组，并会进行映射，传入的Promise对象返回值是按照顺序在数组中排列的，但是注意他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</span></strong></p><blockquote data-lake-id=\"u40243d15\" id=\"u40243d15\"><p data-lake-id=\"u0f695745\" id=\"u0f695745\"><strong><span data-lake-id=\"u47842d1b\" id=\"u47842d1b\">注意：Promise.all 获得的成功结果的数组中的数据顺序和Promise.all()接收的数组顺序是一致的，这样当遇到</span></strong><strong><u><span data-lake-id=\"u32171f47\" id=\"u32171f47\">多个请求并根据请求顺序获取和使用数据</span></u></strong><strong><span data-lake-id=\"u5e0b012b\" id=\"u5e0b012b\">的场景，可以使用 Promise.all来解决。</span></strong></p></blockquote><h2 data-lake-id=\"CSPWq\" id=\"CSPWq\"><span data-lake-id=\"u4744caab\" id=\"u4744caab\">使用requestAnimationFrame实现一个循环定时器</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20setInterval(callback%2C%20interval)%20%7B%5Cn%20%20let%20timer%5Cn%20%20const%20now%20%3D%20Date.now%5Cn%20%20let%20startTime%20%3D%20now()%5Cn%20%20let%20endTime%20%3D%20startTime%5Cn%20%20const%20loop%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20timer%20%3D%20window.requestAnimationFrame(loop)%5Cn%20%20%20%20endTime%20%3D%20now()%5Cn%20%20%20%20if%20(endTime%20-%20startTime%20%3E%3D%20interval)%20%7B%5Cn%20%20%20%20%20%20startTime%20%3D%20endTime%20%3D%20now()%5Cn%20%20%20%20%20%20callback(timer)%5Cn%20%20%7D%5Cn%7D%5Cntimer%20%3D%20window.requestAnimationFrame(loop)%5Cn%5Ctreturn%20timer%5Cn%7D%5Cnlet%20a%20%3D%200%5CnsetInterval(timer%20%3D%3E%20%7B%5Cn%20%20console.log(1)%5Cn%20%20a%2B%2B%5Cn%20%20if%20(a%20%3D%3D%3D%203)%20cancelAnimationFrame(timer)%5Cn%7D%2C%201000)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Yuque%20Light%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jh7zK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ueb0e21dd\" id=\"ueb0e21dd\"><span data-lake-id=\"uf9dd8b48\" id=\"uf9dd8b48\">⾸先 requestAnimationFrame ⾃带函数节流功能，基本可以保证在 16.6 毫秒内只执⾏⼀次（不掉</span></p><p data-lake-id=\"u60ca6967\" id=\"u60ca6967\"><span data-lake-id=\"ue4e95292\" id=\"ue4e95292\">帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-18T13:29:55.000Z",
    "deleted_at": null,
    "created_at": "2022-11-16T02:36:50.000Z",
    "updated_at": "2022-11-18T13:31:39.000Z",
    "published_at": "2022-11-18T13:31:39.000Z",
    "first_published_at": "2022-11-16T02:38:46.685Z",
    "word_count": 5630,
    "cover": "https://cdn.nlark.com/yuque/0/2022/png/2324645/1668653745915-fc9503cf-b3b8-4973-b078-26b09f69ba22.png",
    "description": "--- title: JS高频面试题 categories: JSdate: 2022-11-13updated: 2022-11-13tags: JScover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-ima...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106224009,
    "slug": "bxodu8kp7dfwg12q",
    "title": "JS编译原理",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: JS编译原理  <br />categories: 前端进阶<br />date: 2022-11-11<br />updated: 2022-11-11<br />tags: [JS,编译原理]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13950614620%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671266998&t=597dab5f07b85703e3f345e9d9b074a1<br />--- \n<a name=\"xlRa4\"></a>\n## JS编译原理\n```javascript\nvar name = \"rose\"\n```\n上面这行代码在JS中会这样呈现：\n```javascript\nvar name; // 编译阶段处理\nname = 'rose';  // 执行阶段处理\n```\nJS编译主要分为两个阶段：**编译阶段和执行阶段**。\n<a name=\"N4UAu\"></a>\n### 编译阶段\n此阶段主角为**编译器。**\n\n- JS找遍作用域，看是否存在name的变量\n   - 如果已经存在，则什么都不做，直接忽略`var name`这个声明，继续编译下去；\n   - 如果没有，则在当前作用域中新增一个`name`变量\n- 编译器会为引擎生成运行时所需的代码，程序就进入了执行阶段。\n<a name=\"zST4O\"></a>\n### 执行阶段\n此阶段主角为**JS引擎。**\n\n- **JS引擎**在运行时，会先找遍当前作用域，看是否有一个叫`name`的变量。\n   - 如果有，直接赋值\n   - 如果没有，则为当前作用域没有。则去父级作用域看是否有，如果无，则去上一级作用域中查找。\n   - 如果最终没有找到，则抛异常。\n> 作用域套作用域，即作用域链。\n\n<a name=\"zBAey\"></a>\n## 作用域\n变量最基本的能力就是**能够存储变量中的值，并且允许我们对此变量进行访问和修改**，而对于变量存储，访问的**规则**是 **作用域**。\n<a name=\"WnHa1\"></a>\n### 全局作用域\n在任何函数外或代码块外的顶层作用域就是全局作用域，里面的变量就是全局变量。\n```javascript\nvar name='rose';   //全局作用域\n\nfunction showName(){    //函数作用域\n  console.log(name);\n}\n{\n  name='test';    //块级作用域\n}\nshowName();    //test\n```\n> 可以看到，全局变量在全局作用域、函数作用域、块级作用域中都可以正常访问。\n\n<a name=\"F62EW\"></a>\n### 函数作用域\n在函数中的作用域就是函数作用域。\n```javascript\nfunction showName(){\n  var name='jack';    //函数作用域\n}\nshowName();   //方法调用\n{\n  console.log(name);  //块级作用域,Uncaught ReferenceError: name is not defined\n}\nconsole.log(name);  //全局作用域,Uncaught ReferenceError: name is not defined\n```\n> 可以看到，函数内部变量，在全局作用域及块级作用域中，都无法访问，只有在函数内部，才能访问到，所以函数内部的变量也称为**局部变量**。\n\n<a name=\"qBvlv\"></a>\n### 块级作用域\n`ES6`中新出的`let` 和`const`关键字 自带作用域。<br />块级作用域相当于是只在这块代码块中生效，如果它被大括号`{}`包围，则大括号就是一段代码块，代码块中使用`const`声明的变量也被称为**局部变量。**\n```javascript\n {\n   let name='rose';\n }\n\n console.log(name);    //Uncaught ReferenceError: name is not defined\n\n function showName{\n   console.log(name);\n }\n\n showName();    //Uncaught ReferenceError: name is not defined\n```\n> 可以看到，块级作用域中的变量，在代码块外面就访问不到了。\n\n<a name=\"ZK0tc\"></a>\n## 作用域链\n**作用域和作用域的嵌套，就产生了作用域链。作用域链的查找，向外不向内。**\n<a name=\"Ab127\"></a>\n## 变量提升\n```javascript\nname='rose';\nconsole.log(name);    //rose\nvar name;\n```\n可以发现，这段代码可以正常运行，并且不会报错。<br />在JS眼中代码实际上是这样的：\n```javascript\nvar name;\nname='rose';\nconsole.log(name);    // rose\n```\n\n---\n\n`let`和`const`代码：\n```javascript\nname='rose';\nconsole.log(name)    //Uncaught ReferenceError: Cannot access 'name' before initialization\nlet name;\n```\n> let 、const **禁用变量提升。**const 声明后必赋值。\n\n<a name=\"Bl19f\"></a>\n### let、const、var的区别\n\n1. **块级作用域**：块级作用域由`{}`包括，`let`和`const`具有块级作用域，`var`不存在块级作用域。\n\n块级作用域解决了`ES5`中的两个问题：\n\n   - 内层变量可能覆盖外层变量\n   - 用来计数的循环变量泄漏为全局变量\n2. **变量提升**：var 存在变量提升，let 和 const 不存在变量提升，即变量只能在声明后使用，否则会报错。\n3. **给全局添加属性**：浏览器的全局对象是window，Node的全局变量是global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n4. **重复声明**：var声明变量时，可以重复声明变量，后声明的变量会覆盖之前声明的变量。let 和 const 不允许在同一作用域下重复声明变量。\n5. **暂时性死区：**在使用let、const关键字声明变量时，该变量是不可用的，这在语法上，成为**暂时性死区**。\n\n使用var声明的变量不存在暂时性死区。\n\n6. **初始值设置**：在变量声明时，var和let可以不用设置初始值。而const声明变量必须设置初始值。\n7. **指针指向**：let和const都是ES6新增的用于创建变量的语法。let创建的变量可以更改指针指向（可以重新赋值）。但const声明的变量不允许改变指针的指向（不允许重新赋值）。\n<a name=\"kja5Y\"></a>\n## 暂时性死区\n```javascript\nvar name='rose';\n\n{\n  name='bob';\n  let name;    //Uncaught ReferenceError: Cannot access 'name' before initialization\n}\n```\n**如果区块中存在let和const，这个区块对于这些关键字声明的变量，从一开始就形成了封闭作用域。**<br />因为JS清楚地感知到了name是用let声明在当前这个代码块内的，所以会给这个变量name加上了暂时性死区的限制，它就不往外探出头了。<br />因此，如果我们把上面的`let name;`去掉，程序也能正常运行，name的值也能被成功修改为blob，就是正常地按照**作用域链**的规则，向外探出头去了。\n\n",
    "body_draft": "--- <br />title: JS编译原理  <br />categories: 前端进阶<br />date: 2022-11-11<br />updated: 2022-11-11<br />tags: [JS,编译原理]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13950614620%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671266998&t=597dab5f07b85703e3f345e9d9b074a1<br />--- \n<a name=\"xlRa4\"></a>\n## JS编译原理\n```javascript\nvar name = \"rose\"\n```\n上面这行代码在JS中会这样呈现：\n```javascript\nvar name; // 编译阶段处理\nname = 'rose';  // 执行阶段处理\n```\nJS编译主要分为两个阶段：**编译阶段和执行阶段**。\n<a name=\"N4UAu\"></a>\n### 编译阶段\n此阶段主角为**编译器。**\n\n- JS找遍作用域，看是否存在name的变量\n   - 如果已经存在，则什么都不做，直接忽略`var name`这个声明，继续编译下去；\n   - 如果没有，则在当前作用域中新增一个`name`变量\n- 编译器会为引擎生成运行时所需的代码，程序就进入了执行阶段。\n<a name=\"zST4O\"></a>\n### 执行阶段\n此阶段主角为**JS引擎。**\n\n- **JS引擎**在运行时，会先找遍当前作用域，看是否有一个叫`name`的变量。\n   - 如果有，直接赋值\n   - 如果没有，则为当前作用域没有。则去父级作用域看是否有，如果无，则去上一级作用域中查找。\n   - 如果最终没有找到，则抛异常。\n> 作用域套作用域，即作用域链。\n\n<a name=\"zBAey\"></a>\n## 作用域\n变量最基本的能力就是**能够存储变量中的值，并且允许我们对此变量进行访问和修改**，而对于变量存储，访问的**规则**是 **作用域**。\n<a name=\"WnHa1\"></a>\n### 全局作用域\n在任何函数外或代码块外的顶层作用域就是全局作用域，里面的变量就是全局变量。\n```javascript\nvar name='rose';   //全局作用域\n\nfunction showName(){    //函数作用域\n  console.log(name);\n}\n{\n  name='test';    //块级作用域\n}\nshowName();    //test\n```\n> 可以看到，全局变量在全局作用域、函数作用域、块级作用域中都可以正常访问。\n\n<a name=\"F62EW\"></a>\n### 函数作用域\n在函数中的作用域就是函数作用域。\n```javascript\nfunction showName(){\n  var name='jack';    //函数作用域\n}\nshowName();   //方法调用\n{\n  console.log(name);  //块级作用域,Uncaught ReferenceError: name is not defined\n}\nconsole.log(name);  //全局作用域,Uncaught ReferenceError: name is not defined\n```\n> 可以看到，函数内部变量，在全局作用域及块级作用域中，都无法访问，只有在函数内部，才能访问到，所以函数内部的变量也称为**局部变量**。\n\n<a name=\"qBvlv\"></a>\n### 块级作用域\n`ES6`中新出的`let` 和`const`关键字 自带作用域。<br />块级作用域相当于是只在这块代码块中生效，如果它被大括号`{}`包围，则大括号就是一段代码块，代码块中使用`const`声明的变量也被称为**局部变量。**\n```javascript\n {\n   let name='rose';\n }\n\n console.log(name);    //Uncaught ReferenceError: name is not defined\n\n function showName{\n   console.log(name);\n }\n\n showName();    //Uncaught ReferenceError: name is not defined\n```\n> 可以看到，块级作用域中的变量，在代码块外面就访问不到了。\n\n<a name=\"ZK0tc\"></a>\n## 作用域链\n**作用域和作用域的嵌套，就产生了作用域链。作用域链的查找，向外不向内。**\n<a name=\"Ab127\"></a>\n## 变量提升\n```javascript\nname='rose';\nconsole.log(name);    //rose\nvar name;\n```\n可以发现，这段代码可以正常运行，并且不会报错。<br />在JS眼中代码实际上是这样的：\n```javascript\nvar name;\nname='rose';\nconsole.log(name);    // rose\n```\n\n---\n\n`let`和`const`代码：\n```javascript\nname='rose';\nconsole.log(name)    //Uncaught ReferenceError: Cannot access 'name' before initialization\nlet name;\n```\n> let 、const **禁用变量提升。**const 声明后必赋值。\n\n<a name=\"Bl19f\"></a>\n### let、const、var的区别\n\n1. **块级作用域**：块级作用域由`{}`包括，`let`和`const`具有块级作用域，`var`不存在块级作用域。\n\n块级作用域解决了`ES5`中的两个问题：\n\n   - 内层变量可能覆盖外层变量\n   - 用来计数的循环变量泄漏为全局变量\n2. **变量提升**：var 存在变量提升，let 和 const 不存在变量提升，即变量只能在声明后使用，否则会报错。\n3. **给全局添加属性**：浏览器的全局对象是window，Node的全局变量是global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n4. **重复声明**：var声明变量时，可以重复声明变量，后声明的变量会覆盖之前声明的变量。let 和 const 不允许在同一作用域下重复声明变量。\n5. **暂时性死区：**在使用let、const关键字声明变量时，该变量是不可用的，这在语法上，成为**暂时性死区**。\n\n使用var声明的变量不存在暂时性死区。\n\n6. **初始值设置**：在变量声明时，var和let可以不用设置初始值。而const声明变量必须设置初始值。\n7. **指针指向**：let和const都是ES6新增的用于创建变量的语法。let创建的变量可以更改指针指向（可以重新赋值）。但const声明的变量不允许改变指针的指向（不允许重新赋值）。\n<a name=\"kja5Y\"></a>\n## 暂时性死区\n```javascript\nvar name='rose';\n\n{\n  name='bob';\n  let name;    //Uncaught ReferenceError: Cannot access 'name' before initialization\n}\n```\n**如果区块中存在let和const，这个区块对于这些关键字声明的变量，从一开始就形成了封闭作用域。**<br />因为JS清楚地感知到了name是用let声明在当前这个代码块内的，所以会给这个变量name加上了暂时性死区的限制，它就不往外探出头了。<br />因此，如果我们把上面的`let name;`去掉，程序也能正常运行，name的值也能被成功修改为blob，就是正常地按照**作用域链**的规则，向外探出头去了。\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u191f528d\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uaabe2cf3\" class=\"ne-p\"><span class=\"ne-text\">title: JS编译原理  </span></p><p id=\"u6da62028\" class=\"ne-p\"><span class=\"ne-text\">categories: 前端进阶</span></p><p id=\"uec0d395f\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-11</span></p><p id=\"ue5ebd1a3\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-11</span></p><p id=\"u05972217\" class=\"ne-p\"><span class=\"ne-text\">tags: [JS,编译原理]</span></p><p id=\"u5c52fa15\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13950614620%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266998&amp;t=597dab5f07b85703e3f345e9d9b074a1</span></p><p id=\"ua7b72cc6\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><h2 id=\"xlRa4\"><span class=\"ne-text\">JS编译原理</span></h2><pre data-language=\"javascript\" id=\"keEto\" class=\"ne-codeblock language-javascript\">var name = &quot;rose&quot;</pre><p id=\"u176ac26e\" class=\"ne-p\"><span class=\"ne-text\">上面这行代码在JS中会这样呈现：</span></p><pre data-language=\"javascript\" id=\"CsAUc\" class=\"ne-codeblock language-javascript\">var name; // 编译阶段处理\nname = 'rose';  // 执行阶段处理</pre><p id=\"u96266933\" class=\"ne-p\"><span class=\"ne-text\">JS编译主要分为两个阶段：</span><strong><span class=\"ne-text\">编译阶段和执行阶段</span></strong><span class=\"ne-text\">。</span></p><h3 id=\"N4UAu\"><span class=\"ne-text\">编译阶段</span></h3><p id=\"u1703a650\" class=\"ne-p\"><span class=\"ne-text\">此阶段主角为</span><strong><span class=\"ne-text\">编译器。</span></strong><span class=\"ne-text\"></span></p><ul class=\"ne-ul\"><li id=\"u3a98c43f\"><span class=\"ne-text\">JS找遍作用域，看是否存在name的变量</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uf39dd4f2\"><span class=\"ne-text\">如果已经存在，则什么都不做，直接忽略</span><code class=\"ne-code\"><span class=\"ne-text\">var name</span></code><span class=\"ne-text\">这个声明，继续编译下去；</span></li><li id=\"u80ced5d6\"><span class=\"ne-text\">如果没有，则在当前作用域中新增一个</span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\">变量</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ub8660271\"><span class=\"ne-text\">编译器会为引擎生成运行时所需的代码，程序就进入了执行阶段。</span></li></ul><h3 id=\"zST4O\"><span class=\"ne-text\">执行阶段</span></h3><p id=\"u412a4438\" class=\"ne-p\"><span class=\"ne-text\">此阶段主角为</span><strong><span class=\"ne-text\">JS引擎。</span></strong></p><ul class=\"ne-ul\"><li id=\"u655ac592\"><strong><span class=\"ne-text\">JS引擎</span></strong><span class=\"ne-text\">在运行时，会先找遍当前作用域，看是否有一个叫</span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\">的变量。</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u45c0d4af\"><span class=\"ne-text\">如果有，直接赋值</span></li><li id=\"ue9854896\"><span class=\"ne-text\">如果没有，则为当前作用域没有。则去父级作用域看是否有，如果无，则去上一级作用域中查找。</span></li><li id=\"ue6dff1b4\"><span class=\"ne-text\">如果最终没有找到，则抛异常。</span></li></ul></ul><div class=\"ne-quote\"><p id=\"u34185550\" class=\"ne-p\"><span class=\"ne-text\">作用域套作用域，即作用域链。</span></p></div><h2 id=\"zBAey\"><span class=\"ne-text\">作用域</span></h2><p id=\"u0728abfe\" class=\"ne-p\"><span class=\"ne-text\">变量最基本的能力就是</span><strong><span class=\"ne-text\">能够存储变量中的值，并且允许我们对此变量进行访问和修改</span></strong><span class=\"ne-text\">，而对于变量存储，访问的</span><strong><span class=\"ne-text\">规则</span></strong><span class=\"ne-text\">是 </span><strong><span class=\"ne-text\">作用域</span></strong><span class=\"ne-text\">。</span></p><h3 id=\"WnHa1\"><span class=\"ne-text\">全局作用域</span></h3><p id=\"ue1aa2c17\" class=\"ne-p\"><span class=\"ne-text\">在任何函数外或代码块外的顶层作用域就是全局作用域，里面的变量就是全局变量。</span></p><pre data-language=\"javascript\" id=\"Xljsb\" class=\"ne-codeblock language-javascript\">var name='rose';   //全局作用域\n\nfunction showName(){    //函数作用域\n  console.log(name);\n}\n{\n  name='test';    //块级作用域\n}\nshowName();    //test</pre><div class=\"ne-quote\"><p id=\"u11f3be52\" class=\"ne-p\"><span class=\"ne-text\">可以看到，全局变量在全局作用域、函数作用域、块级作用域中都可以正常访问。</span></p></div><h3 id=\"F62EW\"><span class=\"ne-text\">函数作用域</span></h3><p id=\"ua216d393\" class=\"ne-p\"><span class=\"ne-text\">在函数中的作用域就是函数作用域。</span></p><pre data-language=\"javascript\" id=\"PVkNt\" class=\"ne-codeblock language-javascript\">function showName(){\n  var name='jack';    //函数作用域\n}\nshowName();   //方法调用\n{\n  console.log(name);  //块级作用域,Uncaught ReferenceError: name is not defined\n}\nconsole.log(name);  //全局作用域,Uncaught ReferenceError: name is not defined</pre><div class=\"ne-quote\"><p id=\"uf32c77ea\" class=\"ne-p\"><span class=\"ne-text\">可以看到，函数内部变量，在全局作用域及块级作用域中，都无法访问，只有在函数内部，才能访问到，所以函数内部的变量也称为</span><strong><span class=\"ne-text\">局部变量</span></strong><span class=\"ne-text\">。</span></p></div><h3 id=\"qBvlv\"><span class=\"ne-text\">块级作用域</span></h3><p id=\"u3e073e48\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">ES6</span></code><span class=\"ne-text\">中新出的</span><code class=\"ne-code\"><span class=\"ne-text\">let</span></code><span class=\"ne-text\"> 和</span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\">关键字 自带作用域。</span></p><p id=\"u30259f9a\" class=\"ne-p\"><span class=\"ne-text\">块级作用域相当于是只在这块代码块中生效，如果它被大括号</span><code class=\"ne-code\"><span class=\"ne-text\">{}</span></code><span class=\"ne-text\">包围，则大括号就是一段代码块，代码块中使用</span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\">声明的变量也被称为</span><strong><span class=\"ne-text\">局部变量。</span></strong></p><pre data-language=\"javascript\" id=\"VtjIV\" class=\"ne-codeblock language-javascript\"> {\n   let name='rose';\n }\n\n console.log(name);    //Uncaught ReferenceError: name is not defined\n\n function showName{\n   console.log(name);\n }\n\n showName();    //Uncaught ReferenceError: name is not defined</pre><div class=\"ne-quote\"><p id=\"u6e4ec720\" class=\"ne-p\"><span class=\"ne-text\">可以看到，块级作用域中的变量，在代码块外面就访问不到了。</span></p></div><h2 id=\"ZK0tc\"><span class=\"ne-text\">作用域链</span></h2><p id=\"u5e8f7bad\" class=\"ne-p\"><strong><span class=\"ne-text\">作用域和作用域的嵌套，就产生了作用域链。作用域链的查找，向外不向内。</span></strong></p><h2 id=\"Ab127\"><span class=\"ne-text\">变量提升</span></h2><pre data-language=\"javascript\" id=\"LsUja\" class=\"ne-codeblock language-javascript\">name='rose';\nconsole.log(name);    //rose\nvar name;</pre><p id=\"ub973255c\" class=\"ne-p\"><span class=\"ne-text\">可以发现，这段代码可以正常运行，并且不会报错。</span></p><p id=\"u8c1c4959\" class=\"ne-p\"><span class=\"ne-text\">在JS眼中代码实际上是这样的：</span></p><pre data-language=\"javascript\" id=\"YlVL7\" class=\"ne-codeblock language-javascript\">var name;\nname='rose';\nconsole.log(name);    // rose</pre><hr id=\"jtmuJ\" class=\"ne-hr\"><p id=\"u5413eef6\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">let</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\">代码：</span></p><pre data-language=\"javascript\" id=\"qGVyh\" class=\"ne-codeblock language-javascript\">name='rose';\nconsole.log(name)    //Uncaught ReferenceError: Cannot access 'name' before initialization\nlet name;</pre><div class=\"ne-quote\"><p id=\"ucb557f28\" class=\"ne-p\"><span class=\"ne-text\">let 、const </span><strong><span class=\"ne-text\">禁用变量提升。</span></strong><span class=\"ne-text\">const 声明后必赋值。</span></p></div><h3 id=\"Bl19f\"><span class=\"ne-text\">let、const、var的区别</span></h3><ol class=\"ne-ol\"><li id=\"u24c99da2\"><strong><span class=\"ne-text\">块级作用域</span></strong><span class=\"ne-text\">：块级作用域由</span><code class=\"ne-code\"><span class=\"ne-text\">{}</span></code><span class=\"ne-text\">包括，</span><code class=\"ne-code\"><span class=\"ne-text\">let</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\">具有块级作用域，</span><code class=\"ne-code\"><span class=\"ne-text\">var</span></code><span class=\"ne-text\">不存在块级作用域。</span></li></ol><p id=\"ue5046bec\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">块级作用域解决了</span><code class=\"ne-code\"><span class=\"ne-text\">ES5</span></code><span class=\"ne-text\">中的两个问题：</span></p><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u64d4e962\"><span class=\"ne-text\">内层变量可能覆盖外层变量</span></li><li id=\"u30b2979a\"><span class=\"ne-text\">用来计数的循环变量泄漏为全局变量</span></li></ul></ul><ol start=\"2\" class=\"ne-ol\"><li id=\"u8ab396a0\"><strong><span class=\"ne-text\">变量提升</span></strong><span class=\"ne-text\">：var 存在变量提升，let 和 const 不存在变量提升，即变量只能在声明后使用，否则会报错。</span></li><li id=\"ua25ffd8a\"><strong><span class=\"ne-text\">给全局添加属性</span></strong><span class=\"ne-text\">：浏览器的全局对象是window，Node的全局变量是global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</span></li><li id=\"udb264a72\"><strong><span class=\"ne-text\">重复声明</span></strong><span class=\"ne-text\">：var声明变量时，可以重复声明变量，后声明的变量会覆盖之前声明的变量。let 和 const 不允许在同一作用域下重复声明变量。</span></li><li id=\"ub01b56be\"><strong><span class=\"ne-text\">暂时性死区：</span></strong><span class=\"ne-text\">在使用let、const关键字声明变量时，该变量是不可用的，这在语法上，成为</span><strong><span class=\"ne-text\">暂时性死区</span></strong><span class=\"ne-text\">。</span></li></ol><p id=\"u2df43a4e\" class=\"ne-p\"><span class=\"ne-text\">使用var声明的变量不存在暂时性死区。</span></p><ol start=\"6\" class=\"ne-ol\"><li id=\"u843deaf4\"><strong><span class=\"ne-text\">初始值设置</span></strong><span class=\"ne-text\">：在变量声明时，var和let可以不用设置初始值。而const声明变量必须设置初始值。</span></li><li id=\"ua65d024d\"><strong><span class=\"ne-text\">指针指向</span></strong><span class=\"ne-text\">：let和const都是ES6新增的用于创建变量的语法。let创建的变量可以更改指针指向（可以重新赋值）。但const声明的变量不允许改变指针的指向（不允许重新赋值）。</span></li></ol><h2 id=\"kja5Y\"><span class=\"ne-text\">暂时性死区</span></h2><pre data-language=\"javascript\" id=\"jNK4I\" class=\"ne-codeblock language-javascript\">var name='rose';\n\n{\n  name='bob';\n  let name;    //Uncaught ReferenceError: Cannot access 'name' before initialization\n}</pre><p id=\"u662742dc\" class=\"ne-p\"><strong><span class=\"ne-text\">如果区块中存在let和const，这个区块对于这些关键字声明的变量，从一开始就形成了封闭作用域。</span></strong></p><p id=\"ud45ef18b\" class=\"ne-p\"><span class=\"ne-text\">因为JS清楚地感知到了name是用let声明在当前这个代码块内的，所以会给这个变量name加上了暂时性死区的限制，它就不往外探出头了。</span></p><p id=\"u488c1d48\" class=\"ne-p\"><span class=\"ne-text\">因此，如果我们把上面的</span><code class=\"ne-code\"><span class=\"ne-text\">let name;</span></code><span class=\"ne-text\">去掉，程序也能正常运行，name的值也能被成功修改为blob，就是正常地按照</span><strong><span class=\"ne-text\">作用域链</span></strong><span class=\"ne-text\">的规则，向外探出头去了。</span></p><p id=\"u4858bc45\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u191f528d\" id=\"u191f528d\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS编译原理  </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 前端进阶</span></p><p data-lake-id=\"uec0d395f\" id=\"uec0d395f\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-11</span></p><p data-lake-id=\"ue5ebd1a3\" id=\"ue5ebd1a3\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-11</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [JS,编译原理]</span></p><p data-lake-id=\"u5c52fa15\" id=\"u5c52fa15\"><span data-lake-id=\"u40dc01b6\" id=\"u40dc01b6\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13950614620%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266998&amp;t=597dab5f07b85703e3f345e9d9b074a1</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"xlRa4\" id=\"xlRa4\"><span data-lake-id=\"u8f131ccf\" id=\"u8f131ccf\">JS编译原理</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%20%3D%20%5C%22rose%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22keEto%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u176ac26e\" id=\"u176ac26e\"><span data-lake-id=\"ubd9b17f8\" id=\"ubd9b17f8\">上面这行代码在JS中会这样呈现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3B%20%2F%2F%20%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%E5%A4%84%E7%90%86%5Cnname%20%3D%20'rose'%3B%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5%E5%A4%84%E7%90%86%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CsAUc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u96266933\" id=\"u96266933\"><span data-lake-id=\"ua5e83961\" id=\"ua5e83961\">JS编译主要分为两个阶段：</span><strong><span data-lake-id=\"u97904e60\" id=\"u97904e60\">编译阶段和执行阶段</span></strong><span data-lake-id=\"u5b0f48b5\" id=\"u5b0f48b5\">。</span></p><h3 data-lake-id=\"N4UAu\" id=\"N4UAu\"><span data-lake-id=\"u5c596e19\" id=\"u5c596e19\">编译阶段</span></h3><p data-lake-id=\"u1703a650\" id=\"u1703a650\"><span data-lake-id=\"ud43efef0\" id=\"ud43efef0\">此阶段主角为</span><strong><span data-lake-id=\"u0ae7ba16\" id=\"u0ae7ba16\">编译器。</span></strong><span data-lake-id=\"uc3f8ee65\" id=\"uc3f8ee65\">​</span></p><ul list=\"uc337c410\"><li fid=\"u82afc594\" data-lake-id=\"u3a98c43f\" id=\"u3a98c43f\"><span data-lake-id=\"uf1919b71\" id=\"uf1919b71\">JS找遍作用域，看是否存在name的变量</span></li></ul><ul list=\"uc337c410\" data-lake-indent=\"1\"><li fid=\"u82afc594\" data-lake-id=\"uf39dd4f2\" id=\"uf39dd4f2\"><span data-lake-id=\"u8a84bee4\" id=\"u8a84bee4\">如果已经存在，则什么都不做，直接忽略</span><code data-lake-id=\"u34684b43\" id=\"u34684b43\"><span data-lake-id=\"u7546971f\" id=\"u7546971f\">var name</span></code><span data-lake-id=\"ucf590efb\" id=\"ucf590efb\">这个声明，继续编译下去；</span></li><li fid=\"u82afc594\" data-lake-id=\"u80ced5d6\" id=\"u80ced5d6\"><span data-lake-id=\"ua2e5ac25\" id=\"ua2e5ac25\">如果没有，则在当前作用域中新增一个</span><code data-lake-id=\"ub879af03\" id=\"ub879af03\"><span data-lake-id=\"uf1b3969a\" id=\"uf1b3969a\">name</span></code><span data-lake-id=\"u79d1a60b\" id=\"u79d1a60b\">变量</span></li></ul><ul list=\"uc337c410\" start=\"2\"><li fid=\"u82afc594\" data-lake-id=\"ub8660271\" id=\"ub8660271\"><span data-lake-id=\"u42d54bc3\" id=\"u42d54bc3\">编译器会为引擎生成运行时所需的代码，程序就进入了执行阶段。</span></li></ul><h3 data-lake-id=\"zST4O\" id=\"zST4O\"><span data-lake-id=\"uea088bf2\" id=\"uea088bf2\">执行阶段</span></h3><p data-lake-id=\"u412a4438\" id=\"u412a4438\"><span data-lake-id=\"ue3342d89\" id=\"ue3342d89\">此阶段主角为</span><strong><span data-lake-id=\"u74810a3e\" id=\"u74810a3e\">JS引擎。</span></strong></p><ul list=\"u14ab37f6\"><li fid=\"ub09de1fb\" data-lake-id=\"u655ac592\" id=\"u655ac592\"><strong><span data-lake-id=\"uc107b231\" id=\"uc107b231\">JS引擎</span></strong><span data-lake-id=\"u541c4d68\" id=\"u541c4d68\">在运行时，会先找遍当前作用域，看是否有一个叫</span><code data-lake-id=\"u891a611a\" id=\"u891a611a\"><span data-lake-id=\"u73afc5b0\" id=\"u73afc5b0\">name</span></code><span data-lake-id=\"ufe5a3dfe\" id=\"ufe5a3dfe\">的变量。</span></li></ul><ul list=\"u14ab37f6\" data-lake-indent=\"1\"><li fid=\"ub09de1fb\" data-lake-id=\"u45c0d4af\" id=\"u45c0d4af\"><span data-lake-id=\"u41a7656d\" id=\"u41a7656d\">如果有，直接赋值</span></li><li fid=\"ub09de1fb\" data-lake-id=\"ue9854896\" id=\"ue9854896\"><span data-lake-id=\"u480e3c58\" id=\"u480e3c58\">如果没有，则为当前作用域没有。则去父级作用域看是否有，如果无，则去上一级作用域中查找。</span></li><li fid=\"ub09de1fb\" data-lake-id=\"ue6dff1b4\" id=\"ue6dff1b4\"><span data-lake-id=\"ue45c38d4\" id=\"ue45c38d4\">如果最终没有找到，则抛异常。</span></li></ul><blockquote data-lake-id=\"ud40df6a3\" id=\"ud40df6a3\"><p data-lake-id=\"u34185550\" id=\"u34185550\"><span data-lake-id=\"u02b2dacb\" id=\"u02b2dacb\">作用域套作用域，即作用域链。</span></p></blockquote><h2 data-lake-id=\"zBAey\" id=\"zBAey\"><span data-lake-id=\"ucad2e8c5\" id=\"ucad2e8c5\">作用域</span></h2><p data-lake-id=\"u0728abfe\" id=\"u0728abfe\"><span data-lake-id=\"ue603b568\" id=\"ue603b568\">变量最基本的能力就是</span><strong><span data-lake-id=\"u9a927b51\" id=\"u9a927b51\">能够存储变量中的值，并且允许我们对此变量进行访问和修改</span></strong><span data-lake-id=\"u7e88b447\" id=\"u7e88b447\">，而对于变量存储，访问的</span><strong><span data-lake-id=\"ube217353\" id=\"ube217353\">规则</span></strong><span data-lake-id=\"u079458fa\" id=\"u079458fa\">是 </span><strong><span data-lake-id=\"u5b2adab9\" id=\"u5b2adab9\">作用域</span></strong><span data-lake-id=\"u85e07f10\" id=\"u85e07f10\">。</span></p><h3 data-lake-id=\"WnHa1\" id=\"WnHa1\"><span data-lake-id=\"u4fd37e8c\" id=\"u4fd37e8c\">全局作用域</span></h3><p data-lake-id=\"ue1aa2c17\" id=\"ue1aa2c17\"><span data-lake-id=\"uc274c8a7\" id=\"uc274c8a7\">在任何函数外或代码块外的顶层作用域就是全局作用域，里面的变量就是全局变量。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3D'rose'%3B%20%20%20%2F%2F%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%5Cnfunction%20showName()%7B%20%20%20%20%2F%2F%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%20%20console.log(name)%3B%5Cn%7D%5Cn%7B%5Cn%20%20name%3D'test'%3B%20%20%20%20%2F%2F%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%7D%5CnshowName()%3B%20%20%20%20%2F%2Ftest%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Xljsb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u5b8db1d0\" id=\"u5b8db1d0\"><p data-lake-id=\"u11f3be52\" id=\"u11f3be52\"><span data-lake-id=\"ucca0f2c1\" id=\"ucca0f2c1\">可以看到，全局变量在全局作用域、函数作用域、块级作用域中都可以正常访问。</span></p></blockquote><h3 data-lake-id=\"F62EW\" id=\"F62EW\"><span data-lake-id=\"u9ed1f5b2\" id=\"u9ed1f5b2\">函数作用域</span></h3><p data-lake-id=\"ua216d393\" id=\"ua216d393\"><span data-lake-id=\"u4ba3746a\" id=\"u4ba3746a\">在函数中的作用域就是函数作用域。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20showName()%7B%5Cn%20%20var%20name%3D'jack'%3B%20%20%20%20%2F%2F%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%7D%5CnshowName()%3B%20%20%20%2F%2F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%5Cn%7B%5Cn%20%20console.log(name)%3B%20%20%2F%2F%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%2CUncaught%20ReferenceError%3A%20name%20is%20not%20defined%5Cn%7D%5Cnconsole.log(name)%3B%20%20%2F%2F%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%2CUncaught%20ReferenceError%3A%20name%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PVkNt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ud73a1bda\" id=\"ud73a1bda\"><p data-lake-id=\"uf32c77ea\" id=\"uf32c77ea\"><span data-lake-id=\"u471f35d1\" id=\"u471f35d1\">可以看到，函数内部变量，在全局作用域及块级作用域中，都无法访问，只有在函数内部，才能访问到，所以函数内部的变量也称为</span><strong><span data-lake-id=\"u81069536\" id=\"u81069536\">局部变量</span></strong><span data-lake-id=\"u75b645af\" id=\"u75b645af\">。</span></p></blockquote><h3 data-lake-id=\"qBvlv\" id=\"qBvlv\"><span data-lake-id=\"uea96aabf\" id=\"uea96aabf\">块级作用域</span></h3><p data-lake-id=\"u3e073e48\" id=\"u3e073e48\"><code data-lake-id=\"u82596cfa\" id=\"u82596cfa\"><span data-lake-id=\"u45ea6be8\" id=\"u45ea6be8\">ES6</span></code><span data-lake-id=\"uff64854b\" id=\"uff64854b\">中新出的</span><code data-lake-id=\"u3b0079cf\" id=\"u3b0079cf\"><span data-lake-id=\"u9dfacb7c\" id=\"u9dfacb7c\">let</span></code><span data-lake-id=\"u2864ea10\" id=\"u2864ea10\"> 和</span><code data-lake-id=\"ue596bc93\" id=\"ue596bc93\"><span data-lake-id=\"u8a3c363a\" id=\"u8a3c363a\">const</span></code><span data-lake-id=\"ufe3d60b0\" id=\"ufe3d60b0\">关键字 自带作用域。</span></p><p data-lake-id=\"u30259f9a\" id=\"u30259f9a\"><span data-lake-id=\"u0be12410\" id=\"u0be12410\">块级作用域相当于是只在这块代码块中生效，如果它被大括号</span><code data-lake-id=\"u4521af39\" id=\"u4521af39\"><span data-lake-id=\"u3f1fce7b\" id=\"u3f1fce7b\">{}</span></code><span data-lake-id=\"ua0903bc3\" id=\"ua0903bc3\">包围，则大括号就是一段代码块，代码块中使用</span><code data-lake-id=\"u04015a71\" id=\"u04015a71\"><span data-lake-id=\"u8ea54ba6\" id=\"u8ea54ba6\">const</span></code><span data-lake-id=\"u15a444a9\" id=\"u15a444a9\">声明的变量也被称为</span><strong><span data-lake-id=\"u1ed41699\" id=\"u1ed41699\">局部变量。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%7B%5Cn%20%20%20let%20name%3D'rose'%3B%5Cn%20%7D%5Cn%5Cn%20console.log(name)%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20name%20is%20not%20defined%5Cn%5Cn%20function%20showName%7B%5Cn%20%20%20console.log(name)%3B%5Cn%20%7D%5Cn%5Cn%20showName()%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20name%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VtjIV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ufabfcd92\" id=\"ufabfcd92\"><p data-lake-id=\"u6e4ec720\" id=\"u6e4ec720\"><span data-lake-id=\"u3caade56\" id=\"u3caade56\">可以看到，块级作用域中的变量，在代码块外面就访问不到了。</span></p></blockquote><h2 data-lake-id=\"ZK0tc\" id=\"ZK0tc\"><span data-lake-id=\"u8b852229\" id=\"u8b852229\">作用域链</span></h2><p data-lake-id=\"u5e8f7bad\" id=\"u5e8f7bad\"><strong><span data-lake-id=\"u28066fc1\" id=\"u28066fc1\">作用域和作用域的嵌套，就产生了作用域链。作用域链的查找，向外不向内。</span></strong></p><h2 data-lake-id=\"Ab127\" id=\"Ab127\"><span data-lake-id=\"u78055112\" id=\"u78055112\">变量提升</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22name%3D'rose'%3B%5Cnconsole.log(name)%3B%20%20%20%20%2F%2Frose%5Cnvar%20name%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LsUja%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub973255c\" id=\"ub973255c\"><span data-lake-id=\"uf9491d14\" id=\"uf9491d14\">可以发现，这段代码可以正常运行，并且不会报错。</span></p><p data-lake-id=\"u8c1c4959\" id=\"u8c1c4959\"><span data-lake-id=\"u6ab6be9b\" id=\"u6ab6be9b\">在JS眼中代码实际上是这样的：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3B%5Cnname%3D'rose'%3B%5Cnconsole.log(name)%3B%20%20%20%20%2F%2F%20rose%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YlVL7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22jtmuJ%22%7D\"></card><p data-lake-id=\"u5413eef6\" id=\"u5413eef6\"><code data-lake-id=\"ucbd5fd85\" id=\"ucbd5fd85\"><span data-lake-id=\"uad03d633\" id=\"uad03d633\">let</span></code><span data-lake-id=\"u1b10175a\" id=\"u1b10175a\">和</span><code data-lake-id=\"u21960cad\" id=\"u21960cad\"><span data-lake-id=\"ubaf7bb88\" id=\"ubaf7bb88\">const</span></code><span data-lake-id=\"u300536c7\" id=\"u300536c7\">代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22name%3D'rose'%3B%5Cnconsole.log(name)%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20Cannot%20access%20'name'%20before%20initialization%5Cnlet%20name%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qGVyh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u0b506ec4\" id=\"u0b506ec4\"><p data-lake-id=\"ucb557f28\" id=\"ucb557f28\"><span data-lake-id=\"u4b646ac0\" id=\"u4b646ac0\">let 、const </span><strong><span data-lake-id=\"u43ed9f7e\" id=\"u43ed9f7e\">禁用变量提升。</span></strong><span data-lake-id=\"u3ca180fd\" id=\"u3ca180fd\">const 声明后必赋值。</span></p></blockquote><h3 data-lake-id=\"Bl19f\" id=\"Bl19f\"><span data-lake-id=\"u1525e958\" id=\"u1525e958\">let、const、var的区别</span></h3><ol list=\"ufe97e951\"><li fid=\"ua89a85e8\" data-lake-id=\"u24c99da2\" id=\"u24c99da2\"><strong><span data-lake-id=\"ub1d79d02\" id=\"ub1d79d02\">块级作用域</span></strong><span data-lake-id=\"ub0297370\" id=\"ub0297370\">：块级作用域由</span><code data-lake-id=\"u0d098daf\" id=\"u0d098daf\"><span data-lake-id=\"ua728a5f8\" id=\"ua728a5f8\">{}</span></code><span data-lake-id=\"udab01170\" id=\"udab01170\">包括，</span><code data-lake-id=\"u4a584c8a\" id=\"u4a584c8a\"><span data-lake-id=\"u7b133ece\" id=\"u7b133ece\">let</span></code><span data-lake-id=\"u0490345f\" id=\"u0490345f\">和</span><code data-lake-id=\"ufe69257b\" id=\"ufe69257b\"><span data-lake-id=\"ub12b0df0\" id=\"ub12b0df0\">const</span></code><span data-lake-id=\"u48288ee1\" id=\"u48288ee1\">具有块级作用域，</span><code data-lake-id=\"u85bccedb\" id=\"u85bccedb\"><span data-lake-id=\"u73c5bd91\" id=\"u73c5bd91\">var</span></code><span data-lake-id=\"ud4188673\" id=\"ud4188673\">不存在块级作用域。</span></li></ol><p data-lake-id=\"ue5046bec\" id=\"ue5046bec\" style=\"text-indent: 2em\"><span data-lake-id=\"u2993a276\" id=\"u2993a276\">块级作用域解决了</span><code data-lake-id=\"u6a83e3ac\" id=\"u6a83e3ac\"><span data-lake-id=\"u1ad25931\" id=\"u1ad25931\">ES5</span></code><span data-lake-id=\"u3f2c1b64\" id=\"u3f2c1b64\">中的两个问题：</span></p><ul list=\"udb3ccb60\" data-lake-indent=\"1\"><li fid=\"ubeb5f54a\" data-lake-id=\"u64d4e962\" id=\"u64d4e962\"><span data-lake-id=\"ub639e8d2\" id=\"ub639e8d2\">内层变量可能覆盖外层变量</span></li><li fid=\"ubeb5f54a\" data-lake-id=\"u30b2979a\" id=\"u30b2979a\"><span data-lake-id=\"u3060bf23\" id=\"u3060bf23\">用来计数的循环变量泄漏为全局变量</span></li></ul><ol list=\"ubd33a1c8\" start=\"2\"><li fid=\"u4f555d4d\" data-lake-id=\"u8ab396a0\" id=\"u8ab396a0\"><strong><span data-lake-id=\"u3eafd80e\" id=\"u3eafd80e\">变量提升</span></strong><span data-lake-id=\"ud999a1e2\" id=\"ud999a1e2\">：var 存在变量提升，let 和 const 不存在变量提升，即变量只能在声明后使用，否则会报错。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"ua25ffd8a\" id=\"ua25ffd8a\"><strong><span data-lake-id=\"uaebee069\" id=\"uaebee069\">给全局添加属性</span></strong><span data-lake-id=\"uabbdb779\" id=\"uabbdb779\">：浏览器的全局对象是window，Node的全局变量是global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"udb264a72\" id=\"udb264a72\"><strong><span data-lake-id=\"uba22d208\" id=\"uba22d208\">重复声明</span></strong><span data-lake-id=\"u7ebcf304\" id=\"u7ebcf304\">：var声明变量时，可以重复声明变量，后声明的变量会覆盖之前声明的变量。let 和 const 不允许在同一作用域下重复声明变量。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"ub01b56be\" id=\"ub01b56be\"><strong><span data-lake-id=\"u8aec9f4f\" id=\"u8aec9f4f\">暂时性死区：</span></strong><span data-lake-id=\"u8fb4f6dc\" id=\"u8fb4f6dc\">在使用let、const关键字声明变量时，该变量是不可用的，这在语法上，成为</span><strong><span data-lake-id=\"ua637fb52\" id=\"ua637fb52\">暂时性死区</span></strong><span data-lake-id=\"ue96aceb1\" id=\"ue96aceb1\">。</span></li></ol><p data-lake-id=\"u2df43a4e\" id=\"u2df43a4e\"><span data-lake-id=\"uf31b3f3d\" id=\"uf31b3f3d\">使用var声明的变量不存在暂时性死区。</span></p><ol list=\"u0d62fb0e\" start=\"6\"><li fid=\"u306eb697\" data-lake-id=\"u843deaf4\" id=\"u843deaf4\"><strong><span data-lake-id=\"u9ae738b4\" id=\"u9ae738b4\">初始值设置</span></strong><span data-lake-id=\"u2cc98e0a\" id=\"u2cc98e0a\">：在变量声明时，var和let可以不用设置初始值。而const声明变量必须设置初始值。</span></li><li fid=\"u306eb697\" data-lake-id=\"ua65d024d\" id=\"ua65d024d\"><strong><span data-lake-id=\"u31de973c\" id=\"u31de973c\">指针指向</span></strong><span data-lake-id=\"uf1347e10\" id=\"uf1347e10\">：let和const都是ES6新增的用于创建变量的语法。let创建的变量可以更改指针指向（可以重新赋值）。但const声明的变量不允许改变指针的指向（不允许重新赋值）。</span></li></ol><h2 data-lake-id=\"kja5Y\" id=\"kja5Y\"><span data-lake-id=\"u0c1cd73f\" id=\"u0c1cd73f\">暂时性死区</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3D'rose'%3B%5Cn%5Cn%7B%5Cn%20%20name%3D'bob'%3B%5Cn%20%20let%20name%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20Cannot%20access%20'name'%20before%20initialization%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jNK4I%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u662742dc\" id=\"u662742dc\"><strong><span data-lake-id=\"u9b74dfc2\" id=\"u9b74dfc2\">如果区块中存在let和const，这个区块对于这些关键字声明的变量，从一开始就形成了封闭作用域。</span></strong></p><p data-lake-id=\"ud45ef18b\" id=\"ud45ef18b\"><span data-lake-id=\"u29b22993\" id=\"u29b22993\">因为JS清楚地感知到了name是用let声明在当前这个代码块内的，所以会给这个变量name加上了暂时性死区的限制，它就不往外探出头了。</span></p><p data-lake-id=\"u488c1d48\" id=\"u488c1d48\"><span data-lake-id=\"u488612bd\" id=\"u488612bd\">因此，如果我们把上面的</span><code data-lake-id=\"u7c5dee22\" id=\"u7c5dee22\"><span data-lake-id=\"u6e0ad624\" id=\"u6e0ad624\">let name;</span></code><span data-lake-id=\"u2f2feec9\" id=\"u2f2feec9\">去掉，程序也能正常运行，name的值也能被成功修改为blob，就是正常地按照</span><strong><span data-lake-id=\"u1d9bac4d\" id=\"u1d9bac4d\">作用域链</span></strong><span data-lake-id=\"u3c4e7312\" id=\"u3c4e7312\">的规则，向外探出头去了。</span></p><p data-lake-id=\"u4858bc45\" id=\"u4858bc45\"><span data-lake-id=\"ubadbef55\" id=\"ubadbef55\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u191f528d\" id=\"u191f528d\"><span data-lake-id=\"ubf0dab9f\" id=\"ubf0dab9f\">--- </span></p><p data-lake-id=\"uaabe2cf3\" id=\"uaabe2cf3\"><span data-lake-id=\"u60340cfc\" id=\"u60340cfc\">title: JS编译原理  </span></p><p data-lake-id=\"u6da62028\" id=\"u6da62028\"><span data-lake-id=\"ua6aa27bd\" id=\"ua6aa27bd\">categories: 前端进阶</span></p><p data-lake-id=\"uec0d395f\" id=\"uec0d395f\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-11</span></p><p data-lake-id=\"ue5ebd1a3\" id=\"ue5ebd1a3\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2022-11-11</span></p><p data-lake-id=\"u05972217\" id=\"u05972217\"><span data-lake-id=\"u2aa627f1\" id=\"u2aa627f1\">tags: [JS,编译原理]</span></p><p data-lake-id=\"u5c52fa15\" id=\"u5c52fa15\"><span data-lake-id=\"u40dc01b6\" id=\"u40dc01b6\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13950614620%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671266998&amp;t=597dab5f07b85703e3f345e9d9b074a1</span></p><p data-lake-id=\"ua7b72cc6\" id=\"ua7b72cc6\"><span data-lake-id=\"u5ab4e882\" id=\"u5ab4e882\">--- </span></p><h2 data-lake-id=\"xlRa4\" id=\"xlRa4\"><span data-lake-id=\"u8f131ccf\" id=\"u8f131ccf\">JS编译原理</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%20%3D%20%5C%22rose%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22keEto%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u176ac26e\" id=\"u176ac26e\"><span data-lake-id=\"ubd9b17f8\" id=\"ubd9b17f8\">上面这行代码在JS中会这样呈现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3B%20%2F%2F%20%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%E5%A4%84%E7%90%86%5Cnname%20%3D%20'rose'%3B%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5%E5%A4%84%E7%90%86%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CsAUc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u96266933\" id=\"u96266933\"><span data-lake-id=\"ua5e83961\" id=\"ua5e83961\">JS编译主要分为两个阶段：</span><strong><span data-lake-id=\"u97904e60\" id=\"u97904e60\">编译阶段和执行阶段</span></strong><span data-lake-id=\"u5b0f48b5\" id=\"u5b0f48b5\">。</span></p><h3 data-lake-id=\"N4UAu\" id=\"N4UAu\"><span data-lake-id=\"u5c596e19\" id=\"u5c596e19\">编译阶段</span></h3><p data-lake-id=\"u1703a650\" id=\"u1703a650\"><span data-lake-id=\"ud43efef0\" id=\"ud43efef0\">此阶段主角为</span><strong><span data-lake-id=\"u0ae7ba16\" id=\"u0ae7ba16\">编译器。</span></strong><span data-lake-id=\"uc3f8ee65\" id=\"uc3f8ee65\">​</span></p><ul list=\"uc337c410\"><li fid=\"u82afc594\" data-lake-id=\"u3a98c43f\" id=\"u3a98c43f\"><span data-lake-id=\"uf1919b71\" id=\"uf1919b71\">JS找遍作用域，看是否存在name的变量</span></li></ul><ul list=\"uc337c410\" data-lake-indent=\"1\"><li fid=\"u82afc594\" data-lake-id=\"uf39dd4f2\" id=\"uf39dd4f2\"><span data-lake-id=\"u8a84bee4\" id=\"u8a84bee4\">如果已经存在，则什么都不做，直接忽略</span><code data-lake-id=\"u34684b43\" id=\"u34684b43\"><span data-lake-id=\"u7546971f\" id=\"u7546971f\">var name</span></code><span data-lake-id=\"ucf590efb\" id=\"ucf590efb\">这个声明，继续编译下去；</span></li><li fid=\"u82afc594\" data-lake-id=\"u80ced5d6\" id=\"u80ced5d6\"><span data-lake-id=\"ua2e5ac25\" id=\"ua2e5ac25\">如果没有，则在当前作用域中新增一个</span><code data-lake-id=\"ub879af03\" id=\"ub879af03\"><span data-lake-id=\"uf1b3969a\" id=\"uf1b3969a\">name</span></code><span data-lake-id=\"u79d1a60b\" id=\"u79d1a60b\">变量</span></li></ul><ul list=\"uc337c410\" start=\"2\"><li fid=\"u82afc594\" data-lake-id=\"ub8660271\" id=\"ub8660271\"><span data-lake-id=\"u42d54bc3\" id=\"u42d54bc3\">编译器会为引擎生成运行时所需的代码，程序就进入了执行阶段。</span></li></ul><h3 data-lake-id=\"zST4O\" id=\"zST4O\"><span data-lake-id=\"uea088bf2\" id=\"uea088bf2\">执行阶段</span></h3><p data-lake-id=\"u412a4438\" id=\"u412a4438\"><span data-lake-id=\"ue3342d89\" id=\"ue3342d89\">此阶段主角为</span><strong><span data-lake-id=\"u74810a3e\" id=\"u74810a3e\">JS引擎。</span></strong></p><ul list=\"u14ab37f6\"><li fid=\"ub09de1fb\" data-lake-id=\"u655ac592\" id=\"u655ac592\"><strong><span data-lake-id=\"uc107b231\" id=\"uc107b231\">JS引擎</span></strong><span data-lake-id=\"u541c4d68\" id=\"u541c4d68\">在运行时，会先找遍当前作用域，看是否有一个叫</span><code data-lake-id=\"u891a611a\" id=\"u891a611a\"><span data-lake-id=\"u73afc5b0\" id=\"u73afc5b0\">name</span></code><span data-lake-id=\"ufe5a3dfe\" id=\"ufe5a3dfe\">的变量。</span></li></ul><ul list=\"u14ab37f6\" data-lake-indent=\"1\"><li fid=\"ub09de1fb\" data-lake-id=\"u45c0d4af\" id=\"u45c0d4af\"><span data-lake-id=\"u41a7656d\" id=\"u41a7656d\">如果有，直接赋值</span></li><li fid=\"ub09de1fb\" data-lake-id=\"ue9854896\" id=\"ue9854896\"><span data-lake-id=\"u480e3c58\" id=\"u480e3c58\">如果没有，则为当前作用域没有。则去父级作用域看是否有，如果无，则去上一级作用域中查找。</span></li><li fid=\"ub09de1fb\" data-lake-id=\"ue6dff1b4\" id=\"ue6dff1b4\"><span data-lake-id=\"ue45c38d4\" id=\"ue45c38d4\">如果最终没有找到，则抛异常。</span></li></ul><blockquote data-lake-id=\"ud40df6a3\" id=\"ud40df6a3\"><p data-lake-id=\"u34185550\" id=\"u34185550\"><span data-lake-id=\"u02b2dacb\" id=\"u02b2dacb\">作用域套作用域，即作用域链。</span></p></blockquote><h2 data-lake-id=\"zBAey\" id=\"zBAey\"><span data-lake-id=\"ucad2e8c5\" id=\"ucad2e8c5\">作用域</span></h2><p data-lake-id=\"u0728abfe\" id=\"u0728abfe\"><span data-lake-id=\"ue603b568\" id=\"ue603b568\">变量最基本的能力就是</span><strong><span data-lake-id=\"u9a927b51\" id=\"u9a927b51\">能够存储变量中的值，并且允许我们对此变量进行访问和修改</span></strong><span data-lake-id=\"u7e88b447\" id=\"u7e88b447\">，而对于变量存储，访问的</span><strong><span data-lake-id=\"ube217353\" id=\"ube217353\">规则</span></strong><span data-lake-id=\"u079458fa\" id=\"u079458fa\">是 </span><strong><span data-lake-id=\"u5b2adab9\" id=\"u5b2adab9\">作用域</span></strong><span data-lake-id=\"u85e07f10\" id=\"u85e07f10\">。</span></p><h3 data-lake-id=\"WnHa1\" id=\"WnHa1\"><span data-lake-id=\"u4fd37e8c\" id=\"u4fd37e8c\">全局作用域</span></h3><p data-lake-id=\"ue1aa2c17\" id=\"ue1aa2c17\"><span data-lake-id=\"uc274c8a7\" id=\"uc274c8a7\">在任何函数外或代码块外的顶层作用域就是全局作用域，里面的变量就是全局变量。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3D'rose'%3B%20%20%20%2F%2F%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%5Cnfunction%20showName()%7B%20%20%20%20%2F%2F%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%20%20console.log(name)%3B%5Cn%7D%5Cn%7B%5Cn%20%20name%3D'test'%3B%20%20%20%20%2F%2F%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%7D%5CnshowName()%3B%20%20%20%20%2F%2Ftest%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Xljsb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u5b8db1d0\" id=\"u5b8db1d0\"><p data-lake-id=\"u11f3be52\" id=\"u11f3be52\"><span data-lake-id=\"ucca0f2c1\" id=\"ucca0f2c1\">可以看到，全局变量在全局作用域、函数作用域、块级作用域中都可以正常访问。</span></p></blockquote><h3 data-lake-id=\"F62EW\" id=\"F62EW\"><span data-lake-id=\"u9ed1f5b2\" id=\"u9ed1f5b2\">函数作用域</span></h3><p data-lake-id=\"ua216d393\" id=\"ua216d393\"><span data-lake-id=\"u4ba3746a\" id=\"u4ba3746a\">在函数中的作用域就是函数作用域。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20showName()%7B%5Cn%20%20var%20name%3D'jack'%3B%20%20%20%20%2F%2F%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%5Cn%7D%5CnshowName()%3B%20%20%20%2F%2F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%5Cn%7B%5Cn%20%20console.log(name)%3B%20%20%2F%2F%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%2CUncaught%20ReferenceError%3A%20name%20is%20not%20defined%5Cn%7D%5Cnconsole.log(name)%3B%20%20%2F%2F%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%2CUncaught%20ReferenceError%3A%20name%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PVkNt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ud73a1bda\" id=\"ud73a1bda\"><p data-lake-id=\"uf32c77ea\" id=\"uf32c77ea\"><span data-lake-id=\"u471f35d1\" id=\"u471f35d1\">可以看到，函数内部变量，在全局作用域及块级作用域中，都无法访问，只有在函数内部，才能访问到，所以函数内部的变量也称为</span><strong><span data-lake-id=\"u81069536\" id=\"u81069536\">局部变量</span></strong><span data-lake-id=\"u75b645af\" id=\"u75b645af\">。</span></p></blockquote><h3 data-lake-id=\"qBvlv\" id=\"qBvlv\"><span data-lake-id=\"uea96aabf\" id=\"uea96aabf\">块级作用域</span></h3><p data-lake-id=\"u3e073e48\" id=\"u3e073e48\"><code data-lake-id=\"u82596cfa\" id=\"u82596cfa\"><span data-lake-id=\"u45ea6be8\" id=\"u45ea6be8\">ES6</span></code><span data-lake-id=\"uff64854b\" id=\"uff64854b\">中新出的</span><code data-lake-id=\"u3b0079cf\" id=\"u3b0079cf\"><span data-lake-id=\"u9dfacb7c\" id=\"u9dfacb7c\">let</span></code><span data-lake-id=\"u2864ea10\" id=\"u2864ea10\"> 和</span><code data-lake-id=\"ue596bc93\" id=\"ue596bc93\"><span data-lake-id=\"u8a3c363a\" id=\"u8a3c363a\">const</span></code><span data-lake-id=\"ufe3d60b0\" id=\"ufe3d60b0\">关键字 自带作用域。</span></p><p data-lake-id=\"u30259f9a\" id=\"u30259f9a\"><span data-lake-id=\"u0be12410\" id=\"u0be12410\">块级作用域相当于是只在这块代码块中生效，如果它被大括号</span><code data-lake-id=\"u4521af39\" id=\"u4521af39\"><span data-lake-id=\"u3f1fce7b\" id=\"u3f1fce7b\">{}</span></code><span data-lake-id=\"ua0903bc3\" id=\"ua0903bc3\">包围，则大括号就是一段代码块，代码块中使用</span><code data-lake-id=\"u04015a71\" id=\"u04015a71\"><span data-lake-id=\"u8ea54ba6\" id=\"u8ea54ba6\">const</span></code><span data-lake-id=\"u15a444a9\" id=\"u15a444a9\">声明的变量也被称为</span><strong><span data-lake-id=\"u1ed41699\" id=\"u1ed41699\">局部变量。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%7B%5Cn%20%20%20let%20name%3D'rose'%3B%5Cn%20%7D%5Cn%5Cn%20console.log(name)%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20name%20is%20not%20defined%5Cn%5Cn%20function%20showName%7B%5Cn%20%20%20console.log(name)%3B%5Cn%20%7D%5Cn%5Cn%20showName()%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20name%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VtjIV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ufabfcd92\" id=\"ufabfcd92\"><p data-lake-id=\"u6e4ec720\" id=\"u6e4ec720\"><span data-lake-id=\"u3caade56\" id=\"u3caade56\">可以看到，块级作用域中的变量，在代码块外面就访问不到了。</span></p></blockquote><h2 data-lake-id=\"ZK0tc\" id=\"ZK0tc\"><span data-lake-id=\"u8b852229\" id=\"u8b852229\">作用域链</span></h2><p data-lake-id=\"u5e8f7bad\" id=\"u5e8f7bad\"><strong><span data-lake-id=\"u28066fc1\" id=\"u28066fc1\">作用域和作用域的嵌套，就产生了作用域链。作用域链的查找，向外不向内。</span></strong></p><h2 data-lake-id=\"Ab127\" id=\"Ab127\"><span data-lake-id=\"u78055112\" id=\"u78055112\">变量提升</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22name%3D'rose'%3B%5Cnconsole.log(name)%3B%20%20%20%20%2F%2Frose%5Cnvar%20name%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LsUja%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub973255c\" id=\"ub973255c\"><span data-lake-id=\"uf9491d14\" id=\"uf9491d14\">可以发现，这段代码可以正常运行，并且不会报错。</span></p><p data-lake-id=\"u8c1c4959\" id=\"u8c1c4959\"><span data-lake-id=\"u6ab6be9b\" id=\"u6ab6be9b\">在JS眼中代码实际上是这样的：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3B%5Cnname%3D'rose'%3B%5Cnconsole.log(name)%3B%20%20%20%20%2F%2F%20rose%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YlVL7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22jtmuJ%22%7D\"></card><p data-lake-id=\"u5413eef6\" id=\"u5413eef6\"><code data-lake-id=\"ucbd5fd85\" id=\"ucbd5fd85\"><span data-lake-id=\"uad03d633\" id=\"uad03d633\">let</span></code><span data-lake-id=\"u1b10175a\" id=\"u1b10175a\">和</span><code data-lake-id=\"u21960cad\" id=\"u21960cad\"><span data-lake-id=\"ubaf7bb88\" id=\"ubaf7bb88\">const</span></code><span data-lake-id=\"u300536c7\" id=\"u300536c7\">代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22name%3D'rose'%3B%5Cnconsole.log(name)%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20Cannot%20access%20'name'%20before%20initialization%5Cnlet%20name%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qGVyh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u0b506ec4\" id=\"u0b506ec4\"><p data-lake-id=\"ucb557f28\" id=\"ucb557f28\"><span data-lake-id=\"u4b646ac0\" id=\"u4b646ac0\">let 、const </span><strong><span data-lake-id=\"u43ed9f7e\" id=\"u43ed9f7e\">禁用变量提升。</span></strong><span data-lake-id=\"u3ca180fd\" id=\"u3ca180fd\">const 声明后必赋值。</span></p></blockquote><h3 data-lake-id=\"Bl19f\" id=\"Bl19f\"><span data-lake-id=\"u1525e958\" id=\"u1525e958\">let、const、var的区别</span></h3><ol list=\"ufe97e951\"><li fid=\"ua89a85e8\" data-lake-id=\"u24c99da2\" id=\"u24c99da2\"><strong><span data-lake-id=\"ub1d79d02\" id=\"ub1d79d02\">块级作用域</span></strong><span data-lake-id=\"ub0297370\" id=\"ub0297370\">：块级作用域由</span><code data-lake-id=\"u0d098daf\" id=\"u0d098daf\"><span data-lake-id=\"ua728a5f8\" id=\"ua728a5f8\">{}</span></code><span data-lake-id=\"udab01170\" id=\"udab01170\">包括，</span><code data-lake-id=\"u4a584c8a\" id=\"u4a584c8a\"><span data-lake-id=\"u7b133ece\" id=\"u7b133ece\">let</span></code><span data-lake-id=\"u0490345f\" id=\"u0490345f\">和</span><code data-lake-id=\"ufe69257b\" id=\"ufe69257b\"><span data-lake-id=\"ub12b0df0\" id=\"ub12b0df0\">const</span></code><span data-lake-id=\"u48288ee1\" id=\"u48288ee1\">具有块级作用域，</span><code data-lake-id=\"u85bccedb\" id=\"u85bccedb\"><span data-lake-id=\"u73c5bd91\" id=\"u73c5bd91\">var</span></code><span data-lake-id=\"ud4188673\" id=\"ud4188673\">不存在块级作用域。</span></li></ol><p data-lake-id=\"ue5046bec\" id=\"ue5046bec\" style=\"text-indent: 2em\"><span data-lake-id=\"u2993a276\" id=\"u2993a276\">块级作用域解决了</span><code data-lake-id=\"u6a83e3ac\" id=\"u6a83e3ac\"><span data-lake-id=\"u1ad25931\" id=\"u1ad25931\">ES5</span></code><span data-lake-id=\"u3f2c1b64\" id=\"u3f2c1b64\">中的两个问题：</span></p><ul list=\"udb3ccb60\" data-lake-indent=\"1\"><li fid=\"ubeb5f54a\" data-lake-id=\"u64d4e962\" id=\"u64d4e962\"><span data-lake-id=\"ub639e8d2\" id=\"ub639e8d2\">内层变量可能覆盖外层变量</span></li><li fid=\"ubeb5f54a\" data-lake-id=\"u30b2979a\" id=\"u30b2979a\"><span data-lake-id=\"u3060bf23\" id=\"u3060bf23\">用来计数的循环变量泄漏为全局变量</span></li></ul><ol list=\"ubd33a1c8\" start=\"2\"><li fid=\"u4f555d4d\" data-lake-id=\"u8ab396a0\" id=\"u8ab396a0\"><strong><span data-lake-id=\"u3eafd80e\" id=\"u3eafd80e\">变量提升</span></strong><span data-lake-id=\"ud999a1e2\" id=\"ud999a1e2\">：var 存在变量提升，let 和 const 不存在变量提升，即变量只能在声明后使用，否则会报错。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"ua25ffd8a\" id=\"ua25ffd8a\"><strong><span data-lake-id=\"uaebee069\" id=\"uaebee069\">给全局添加属性</span></strong><span data-lake-id=\"uabbdb779\" id=\"uabbdb779\">：浏览器的全局对象是window，Node的全局变量是global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"udb264a72\" id=\"udb264a72\"><strong><span data-lake-id=\"uba22d208\" id=\"uba22d208\">重复声明</span></strong><span data-lake-id=\"u7ebcf304\" id=\"u7ebcf304\">：var声明变量时，可以重复声明变量，后声明的变量会覆盖之前声明的变量。let 和 const 不允许在同一作用域下重复声明变量。</span></li><li fid=\"u4f555d4d\" data-lake-id=\"ub01b56be\" id=\"ub01b56be\"><strong><span data-lake-id=\"u8aec9f4f\" id=\"u8aec9f4f\">暂时性死区：</span></strong><span data-lake-id=\"u8fb4f6dc\" id=\"u8fb4f6dc\">在使用let、const关键字声明变量时，该变量是不可用的，这在语法上，成为</span><strong><span data-lake-id=\"ua637fb52\" id=\"ua637fb52\">暂时性死区</span></strong><span data-lake-id=\"ue96aceb1\" id=\"ue96aceb1\">。</span></li></ol><p data-lake-id=\"u2df43a4e\" id=\"u2df43a4e\"><span data-lake-id=\"uf31b3f3d\" id=\"uf31b3f3d\">使用var声明的变量不存在暂时性死区。</span></p><ol list=\"u0d62fb0e\" start=\"6\"><li fid=\"u306eb697\" data-lake-id=\"u843deaf4\" id=\"u843deaf4\"><strong><span data-lake-id=\"u9ae738b4\" id=\"u9ae738b4\">初始值设置</span></strong><span data-lake-id=\"u2cc98e0a\" id=\"u2cc98e0a\">：在变量声明时，var和let可以不用设置初始值。而const声明变量必须设置初始值。</span></li><li fid=\"u306eb697\" data-lake-id=\"ua65d024d\" id=\"ua65d024d\"><strong><span data-lake-id=\"u31de973c\" id=\"u31de973c\">指针指向</span></strong><span data-lake-id=\"uf1347e10\" id=\"uf1347e10\">：let和const都是ES6新增的用于创建变量的语法。let创建的变量可以更改指针指向（可以重新赋值）。但const声明的变量不允许改变指针的指向（不允许重新赋值）。</span></li></ol><h2 data-lake-id=\"kja5Y\" id=\"kja5Y\"><span data-lake-id=\"u0c1cd73f\" id=\"u0c1cd73f\">暂时性死区</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%3D'rose'%3B%5Cn%5Cn%7B%5Cn%20%20name%3D'bob'%3B%5Cn%20%20let%20name%3B%20%20%20%20%2F%2FUncaught%20ReferenceError%3A%20Cannot%20access%20'name'%20before%20initialization%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jNK4I%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u662742dc\" id=\"u662742dc\"><strong><span data-lake-id=\"u9b74dfc2\" id=\"u9b74dfc2\">如果区块中存在let和const，这个区块对于这些关键字声明的变量，从一开始就形成了封闭作用域。</span></strong></p><p data-lake-id=\"ud45ef18b\" id=\"ud45ef18b\"><span data-lake-id=\"u29b22993\" id=\"u29b22993\">因为JS清楚地感知到了name是用let声明在当前这个代码块内的，所以会给这个变量name加上了暂时性死区的限制，它就不往外探出头了。</span></p><p data-lake-id=\"u488c1d48\" id=\"u488c1d48\"><span data-lake-id=\"u488612bd\" id=\"u488612bd\">因此，如果我们把上面的</span><code data-lake-id=\"u7c5dee22\" id=\"u7c5dee22\"><span data-lake-id=\"u6e0ad624\" id=\"u6e0ad624\">let name;</span></code><span data-lake-id=\"u2f2feec9\" id=\"u2f2feec9\">去掉，程序也能正常运行，name的值也能被成功修改为blob，就是正常地按照</span><strong><span data-lake-id=\"u1d9bac4d\" id=\"u1d9bac4d\">作用域链</span></strong><span data-lake-id=\"u3c4e7312\" id=\"u3c4e7312\">的规则，向外探出头去了。</span></p><p data-lake-id=\"u4858bc45\" id=\"u4858bc45\"><span data-lake-id=\"ubadbef55\" id=\"ubadbef55\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-17T08:50:33.000Z",
    "deleted_at": null,
    "created_at": "2022-11-15T12:07:36.000Z",
    "updated_at": "2022-11-17T08:50:33.000Z",
    "published_at": "2022-11-17T08:50:33.000Z",
    "first_published_at": "2022-11-16T00:49:16.192Z",
    "word_count": 1491,
    "cover": null,
    "description": "--- title: JS编译原理  categories: 前端进阶date: 2022-11-11updated: 2022-11-11tags: [JS,编译原理]cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106185896,
    "slug": "uv03g7gbeafp8c4l",
    "title": "如何关联本地包",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: 如何关联本地包<br />categories: 知识<br />date: 2022-11-05<br />updated: 2022-11-05<br />tags: [前端工程化, 组件库]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flmg.jj20.com%2Fup%2Fallimg%2Ftp09%2F210F2130512J47-0-lp.jpg&refer=http%3A%2F%2Flmg.jj20.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267126&t=f06ff482cd6a46300f4f5e70dfa0ee93<br />---\n<a name=\"AF0Rd\"></a>\n## 关联本地包的方式\n\n1. npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。\n2. pnpm 的 `workspace` 自动关联：   \n\n① 在项目根目录下创建 `pnpm-workspace.yaml` 文件   ```yaml   packages:     - 'packages/\\_'   ```   代表 packages 下的所有项目都可被很容易的被其他项目自动 link（无需使用 `pnpm i 包名`），底下声明的文件夹都可成为 `workspace`。   <br />② 举例：如果我们想要在 `packages` 下的 `test` 中关联 `test2`，只需在 `test` 中的 `package.json` 中依赖加入对应的 `workspace` 下的项目即可，   ```json   \"dependencies\": {       \"test2\": \"workspace:_\"   }   ```   然后在 test 下执行`pnpm i`，就会自动关联 test2 到 test1 了。   <br />③ 实现步骤 2 的另一种做法：在 `test` 下执行 `pnpm i test2`，即可将 `test2` 关联到 `test`，可以看到版本号后出现`workspace`字样。\n",
    "body_draft": "--- <br />title: 如何关联本地包<br />categories: 知识<br />date: 2022-11-05<br />updated: 2022-11-05<br />tags: [前端工程化, 组件库]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flmg.jj20.com%2Fup%2Fallimg%2Ftp09%2F210F2130512J47-0-lp.jpg&refer=http%3A%2F%2Flmg.jj20.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267126&t=f06ff482cd6a46300f4f5e70dfa0ee93<br />---\n<a name=\"AF0Rd\"></a>\n## 关联本地包的方式\n\n1. npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。\n2. pnpm 的 `workspace` 自动关联：   \n\n① 在项目根目录下创建 `pnpm-workspace.yaml` 文件   ```yaml   packages:     - 'packages/\\_'   ```   代表 packages 下的所有项目都可被很容易的被其他项目自动 link（无需使用 `pnpm i 包名`），底下声明的文件夹都可成为 `workspace`。   <br />② 举例：如果我们想要在 `packages` 下的 `test` 中关联 `test2`，只需在 `test` 中的 `package.json` 中依赖加入对应的 `workspace` 下的项目即可，   ```json   \"dependencies\": {       \"test2\": \"workspace:_\"   }   ```   然后在 test 下执行`pnpm i`，就会自动关联 test2 到 test1 了。   <br />③ 实现步骤 2 的另一种做法：在 `test` 下执行 `pnpm i test2`，即可将 `test2` 关联到 `test`，可以看到版本号后出现`workspace`字样。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u170efa3d\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"u794c25e6\" class=\"ne-p\"><span class=\"ne-text\">title: 如何关联本地包</span></p><p id=\"u25151903\" class=\"ne-p\"><span class=\"ne-text\">categories: 知识</span></p><p id=\"u840dfbb8\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-05</span></p><p id=\"u9c14d4be\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-05</span></p><p id=\"u8f5b98cf\" class=\"ne-p\"><span class=\"ne-text\">tags: [前端工程化, 组件库]</span></p><p id=\"u8f43a347\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flmg.jj20.com%2Fup%2Fallimg%2Ftp09%2F210F2130512J47-0-lp.jpg&amp;refer=http%3A%2F%2Flmg.jj20.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267126&amp;t=f06ff482cd6a46300f4f5e70dfa0ee93</span></p><p id=\"uc5d1981a\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><h2 id=\"AF0Rd\"><span class=\"ne-text\">关联本地包的方式</span></h2><ol class=\"ne-ol\"><li id=\"uee7e7f0b\"><span class=\"ne-text\">npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。</span></li><li id=\"uc0dfdbbf\"><span class=\"ne-text\">pnpm 的 `workspace` 自动关联：   </span></li></ol><p id=\"u725256a5\" class=\"ne-p\" style=\"margin-left: 2em\"><span class=\"ne-text\">① 在项目根目录下创建 `pnpm-workspace.yaml` 文件   ```yaml   packages:     - 'packages/\\_'   ```   代表 packages 下的所有项目都可被很容易的被其他项目自动 link（无需使用 `pnpm i 包名`），底下声明的文件夹都可成为 `workspace`。   </span></p><p id=\"uda204f21\" class=\"ne-p\" style=\"margin-left: 2em\"><span class=\"ne-text\">② 举例：如果我们想要在 `packages` 下的 `test` 中关联 `test2`，只需在 `test` 中的 `package.json` 中依赖加入对应的 `workspace` 下的项目即可，   ```json   &quot;dependencies&quot;: {       &quot;test2&quot;: &quot;workspace:_&quot;   }   ```   然后在 test 下执行`pnpm i`，就会自动关联 test2 到 test1 了。   </span></p><p id=\"u13a8df35\" class=\"ne-p\" style=\"margin-left: 2em\"><span class=\"ne-text\">③ 实现步骤 2 的另一种做法：在 `test` 下执行 `pnpm i test2`，即可将 `test2` 关联到 `test`，可以看到版本号后出现`workspace`字样。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u170efa3d\" id=\"u170efa3d\"><span data-lake-id=\"ueb48a425\" id=\"ueb48a425\">--- </span></p><p data-lake-id=\"u794c25e6\" id=\"u794c25e6\"><span data-lake-id=\"u09de81ee\" id=\"u09de81ee\">title: 如何关联本地包</span></p><p data-lake-id=\"u25151903\" id=\"u25151903\"><span data-lake-id=\"u2889c155\" id=\"u2889c155\">categories: 知识</span></p><p data-lake-id=\"u840dfbb8\" id=\"u840dfbb8\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-05</span></p><p data-lake-id=\"u9c14d4be\" id=\"u9c14d4be\"><span data-lake-id=\"u8224b5f3\" id=\"u8224b5f3\">updated: 2022-11-05</span></p><p data-lake-id=\"u8f5b98cf\" id=\"u8f5b98cf\"><span data-lake-id=\"ued3cc2f6\" id=\"ued3cc2f6\">tags: [前端工程化, 组件库]</span></p><p data-lake-id=\"u8f43a347\" id=\"u8f43a347\"><span data-lake-id=\"ua4e444cf\" id=\"ua4e444cf\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flmg.jj20.com%2Fup%2Fallimg%2Ftp09%2F210F2130512J47-0-lp.jpg&amp;refer=http%3A%2F%2Flmg.jj20.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267126&amp;t=f06ff482cd6a46300f4f5e70dfa0ee93</span></p><p data-lake-id=\"uc5d1981a\" id=\"uc5d1981a\"><span data-lake-id=\"u7b86a13b\" id=\"u7b86a13b\">---</span></p><h2 data-lake-id=\"AF0Rd\" id=\"AF0Rd\"><span data-lake-id=\"udef23076\" id=\"udef23076\">关联本地包的方式</span></h2><ol list=\"uc3231d1a\"><li fid=\"u1fe86b23\" data-lake-id=\"uee7e7f0b\" id=\"uee7e7f0b\"><span data-lake-id=\"udd4344f5\" id=\"udd4344f5\">npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。</span></li><li fid=\"u1fe86b23\" data-lake-id=\"uc0dfdbbf\" id=\"uc0dfdbbf\"><span data-lake-id=\"ue39c95ba\" id=\"ue39c95ba\">pnpm 的 `workspace` 自动关联：   </span></li></ol><p data-lake-id=\"u725256a5\" id=\"u725256a5\" style=\"padding-left: 2em\"><span data-lake-id=\"ub5b20878\" id=\"ub5b20878\">① 在项目根目录下创建 `pnpm-workspace.yaml` 文件   ```yaml   packages:     - 'packages/\\_'   ```   代表 packages 下的所有项目都可被很容易的被其他项目自动 link（无需使用 `pnpm i 包名`），底下声明的文件夹都可成为 `workspace`。   </span></p><p data-lake-id=\"uda204f21\" id=\"uda204f21\" style=\"padding-left: 2em\"><span data-lake-id=\"u072c0662\" id=\"u072c0662\">② 举例：如果我们想要在 `packages` 下的 `test` 中关联 `test2`，只需在 `test` 中的 `package.json` 中依赖加入对应的 `workspace` 下的项目即可，   ```json   &quot;dependencies&quot;: {       &quot;test2&quot;: &quot;workspace:_&quot;   }   ```   然后在 test 下执行`pnpm i`，就会自动关联 test2 到 test1 了。   </span></p><p data-lake-id=\"u13a8df35\" id=\"u13a8df35\" style=\"padding-left: 2em\"><span data-lake-id=\"u1ef92113\" id=\"u1ef92113\">③ 实现步骤 2 的另一种做法：在 `test` 下执行 `pnpm i test2`，即可将 `test2` 关联到 `test`，可以看到版本号后出现`workspace`字样。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u170efa3d\" id=\"u170efa3d\"><span data-lake-id=\"ueb48a425\" id=\"ueb48a425\">--- </span></p><p data-lake-id=\"u794c25e6\" id=\"u794c25e6\"><span data-lake-id=\"u09de81ee\" id=\"u09de81ee\">title: 如何关联本地包</span></p><p data-lake-id=\"u25151903\" id=\"u25151903\"><span data-lake-id=\"u2889c155\" id=\"u2889c155\">categories: 知识</span></p><p data-lake-id=\"u840dfbb8\" id=\"u840dfbb8\"><span data-lake-id=\"uc4bd43d4\" id=\"uc4bd43d4\">date: 2022-11-05</span></p><p data-lake-id=\"u9c14d4be\" id=\"u9c14d4be\"><span data-lake-id=\"u8224b5f3\" id=\"u8224b5f3\">updated: 2022-11-05</span></p><p data-lake-id=\"u8f5b98cf\" id=\"u8f5b98cf\"><span data-lake-id=\"ued3cc2f6\" id=\"ued3cc2f6\">tags: [前端工程化, 组件库]</span></p><p data-lake-id=\"u8f43a347\" id=\"u8f43a347\"><span data-lake-id=\"ua4e444cf\" id=\"ua4e444cf\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flmg.jj20.com%2Fup%2Fallimg%2Ftp09%2F210F2130512J47-0-lp.jpg&amp;refer=http%3A%2F%2Flmg.jj20.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267126&amp;t=f06ff482cd6a46300f4f5e70dfa0ee93</span></p><p data-lake-id=\"uc5d1981a\" id=\"uc5d1981a\"><span data-lake-id=\"u7b86a13b\" id=\"u7b86a13b\">---</span></p><h2 data-lake-id=\"AF0Rd\" id=\"AF0Rd\"><span data-lake-id=\"udef23076\" id=\"udef23076\">关联本地包的方式</span></h2><ol list=\"uc3231d1a\"><li fid=\"u1fe86b23\" data-lake-id=\"uee7e7f0b\" id=\"uee7e7f0b\"><span data-lake-id=\"udd4344f5\" id=\"udd4344f5\">npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。</span></li><li fid=\"u1fe86b23\" data-lake-id=\"uc0dfdbbf\" id=\"uc0dfdbbf\"><span data-lake-id=\"ue39c95ba\" id=\"ue39c95ba\">pnpm 的 `workspace` 自动关联：   </span></li></ol><p data-lake-id=\"u725256a5\" id=\"u725256a5\" style=\"padding-left: 2em\"><span data-lake-id=\"ub5b20878\" id=\"ub5b20878\">① 在项目根目录下创建 `pnpm-workspace.yaml` 文件   ```yaml   packages:     - 'packages/\\_'   ```   代表 packages 下的所有项目都可被很容易的被其他项目自动 link（无需使用 `pnpm i 包名`），底下声明的文件夹都可成为 `workspace`。   </span></p><p data-lake-id=\"uda204f21\" id=\"uda204f21\" style=\"padding-left: 2em\"><span data-lake-id=\"u072c0662\" id=\"u072c0662\">② 举例：如果我们想要在 `packages` 下的 `test` 中关联 `test2`，只需在 `test` 中的 `package.json` 中依赖加入对应的 `workspace` 下的项目即可，   ```json   &quot;dependencies&quot;: {       &quot;test2&quot;: &quot;workspace:_&quot;   }   ```   然后在 test 下执行`pnpm i`，就会自动关联 test2 到 test1 了。   </span></p><p data-lake-id=\"u13a8df35\" id=\"u13a8df35\" style=\"padding-left: 2em\"><span data-lake-id=\"u1ef92113\" id=\"u1ef92113\">③ 实现步骤 2 的另一种做法：在 `test` 下执行 `pnpm i test2`，即可将 `test2` 关联到 `test`，可以看到版本号后出现`workspace`字样。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-17T09:03:03.000Z",
    "deleted_at": null,
    "created_at": "2022-11-15T07:25:12.000Z",
    "updated_at": "2022-11-17T09:03:03.000Z",
    "published_at": "2022-11-17T09:03:03.000Z",
    "first_published_at": "2022-11-15T07:25:12.427Z",
    "word_count": 274,
    "cover": null,
    "description": "--- title: 如何关联本地包categories: 知识tags: [前端工程化, 组件库]---## 关联本地包的方式1. npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。2. pnpm 的 `workspace` 自动关联：   ...",
    "custom_description": "--- title: 如何关联本地包categories: 知识tags: [前端工程化, 组件库]---## 关联本地包的方式1. npm link 关联到本地(某个目录)：包更新后，本地的引用会自动更新，无需重新关联即可进行调试。2. pnpm 的 `workspace` 自动关联：   ...",
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106185882,
    "slug": "muygv7q215nc2vk2",
    "title": "RabbitMQ学习笔记",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "---<br />title: RabbitMQ学习笔记<br />categories: 知识<br />updated: 2021-11-05<br />date: 2021-11-05<br />tags: [RabbitMQ, 消息中间件]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201910%2F20191018012402811963.png&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267173&t=5d1df4c7b1043f63bcf583ceffddf4d3<br />--- \n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630671540955-650bc67f-569a-4cef-a095-ec73a3b34897.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=740&id=u64b4ea35&margin=%5Bobject%20Object%5D&name=image.png&originHeight=740&originWidth=1340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=584856&status=done&style=none&taskId=u20a11e76-4e9c-49b4-8ca4-cc25eac0808&title=&width=1340#averageHue=%23efe7e7&crop=0&crop=0&crop=1&crop=1&id=FmDdj&originHeight=740&originWidth=1340&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630672453989-c5f9d3cf-e77f-4c3e-8a9d-173b49f0aa4c.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=473&id=ub505e50f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=473&originWidth=1544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=451836&status=done&style=none&taskId=u973d9d93-5ee4-44e2-9f50-b28d8e8f15e&title=&width=1544#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=N1Vbj&originHeight=473&originWidth=1544&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630673109375-2f65953f-32f5-4be8-9353-9d08abb6587f.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=794&id=uce851ada&margin=%5Bobject%20Object%5D&name=image.png&originHeight=794&originWidth=1520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=669042&status=done&style=none&taskId=u1e0c19d3-9eae-4ab1-9e35-b33c4bbbcd6&title=&width=1520#averageHue=%23b2b1b0&crop=0&crop=0&crop=1&crop=1&id=zGC4d&originHeight=794&originWidth=1520&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"9c0cd8ed\"></a>\n## 为什么要用 rabbitMQ？\n<a name=\"81220e89\"></a>\n### 1. 流量削峰\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998719062-ee3b7961-8606-40b9-9bd6-139143630402.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=91&id=u7a7d8c10&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78126&status=done&style=none&taskId=u903bdc4d-2ce4-4ac8-97d1-9cf8226327b&title=&width=495#averageHue=%23f3f3f3&crop=0&crop=0&crop=1&crop=1&id=Ds1E5&originHeight=182&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c491023f\"></a>\n### 2. 应用解耦\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998760193-a4f14c2c-a22b-4c92-b207-ae58a962577a.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=u8f01ca2b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=363&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190648&status=done&style=none&taskId=u30e77d52-0f3b-4d69-b06f-8229a9c232f&title=&width=542.5&referrerpolicy=no-referrer#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=hMEcn&originHeight=363&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d4ef8fda\"></a>\n### 3. 异步处理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009293978-1fde3fa6-5de6-476b-bc8f-4381749e748c.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=315&id=u2602b5b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=630&originWidth=1167&originalType=binary&ratio=1&rotation=0&showTitle=false&size=283589&status=done&style=none&taskId=uf5236049-2c88-4e12-b15e-7d99585efad&title=&width=583.5#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=EqXpn&originHeight=630&originWidth=1167&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"753ccaa2\"></a>\n## RabbitMQ 核心部分\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009378104-cb162a2f-4170-4d24-99c1-4e3ee09087ae.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=u45cac300&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&size=305514&status=done&style=none&taskId=u95a38925-5c34-45dd-bfca-d140d73dc3f&title=&width=538.5#averageHue=%23f8f2f1&crop=0&crop=0&crop=1&crop=1&id=TB3Zf&originHeight=568&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"a260da3a\"></a>\n## 各个名词介绍\n\n\n\n<a name=\"c83a4ba0\"></a>\n### RabbitMQ 工作原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009501957-eb0902f3-1fa1-47d5-9bc7-8d03f6e12de0.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u79c375f5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=514&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&size=210068&status=done&style=none&taskId=ue02a7c50-c563-46af-a784-5ae4c1dcdfe&title=&width=530#averageHue=%23efc150&crop=0&crop=0&crop=1&crop=1&id=sf1J3&originHeight=514&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009567915-6084eb1d-d428-47ec-844f-b3b48c6c6d0c.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=310&id=u9337433a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=619&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=776522&status=done&style=none&taskId=uced2ac5e-e117-4050-8e39-087f63ff410&title=&width=567.5#averageHue=%23e1dccf&crop=0&crop=0&crop=1&crop=1&id=ft4q6&originHeight=619&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009610891-4a5dba18-6006-41bf-a068-b2f33ed7df48.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=63&id=u38d6f233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=126&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136646&status=done&style=none&taskId=u3dada18e-9ab8-40c9-8042-2e2f9f40306&title=&width=564#averageHue=%23cdc5b8&crop=0&crop=0&crop=1&crop=1&id=rJuNv&originHeight=126&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"e655a410\"></a>\n## 安装\n\n[rabbitmq.com/download.html](https://www.rabbitmq.com/download.html)<br />erlang 和 rabbitMQ 版本匹配：<br />[https://www.cnblogs.com/gne-hwz/p/10714013.html](https://www.cnblogs.com/gne-hwz/p/10714013.html)<br />安装：[https://blog.csdn.net/almahehe/article/details/75390572](https://blog.csdn.net/almahehe/article/details/75390572)<br />（建议看尚硅谷视频进行快速安装）<br />安装之后，可以访问 ip:15672 ，查看发送消息的端口（5672）和用户。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638169386681-e382c30c-baba-4fbb-bd40-aaa7b0a1eac6.png#clientId=uc4bbfa15-6ab6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=173&id=u1a771f9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=102&originWidth=450&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28980&status=done&style=none&taskId=ua13bea1f-438b-4ef8-8913-b4ccb9fa78c&title=&width=761.9931030273438#averageHue=%23f1f1f1&crop=0&crop=0&crop=1&crop=1&id=pNXMC&originHeight=102&originWidth=450&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c729f8ef\"></a>\n## 简单队列模式\n<a name=\"f5abe6f8\"></a>\n### 生产者代码\n\n1. 项目依赖：\n\n```xml\n<dependencies>\n        <!--指定jdk编译版本-->\n        <dependency>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client -->\n        <!--rabbitmq依赖客户端-->\n        <dependency>\n            <groupId>com.rabbitmq</groupId>\n            <artifactId>amqp-client</artifactId>\n            <version>5.8.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->\n        <!--操作文件流的依赖-->\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.25</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n2. 生产者代码：\n\n```java\njapackage com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = \"hello\";\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        //设置工厂ip  连接rabbitmq的队列\n        factory.setHost(\"59.110.171.189\");\n        //用户名\n        factory.setUsername(\"admin\");\n        //密码\n        factory.setPassword(\"123\");\n        //创建连接\n        Connection connection = factory.newConnection();\n        //获取信道\n        Channel channel = connection.createChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n                4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n                5.其他参数（延迟消息......）\n         */\n\n        channel.queueDeclare(QUEUE_NAME,false,false,false,null);\n        //发消息\n        String message = \"hello world\";\n        /**\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        channel.basicPublish(\"\",QUEUE_NAME,null,message.getBytes());\n        System.out.println(\"消息发送完毕\");\n    }\n}\n```\n\n如果运行报超时错误，需要打开云服务器的安全组 5672 端口。<br />（参考博客：[https://www.cnblogs.com/jxearlier/p/11920825.html](https://www.cnblogs.com/jxearlier/p/11920825.html)）\n<a name=\"3b753fe7\"></a>\n### 消费者代码\n\n```xml\npackage com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"59.110.171.189\");\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"123\");\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        //声明 接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(message);\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"消息消费被中断\");\n        };\n        /**\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true,deliverCallback,cancelCallback);\n    }\n}\n```\n\n运行结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638172828992-073b0df6-a480-4260-a724-e17e9191a44c.png#clientId=uc4bbfa15-6ab6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=20&id=u3ee077b2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=20&originWidth=296&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2932&status=done&style=none&taskId=ud645c173-0157-49f2-89fb-5d58c2cd89a&title=&width=296#averageHue=%232f3e49&crop=0&crop=0&crop=1&crop=1&id=kWU4Y&originHeight=20&originWidth=296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"56a70cf7\"></a>\n### 测试生产者和消费者代码：\n\n1. 先运行消费者代码，发现没有消息，再运行生产者代码，发送消息，再看消费者代码控制台，此时已经接收到消息。\n\n<a name=\"3d1bae02\"></a>\n## 工作队列模式\n\n\n\n<a name=\"d9addd15\"></a>\n### 轮训分发消息\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638191830547-a43bbaa1-a524-4603-b6a9-0824e943cf9c.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=546&id=ucf96c5e0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=546&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220503&status=done&style=none&taskId=ub030755f-49df-4184-9d0d-65bfa0e561e&title=&width=1278#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=kyxCV&originHeight=546&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 抽取连接工厂工具类：\n\n```xml\npackage com.atguigu.rabbitmq.utils;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:48\n * 连接工厂创建信道的工具类\n */\npublic class RabbitMqUtils {\n    public static Channel getChannel() throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"59.110.171.189\");\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"123\");\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        return channel;\n    }\n}\n```\n\n2. 工作线程代码：（消费者）\n\n```xml\npackage com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.CancelCallback;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\nimport com.rabbitmq.client.Delivery;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:55\n * 这是一个工作线程（相当于之前的消费者）\n */\npublic class Worker01 {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello\";\n\n    //接收消息 的工作线程\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //消息的接收\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"接收到的消息：\" + new String(message.getBody()));\n        };\n        //消息接收被取消时 执行\n        CancelCallback cancelCallback = (consumerTag) -> {\n            System.out.println(consumerTag + \"消费者取消消费接口回调逻辑\");\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}\n```\n\n3. 启动两个工作线程（消费者）\n\n前提是在 idea 设置允许方法多个并行运行：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188489814-b081e679-bc7f-4cad-964e-bfb80575820c.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=636&id=uf61f07dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=869&originWidth=1143&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94819&status=done&style=none&taskId=u4472c929-c48f-4a7d-ab7d-ec2994b75e5&title=&width=836.9862060546875#averageHue=%233b4043&crop=0&crop=0&crop=1&crop=1&id=zVInE&originHeight=869&originWidth=1143&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188418807-97ce766a-47ef-458c-8413-d496cbcddbed.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=172&id=u35f12aab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=172&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20804&status=done&style=none&taskId=uf688cf36-6dc9-43f1-be3d-946b8a45d78&title=&width=669#averageHue=%232a373f&crop=0&crop=0&crop=1&crop=1&id=yNG1N&originHeight=172&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 生产者代码：\n\n```xml\npackage com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 21:04\n * 生产者 发送大量消息\n */\npublic class Task01 {\n    public static final String QUEUE_NAME = \"hello\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /*\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n            System.out.println(\"发送消息完成：\" + message);\n        }\n    }\n}\n```\n\n5. 测试：启动生产者\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192109706-2649384b-8559-4d7e-8609-220f576c3e25.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=275&id=u4261e57f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=275&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25224&status=done&style=none&taskId=ue3dff20d-583f-4d0b-bb12-94ccae95bc1&title=&width=591#averageHue=%232c373d&crop=0&crop=0&crop=1&crop=1&id=PuJou&originHeight=275&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可以看见消费者轮循接收消息：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192164342-16d183be-bbe5-4de9-bac4-d87bd87a746b.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=179&id=ue97a7cdb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23018&status=done&style=none&taskId=u7cff6d1a-b142-4d52-a1c5-1cca6fd241e&title=&width=591#averageHue=%232f3c44&crop=0&crop=0&crop=1&crop=1&id=Upfv4&originHeight=179&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192176544-d380de90-ff7a-48a7-a080-c4a1ac193460.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=198&id=ubb73d589&margin=%5Bobject%20Object%5D&name=image.png&originHeight=198&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23978&status=done&style=none&taskId=u3ac63e3a-6d82-4340-9fed-c68c8fbf564&title=&width=598#averageHue=%232f3b43&crop=0&crop=0&crop=1&crop=1&id=xLv8Q&originHeight=198&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"269fc561\"></a>\n## 消息应答\n\n\n\n<a name=\"398e8d91\"></a>\n### 自动应答\n\n不建议使用，仅适用在消费者可以高效并以某种速率能够处理这些消息的情况。\n\n<a name=\"a7945bf1\"></a>\n### 手动应答\n\n\n\n<a name=\"bdff53ca\"></a>\n#### 消息应答的方法：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638193415623-6b7ff26f-8cc3-4abd-b1c6-41f79897f0cf.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=312&id=ud16b0385&margin=%5Bobject%20Object%5D&name=image.png&originHeight=312&originWidth=737&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100867&status=done&style=none&taskId=u39cf8244-b605-4c5d-baca-fe2103cd9d3&title=&width=737#averageHue=%23f5f5f5&crop=0&crop=0&crop=1&crop=1&id=S2b1y&originHeight=312&originWidth=737&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"70c2cd3d\"></a>\n#### 批量处理 Multiple\n\n手动应答的好处：可以批量应答，并减少网络拥堵。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638282925466-4d3081e6-809c-4a5f-9472-741dacb0cc7c.png#clientId=ub82069db-0272-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=588&id=u97ebb457&margin=%5Bobject%20Object%5D&name=image.png&originHeight=811&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=292383&status=done&style=none&taskId=uf04a703e-97b1-4fe2-b58f-33d8b0dff4d&title=&width=741.9931030273438#averageHue=%23f6f5f5&crop=0&crop=0&crop=1&crop=1&id=rUzZh&originHeight=811&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />但是批量应答可能会丢失消息。所以尽量不要批量应答，将 multiple 设置为 false。\n\n<a name=\"8f744d87\"></a>\n### 消息自动重新入队\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317239422-ab1bab41-ac6f-4a05-b3c5-c539d9e6dcd1.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=85&id=u97c18f3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57746&status=done&style=none&taskId=u14e494b5-3291-4daf-ada5-47aafa5eab0&title=&width=715.0000610351562#averageHue=%23ebeae9&crop=0&crop=0&crop=1&crop=1&id=qAYOD&originHeight=79&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317701734-1133a417-ebbe-4ad9-8453-f0803583491a.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=308&id=u7be19416&margin=%5Bobject%20Object%5D&name=image.png&originHeight=469&originWidth=1088&originalType=binary&ratio=1&rotation=0&showTitle=false&size=306122&status=done&style=none&taskId=u7d90ec89-bd9a-4090-bda5-c09c6014c27&title=&width=714.9862060546875#averageHue=%23e5e4df&crop=0&crop=0&crop=1&crop=1&id=o9cFt&originHeight=469&originWidth=1088&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />测试：<br /> 1. 生产者：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:46\n * 消息在手动应答时不丢失,放回队列中重新消费\n */\npublic class Task2 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明队列\n        channel.queueDeclare(TASK_QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(\"\", TASK_QUEUE_NAME, null, message.getBytes());\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 两个消费者（消息手动应答）：\n\n消费者一：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work03 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"C1等待接收消息处理时间较短\");\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            //沉睡1s\n            SleepUtils.sleep(1);\n            System.out.println(\"接收到的消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -> {\n            System.out.println(consumerTag + \"消费者取消消费接口的回调逻辑\");\n        }));\n    }\n}\n```\n\n消费者二：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work04 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"C2等待接收消息处理时间较短\");\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            //沉睡1s\n            SleepUtils.sleep(30);\n            System.out.println(\"接收到的消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -> {\n            System.out.println(consumerTag + \"消费者取消消费接口的回调逻辑\");\n        }));\n    }\n}\n```\n\n测试步骤：<br />① 先启动 task2，创建 ack_queue 队列；（在 ip:15672 的 queue 列表中可以看到目前拥有的队列）<br />② 启动 work02，work03 接收消息（消费者）；<br />③ 发消息：在 task2 控制台输入 aa,bb,cc,dd,ee,ff，可以看到 work2 和 work3 是轮训接收消息；如果到 work03 应该接收消息 ee 时，work03 突然挂掉，此时 ee 会被转发给 work02 中的 C1，这时 C1 会接收到 ee，因此消息不会丢失，这说明了 rabbitmq 有手动应答的能力，只要没有收到消息，就不会手动应答，从而将消息放回队列。而队列又再次将消息传递给 C1 进行重新消费，从而导致 ee 并没有丢失。![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638348662336-051f5011-f512-44d1-bb05-053e49ba050c.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=499&id=u60c5aa9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&size=254728&status=done&style=none&taskId=u6c03afcd-9d58-4d4b-b839-5e4801e20e0&title=&width=1092#averageHue=%23f5f5f5&crop=0&crop=0&crop=1&crop=1&id=Rq0q6&originHeight=499&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"274a6bb3\"></a>\n## 队列持久化\n\n如果存在同名未被持久化的队列，则需要先删除原先的未被持久化的队列，再重新生成一个持久化队列。\n\n```java\n//声明队列\nboolean durable = true; //在生产者中，需要让queue进行持久化\nchannel.queueDeclare(TASK_QUEUE_NAME, durable, false, false, null);\n```\n\n生成一个持久化队列之后，在 rabbitmq 控制台中这个队列的 features 属性会出现 D（代表持久化）。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638359722330-59d15b49-1b8d-4d93-85aa-ecd40227bd45.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=129&id=ufd6f763b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=129&originWidth=781&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13881&status=done&style=none&taskId=uab54d6ef-4036-4edf-bca6-ba4a9dcac1d&title=&width=781#averageHue=%23f3f1f0&crop=0&crop=0&crop=1&crop=1&id=iMXeX&originHeight=129&originWidth=781&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f1739dad\"></a>\n## 消息持久化\n\n```java\n//设置生产者发送消息为持久化消息（要求保存到磁盘上MessageProperties.PERSISTENT_TEXT_PLAIN）\nchannel.basicPublish(\"\", TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());\n```\n\n\n\n<a name=\"afba844e\"></a>\n## 不公平分发\n\n```java\n//在消费者中接收消息之前设置不公平分发\nint prefetchCount = 1;\nchannel.basicQos(prefetchCount);\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361240814-a1349c7f-2e3e-410a-ba3b-f2f872fab0bb.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u1ff04a34&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=385&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20173&status=done&style=none&taskId=ub1b60899-802e-4d67-9aed-a99c48b5db3&title=&width=385#averageHue=%23303d45&crop=0&crop=0&crop=1&crop=1&id=vTMLG&originHeight=232&originWidth=385&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361251165-68b13d22-fe49-4fd8-9471-26161051c180.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u477bebf6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18613&status=done&style=none&taskId=ue60522ee-50ed-46f9-ae69-472369ce4b6&title=&width=431#averageHue=%232c3a42&crop=0&crop=0&crop=1&crop=1&id=zGQk4&originHeight=177&originWidth=431&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"e7e8ffe0\"></a>\n## 预取值\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361857297-fa168e46-191d-44b2-8ce2-df2cb52a382d.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=282&id=ue1e2c233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=453&originWidth=1130&originalType=binary&ratio=1&rotation=0&showTitle=false&size=347909&status=done&style=none&taskId=ue241edd5-d375-46cb-9668-4a4eb4d7c9c&title=&width=703.0000610351562#averageHue=%23e4e4e5&crop=0&crop=0&crop=1&crop=1&id=mwjn3&originHeight=453&originWidth=1130&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nint prefetchCount = 5;\nchannel.basicQos(prefetchCount);\n```\n\n\n\n<a name=\"1e9c309f\"></a>\n## 发布确认原理\n\n\n\n<a name=\"e61fd426\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638364988019-b29d7c44-ebca-4978-95fd-034500d1bd7b.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=369&id=u98ff6bb0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=369&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=222643&status=done&style=none&taskId=ua25c2547-8233-4893-8d5b-4406b84e85f&title=&width=930#averageHue=%23fafafb&crop=0&crop=0&crop=1&crop=1&id=Xek0V&originHeight=369&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n在信道之后开启发布确认：\n\n```java\n//信道开启发布确认\nchannel.confirmSelect();\n```\n\n\n\n<a name=\"f1ad8c9b\"></a>\n## 单个发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638365489548-64267da5-f60d-4b88-98af-bdf5806d5038.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=203&id=ub1148f56&margin=%5Bobject%20Object%5D&name=image.png&originHeight=203&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&size=342872&status=done&style=none&taskId=u2df32a3e-4c69-4599-868a-d81e33495ec&title=&width=993#averageHue=%23d0dcda&crop=0&crop=0&crop=1&crop=1&id=qVQAu&originHeight=203&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\npackage com.atguigu.rabbitmq.four;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 21:32\n * 发布确认模式：\n * 使用的时间  比较哪种确认方式是最好的\n * 1.单个确认\n * 2.批量确认\n * 3.异步批量确认\n */\npublic class ConfireMessage {\n    //批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n    }\n\n    //单个确认\n    public static void publicMessageIndividually() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发消息\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String massage = i + \"\";\n            channel.basicPublish(\"\", queueName, null, massage.getBytes());\n            //单个消息就马上进行发布确认\n            boolean flag = channel.waitForConfirms();\n            if (flag) {\n                System.out.println(\"消息发送成功\");\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\"+MESSAGE_COUNT+\"个单独确认消息，耗时\"+(end - begin)+\"ms\");\n    }\n}\n```\n\n\n\n<a name=\"498cf9b3\"></a>\n## 批量发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638366964213-10397181-357d-4896-9e91-84690b69c982.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=137&id=ude627a73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=137&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206130&status=done&style=none&taskId=u0c3dafe3-1f66-4cc1-83ba-f5e8edae8b3&title=&width=968#averageHue=%23d7d9d8&crop=0&crop=0&crop=1&crop=1&id=tMsLz&originHeight=137&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\n//批量发布确认\n    public static void publicMessageBatch() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量确认消息大小\n        int batchSize = 100;\n        //批量发布消息， 批量发布确认\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String message = i + \"\";\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n            //发布确认\n            if (i % batchSize == 0) {\n                channel.waitForConfirms();\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个批量确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n\n\n<a name=\"836eb661\"></a>\n## 异步发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368249755-46e1c3b8-f891-48b0-a77b-21b9a80f4e5e.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=119&id=u5fcd19f7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=119&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231115&status=done&style=none&taskId=u473c99f9-e088-4ad3-84e3-82e606c7d63&title=&width=1189#averageHue=%23e2dfd4&crop=0&crop=0&crop=1&crop=1&id=Jwh7I&originHeight=119&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368124379-5cdb8cbd-707a-4a1f-92f4-3dc511a9ec11.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=571&id=u4b5d988b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=964&originalType=binary&ratio=1&rotation=0&showTitle=false&size=239080&status=done&style=none&taskId=ua0b85de0-7119-4e3a-a0be-75854b9aaac&title=&width=1248.9931030273438#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=T1TVR&originHeight=441&originWidth=964&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\n//批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n//        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n//        2. 批量确认\n//        ConfireMessage.publicMessageBatch();  //发布1000个批量确认消息，耗时761ms（弊端：无法确认哪个消息未被确认）\n//        3. 异步确认\n        ConfireMessage.publicMessageAsync(); //发布1000个异步确认消息，耗时181ms\n    }\n//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -> {\n            System.out.println(\"确认的消息\" + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -> {\n            System.out.println(\"未确认的消息\" + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //异步发布确认\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String massage = \"消息\" + i;\n            channel.basicPublish(\"\", queueName, null, massage.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个异步确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n\n\n<a name=\"e8b363bb\"></a>\n## 如何处理异步未确认消息\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638404469016-06a08296-9aa6-4d65-8d1c-4c70fb4cd5b8.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=97&id=u0927e367&margin=%5Bobject%20Object%5D&name=image.png&originHeight=97&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=122865&status=done&style=none&taskId=u67d3a3c6-2f1a-4be9-9c0c-f7d2e743935&title=&width=1033#averageHue=%23dcd8cd&crop=0&crop=0&crop=1&crop=1&id=frSPr&originHeight=97&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />上述异步确认有两个线程：\n\n- 发消息的线程\n- 监听器的线程\n\n两个线程之间交互，只能用**并发链路式队列（可以在确认发布与发布线程之间进行消息传递）**。\n\n```java\n//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        /*\n        线程安全有序的哈希表，适用于高并发的情况\n        1. 轻松的将序号与消息进行关联\n        2. 轻松批量删除条目，只要给序号\n        3.支持高并发(多线程)\n         */\n        ConcurrentSkipListMap<Long,String> outstandingConfirms = new ConcurrentSkipListMap<>();\n\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -> {\n            //2. 删除已经确认的消息   剩下的就是未确认的消息\n            if(multiple){\n                //如果是批量确认，就去批量删除\n                ConcurrentNavigableMap<Long,String> confirmed = outstandingConfirms.headMap(deliveryTag);\n                confirmed.clear();\n            }else{\n                //如果是单个确认，就去单个删除\n                outstandingConfirms.remove(deliveryTag);\n            }\n            System.out.println(\"确认的消息\" + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -> {\n            //3. 打印未确认的消息有哪些\n            String message = outstandingConfirms.get(deliveryTag);\n            System.out.println(\"未确认的消息是：\"+message+\":::::未确认的消息tag:\" + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发送消息\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String message = \"消息\" + i;\n            // 1. 此处记录下所有要发送的消息  消息的总和(每发一次消息就记录一次)\n            outstandingConfirms.put(channel.getNextPublishSeqNo(),message);\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个异步确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n> 以上三种发布确认速度对比：\n\n\n- 单独发布消息：同步等待确认，简单，但吞吐量非常有限。\n- 批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题，很难推断出是哪条出现了问题\n- 异步处理：最佳性能和资源利用，在出现错误的情况下，可以很好的控制，但是实现起来稍微难些。\n\n<a name=\"04596875\"></a>\n## 交换机\n\n\n\n<a name=\"a3034a5f\"></a>\n### 交换机的作用\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638406810806-e429e00e-78d1-42e2-ab92-c3a53f8c2fa9.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=270&id=uc3415ba1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=387&originWidth=1291&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191628&status=done&style=none&taskId=uee2f50b0-7b80-4d38-9c1b-25806445f5f&title=&width=900.9896240234375#averageHue=%23f5f4f4&crop=0&crop=0&crop=1&crop=1&id=tFgNi&originHeight=387&originWidth=1291&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f71f343d\"></a>\n### 交换机的类型\n\n- 直接（direct）== 路由类型\n- 主题（topic）\n- 标题（headers）（企业不常用）\n- 扇出（fanout）== 发布订阅类型\n- 无名类型（默认类型），通常用空串进行识别\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407294007-f1bd9624-be98-4b90-ba72-9c29d88c326d.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=76&id=u21ac6756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=76&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103665&status=done&style=none&taskId=u47150f74-3b3b-4cc4-befe-f25d9650214&title=&width=987#averageHue=%23cbc7bb&crop=0&crop=0&crop=1&crop=1&id=KlfHY&originHeight=76&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"192ebf07\"></a>\n### 临时队列\n\n不带有持久化，一旦断开消费者的连接，队列将被自动删除。<br />\n\n创建临时队列：\n\n```java\nString queueName = channel.queueDeclare().getQueue();\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407906977-786b78e8-bfba-4cab-9aee-9ac7ec38a884.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=278&id=u31ce7deb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=410&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55531&status=done&style=none&taskId=ub3aa0ca4-c823-418b-b8c7-0b7fbd67333&title=&width=736.9896240234375#averageHue=%23f4f2f1&crop=0&crop=0&crop=1&crop=1&id=T0K86&originHeight=410&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f4f12c7a\"></a>\n### 绑定\n\n就是交换机与队列之间的捆绑关系。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408143523-d4c904d9-33e5-46bd-ad67-885e78b4c34b.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=637&id=u8140e36d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=637&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26522&status=done&style=none&taskId=ua5ea4c46-36c5-4183-aefe-f6a3f676385&title=&width=487#averageHue=%23faf5f5&crop=0&crop=0&crop=1&crop=1&id=fwITJ&originHeight=637&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"b3f97d74\"></a>\n### 发布订阅模式（扇出模式 fanout）\n\n类似广播，两个 routingkey 相同<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408427104-577b627a-521a-4d94-89be-5bf0102440ea.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=u3ae99c2f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205919&status=done&style=none&taskId=ufe252eb8-02f2-410e-8b74-b8d091c0d4a&title=&width=894#averageHue=%23f8ebea&crop=0&crop=0&crop=1&crop=1&id=PeGnm&originHeight=292&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 生产者\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class EmitLog {\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 两个消费者\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs01 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, \"\");\n        System.out.println(\"等待接收消息，把接收的消息打印在屏幕上。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs01控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag->{});\n    }\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs02 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, \"\");\n        System.out.println(\"等待接收消息，把接收的消息打印在屏幕上。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs02控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag->{});\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410904168-80b297c1-26ef-4ee4-815c-065abea79bd2.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=328&id=u29891926&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28269&status=done&style=none&taskId=u6700fa8b-9b2f-4717-91cf-0dfb20b528b&title=&width=580#averageHue=%232c383f&crop=0&crop=0&crop=1&crop=1&id=Jf7Cl&originHeight=328&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410913426-c4d1faa3-7b8b-478c-ba35-665d73e98e8b.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=ua55ed718&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34020&status=done&style=none&taskId=u415b65a3-7d21-4e16-a1a0-a15d7f3c4ca&title=&width=528#averageHue=%23323e46&crop=0&crop=0&crop=1&crop=1&id=HNmyl&originHeight=248&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410920504-2f4c6248-02a0-4765-8647-4c8ab63551e1.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=255&id=u9c537a4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=255&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35282&status=done&style=none&taskId=u97bfb701-f8bd-45ca-ac41-6f8259d9775&title=&width=517#averageHue=%23323e46&crop=0&crop=0&crop=1&crop=1&id=BBNfG&originHeight=255&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"a7c987c4\"></a>\n### 直接交换机（路由模式 direct）\n\n两个 routingkey 不相同<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638411099834-bf80fb1d-473a-4a01-8553-e47ee2cd3670.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=303&id=ueba6aa41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98369&status=done&style=none&taskId=u2145da18-8429-4959-ab30-43bcc28bb61&title=&width=874#averageHue=%23f6e6e4&crop=0&crop=0&crop=1&crop=1&id=t5eGH&originHeight=303&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可以多重绑定。<br />**生产者发消息给队列，直接交换机通过不同 routingkey 路由到相应的队列，然后消费者接收指定日志。**\n\n1. 发消息\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class DirectLogs {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, \"error\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 接收消息\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect01 {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(\"console\",false,false,false,null);\n        channel.queueBind(\"console\",EXCHANGE_NAME,\"info\");\n        channel.queueBind(\"console\",EXCHANGE_NAME,\"warning\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs01控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(\"console\", true,  deliverCallback,consumerTag->{});\n\n    }\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect02 {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(\"disk\",false,false,false,null);\n        channel.queueBind(\"disk\",EXCHANGE_NAME,\"error\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs02控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(\"disk\", true,  deliverCallback,consumerTag->{});\n\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413931242-2c3ef4c2-f3e6-4e6e-ba39-5437dad24d40.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=u9de2b784&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=630&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21691&status=done&style=none&taskId=u7cd93b89-df35-4f94-aa33-6626b0dc70b&title=&width=630#averageHue=%232c3941&crop=0&crop=0&crop=1&crop=1&id=eyPPs&originHeight=182&originWidth=630&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413948375-568b73ae-0203-4f53-9a9b-528667192aa2.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=uc8400be0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24900&status=done&style=none&taskId=u38d71d59-3dd8-4324-9fae-335fd043524&title=&width=683#averageHue=%232e3b43&crop=0&crop=0&crop=1&crop=1&id=U0kJT&originHeight=182&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c4e17e43\"></a>\n### 主题交换机（Topic）\n\n规范：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638414479059-98f3dc8e-ee99-4093-b2cb-81eaecec9acb.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=226&id=u34e92b6a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=834&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170475&status=done&style=none&taskId=ue217ff8b-9da9-493e-9a4b-07c6ab22bab&title=&width=834#averageHue=%23cfcac1&crop=0&crop=0&crop=1&crop=1&id=KCIOt&originHeight=226&originWidth=834&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415621949-8c1e4089-881d-482e-a377-ab7f224a2c92.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u76cf3ab8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=151366&status=done&style=none&taskId=u98d7748e-2fc6-4df3-a740-cae3ba06db9&title=&width=801#averageHue=%23e6a198&crop=0&crop=0&crop=1&crop=1&id=HeQJL&originHeight=257&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415680787-e95ef7a6-bec4-44b3-8e45-1e0c4adac6f7.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=350&id=u280d2c9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=350&originWidth=829&originalType=binary&ratio=1&rotation=0&showTitle=false&size=181864&status=done&style=none&taskId=u67807a72-c793-4b0b-a14e-e6270164016&title=&width=829#averageHue=%23e08176&crop=0&crop=0&crop=1&crop=1&id=ZuvJl&originHeight=350&originWidth=829&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415855921-8e2750b0-e5df-4b1c-90a3-7e3f696543d6.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=188&id=uf97e55b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=178229&status=done&style=none&taskId=ufb1118a1-0b9d-4a97-bd09-0ff626585f5&title=&width=920#averageHue=%23c2beb2&crop=0&crop=0&crop=1&crop=1&id=iZC7I&originHeight=188&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"36d4697d\"></a>\n### 主题交换机（实战）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638416303199-5f9e655c-c5c2-4a16-9d12-ba873c31c8e6.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=331&id=u07108cc7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=331&originWidth=1114&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231103&status=done&style=none&taskId=ud57ef875-e371-4fa6-980a-20a29a7366e&title=&width=1114#averageHue=%23f4eae8&crop=0&crop=0&crop=1&crop=1&id=zgYBJ&originHeight=331&originWidth=1114&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 消费者\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * <p>\n * 消费者 C2\n */\npublic class ReceiveLogsTopic01 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n        //声明队列\n        String queueName = \"Q1\";\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, \"*.orange.*\");\n        System.out.println(\"等待接收消息。。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(\"接收队列：\" + queueName + \"绑定键：\" + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {\n        });\n    }\n\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * <p>\n * 消费者 C2\n */\npublic class ReceiveLogsTopic02 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n        //声明队列\n        String queueName = \"Q2\";\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, \"*.*.rabbit\");\n        channel.queueBind(queueName, EXCHANGE_NAME, \"lazy.#\");\n        System.out.println(\"等待接收消息。。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(\"接收队列：\" + queueName + \"绑定键：\" + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {\n        });\n    }\n\n}\n```\n\n2. 生产者\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.spec.ECField;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 14:45\n * 生产者\n */\npublic class EmitLogTopic {\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 下图绑定关系如下：\n         * Q1--> 绑定的是： 中间带3个单词的字符串（*.orange*）\n         * Q2--> 绑定的是： 最后一个单词是rabbit的3个单词（*.*.rabbit）\n         *                第一个单词是lazy的多个单词（lazy.#）\n         */\n        Map<String, String> bindingKeyMap = new HashMap<>();\n        bindingKeyMap.put(\"quick.orange.rabbit\", \"被队列Q1Q2接收到\");\n        bindingKeyMap.put(\"lazy.orange.elephant\", \"被队列Q1Q2接收到\");\n        bindingKeyMap.put(\"lazy.pink.rabbit\", \"被队列Q1接收到\");\n        bindingKeyMap.put(\"quick.brown.fox\", \"被队列Q2接收到\");\n        bindingKeyMap.put(\"quick.orange.male.rabbit\", \"虽然满足两个绑定但只被队列Q2接收一次\");\n        bindingKeyMap.put(\"quick.brown.fox\", \"不匹配任何绑定不会被任何队列接收到会被丢弃\");\n        bindingKeyMap.put(\"lazy.orange.male.rabbit\", \"是四个单词不匹配任何绑定定会丢弃\");\n        bindingKeyMap.put(\"lazy.orange.male.rabbit\", \"是四个单词但匹配Q2\");\n\n        for (Map.Entry<String, String> bindingKeyEntry : bindingKeyMap.entrySet()) {\n            String routingKey = bindingKeyEntry.getKey();\n            String message = bindingKeyEntry.getValue();\n            channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息\" + message);\n        }\n    }\n}\n```\n\n先启动消费者，再启动生产者。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430253833-e55a9ffe-37a0-4c04-b7b7-093a65480f71.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=540&id=u94f62b22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=540&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63817&status=done&style=none&taskId=u846aee7e-23e7-429c-8c68-098657667fa&title=&width=683#averageHue=%232e3a41&crop=0&crop=0&crop=1&crop=1&id=r1tul&originHeight=540&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430292235-0a8fd8ca-fdd9-4f2e-9a52-de2398da4db4.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=548&id=u5b1d2810&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=649&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60902&status=done&style=none&taskId=uf769df3d-232c-4803-866e-9b789b65799&title=&width=649#averageHue=%23303b42&crop=0&crop=0&crop=1&crop=1&id=p0vbD&originHeight=548&originWidth=649&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430299720-f401248d-7efc-425f-aff1-59f8cda3349d.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u7c6af404&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=674&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33728&status=done&style=none&taskId=u0e4568aa-d243-4696-a1eb-02eebf586cf&title=&width=674#averageHue=%23313d44&crop=0&crop=0&crop=1&crop=1&id=Axrk6&originHeight=257&originWidth=674&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3dead64c\"></a>\n## 死信队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430356782-4196f6b8-209f-489a-a5e5-e61974e711ef.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=299&id=ud95905f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=299&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&size=430772&status=done&style=none&taskId=ue469e4ea-c3e9-44f2-a5e6-4ac2443deba&title=&width=1069#averageHue=%23dad7cf&crop=0&crop=0&crop=1&crop=1&id=ZL2Da&originHeight=299&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430504276-84f3e02c-d80f-4fe9-9b9a-b8d9ac3b8290.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=298&id=u8670c10d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162345&status=done&style=none&taskId=ue72cf50e-a8d2-4f86-8a8f-e35ebf10e89&title=&width=643#averageHue=%23ddd6c3&crop=0&crop=0&crop=1&crop=1&id=rBdXQ&originHeight=298&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430601814-eb3112b8-d77b-4213-ad2c-df3c394a36b7.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=553&id=ufda1712c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=553&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162361&status=done&style=none&taskId=u55e88e2a-dc14-44b5-9eb9-8663773f317&title=&width=1136#averageHue=%23fbfafa&crop=0&crop=0&crop=1&crop=1&id=pQqf7&originHeight=553&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- 消费者 1：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者1\n */\npublic class Consumer01 {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n    //死信队列的名称\n    public static final String DEAD_EXCHANGE = \"dead_exchange\";\n    //普通队列的名称\n    public static final String NORMAL_QUEUE = \"normal_queue\";\n    //死信队列的名称\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明死信和普通交换机， 类型为direct\n        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);\n        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);\n        //声明普通队列\n        Map<String, Object> arguments = new HashMap<>();\n        //过期时间\n//        arguments.put(\"x-message-ttl\",10000);\n        //正常队列设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", DEAD_EXCHANGE);\n        //设置死信RoutingKey\n        arguments.put(\"x-dead-letter-routing-key\", \"lisi\");\n        //设置正常队列的长度的限制\n//        arguments.put(\"x-max-length\", 19);\n        channel.queueDeclare(NORMAL_QUEUE, false, false, false, arguments);\n        ///////////////////////////////////////////////////\n        //声明死信队列\n        channel.queueDeclare(DEAD_QUEUE, false, false, false, null);\n        //交换机与队列绑定\n        //绑定普通交换机与普通队列\n        channel.queueBind(NORMAL_QUEUE, NORMAL_EXCHANGE, \"zhangsan\");\n        //绑定死信交换机与死信队列\n        channel.queueBind(DEAD_QUEUE, DEAD_EXCHANGE, \"lisi\");\n        System.out.println(\"等待接收消息.........\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            String msg = new String(message.getBody(), StandardCharsets.UTF_8);\n            if (msg.equals(\"info5\")) {\n                System.out.println(\"此消息被C1拒绝的\" + msg);\n                //拒绝此消息，并且不放回队列中。因此成为死信\n                channel.basicReject(message.getEnvelope().getDeliveryTag(), false);\n            } else {\n                System.out.println(\"Consumer01接收的消息\" + msg);\n                //不批量应答\n                channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n            }\n        };\n        //开启手动应答（如果不开启手动应答，就不存在拒绝了）\n        channel.basicConsume(NORMAL_QUEUE, false, deliverCallback, consumerTag -> {\n        });\n    }\n}\n```\n\n- 消费者 2：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者2\n */\npublic class Consumer02 {\n    //死信队列的名称\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"等待接收消息.........\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"Consumer02接收的消息\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(DEAD_QUEUE, false, deliverCallback, consumerTag -> {\n\n        });\n    }\n}\n```\n\n- 生产者：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(\"10000\").build();\n        for (int i = 1; i < 11; i++) {\n            String message = \"info\" + i;\n            channel.basicPublish(NORMAL_EXCHANGE, \"zhangsan\", properties, message.getBytes());\n        }\n    }\n}\n```\n\n测试步骤：\n\n1. 运行消费者：会发现普通和死信交换机已经绑定各自的队列。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445377947-e4a087d0-b755-4178-aa6d-7ae082107bb0.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=495&id=ud91030e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=495&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23775&status=done&style=none&taskId=u8f85c23d-a811-41b4-a478-a20609fc50a&title=&width=541#averageHue=%23f8f7f6&crop=0&crop=0&crop=1&crop=1&id=xwjE9&originHeight=495&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445475857-ba40932b-588f-43d3-b3a6-5f2660bcd241.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=498&id=ub28b2410&margin=%5Bobject%20Object%5D&name=image.png&originHeight=498&originWidth=601&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25129&status=done&style=none&taskId=u8de3a461-08ce-49b9-9936-e0cf7fa1363&title=&width=601#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=Jcymv&originHeight=498&originWidth=601&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 测试**队列达到最大长度**，关闭消费者 1 和 2，开启生产者：消息会积压在队列中，消费者 1 所在的普通队列消息限制有 6 条，剩下的 4 条会进入消费者 2 所在的死信队列。如下图所示：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638448087379-8c4e5c46-39ca-49fd-8024-4111b0a5d431.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=571&id=u9eb9c88a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=571&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79389&status=done&style=none&taskId=ua5f78b60-fd26-4cb8-9cf8-f0e0f17270b&title=&width=1083#averageHue=%23f1eeed&crop=0&crop=0&crop=1&crop=1&id=s5bzi&originHeight=571&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n3. 取消普通队列的最大长度限制，测试**消息 ttl 过期**：关闭消费者 1 和 2，开启生产者发送消息。（消息会因为没人接收，会在 ttl 时间内积压在普通队列中， ttl 过期后，消息会进入死信队列中。）\n\n生产者：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(\"10000\").build();\n        for (int i = 1; i < 11; i++) {\n            String message = \"info\" + i;\n            channel.basicPublish(NORMAL_EXCHANGE, \"zhangsan\", properties, message.getBytes());\n        }\n    }\n}\n```\n\n4. 测试**消息被拒**：\n\n开启消费者 1 和 2，再开启生产者。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450659287-e191b69a-07c6-4d5e-8f54-05d22263a235.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=274&id=u03d42d3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=274&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32103&status=done&style=none&taskId=uf69d66f1-feae-4ff6-83ca-af7f8a83127&title=&width=642#averageHue=%232e3b43&crop=0&crop=0&crop=1&crop=1&id=jR4qW&originHeight=274&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450668535-06aa1842-3563-455e-bb20-6376694fae1f.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u33f7f3ac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=202&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23460&status=done&style=none&taskId=ua7a303f7-25d6-4fc0-8d46-d522a51ded6&title=&width=616#averageHue=%232d3a42&crop=0&crop=0&crop=1&crop=1&id=vAYSS&originHeight=202&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"38e2258c\"></a>\n## 延迟队列（基于死信队列）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450862631-363c8d24-6a72-463a-b827-201e6f79cb79.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=128&id=u8aa7212b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=128&originWidth=1081&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190603&status=done&style=none&taskId=ue97c71c8-4947-4c82-be00-e98e36ba920&title=&width=1081#averageHue=%23e1dfd3&crop=0&crop=0&crop=1&crop=1&id=xrjpE&originHeight=128&originWidth=1081&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638451047144-5f4983f1-3a0e-472b-95f3-26635a911749.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=399&id=ud5620b6f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=399&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&size=265988&status=done&style=none&taskId=ub1f53a1e-1377-4e43-ab1d-13e29cf4118&title=&width=869#averageHue=%23f3f3f2&crop=0&crop=0&crop=1&crop=1&id=O4W2R&originHeight=399&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"5bff6472\"></a>\n### 整合 SpringBoot\n\n\n\n<a name=\"73ad366e\"></a>\n#### 实现延迟队列：\n\n1. 依赖：\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.1</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.atguigu.rabbitmq</groupId>\n    <artifactId>springboot-rabbitmq</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springboot-rabbitmq</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->\n        <!--web服务器，可以自启动-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n        <!--快速进行json转换-->\n        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.78</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.amqp/spring-rabbit-test -->\n        <dependency>\n            <groupId>org.springframework.amqp</groupId>\n            <artifactId>spring-rabbit-test</artifactId>\n            <version>2.4.0</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.22</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n2. yml 配置文件：\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n```\n\n3. swagger 配置类：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.context.annotation.Bean;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 22:34\n */\npublic class SwaggerConfig {\n    @Bean\n    public Docket webApiConfig() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .groupName(\"webApi\")\n                .apiInfo(webApiInfo())\n                .select()\n                .build();\n    }\n\n    private ApiInfo webApiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"rabbitmq  接口文档\")\n                .description(\" 本文档描述了 rabbitmq  微服务接口定义\")\n                .version(\"1.0\")\n                .contact(new Contact(\"enjoy6288\", \"http://atguigu.com\",\n                        \"1846015350@qq.com\"))\n                .build();\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638490298754-a2b1ced5-676b-4f68-86e0-31f05266088f.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=215&id=u8ba627f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=215&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132048&status=done&style=none&taskId=ud9c3f28a-b8df-44d1-b9df-dc90c70e046&title=&width=1100#averageHue=%23f9f8f6&crop=0&crop=0&crop=1&crop=1&id=Iv7m8&originHeight=215&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 声明队列配置文件：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:15\n * TTL队列，  配置文件类代码\n */\n@Configuration\npublic class TtlQueueConfig {\n    //普通交换机的名称\n    public static final String X_EXCHANGE = \"X\";\n    //死信交换机的名称\n    public static final String Y_DEAD_LETTER_EXCHANGE = \"Y\";\n    //普通队列的名称\n    public static final String QUEUE_A = \"QA\";\n    public static final String QUEUE_B = \"QB\";\n    //死信队列的名称\n    public static final String DEAD_LETTER_QUEUE = \"QD\";\n\n    //声明xExchange 别名\n    @Bean(\"xExchange\")\n    public DirectExchange xExchange() {\n        return new DirectExchange(X_EXCHANGE);\n    }\n\n    @Bean(\"yExchange\")\n    public DirectExchange yExchange() {\n        return new DirectExchange(Y_DEAD_LETTER_EXCHANGE);\n    }\n\n    //声明普通队列  ttl为10s\n    @Bean(\"queueA\")\n    public Queue queueA() {\n        Map<String, Object> arguments = new HashMap<>(3);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        //设置ttl  单位为ms\n        arguments.put(\"x-message-ttl\", 10000);\n        return QueueBuilder.durable(QUEUE_A).withArguments(arguments).build();\n    }\n\n    //声明普通队列  ttl为40s\n    @Bean(\"queueB\")\n    public Queue queueB() {\n        Map<String, Object> arguments = new HashMap<>(3);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        //设置ttl  单位为ms\n        arguments.put(\"x-message-ttl\", 40000);\n        return QueueBuilder.durable(QUEUE_B).withArguments(arguments).build();\n    }\n\n    //死信队列\n    @Bean(\"queueD\")\n    public Queue queueD() {\n        return QueueBuilder.durable(DEAD_LETTER_QUEUE).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueABindingX(@Qualifier(\"queueA\") Queue queueA, @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueA).to(xExchange).with(\"XA\");\n    }\n\n    @Bean\n    public Binding queueBBindingX(@Qualifier(\"queueB\") Queue queueB, @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueB).to(xExchange).with(\"XB\");\n    }\n\n    @Bean\n    public Binding queueDBindingY(@Qualifier(\"queueD\") Queue queueD, @Qualifier(\"yExchange\") DirectExchange yExchange) {\n        return BindingBuilder.bind(queueD).to(yExchange).with(\"YD\");\n    }\n}\n```\n\n5. 消费者：接收消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 9:01\n * 队列ttl 消费者\n */\n@Slf4j\n@Component\npublic class DeadLetterQueueConsumer {\n\n    //接收消息\n    @RabbitListener(queues = \"QD\")\n    public void receiveD(Message message, Channel channel) {\n        String msg = new String(message.getBody());\n        log.info(\"当前时间：{}，收到死信队列的消息：{}\", new Date().toString(), msg);\n    }\n}\n```\n\n6. 发送消息：Controller\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:47\n * 发送延迟消息\n * <p>\n * http://localhost:8080/ttl/sendMsg/嘻嘻嘻\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ttl\")\npublic class SendMsgController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //开始发消息\n    @GetMapping(\"/sendMsg/{message}\")\n    public void sendMsg(@PathVariable String message) {\n        log.info(\"当前时间：{}，发送一条消息给两个ttl队列:{}\", new Date().toString(), message);\n        rabbitTemplate.convertAndSend(\"X\", \"XA\", \"消息来自ttl为10s的队列\" + message);\n        rabbitTemplate.convertAndSend(\"X\", \"XB\", \"消息来自ttl为40s的队列\" + message);\n    }\n}\n```\n\n<br />访问：[http://localhost:8080/ttl/sendMsg/](http://localhost:8080/ttl/sendMsg/)嘻嘻嘻<br />控制台打印结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494307481-a59aaddb-4efb-4200-9e05-0e34602ded36.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u66541ef9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=202&originWidth=1365&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62756&status=done&style=none&taskId=ua128108f-eaa5-47fc-ab0d-e56fe3f57f4&title=&width=1365#averageHue=%23333e45&crop=0&crop=0&crop=1&crop=1&id=tO8el&originHeight=202&originWidth=1365&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"5d575387\"></a>\n#### 延迟队列优化：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494906968-c2a2e16a-a5b3-4c44-83bc-5846e35977d0.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=333&id=u5def25ea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=333&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169463&status=done&style=none&taskId=uede9888d-c22a-46c9-a810-c9c1899d23a&title=&width=1070#averageHue=%23faf9f8&crop=0&crop=0&crop=1&crop=1&id=PCbH9&originHeight=333&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />增加一个 QC 普通队列声明后并绑定交换机 XC。<br />队列配置 中添加：\n\n```java\n//--------------------------------优化延迟队列-------------------------------------\n    //普通队列的名称（为了优化延迟队列）\n    public static final String QUEUE_C = \"QC\";\n\n    //声明QC\n    @Bean(\"queueC\")\n    public Queue queueC() {\n        Map<String, Object> arguments = new HashMap<>(2);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        return QueueBuilder.durable(QUEUE_C).withArguments(arguments).build();\n    }\n\n    //绑定普通队列QC和交换机\n    @Bean\n    public Binding queueCBindingX(@Qualifier(\"queueC\") Queue queueC,\n                                  @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueC).to(xExchange).with(\"XC\");\n    }\n    //-----------------------------------优化延迟队列----------------------------------\n```\n\n添加 Controller 发消息控制器：\n\n```java\n//开始发消息  消息ttl\n    @GetMapping(\"/sendExpireMsg/{message}/{ttlTime}\")\n    public void sendMsg(@PathVariable String message, @PathVariable String ttlTime) {\n        log.info(\"当前时间：{}，发送一条时长{}毫秒，ttl信息给队列QC:{}\", new Date().toString(), ttlTime, message);\n        rabbitTemplate.convertAndSend(\"X\", \"XC\", message, msg -> {\n            //发送消息的时候  延迟时长\n            msg.getMessageProperties().setExpiration(ttlTime);\n            return msg;\n        });\n    }\n```\n\n测试：\n\n1. http://localhost:8080/ttl/sendExpireMsg/你好 1/20000\n2. http://localhost:8080/ttl/sendExpireMsg/你好 2/2000\n\n结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638517312025-dfbbfd0b-a82c-4432-a395-2e7cc7c6e48f.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=149&id=u18e59259&margin=%5Bobject%20Object%5D&name=image.png&originHeight=149&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42107&status=done&style=none&taskId=uff6fb06a-df03-451f-b886-52364055048&title=&width=1285#crop=0&crop=0&crop=1&crop=1&id=efjYm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d0cad89d\"></a>\n## 延迟队列（基于插件）\n\n进入 rabbitmq 安装目录下的 plugins 目录 ，cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins<br />执行命令让该插件生效：rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br />然后重启 rabbitmq：systemctl restart rabbitmq-server<br />会发现交换机多了一个新类型，意味着延迟消息将由交换机来完成，而不是队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638519642120-f3258006-3639-4551-805e-26bbd1e67c85.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=530&id=u66b7d498&margin=%5Bobject%20Object%5D&name=image.png&originHeight=767&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56472&status=done&style=none&taskId=u707609ca-e368-4b6c-9833-ec8cc57ca15&title=&width=477.00006103515625#crop=0&crop=0&crop=1&crop=1&id=PD1AH&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n原来的情况：基于死信<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520455616-cfcde47e-bee3-4ef6-83b6-6630dbe54d9a.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=443&id=ua9957719&margin=%5Bobject%20Object%5D&name=image.png&originHeight=601&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=226301&status=done&style=none&taskId=ua95f3b09-635a-4782-abfd-57901f34a8b&title=&width=760.9862060546875#crop=0&crop=0&crop=1&crop=1&id=UOPGa&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />现在：基于延迟插件<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520591056-7591eaf6-b99f-4059-8cbb-6a6ee0ea64f2.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u11577081&margin=%5Bobject%20Object%5D&name=image.png&originHeight=224&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94107&status=done&style=none&taskId=u47b17a31-4f94-4f3c-a75f-2014f181765&title=&width=770.9896240234375#crop=0&crop=0&crop=1&crop=1&id=a4gyh&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />代码架构：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520764180-7b9e927e-1166-470d-ac32-dda16bb87ae1.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=188&id=ud9b4ba5b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=1062&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84300&status=done&style=none&taskId=u12c568cb-6151-4b2f-8f49-3f721530b6d&title=&width=1062#crop=0&crop=0&crop=1&crop=1&id=cPAio&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 16:41\n */\n@Configuration\npublic class DelayedQueueConfig {\n    //队列\n    public static final String DELAYED_QUEUE_NAME = \"delayed.name\";\n    //交换机\n    public static final String DELAYED_EXCHANGE_NAME = \"delayed.exchange\";\n    //routing-key\n    public static final String DELAYED_ROUTING_KEY = \"delayed.routingkey\";\n\n    //声明队列\n    @Bean\n    public Queue delayedQueue() {\n        return QueueBuilder.durable(DELAYED_QUEUE_NAME).build();\n    }\n\n    //声明交换机 基于插件\n    @Bean\n    public CustomExchange delayedExchange() {\n        Map<String, Object> arguments = new HashMap<>();\n        arguments.put(\"x-delayed-type\", \"direct\");\n        /**\n         * 1. 交换机的名称\n         * 2. 交换机的类型\n         * 3. 是否需要持久化\n         * 4. 是否需要自动删除\n         * 5. 其他的参数\n         */\n        return new CustomExchange(DELAYED_EXCHANGE_NAME, \"x-delayed-message\", true, false, arguments);\n    }\n\n    //绑定\n    @Bean\n    public Binding delayedQueueBindingDelayedExchange(@Qualifier(\"delayedQueue\") Queue delayedQueue,\n                                                      @Qualifier(\"delayedExchange\") CustomExchange delayedExchange) {\n        return BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();\n    }\n}\n```\n\n2. Controller 生产者：\n\n```java\n//发消息  基于延迟插件\n    @GetMapping(\"/sendDelayMsg/{message}/{delayTime}\")\n    public void sendMsg(@PathVariable String message, @PathVariable Integer delayTime) {\n        log.info(\"当前时间:{},发送一条时长{}毫秒信息给延迟队列delayed.queue:{}\", new Date().toString(), delayTime, message);\n        rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME, DelayedQueueConfig.DELAYED_ROUTING_KEY, message, msg -> {\n            //发送消息的时候   延迟时长  单位：ms\n            msg.getMessageProperties().setDelay(delayTime);\n            return msg;\n        });\n    }\n```\n\n3. 消费者：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.DelayedQueueConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 19:36\n * 消费者 基于插件的延迟消息\n */\n@Slf4j\n@Component\npublic class DelayQueueConsumer {\n    //监听消息\n    @RabbitListener(queues = DelayedQueueConfig.DELAYED_QUEUE_NAME)\n    public void receiveDelayQueue(Message message) {\n        String msg = new String(message.getBody());\n        log.info(\"当前时间:{},收到延迟队列的消息：{}\", new Date().toString(), msg);\n    }\n}\n```\n\n测试：<br />发起请求：[http://localhost:8080/ttl/sendDelayMsg/com](http://localhost:8080/ttl/sendDelayMsg/com) on baby1/20000<br /> [http://localhost:8080/ttl/sendDelayMsg/com](http://localhost:8080/ttl/sendDelayMsg/com) on baby2/2000<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532349237-315b969f-d021-4448-8aa8-d5a1d41950a0.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=208&id=uf33e7fe7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=208&originWidth=1432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71640&status=done&style=none&taskId=ue722c22b-16d9-40a2-9a28-e95348df5d0&title=&width=1432#crop=0&crop=0&crop=1&crop=1&id=P79jF&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532663153-40afab72-d363-4536-94fc-4889e40d764b.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=224&id=u7813c3ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=266&originWidth=1121&originalType=binary&ratio=1&rotation=0&showTitle=false&size=457006&status=done&style=none&taskId=u0e4002d8-2179-43cc-bcfd-7c69cd127b5&title=&width=941.9896240234375#crop=0&crop=0&crop=1&crop=1&id=aEVGf&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d338501f\"></a>\n## 发布确认高级\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533419869-3aa9b7ad-ee4e-4fd8-9e42-fd6af4aafe70.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=225&id=u7ed4e098&margin=%5Bobject%20Object%5D&name=image.png&originHeight=341&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=186643&status=done&style=none&taskId=uc65852ff-c2a9-416e-bef6-2991c80fa8b&title=&width=623.0000610351562#crop=0&crop=0&crop=1&crop=1&id=OAmnb&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=) <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533456413-9ead4e1d-f118-4a55-8d05-bcdd4d5fc47f.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=131&id=u954992f9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=144&originWidth=839&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73103&status=done&style=none&taskId=u9819bc42-f398-487a-b319-358e2acd1ba&title=&width=762.9931030273438#crop=0&crop=0&crop=1&crop=1&id=sjopK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3f64dd13\"></a>\n### 回调接口 : (若交换机收不到消息)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = \"confirm_exchange\";\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = \"confirm_queue\";\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = \"key1\";\n\n    //声明交换机\n    @Bean\n    public DirectExchange confirmExchange() {\n        return new DirectExchange(CONFIRM_EXCHANGE_NAME);\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(\"confirmQueue\") Queue confirmQueue,\n                                        @Qualifier(\"confirmExchange\") DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n}\n```\n\n2. 生产者：发消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/confirm\")\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(\"/sendMessage/{message}\")\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData = new CorrelationData(\"1\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME, ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData);\n        log.info(\"发送消息内容为：{}\", message);\n    }\n}\n```\n\n3. 消费者：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:33\n * 接收消息\n */\n@Slf4j\n@Component\npublic class Consumer {\n    @RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)\n    public void receiveConfirmMessage(Message message) {\n        String msg = new String(message.getBody());\n        log.info(\"接收到的队列confirm.queue消息：{}\", msg);\n    }\n}\n```\n\n4. 回调接口\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:50\n * 回调接口\n */\n@Slf4j\n@Component\npublic class MyCallBack implements RabbitTemplate.ConfirmCallback {\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n    }\n\n    /**\n     * 交换机确认回调方法\n     * 1. 发消息  交换机接收到了  回调\n     * 1.1 correlationData 保存回调消息的id及相关信息\n     * 1.2 交换机收到消息  ack = true\n     * 1.3 cause  null\n     * 2. 发消息 交换机接收失败 回调\n     * 2.1 correlationData 保存回调消息的id及相关信息\n     * 2.2 交换机收到消息 ack = false\n     * 2.3 cause  失败的原因\n     *\n     * @param correlationData\n     * @param ack\n     * @param cause\n     */\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n        String id = correlationData != null ? correlationData.getId() : \"\";\n        if (ack) {\n            log.info(\"交换机已经收到id为：{}的消息\", id);\n        } else {\n            log.error(\"交换机还未收到id为:{}的消息，由于原因：{}\", id, cause);\n        }\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537772169-a45dc229-e5ed-410a-8e46-69f3fb39f21e.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=518&id=u396acbb1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=518&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=369736&status=done&style=none&taskId=u8a93ee99-1d87-4fd1-880d-a166a5e50f1&title=&width=973#crop=0&crop=0&crop=1&crop=1&id=Bk8N5&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated    # 消息确认机制\n```\n\n5. 发送请求 : http://localhost:8080/confirm/sendMessage/大家好 1\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537854600-e11783cd-28be-4b75-8f36-434ecab3f990.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=ue332f12f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=190&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51915&status=done&style=none&taskId=uba52e997-898f-49e3-9067-645cfb69f68&title=&width=1135#crop=0&crop=0&crop=1&crop=1&id=Emijw&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n6. 测试交换机收不到消息：在发送消息中，将交换机名字后面拼接上\"123\"，再次启动，发送请求： http://localhost:8080/confirm/sendMessage/大家好 1\n\n会得到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538268620-8dcbc2ae-eaa1-4b60-8822-9cd20f509c52.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=222&id=u3e470d69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1872&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66288&status=done&style=none&taskId=u7f0330f7-a846-488e-8b25-71c1f3cf0a7&title=&width=1872#crop=0&crop=0&crop=1&crop=1&id=J3ZRH&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n7. 测试队列收不到消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息  生产者\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/confirm\")\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(\"/sendMessage/{message}\")\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData1 = new CorrelationData(\"1\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData1);\n        log.info(\"发送消息内容为：{}\", message);\n\n        CorrelationData correlationData2 = new CorrelationData(\"2\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY+\"2\", message, correlationData2);\n        log.info(\"发送消息内容为：{}\", message);\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538743381-bfc4680e-692b-4303-a0f3-87cd9425978d.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=247&id=u241a2996&margin=%5Bobject%20Object%5D&name=image.png&originHeight=247&originWidth=1157&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67266&status=done&style=none&taskId=u3edf7078-e740-4b0a-866c-03de3cfb9db&title=&width=1157#crop=0&crop=0&crop=1&crop=1&id=SGy2Z&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可见，队列没有收到消息，也没有应答和确认。\n\n<a name=\"9a49228a\"></a>\n### 若队列收不到消息\n\n\n\n<a name=\"7df88dac\"></a>\n#### 回退消息\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638539584832-557a9bbc-89d4-4162-a0d4-599eb7f3df21.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=210&id=u40b5093d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=210&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=298616&status=done&style=none&taskId=u13a46749-be43-4430-beb2-483ea013efc&title=&width=976#crop=0&crop=0&crop=1&crop=1&id=thCkG&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated   # 消息确认机制\n    publisher-returns: true       # 发布确认机制（消息在交换机那若路由失败，则会回退消息给生产者）\n```\n\n回退接口：\n\n```java\n//注入\n@PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n        rabbitTemplate.setReturnsCallback(this);\n    }\n/**\n     * 可以在当消息传递过程中，不可达目的地时将消息返回给生产者\n     * 只有不可到目的地时，才进行回退\n     *\n     * @param returnedMessage\n     */\n    @Override\n    public void returnedMessage(ReturnedMessage returnedMessage) {\n        log.error(\"消息{}，被交换机{}退回，退回原因：{},路由key:{}\",\n                new String(returnedMessage.getMessage().getBody()),\n                returnedMessage.getExchange(),\n                returnedMessage.getReplyText(),\n                returnedMessage.getRoutingKey());\n    }\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638542234889-03b41ef6-8fc5-4ffb-9f36-7287d4ff9476.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=267&id=uddd5e8ec&margin=%5Bobject%20Object%5D&name=image.png&originHeight=267&originWidth=1293&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78730&status=done&style=none&taskId=u4c513758-cf34-415c-a9f3-845a33faec5&title=&width=1293#crop=0&crop=0&crop=1&crop=1&id=tOHQ4&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"2d534732\"></a>\n#### 备份交换机\n\n添加一个交换机和两个队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638578627259-759238ba-aac5-42f9-b645-401c5c9a05d2.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=328&id=ud35a1613&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197049&status=done&style=none&taskId=u04e4ef45-34c3-49a8-84c0-93d70b4ebb6&title=&width=930#crop=0&crop=0&crop=1&crop=1&id=j2ALj&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = \"confirm_exchange\";\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = \"confirm_queue\";\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = \"key1\";\n    // --------------------------备份交换机---------------------------------\n    //备份交换机\n    public static final String BACKUP_EXCHANGE_NAME = \"backup_exchange\";\n\n    //备份队列\n    public static final String BACKUP_QUEUE_NAME = \"backup_queue\";\n\n    //报警队列\n    public static final String WARNING_QUEUE_NAME = \"warning_queue\";\n\n    //--------------------------------------------------------------------\n    //声明确认交换机（要转发到备份交换机）\n    @Bean\n    public DirectExchange confirmExchange() {\n        return ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(true)\n                .withArgument(\"alternate-exchange\", BACKUP_EXCHANGE_NAME).build();\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(\"confirmQueue\") Queue confirmQueue,\n                                        @Qualifier(\"confirmExchange\") DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n\n    //备份交换机\n    @Bean\n    public FanoutExchange backupExchange() {\n        return new FanoutExchange(BACKUP_EXCHANGE_NAME);\n    }\n\n    //备份队列\n    @Bean\n    public Queue backupQueue() {\n        return QueueBuilder.durable(BACKUP_QUEUE_NAME).build();\n    }\n\n    //报警队列\n    @Bean\n    public Queue warningQueue() {\n        return QueueBuilder.durable(WARNING_QUEUE_NAME).build();\n    }\n\n    //绑定（备份交换机和备份队列）\n    @Bean\n    public Binding backupQueueBindingBackupExchange(@Qualifier(\"backupExchange\") FanoutExchange backupExchange, @Qualifier(\"backupQueue\") Queue backupQueue) {\n        return BindingBuilder.bind(backupQueue).to(backupExchange);\n    }\n\n    //绑定（备份交换机和报警队列）\n    @Bean\n    public Binding warningQueueBindingBackupExchange(@Qualifier(\"backupExchange\") FanoutExchange backupExchange, @Qualifier(\"warningQueue\") Queue warningQueue) {\n        return BindingBuilder.bind(warningQueue).to(backupExchange);\n    }\n}\n```\n\n2. 消费者（报警消费者）\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/4 9:10\n * 报警消费者\n */\n@Component\n@Slf4j\npublic class WarningConsumer {\n    //接收报警消息\n    @RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)\n    public void receiveWarningMsg(Message message) {\n        String msg = new String(message.getBody());\n        log.error(\"报警发现不可路由消息：{}\", msg);\n    }\n}\n```\n\n发送请求：http://localhost:8080/confirm/sendMessage/大家好 1<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581402507-07326d95-5109-4750-b3ab-c4751b23d55d.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=263&id=udc9907e1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=263&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75848&status=done&style=none&taskId=u7fb8b716-7979-4acf-b11c-fe1cb99bebd&title=&width=1171#crop=0&crop=0&crop=1&crop=1&id=Lep12&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n> **备份交换机的优先级高于回退消息、**\n\n\n\n\n<a name=\"c06ec42e\"></a>\n## 其他知识点\n\n\n\n<a name=\"71a92fdf\"></a>\n### 幂等性\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581856478-4611604a-34c1-486b-a3b7-c809f3d94f0e.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=620&id=ua03a1a2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=620&originWidth=977&originalType=binary&ratio=1&rotation=0&showTitle=false&size=628166&status=done&style=none&taskId=u3bbefde1-d01a-481e-b831-abe2598835f&title=&width=977#crop=0&crop=0&crop=1&crop=1&id=pWlKw&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582165848-9189cc73-c68b-4631-b30d-dad30387a032.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=523&id=u37f187c9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=523&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=609037&status=done&style=none&taskId=udd6ff171-0753-4d6f-a510-a8761c65fcb&title=&width=1001#crop=0&crop=0&crop=1&crop=1&id=o6DXP&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n\n\n<a name=\"507580b5\"></a>\n### 优先级队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582363595-025332ba-94e1-4485-b6ab-e0542d69fab7.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=326&id=u83200fbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=326&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&size=447217&status=done&style=none&taskId=ueea7db03-7906-4cef-baef-0ebe50a0185&title=&width=987#crop=0&crop=0&crop=1&crop=1&id=h3cca&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582579936-dd221c3d-efc6-4e4b-b854-6667d27682a1.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=343&id=u3930b1c7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=402&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288467&status=done&style=none&taskId=u70a2eadf-0b86-470c-a5a8-b7d8f612ad3&title=&width=1010.9896240234375#crop=0&crop=0&crop=1&crop=1&id=WVQYU&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />实现优先级:\n\n1. 生产者：\n\n```java\npackage com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = \"hello1\";\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        //设置工厂ip  连接rabbitmq的队列\n//        factory.setHost(\"59.110.171.189\");\n//        //用户名\n//        factory.setUsername(\"admin\");\n//        //密码\n//        factory.setPassword(\"123\");\n//        //创建连接\n//        Connection connection = factory.newConnection();\n//        //获取信道\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        Map<String, Object> arguments = new HashMap<>();\n        //官方允许是0-255之间。此处设置10. 允许优先级范围为0-10   不要设置过大   浪费CPU与内存\n        arguments.put(\"x-max-priority\", 10);\n        channel.queueDeclare(QUEUE_NAME, true, false, false, arguments);\n        //发消息\n        for (int i = 0; i < 11; i++) {\n            String message = \"info\" + i;\n            if (i == 5) {\n                //设置优先级\n                AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().priority(5).build();\n                channel.basicPublish(\"\", QUEUE_NAME, properties, message.getBytes());\n            } else {\n                channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n            }\n        }\n        /*\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        System.out.println(\"消息发送完毕\");\n    }\n}\n```\n\n启动生产者：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584428018-a99005d9-2193-463c-9f45-3f72656510ca.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=245&id=u9109bfc5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=245&originWidth=673&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24479&status=done&style=none&taskId=u0a4a6f5a-f03f-4ab3-8fcc-d9bdc327aad&title=&width=673#crop=0&crop=0&crop=1&crop=1&id=shKB3&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"07eab7c1\"></a>\n### ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584267331-0bf02c8d-6536-43a8-aa18-ee5f4ed82255.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=500&id=AvLAP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=1065&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74831&status=done&style=none&taskId=u77c77f80-cfec-453b-bc9f-f82bf26b07c&title=&width=1065#crop=0&crop=0&crop=1&crop=1&id=cIQXz&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 消费者 :\n\n```java\npackage com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello1\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        factory.setHost(\"59.110.171.189\");\n//        factory.setUsername(\"admin\");\n//        factory.setPassword(\"123\");\n//        Connection connection = factory.newConnection();\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明 接收消息(成功后的回调)\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody()));\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"消息消费被中断\");\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}\n```\n\n启动消费者，<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584610103-d784c402-b9b7-4321-80d9-c4b95990f410.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=u91a8ee8e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36450&status=done&style=none&taskId=u90a3da53-d612-4152-b8b6-157c3e789ca&title=&width=652#crop=0&crop=0&crop=1&crop=1&id=UEHzd&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"8508a884\"></a>\n### 惰性队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584657059-9bf42f28-e7a0-4c4f-8a39-c56038bd0071.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=425&id=ud4e3da7e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=425&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&size=597255&status=done&style=none&taskId=u2ff8ea80-3715-4c63-a718-4d71e1b8488&title=&width=993#crop=0&crop=0&crop=1&crop=1&id=wMAkZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584904322-348e89b5-e2f2-4df0-ba11-7540a061f849.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=613&id=u9cab5578&margin=%5Bobject%20Object%5D&name=image.png&originHeight=613&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=404748&status=done&style=none&taskId=uc0905b86-a7ec-4a0f-8a69-356a47ad688&title=&width=1175#crop=0&crop=0&crop=1&crop=1&id=NaNR3&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />惰性队列执行性能不太好，因此默认情况下不使用惰性队列，而使用正常队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585096408-ecb74216-dfa9-41e3-b7bd-bd5236b2c1da.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=431&id=u4ab29e59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=431&originWidth=967&originalType=binary&ratio=1&rotation=0&showTitle=false&size=466179&status=done&style=none&taskId=ub1da4c7a-e46a-44f7-9b2f-e5129f4a839&title=&width=967#crop=0&crop=0&crop=1&crop=1&id=ZtuGu&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585305462-e73859d4-5121-406a-b308-57cede7f1bac.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=413&id=uf8c1b8a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=413&originWidth=966&originalType=binary&ratio=1&rotation=0&showTitle=false&size=247424&status=done&style=none&taskId=ua29dd158-1851-4974-bd9b-3c01a9c0ea5&title=&width=966#crop=0&crop=0&crop=1&crop=1&id=wFSJu&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- 惰性队列从**磁盘**上读取消息，因此消费消息比较慢，但是内存消耗较小，在内存中只存储一些索引。一旦需要消费这些消息时，惰性队列会通过内存中的索引，去读取磁盘中相应的消息，到内存，再消费消息。\n- 正常队列从**内存**中读取消息，因此消费消息比较快，但是内存消耗较大。\n\n<a name=\"23eaf825\"></a>\n## rabbitmq 集群\n\n\n\n<a name=\"c0131d2a\"></a>\n### 集群原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638586666884-b99e8e77-81ef-4547-a9cd-1dcd00e86009.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=501&id=u84ce9d05&margin=%5Bobject%20Object%5D&name=image.png&originHeight=501&originWidth=1025&originalType=binary&ratio=1&rotation=0&showTitle=false&size=171726&status=done&style=none&taskId=ud7aa0990-8e0c-4e31-9dd1-c6d20007401&title=&width=1025#crop=0&crop=0&crop=1&crop=1&id=hjXVB&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"b80e581a\"></a>\n### 镜像队列（备份）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638587610363-c97ef89e-768e-4278-a087-89f20e211145.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=348&id=ue8695270&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=981&originalType=binary&ratio=1&rotation=0&showTitle=false&size=453959&status=done&style=none&taskId=ue9f78068-c45e-4cc9-a3e0-595ae6c7337&title=&width=981#crop=0&crop=0&crop=1&crop=1&id=FTNYI&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3702723f\"></a>\n### 高可用负载均衡\n\n若节点 1 宕机了，生产者需要连接节点 2 或节点 3。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588031855-ab97c0f3-9861-4222-b593-0a4dbfbf566d.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=754&id=u0c60fb59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=754&originWidth=1028&originalType=binary&ratio=1&rotation=0&showTitle=false&size=344345&status=done&style=none&taskId=uaef85042-099b-42a3-8caf-268a89b7438&title=&width=1028#crop=0&crop=0&crop=1&crop=1&id=XmCHx&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />出现问题：生产者无法变更 rabbitmq 的 ip，此时需要借助外力 Haproxy。\n\n<a name=\"ea97af39\"></a>\n#### Haproxy 实现高可用 负载均衡（高并发）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588332155-384a9066-f6ed-434c-bd8d-a08678795b99.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u91155287&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=240431&status=done&style=none&taskId=u9a4dff8d-f824-447c-b845-2962ddc0650&title=&width=973#crop=0&crop=0&crop=1&crop=1&id=BHuXj&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588403571-837d2496-d169-4b00-aa3c-4459e5dfd616.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=644&id=u63b0c105&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&size=224363&status=done&style=none&taskId=u400f5630-901e-4db7-8556-6d72a1f206a&title=&width=740#crop=0&crop=0&crop=1&crop=1&id=FRrD8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588495639-57e1823e-e317-48f1-bd99-4a64ab26b8b3.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=711&id=uefaa64c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=711&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&size=371827&status=done&style=none&taskId=u8f30ca6f-4949-4c9d-899d-b31600baa56&title=&width=860#crop=0&crop=0&crop=1&crop=1&id=K5Fpn&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"80fc5d12\"></a>\n## 联合交换机\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638600972390-f8eabb13-fdba-432b-8b93-c4798757e13e.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=660&id=u1565c7a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=660&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=882067&status=done&style=none&taskId=u40ae3ed4-1bbc-4baa-b912-40f55e8b353&title=&width=1136#crop=0&crop=0&crop=1&crop=1&id=FkHCS&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601768985-91857261-fe17-4687-bc9f-f8d9daf1a364.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=524&id=uafeaba48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=1115&originalType=binary&ratio=1&rotation=0&showTitle=false&size=307899&status=done&style=none&taskId=u4499a665-a618-4138-a2f2-5bdf1dbaca0&title=&width=1115#crop=0&crop=0&crop=1&crop=1&id=FgJli&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601930969-0c445ecb-7e66-43cd-a7d1-3aa8c76f884d.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=581&id=u6d4c749b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=581&originWidth=505&originalType=binary&ratio=1&rotation=0&showTitle=false&size=221677&status=done&style=none&taskId=uf8d981fd-837f-4eb6-83f6-a7deba0a018&title=&width=505#crop=0&crop=0&crop=1&crop=1&id=NxTl9&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602088334-f76d8ba1-5c6d-4280-87c8-b7d58d42f902.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=506&id=u4b7146f5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=506&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=158537&status=done&style=none&taskId=u64d80530-7388-4c12-9d3b-48d90765e0b&title=&width=976#crop=0&crop=0&crop=1&crop=1&id=oVYwK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602110103-8ee2df46-7982-4b08-a6c8-e4d9c701b69f.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=666&id=u65df8122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=666&originWidth=933&originalType=binary&ratio=1&rotation=0&showTitle=false&size=302115&status=done&style=none&taskId=u970ef30c-4b50-4327-928e-6bf0cdbc242&title=&width=933#crop=0&crop=0&crop=1&crop=1&id=A9wRm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"997a4ba0\"></a>\n## 联邦队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602602857-2efc1842-e9c7-409e-a302-2b4c63e92027.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=833&id=u3d500d40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=833&originWidth=1312&originalType=binary&ratio=1&rotation=0&showTitle=false&size=553687&status=done&style=none&taskId=u77ecfe28-0a6d-4318-bc8e-c80d6183ecc&title=&width=1312#crop=0&crop=0&crop=1&crop=1&id=qvMwP&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />两个不同地区数据同步。<br /> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603240478-ba4a3a39-d3dc-41b3-9ee9-c8d9f2718ff9.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=551&id=u0dc6d91b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=551&originWidth=1149&originalType=binary&ratio=1&rotation=0&showTitle=false&size=244288&status=done&style=none&taskId=u65c1251d-b002-4909-ae1d-f27aa9d85ee&title=&width=1149#crop=0&crop=0&crop=1&crop=1&id=Rmak1&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"Shovel\"></a>\n## Shovel\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603352779-28d006e0-d330-4802-935c-040341c1ca8d.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=324&id=uc852da4a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=324&originWidth=1287&originalType=binary&ratio=1&rotation=0&showTitle=false&size=568699&status=done&style=none&taskId=u2b770501-53fa-4cbc-a428-000590e2c17&title=&width=1287#crop=0&crop=0&crop=1&crop=1&id=fxL0i&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603460089-03466d04-df20-4ab2-8968-f1b5ef5905ca.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=409&id=ua502f49e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=409&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188661&status=done&style=none&taskId=u48a08d45-4dad-40e0-9723-55db3e3ef79&title=&width=871#crop=0&crop=0&crop=1&crop=1&id=lh1tz&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603378352-15aca4d9-af9b-48c1-b796-60a86b637ebd.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=667&id=uec9ad770&margin=%5Bobject%20Object%5D&name=image.png&originHeight=667&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266940&status=done&style=none&taskId=u8acd6a6e-3ed2-4306-8639-2eeb16612c3&title=&width=864#crop=0&crop=0&crop=1&crop=1&id=jpTqS&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br /> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603594801-6bd296a5-c23b-418f-a94e-5261833d5605.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=592&id=u903663bb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=194438&status=done&style=none&taskId=ud10d2c55-8f5b-4b88-b096-8942402c361&title=&width=994#crop=0&crop=0&crop=1&crop=1&id=oSJ3T&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603639753-9ae10564-7bad-4528-afd2-867c58d1f413.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=121&id=u71e6fa9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=121&originWidth=1169&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88867&status=done&style=none&taskId=u55070310-f786-4b38-98ce-55db2f75ca1&title=&width=1169#crop=0&crop=0&crop=1&crop=1&id=Gjcgc&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n",
    "body_draft": "---<br />title: RabbitMQ学习笔记<br />categories: 知识<br />updated: 2021-11-05<br />date: 2021-11-05<br />tags: [RabbitMQ, 消息中间件]<br />cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201910%2F20191018012402811963.png&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1671267173&t=5d1df4c7b1043f63bcf583ceffddf4d3<br />--- \n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630671540955-650bc67f-569a-4cef-a095-ec73a3b34897.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=740&id=u64b4ea35&margin=%5Bobject%20Object%5D&name=image.png&originHeight=740&originWidth=1340&originalType=binary&ratio=1&rotation=0&showTitle=false&size=584856&status=done&style=none&taskId=u20a11e76-4e9c-49b4-8ca4-cc25eac0808&title=&width=1340#averageHue=%23efe7e7&crop=0&crop=0&crop=1&crop=1&id=FmDdj&originHeight=740&originWidth=1340&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630672453989-c5f9d3cf-e77f-4c3e-8a9d-173b49f0aa4c.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=473&id=ub505e50f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=473&originWidth=1544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=451836&status=done&style=none&taskId=u973d9d93-5ee4-44e2-9f50-b28d8e8f15e&title=&width=1544#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=N1Vbj&originHeight=473&originWidth=1544&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1630673109375-2f65953f-32f5-4be8-9353-9d08abb6587f.png#clientId=uc20dad1f-a2b4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=794&id=uce851ada&margin=%5Bobject%20Object%5D&name=image.png&originHeight=794&originWidth=1520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=669042&status=done&style=none&taskId=u1e0c19d3-9eae-4ab1-9e35-b33c4bbbcd6&title=&width=1520#averageHue=%23b2b1b0&crop=0&crop=0&crop=1&crop=1&id=zGC4d&originHeight=794&originWidth=1520&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"9c0cd8ed\"></a>\n## 为什么要用 rabbitMQ？\n<a name=\"81220e89\"></a>\n### 1. 流量削峰\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998719062-ee3b7961-8606-40b9-9bd6-139143630402.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=91&id=u7a7d8c10&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78126&status=done&style=none&taskId=u903bdc4d-2ce4-4ac8-97d1-9cf8226327b&title=&width=495#averageHue=%23f3f3f3&crop=0&crop=0&crop=1&crop=1&id=Ds1E5&originHeight=182&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c491023f\"></a>\n### 2. 应用解耦\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998760193-a4f14c2c-a22b-4c92-b207-ae58a962577a.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=u8f01ca2b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=363&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190648&status=done&style=none&taskId=u30e77d52-0f3b-4d69-b06f-8229a9c232f&title=&width=542.5&referrerpolicy=no-referrer#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=hMEcn&originHeight=363&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d4ef8fda\"></a>\n### 3. 异步处理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009293978-1fde3fa6-5de6-476b-bc8f-4381749e748c.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=315&id=u2602b5b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=630&originWidth=1167&originalType=binary&ratio=1&rotation=0&showTitle=false&size=283589&status=done&style=none&taskId=uf5236049-2c88-4e12-b15e-7d99585efad&title=&width=583.5#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=EqXpn&originHeight=630&originWidth=1167&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"753ccaa2\"></a>\n## RabbitMQ 核心部分\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009378104-cb162a2f-4170-4d24-99c1-4e3ee09087ae.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=u45cac300&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&size=305514&status=done&style=none&taskId=u95a38925-5c34-45dd-bfca-d140d73dc3f&title=&width=538.5#averageHue=%23f8f2f1&crop=0&crop=0&crop=1&crop=1&id=TB3Zf&originHeight=568&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"a260da3a\"></a>\n## 各个名词介绍\n\n\n\n<a name=\"c83a4ba0\"></a>\n### RabbitMQ 工作原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009501957-eb0902f3-1fa1-47d5-9bc7-8d03f6e12de0.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u79c375f5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=514&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&size=210068&status=done&style=none&taskId=ue02a7c50-c563-46af-a784-5ae4c1dcdfe&title=&width=530#averageHue=%23efc150&crop=0&crop=0&crop=1&crop=1&id=sf1J3&originHeight=514&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009567915-6084eb1d-d428-47ec-844f-b3b48c6c6d0c.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=310&id=u9337433a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=619&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=776522&status=done&style=none&taskId=uced2ac5e-e117-4050-8e39-087f63ff410&title=&width=567.5#averageHue=%23e1dccf&crop=0&crop=0&crop=1&crop=1&id=ft4q6&originHeight=619&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009610891-4a5dba18-6006-41bf-a068-b2f33ed7df48.png#clientId=udb8aea13-24db-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=63&id=u38d6f233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=126&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136646&status=done&style=none&taskId=u3dada18e-9ab8-40c9-8042-2e2f9f40306&title=&width=564#averageHue=%23cdc5b8&crop=0&crop=0&crop=1&crop=1&id=rJuNv&originHeight=126&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"e655a410\"></a>\n## 安装\n\n[rabbitmq.com/download.html](https://www.rabbitmq.com/download.html)<br />erlang 和 rabbitMQ 版本匹配：<br />[https://www.cnblogs.com/gne-hwz/p/10714013.html](https://www.cnblogs.com/gne-hwz/p/10714013.html)<br />安装：[https://blog.csdn.net/almahehe/article/details/75390572](https://blog.csdn.net/almahehe/article/details/75390572)<br />（建议看尚硅谷视频进行快速安装）<br />安装之后，可以访问 ip:15672 ，查看发送消息的端口（5672）和用户。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638169386681-e382c30c-baba-4fbb-bd40-aaa7b0a1eac6.png#clientId=uc4bbfa15-6ab6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=173&id=u1a771f9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=102&originWidth=450&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28980&status=done&style=none&taskId=ua13bea1f-438b-4ef8-8913-b4ccb9fa78c&title=&width=761.9931030273438#averageHue=%23f1f1f1&crop=0&crop=0&crop=1&crop=1&id=pNXMC&originHeight=102&originWidth=450&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c729f8ef\"></a>\n## 简单队列模式\n<a name=\"f5abe6f8\"></a>\n### 生产者代码\n\n1. 项目依赖：\n\n```xml\n<dependencies>\n        <!--指定jdk编译版本-->\n        <dependency>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client -->\n        <!--rabbitmq依赖客户端-->\n        <dependency>\n            <groupId>com.rabbitmq</groupId>\n            <artifactId>amqp-client</artifactId>\n            <version>5.8.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->\n        <!--操作文件流的依赖-->\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.25</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n2. 生产者代码：\n\n```java\njapackage com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = \"hello\";\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        //设置工厂ip  连接rabbitmq的队列\n        factory.setHost(\"59.110.171.189\");\n        //用户名\n        factory.setUsername(\"admin\");\n        //密码\n        factory.setPassword(\"123\");\n        //创建连接\n        Connection connection = factory.newConnection();\n        //获取信道\n        Channel channel = connection.createChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n                4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n                5.其他参数（延迟消息......）\n         */\n\n        channel.queueDeclare(QUEUE_NAME,false,false,false,null);\n        //发消息\n        String message = \"hello world\";\n        /**\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        channel.basicPublish(\"\",QUEUE_NAME,null,message.getBytes());\n        System.out.println(\"消息发送完毕\");\n    }\n}\n```\n\n如果运行报超时错误，需要打开云服务器的安全组 5672 端口。<br />（参考博客：[https://www.cnblogs.com/jxearlier/p/11920825.html](https://www.cnblogs.com/jxearlier/p/11920825.html)）\n<a name=\"3b753fe7\"></a>\n### 消费者代码\n\n```xml\npackage com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"59.110.171.189\");\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"123\");\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        //声明 接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(message);\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"消息消费被中断\");\n        };\n        /**\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true,deliverCallback,cancelCallback);\n    }\n}\n```\n\n运行结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638172828992-073b0df6-a480-4260-a724-e17e9191a44c.png#clientId=uc4bbfa15-6ab6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=20&id=u3ee077b2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=20&originWidth=296&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2932&status=done&style=none&taskId=ud645c173-0157-49f2-89fb-5d58c2cd89a&title=&width=296#averageHue=%232f3e49&crop=0&crop=0&crop=1&crop=1&id=kWU4Y&originHeight=20&originWidth=296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"56a70cf7\"></a>\n### 测试生产者和消费者代码：\n\n1. 先运行消费者代码，发现没有消息，再运行生产者代码，发送消息，再看消费者代码控制台，此时已经接收到消息。\n\n<a name=\"3d1bae02\"></a>\n## 工作队列模式\n\n\n\n<a name=\"d9addd15\"></a>\n### 轮训分发消息\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638191830547-a43bbaa1-a524-4603-b6a9-0824e943cf9c.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=546&id=ucf96c5e0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=546&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220503&status=done&style=none&taskId=ub030755f-49df-4184-9d0d-65bfa0e561e&title=&width=1278#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=kyxCV&originHeight=546&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 抽取连接工厂工具类：\n\n```xml\npackage com.atguigu.rabbitmq.utils;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:48\n * 连接工厂创建信道的工具类\n */\npublic class RabbitMqUtils {\n    public static Channel getChannel() throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"59.110.171.189\");\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"123\");\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        return channel;\n    }\n}\n```\n\n2. 工作线程代码：（消费者）\n\n```xml\npackage com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.CancelCallback;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\nimport com.rabbitmq.client.Delivery;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:55\n * 这是一个工作线程（相当于之前的消费者）\n */\npublic class Worker01 {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello\";\n\n    //接收消息 的工作线程\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //消息的接收\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"接收到的消息：\" + new String(message.getBody()));\n        };\n        //消息接收被取消时 执行\n        CancelCallback cancelCallback = (consumerTag) -> {\n            System.out.println(consumerTag + \"消费者取消消费接口回调逻辑\");\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}\n```\n\n3. 启动两个工作线程（消费者）\n\n前提是在 idea 设置允许方法多个并行运行：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188489814-b081e679-bc7f-4cad-964e-bfb80575820c.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=636&id=uf61f07dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=869&originWidth=1143&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94819&status=done&style=none&taskId=u4472c929-c48f-4a7d-ab7d-ec2994b75e5&title=&width=836.9862060546875#averageHue=%233b4043&crop=0&crop=0&crop=1&crop=1&id=zVInE&originHeight=869&originWidth=1143&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188418807-97ce766a-47ef-458c-8413-d496cbcddbed.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=172&id=u35f12aab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=172&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20804&status=done&style=none&taskId=uf688cf36-6dc9-43f1-be3d-946b8a45d78&title=&width=669#averageHue=%232a373f&crop=0&crop=0&crop=1&crop=1&id=yNG1N&originHeight=172&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 生产者代码：\n\n```xml\npackage com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 21:04\n * 生产者 发送大量消息\n */\npublic class Task01 {\n    public static final String QUEUE_NAME = \"hello\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /*\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n            System.out.println(\"发送消息完成：\" + message);\n        }\n    }\n}\n```\n\n5. 测试：启动生产者\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192109706-2649384b-8559-4d7e-8609-220f576c3e25.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=275&id=u4261e57f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=275&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25224&status=done&style=none&taskId=ue3dff20d-583f-4d0b-bb12-94ccae95bc1&title=&width=591#averageHue=%232c373d&crop=0&crop=0&crop=1&crop=1&id=PuJou&originHeight=275&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可以看见消费者轮循接收消息：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192164342-16d183be-bbe5-4de9-bac4-d87bd87a746b.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=179&id=ue97a7cdb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23018&status=done&style=none&taskId=u7cff6d1a-b142-4d52-a1c5-1cca6fd241e&title=&width=591#averageHue=%232f3c44&crop=0&crop=0&crop=1&crop=1&id=Upfv4&originHeight=179&originWidth=591&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192176544-d380de90-ff7a-48a7-a080-c4a1ac193460.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=198&id=ubb73d589&margin=%5Bobject%20Object%5D&name=image.png&originHeight=198&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23978&status=done&style=none&taskId=u3ac63e3a-6d82-4340-9fed-c68c8fbf564&title=&width=598#averageHue=%232f3b43&crop=0&crop=0&crop=1&crop=1&id=xLv8Q&originHeight=198&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"269fc561\"></a>\n## 消息应答\n\n\n\n<a name=\"398e8d91\"></a>\n### 自动应答\n\n不建议使用，仅适用在消费者可以高效并以某种速率能够处理这些消息的情况。\n\n<a name=\"a7945bf1\"></a>\n### 手动应答\n\n\n\n<a name=\"bdff53ca\"></a>\n#### 消息应答的方法：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638193415623-6b7ff26f-8cc3-4abd-b1c6-41f79897f0cf.png#clientId=u43ded51d-0244-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=312&id=ud16b0385&margin=%5Bobject%20Object%5D&name=image.png&originHeight=312&originWidth=737&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100867&status=done&style=none&taskId=u39cf8244-b605-4c5d-baca-fe2103cd9d3&title=&width=737#averageHue=%23f5f5f5&crop=0&crop=0&crop=1&crop=1&id=S2b1y&originHeight=312&originWidth=737&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"70c2cd3d\"></a>\n#### 批量处理 Multiple\n\n手动应答的好处：可以批量应答，并减少网络拥堵。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638282925466-4d3081e6-809c-4a5f-9472-741dacb0cc7c.png#clientId=ub82069db-0272-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=588&id=u97ebb457&margin=%5Bobject%20Object%5D&name=image.png&originHeight=811&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=292383&status=done&style=none&taskId=uf04a703e-97b1-4fe2-b58f-33d8b0dff4d&title=&width=741.9931030273438#averageHue=%23f6f5f5&crop=0&crop=0&crop=1&crop=1&id=rUzZh&originHeight=811&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />但是批量应答可能会丢失消息。所以尽量不要批量应答，将 multiple 设置为 false。\n\n<a name=\"8f744d87\"></a>\n### 消息自动重新入队\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317239422-ab1bab41-ac6f-4a05-b3c5-c539d9e6dcd1.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=85&id=u97c18f3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57746&status=done&style=none&taskId=u14e494b5-3291-4daf-ada5-47aafa5eab0&title=&width=715.0000610351562#averageHue=%23ebeae9&crop=0&crop=0&crop=1&crop=1&id=qAYOD&originHeight=79&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317701734-1133a417-ebbe-4ad9-8453-f0803583491a.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=308&id=u7be19416&margin=%5Bobject%20Object%5D&name=image.png&originHeight=469&originWidth=1088&originalType=binary&ratio=1&rotation=0&showTitle=false&size=306122&status=done&style=none&taskId=u7d90ec89-bd9a-4090-bda5-c09c6014c27&title=&width=714.9862060546875#averageHue=%23e5e4df&crop=0&crop=0&crop=1&crop=1&id=o9cFt&originHeight=469&originWidth=1088&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />测试：<br /> 1. 生产者：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:46\n * 消息在手动应答时不丢失,放回队列中重新消费\n */\npublic class Task2 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明队列\n        channel.queueDeclare(TASK_QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(\"\", TASK_QUEUE_NAME, null, message.getBytes());\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 两个消费者（消息手动应答）：\n\n消费者一：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work03 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"C1等待接收消息处理时间较短\");\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            //沉睡1s\n            SleepUtils.sleep(1);\n            System.out.println(\"接收到的消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -> {\n            System.out.println(consumerTag + \"消费者取消消费接口的回调逻辑\");\n        }));\n    }\n}\n```\n\n消费者二：\n\n```xml\npackage com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work04 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = \"ack_queue\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"C2等待接收消息处理时间较短\");\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            //沉睡1s\n            SleepUtils.sleep(30);\n            System.out.println(\"接收到的消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -> {\n            System.out.println(consumerTag + \"消费者取消消费接口的回调逻辑\");\n        }));\n    }\n}\n```\n\n测试步骤：<br />① 先启动 task2，创建 ack_queue 队列；（在 ip:15672 的 queue 列表中可以看到目前拥有的队列）<br />② 启动 work02，work03 接收消息（消费者）；<br />③ 发消息：在 task2 控制台输入 aa,bb,cc,dd,ee,ff，可以看到 work2 和 work3 是轮训接收消息；如果到 work03 应该接收消息 ee 时，work03 突然挂掉，此时 ee 会被转发给 work02 中的 C1，这时 C1 会接收到 ee，因此消息不会丢失，这说明了 rabbitmq 有手动应答的能力，只要没有收到消息，就不会手动应答，从而将消息放回队列。而队列又再次将消息传递给 C1 进行重新消费，从而导致 ee 并没有丢失。![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638348662336-051f5011-f512-44d1-bb05-053e49ba050c.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=499&id=u60c5aa9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&size=254728&status=done&style=none&taskId=u6c03afcd-9d58-4d4b-b839-5e4801e20e0&title=&width=1092#averageHue=%23f5f5f5&crop=0&crop=0&crop=1&crop=1&id=Rq0q6&originHeight=499&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"274a6bb3\"></a>\n## 队列持久化\n\n如果存在同名未被持久化的队列，则需要先删除原先的未被持久化的队列，再重新生成一个持久化队列。\n\n```java\n//声明队列\nboolean durable = true; //在生产者中，需要让queue进行持久化\nchannel.queueDeclare(TASK_QUEUE_NAME, durable, false, false, null);\n```\n\n生成一个持久化队列之后，在 rabbitmq 控制台中这个队列的 features 属性会出现 D（代表持久化）。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638359722330-59d15b49-1b8d-4d93-85aa-ecd40227bd45.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=129&id=ufd6f763b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=129&originWidth=781&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13881&status=done&style=none&taskId=uab54d6ef-4036-4edf-bca6-ba4a9dcac1d&title=&width=781#averageHue=%23f3f1f0&crop=0&crop=0&crop=1&crop=1&id=iMXeX&originHeight=129&originWidth=781&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f1739dad\"></a>\n## 消息持久化\n\n```java\n//设置生产者发送消息为持久化消息（要求保存到磁盘上MessageProperties.PERSISTENT_TEXT_PLAIN）\nchannel.basicPublish(\"\", TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());\n```\n\n\n\n<a name=\"afba844e\"></a>\n## 不公平分发\n\n```java\n//在消费者中接收消息之前设置不公平分发\nint prefetchCount = 1;\nchannel.basicQos(prefetchCount);\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361240814-a1349c7f-2e3e-410a-ba3b-f2f872fab0bb.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u1ff04a34&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=385&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20173&status=done&style=none&taskId=ub1b60899-802e-4d67-9aed-a99c48b5db3&title=&width=385#averageHue=%23303d45&crop=0&crop=0&crop=1&crop=1&id=vTMLG&originHeight=232&originWidth=385&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361251165-68b13d22-fe49-4fd8-9471-26161051c180.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u477bebf6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18613&status=done&style=none&taskId=ue60522ee-50ed-46f9-ae69-472369ce4b6&title=&width=431#averageHue=%232c3a42&crop=0&crop=0&crop=1&crop=1&id=zGQk4&originHeight=177&originWidth=431&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"e7e8ffe0\"></a>\n## 预取值\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361857297-fa168e46-191d-44b2-8ce2-df2cb52a382d.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=282&id=ue1e2c233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=453&originWidth=1130&originalType=binary&ratio=1&rotation=0&showTitle=false&size=347909&status=done&style=none&taskId=ue241edd5-d375-46cb-9668-4a4eb4d7c9c&title=&width=703.0000610351562#averageHue=%23e4e4e5&crop=0&crop=0&crop=1&crop=1&id=mwjn3&originHeight=453&originWidth=1130&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nint prefetchCount = 5;\nchannel.basicQos(prefetchCount);\n```\n\n\n\n<a name=\"1e9c309f\"></a>\n## 发布确认原理\n\n\n\n<a name=\"e61fd426\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638364988019-b29d7c44-ebca-4978-95fd-034500d1bd7b.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=369&id=u98ff6bb0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=369&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=222643&status=done&style=none&taskId=ua25c2547-8233-4893-8d5b-4406b84e85f&title=&width=930#averageHue=%23fafafb&crop=0&crop=0&crop=1&crop=1&id=Xek0V&originHeight=369&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n在信道之后开启发布确认：\n\n```java\n//信道开启发布确认\nchannel.confirmSelect();\n```\n\n\n\n<a name=\"f1ad8c9b\"></a>\n## 单个发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638365489548-64267da5-f60d-4b88-98af-bdf5806d5038.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=203&id=ub1148f56&margin=%5Bobject%20Object%5D&name=image.png&originHeight=203&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&size=342872&status=done&style=none&taskId=u2df32a3e-4c69-4599-868a-d81e33495ec&title=&width=993#averageHue=%23d0dcda&crop=0&crop=0&crop=1&crop=1&id=qVQAu&originHeight=203&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\npackage com.atguigu.rabbitmq.four;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 21:32\n * 发布确认模式：\n * 使用的时间  比较哪种确认方式是最好的\n * 1.单个确认\n * 2.批量确认\n * 3.异步批量确认\n */\npublic class ConfireMessage {\n    //批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n    }\n\n    //单个确认\n    public static void publicMessageIndividually() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发消息\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String massage = i + \"\";\n            channel.basicPublish(\"\", queueName, null, massage.getBytes());\n            //单个消息就马上进行发布确认\n            boolean flag = channel.waitForConfirms();\n            if (flag) {\n                System.out.println(\"消息发送成功\");\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\"+MESSAGE_COUNT+\"个单独确认消息，耗时\"+(end - begin)+\"ms\");\n    }\n}\n```\n\n\n\n<a name=\"498cf9b3\"></a>\n## 批量发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638366964213-10397181-357d-4896-9e91-84690b69c982.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=137&id=ude627a73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=137&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206130&status=done&style=none&taskId=u0c3dafe3-1f66-4cc1-83ba-f5e8edae8b3&title=&width=968#averageHue=%23d7d9d8&crop=0&crop=0&crop=1&crop=1&id=tMsLz&originHeight=137&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\n//批量发布确认\n    public static void publicMessageBatch() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量确认消息大小\n        int batchSize = 100;\n        //批量发布消息， 批量发布确认\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String message = i + \"\";\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n            //发布确认\n            if (i % batchSize == 0) {\n                channel.waitForConfirms();\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个批量确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n\n\n<a name=\"836eb661\"></a>\n## 异步发布确认\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368249755-46e1c3b8-f891-48b0-a77b-21b9a80f4e5e.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=119&id=u5fcd19f7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=119&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231115&status=done&style=none&taskId=u473c99f9-e088-4ad3-84e3-82e606c7d63&title=&width=1189#averageHue=%23e2dfd4&crop=0&crop=0&crop=1&crop=1&id=Jwh7I&originHeight=119&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368124379-5cdb8cbd-707a-4a1f-92f4-3dc511a9ec11.png#clientId=u446e2507-b64d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=571&id=u4b5d988b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=964&originalType=binary&ratio=1&rotation=0&showTitle=false&size=239080&status=done&style=none&taskId=ua0b85de0-7119-4e3a-a0be-75854b9aaac&title=&width=1248.9931030273438#averageHue=%23f7f7f7&crop=0&crop=0&crop=1&crop=1&id=T1TVR&originHeight=441&originWidth=964&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\n//批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n//        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n//        2. 批量确认\n//        ConfireMessage.publicMessageBatch();  //发布1000个批量确认消息，耗时761ms（弊端：无法确认哪个消息未被确认）\n//        3. 异步确认\n        ConfireMessage.publicMessageAsync(); //发布1000个异步确认消息，耗时181ms\n    }\n//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -> {\n            System.out.println(\"确认的消息\" + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -> {\n            System.out.println(\"未确认的消息\" + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //异步发布确认\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String massage = \"消息\" + i;\n            channel.basicPublish(\"\", queueName, null, massage.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个异步确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n\n\n<a name=\"e8b363bb\"></a>\n## 如何处理异步未确认消息\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638404469016-06a08296-9aa6-4d65-8d1c-4c70fb4cd5b8.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=97&id=u0927e367&margin=%5Bobject%20Object%5D&name=image.png&originHeight=97&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=122865&status=done&style=none&taskId=u67d3a3c6-2f1a-4be9-9c0c-f7d2e743935&title=&width=1033#averageHue=%23dcd8cd&crop=0&crop=0&crop=1&crop=1&id=frSPr&originHeight=97&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />上述异步确认有两个线程：\n\n- 发消息的线程\n- 监听器的线程\n\n两个线程之间交互，只能用**并发链路式队列（可以在确认发布与发布线程之间进行消息传递）**。\n\n```java\n//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        /*\n        线程安全有序的哈希表，适用于高并发的情况\n        1. 轻松的将序号与消息进行关联\n        2. 轻松批量删除条目，只要给序号\n        3.支持高并发(多线程)\n         */\n        ConcurrentSkipListMap<Long,String> outstandingConfirms = new ConcurrentSkipListMap<>();\n\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -> {\n            //2. 删除已经确认的消息   剩下的就是未确认的消息\n            if(multiple){\n                //如果是批量确认，就去批量删除\n                ConcurrentNavigableMap<Long,String> confirmed = outstandingConfirms.headMap(deliveryTag);\n                confirmed.clear();\n            }else{\n                //如果是单个确认，就去单个删除\n                outstandingConfirms.remove(deliveryTag);\n            }\n            System.out.println(\"确认的消息\" + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -> {\n            //3. 打印未确认的消息有哪些\n            String message = outstandingConfirms.get(deliveryTag);\n            System.out.println(\"未确认的消息是：\"+message+\":::::未确认的消息tag:\" + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发送消息\n        for (int i = 0; i < MESSAGE_COUNT; i++) {\n            String message = \"消息\" + i;\n            // 1. 此处记录下所有要发送的消息  消息的总和(每发一次消息就记录一次)\n            outstandingConfirms.put(channel.getNextPublishSeqNo(),message);\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"发布\" + MESSAGE_COUNT + \"个异步确认消息，耗时\" + (end - begin) + \"ms\");\n    }\n```\n\n> 以上三种发布确认速度对比：\n\n\n- 单独发布消息：同步等待确认，简单，但吞吐量非常有限。\n- 批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题，很难推断出是哪条出现了问题\n- 异步处理：最佳性能和资源利用，在出现错误的情况下，可以很好的控制，但是实现起来稍微难些。\n\n<a name=\"04596875\"></a>\n## 交换机\n\n\n\n<a name=\"a3034a5f\"></a>\n### 交换机的作用\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638406810806-e429e00e-78d1-42e2-ab92-c3a53f8c2fa9.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=270&id=uc3415ba1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=387&originWidth=1291&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191628&status=done&style=none&taskId=uee2f50b0-7b80-4d38-9c1b-25806445f5f&title=&width=900.9896240234375#averageHue=%23f5f4f4&crop=0&crop=0&crop=1&crop=1&id=tFgNi&originHeight=387&originWidth=1291&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f71f343d\"></a>\n### 交换机的类型\n\n- 直接（direct）== 路由类型\n- 主题（topic）\n- 标题（headers）（企业不常用）\n- 扇出（fanout）== 发布订阅类型\n- 无名类型（默认类型），通常用空串进行识别\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407294007-f1bd9624-be98-4b90-ba72-9c29d88c326d.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=76&id=u21ac6756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=76&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103665&status=done&style=none&taskId=u47150f74-3b3b-4cc4-befe-f25d9650214&title=&width=987#averageHue=%23cbc7bb&crop=0&crop=0&crop=1&crop=1&id=KlfHY&originHeight=76&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"192ebf07\"></a>\n### 临时队列\n\n不带有持久化，一旦断开消费者的连接，队列将被自动删除。<br />\n\n创建临时队列：\n\n```java\nString queueName = channel.queueDeclare().getQueue();\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407906977-786b78e8-bfba-4cab-9aee-9ac7ec38a884.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=278&id=u31ce7deb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=410&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55531&status=done&style=none&taskId=ub3aa0ca4-c823-418b-b8c7-0b7fbd67333&title=&width=736.9896240234375#averageHue=%23f4f2f1&crop=0&crop=0&crop=1&crop=1&id=T0K86&originHeight=410&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"f4f12c7a\"></a>\n### 绑定\n\n就是交换机与队列之间的捆绑关系。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408143523-d4c904d9-33e5-46bd-ad67-885e78b4c34b.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=637&id=u8140e36d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=637&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26522&status=done&style=none&taskId=ua5ea4c46-36c5-4183-aefe-f6a3f676385&title=&width=487#averageHue=%23faf5f5&crop=0&crop=0&crop=1&crop=1&id=fwITJ&originHeight=637&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"b3f97d74\"></a>\n### 发布订阅模式（扇出模式 fanout）\n\n类似广播，两个 routingkey 相同<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408427104-577b627a-521a-4d94-89be-5bf0102440ea.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=u3ae99c2f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205919&status=done&style=none&taskId=ufe252eb8-02f2-410e-8b74-b8d091c0d4a&title=&width=894#averageHue=%23f8ebea&crop=0&crop=0&crop=1&crop=1&id=PeGnm&originHeight=292&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 生产者\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class EmitLog {\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 两个消费者\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs01 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, \"\");\n        System.out.println(\"等待接收消息，把接收的消息打印在屏幕上。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs01控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag->{});\n    }\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs02 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = \"logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, \"\");\n        System.out.println(\"等待接收消息，把接收的消息打印在屏幕上。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs02控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag->{});\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410904168-80b297c1-26ef-4ee4-815c-065abea79bd2.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=328&id=u29891926&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28269&status=done&style=none&taskId=u6700fa8b-9b2f-4717-91cf-0dfb20b528b&title=&width=580#averageHue=%232c383f&crop=0&crop=0&crop=1&crop=1&id=Jf7Cl&originHeight=328&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410913426-c4d1faa3-7b8b-478c-ba35-665d73e98e8b.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=ua55ed718&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34020&status=done&style=none&taskId=u415b65a3-7d21-4e16-a1a0-a15d7f3c4ca&title=&width=528#averageHue=%23323e46&crop=0&crop=0&crop=1&crop=1&id=HNmyl&originHeight=248&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410920504-2f4c6248-02a0-4765-8647-4c8ab63551e1.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=255&id=u9c537a4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=255&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35282&status=done&style=none&taskId=u97bfb701-f8bd-45ca-ac41-6f8259d9775&title=&width=517#averageHue=%23323e46&crop=0&crop=0&crop=1&crop=1&id=BBNfG&originHeight=255&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"a7c987c4\"></a>\n### 直接交换机（路由模式 direct）\n\n两个 routingkey 不相同<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638411099834-bf80fb1d-473a-4a01-8553-e47ee2cd3670.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=303&id=ueba6aa41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98369&status=done&style=none&taskId=u2145da18-8429-4959-ab30-43bcc28bb61&title=&width=874#averageHue=%23f6e6e4&crop=0&crop=0&crop=1&crop=1&id=t5eGH&originHeight=303&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可以多重绑定。<br />**生产者发消息给队列，直接交换机通过不同 routingkey 路由到相应的队列，然后消费者接收指定日志。**\n\n1. 发消息\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class DirectLogs {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, \"error\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息：\" + message);\n        }\n    }\n}\n```\n\n2. 接收消息\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect01 {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(\"console\",false,false,false,null);\n        channel.queueBind(\"console\",EXCHANGE_NAME,\"info\");\n        channel.queueBind(\"console\",EXCHANGE_NAME,\"warning\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs01控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(\"console\", true,  deliverCallback,consumerTag->{});\n\n    }\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect02 {\n    public static final String EXCHANGE_NAME = \"direct_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(\"disk\",false,false,false,null);\n        channel.queueBind(\"disk\",EXCHANGE_NAME,\"error\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"ReceiveLogs02控制台接收到消息：\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(\"disk\", true,  deliverCallback,consumerTag->{});\n\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413931242-2c3ef4c2-f3e6-4e6e-ba39-5437dad24d40.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=u9de2b784&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=630&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21691&status=done&style=none&taskId=u7cd93b89-df35-4f94-aa33-6626b0dc70b&title=&width=630#averageHue=%232c3941&crop=0&crop=0&crop=1&crop=1&id=eyPPs&originHeight=182&originWidth=630&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413948375-568b73ae-0203-4f53-9a9b-528667192aa2.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=182&id=uc8400be0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24900&status=done&style=none&taskId=u38d71d59-3dd8-4324-9fae-335fd043524&title=&width=683#averageHue=%232e3b43&crop=0&crop=0&crop=1&crop=1&id=U0kJT&originHeight=182&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"c4e17e43\"></a>\n### 主题交换机（Topic）\n\n规范：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638414479059-98f3dc8e-ee99-4093-b2cb-81eaecec9acb.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=226&id=u34e92b6a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=834&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170475&status=done&style=none&taskId=ue217ff8b-9da9-493e-9a4b-07c6ab22bab&title=&width=834#averageHue=%23cfcac1&crop=0&crop=0&crop=1&crop=1&id=KCIOt&originHeight=226&originWidth=834&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415621949-8c1e4089-881d-482e-a377-ab7f224a2c92.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u76cf3ab8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=151366&status=done&style=none&taskId=u98d7748e-2fc6-4df3-a740-cae3ba06db9&title=&width=801#averageHue=%23e6a198&crop=0&crop=0&crop=1&crop=1&id=HeQJL&originHeight=257&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415680787-e95ef7a6-bec4-44b3-8e45-1e0c4adac6f7.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=350&id=u280d2c9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=350&originWidth=829&originalType=binary&ratio=1&rotation=0&showTitle=false&size=181864&status=done&style=none&taskId=u67807a72-c793-4b0b-a14e-e6270164016&title=&width=829#averageHue=%23e08176&crop=0&crop=0&crop=1&crop=1&id=ZuvJl&originHeight=350&originWidth=829&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415855921-8e2750b0-e5df-4b1c-90a3-7e3f696543d6.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=188&id=uf97e55b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=178229&status=done&style=none&taskId=ufb1118a1-0b9d-4a97-bd09-0ff626585f5&title=&width=920#averageHue=%23c2beb2&crop=0&crop=0&crop=1&crop=1&id=iZC7I&originHeight=188&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"36d4697d\"></a>\n### 主题交换机（实战）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638416303199-5f9e655c-c5c2-4a16-9d12-ba873c31c8e6.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=331&id=u07108cc7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=331&originWidth=1114&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231103&status=done&style=none&taskId=ud57ef875-e371-4fa6-980a-20a29a7366e&title=&width=1114#averageHue=%23f4eae8&crop=0&crop=0&crop=1&crop=1&id=zgYBJ&originHeight=331&originWidth=1114&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 消费者\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * <p>\n * 消费者 C2\n */\npublic class ReceiveLogsTopic01 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n        //声明队列\n        String queueName = \"Q1\";\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, \"*.orange.*\");\n        System.out.println(\"等待接收消息。。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(\"接收队列：\" + queueName + \"绑定键：\" + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {\n        });\n    }\n\n}\n```\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * <p>\n * 消费者 C2\n */\npublic class ReceiveLogsTopic02 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n        //声明队列\n        String queueName = \"Q2\";\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, \"*.*.rabbit\");\n        channel.queueBind(queueName, EXCHANGE_NAME, \"lazy.#\");\n        System.out.println(\"等待接收消息。。。。。\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(\"接收队列：\" + queueName + \"绑定键：\" + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {\n        });\n    }\n\n}\n```\n\n2. 生产者\n\n```java\npackage com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.spec.ECField;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 14:45\n * 生产者\n */\npublic class EmitLogTopic {\n    public static final String EXCHANGE_NAME = \"topic_logs\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 下图绑定关系如下：\n         * Q1--> 绑定的是： 中间带3个单词的字符串（*.orange*）\n         * Q2--> 绑定的是： 最后一个单词是rabbit的3个单词（*.*.rabbit）\n         *                第一个单词是lazy的多个单词（lazy.#）\n         */\n        Map<String, String> bindingKeyMap = new HashMap<>();\n        bindingKeyMap.put(\"quick.orange.rabbit\", \"被队列Q1Q2接收到\");\n        bindingKeyMap.put(\"lazy.orange.elephant\", \"被队列Q1Q2接收到\");\n        bindingKeyMap.put(\"lazy.pink.rabbit\", \"被队列Q1接收到\");\n        bindingKeyMap.put(\"quick.brown.fox\", \"被队列Q2接收到\");\n        bindingKeyMap.put(\"quick.orange.male.rabbit\", \"虽然满足两个绑定但只被队列Q2接收一次\");\n        bindingKeyMap.put(\"quick.brown.fox\", \"不匹配任何绑定不会被任何队列接收到会被丢弃\");\n        bindingKeyMap.put(\"lazy.orange.male.rabbit\", \"是四个单词不匹配任何绑定定会丢弃\");\n        bindingKeyMap.put(\"lazy.orange.male.rabbit\", \"是四个单词但匹配Q2\");\n\n        for (Map.Entry<String, String> bindingKeyEntry : bindingKeyMap.entrySet()) {\n            String routingKey = bindingKeyEntry.getKey();\n            String message = bindingKeyEntry.getValue();\n            channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"生产者发出消息\" + message);\n        }\n    }\n}\n```\n\n先启动消费者，再启动生产者。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430253833-e55a9ffe-37a0-4c04-b7b7-093a65480f71.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=540&id=u94f62b22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=540&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63817&status=done&style=none&taskId=u846aee7e-23e7-429c-8c68-098657667fa&title=&width=683#averageHue=%232e3a41&crop=0&crop=0&crop=1&crop=1&id=r1tul&originHeight=540&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430292235-0a8fd8ca-fdd9-4f2e-9a52-de2398da4db4.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=548&id=u5b1d2810&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=649&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60902&status=done&style=none&taskId=uf769df3d-232c-4803-866e-9b789b65799&title=&width=649#averageHue=%23303b42&crop=0&crop=0&crop=1&crop=1&id=p0vbD&originHeight=548&originWidth=649&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430299720-f401248d-7efc-425f-aff1-59f8cda3349d.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=257&id=u7c6af404&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=674&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33728&status=done&style=none&taskId=u0e4568aa-d243-4696-a1eb-02eebf586cf&title=&width=674#averageHue=%23313d44&crop=0&crop=0&crop=1&crop=1&id=Axrk6&originHeight=257&originWidth=674&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3dead64c\"></a>\n## 死信队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430356782-4196f6b8-209f-489a-a5e5-e61974e711ef.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=299&id=ud95905f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=299&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&size=430772&status=done&style=none&taskId=ue469e4ea-c3e9-44f2-a5e6-4ac2443deba&title=&width=1069#averageHue=%23dad7cf&crop=0&crop=0&crop=1&crop=1&id=ZL2Da&originHeight=299&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430504276-84f3e02c-d80f-4fe9-9b9a-b8d9ac3b8290.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=298&id=u8670c10d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162345&status=done&style=none&taskId=ue72cf50e-a8d2-4f86-8a8f-e35ebf10e89&title=&width=643#averageHue=%23ddd6c3&crop=0&crop=0&crop=1&crop=1&id=rBdXQ&originHeight=298&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430601814-eb3112b8-d77b-4213-ad2c-df3c394a36b7.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=553&id=ufda1712c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=553&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162361&status=done&style=none&taskId=u55e88e2a-dc14-44b5-9eb9-8663773f317&title=&width=1136#averageHue=%23fbfafa&crop=0&crop=0&crop=1&crop=1&id=pQqf7&originHeight=553&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- 消费者 1：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者1\n */\npublic class Consumer01 {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n    //死信队列的名称\n    public static final String DEAD_EXCHANGE = \"dead_exchange\";\n    //普通队列的名称\n    public static final String NORMAL_QUEUE = \"normal_queue\";\n    //死信队列的名称\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明死信和普通交换机， 类型为direct\n        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);\n        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);\n        //声明普通队列\n        Map<String, Object> arguments = new HashMap<>();\n        //过期时间\n//        arguments.put(\"x-message-ttl\",10000);\n        //正常队列设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", DEAD_EXCHANGE);\n        //设置死信RoutingKey\n        arguments.put(\"x-dead-letter-routing-key\", \"lisi\");\n        //设置正常队列的长度的限制\n//        arguments.put(\"x-max-length\", 19);\n        channel.queueDeclare(NORMAL_QUEUE, false, false, false, arguments);\n        ///////////////////////////////////////////////////\n        //声明死信队列\n        channel.queueDeclare(DEAD_QUEUE, false, false, false, null);\n        //交换机与队列绑定\n        //绑定普通交换机与普通队列\n        channel.queueBind(NORMAL_QUEUE, NORMAL_EXCHANGE, \"zhangsan\");\n        //绑定死信交换机与死信队列\n        channel.queueBind(DEAD_QUEUE, DEAD_EXCHANGE, \"lisi\");\n        System.out.println(\"等待接收消息.........\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            String msg = new String(message.getBody(), StandardCharsets.UTF_8);\n            if (msg.equals(\"info5\")) {\n                System.out.println(\"此消息被C1拒绝的\" + msg);\n                //拒绝此消息，并且不放回队列中。因此成为死信\n                channel.basicReject(message.getEnvelope().getDeliveryTag(), false);\n            } else {\n                System.out.println(\"Consumer01接收的消息\" + msg);\n                //不批量应答\n                channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n            }\n        };\n        //开启手动应答（如果不开启手动应答，就不存在拒绝了）\n        channel.basicConsume(NORMAL_QUEUE, false, deliverCallback, consumerTag -> {\n        });\n    }\n}\n```\n\n- 消费者 2：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者2\n */\npublic class Consumer02 {\n    //死信队列的名称\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(\"等待接收消息.........\");\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"Consumer02接收的消息\" + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(DEAD_QUEUE, false, deliverCallback, consumerTag -> {\n\n        });\n    }\n}\n```\n\n- 生产者：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(\"10000\").build();\n        for (int i = 1; i < 11; i++) {\n            String message = \"info\" + i;\n            channel.basicPublish(NORMAL_EXCHANGE, \"zhangsan\", properties, message.getBytes());\n        }\n    }\n}\n```\n\n测试步骤：\n\n1. 运行消费者：会发现普通和死信交换机已经绑定各自的队列。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445377947-e4a087d0-b755-4178-aa6d-7ae082107bb0.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=495&id=ud91030e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=495&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23775&status=done&style=none&taskId=u8f85c23d-a811-41b4-a478-a20609fc50a&title=&width=541#averageHue=%23f8f7f6&crop=0&crop=0&crop=1&crop=1&id=xwjE9&originHeight=495&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445475857-ba40932b-588f-43d3-b3a6-5f2660bcd241.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=498&id=ub28b2410&margin=%5Bobject%20Object%5D&name=image.png&originHeight=498&originWidth=601&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25129&status=done&style=none&taskId=u8de3a461-08ce-49b9-9936-e0cf7fa1363&title=&width=601#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=Jcymv&originHeight=498&originWidth=601&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 测试**队列达到最大长度**，关闭消费者 1 和 2，开启生产者：消息会积压在队列中，消费者 1 所在的普通队列消息限制有 6 条，剩下的 4 条会进入消费者 2 所在的死信队列。如下图所示：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638448087379-8c4e5c46-39ca-49fd-8024-4111b0a5d431.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=571&id=u9eb9c88a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=571&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79389&status=done&style=none&taskId=ua5f78b60-fd26-4cb8-9cf8-f0e0f17270b&title=&width=1083#averageHue=%23f1eeed&crop=0&crop=0&crop=1&crop=1&id=s5bzi&originHeight=571&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n3. 取消普通队列的最大长度限制，测试**消息 ttl 过期**：关闭消费者 1 和 2，开启生产者发送消息。（消息会因为没人接收，会在 ttl 时间内积压在普通队列中， ttl 过期后，消息会进入死信队列中。）\n\n生产者：\n\n```java\npackage com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(\"10000\").build();\n        for (int i = 1; i < 11; i++) {\n            String message = \"info\" + i;\n            channel.basicPublish(NORMAL_EXCHANGE, \"zhangsan\", properties, message.getBytes());\n        }\n    }\n}\n```\n\n4. 测试**消息被拒**：\n\n开启消费者 1 和 2，再开启生产者。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450659287-e191b69a-07c6-4d5e-8f54-05d22263a235.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=274&id=u03d42d3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=274&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32103&status=done&style=none&taskId=uf69d66f1-feae-4ff6-83ca-af7f8a83127&title=&width=642#averageHue=%232e3b43&crop=0&crop=0&crop=1&crop=1&id=jR4qW&originHeight=274&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450668535-06aa1842-3563-455e-bb20-6376694fae1f.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u33f7f3ac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=202&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23460&status=done&style=none&taskId=ua7a303f7-25d6-4fc0-8d46-d522a51ded6&title=&width=616#averageHue=%232d3a42&crop=0&crop=0&crop=1&crop=1&id=vAYSS&originHeight=202&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"38e2258c\"></a>\n## 延迟队列（基于死信队列）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450862631-363c8d24-6a72-463a-b827-201e6f79cb79.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=128&id=u8aa7212b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=128&originWidth=1081&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190603&status=done&style=none&taskId=ue97c71c8-4947-4c82-be00-e98e36ba920&title=&width=1081#averageHue=%23e1dfd3&crop=0&crop=0&crop=1&crop=1&id=xrjpE&originHeight=128&originWidth=1081&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638451047144-5f4983f1-3a0e-472b-95f3-26635a911749.png#clientId=u268c19fe-902d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=399&id=ud5620b6f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=399&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&size=265988&status=done&style=none&taskId=ub1f53a1e-1377-4e43-ab1d-13e29cf4118&title=&width=869#averageHue=%23f3f3f2&crop=0&crop=0&crop=1&crop=1&id=O4W2R&originHeight=399&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"5bff6472\"></a>\n### 整合 SpringBoot\n\n\n\n<a name=\"73ad366e\"></a>\n#### 实现延迟队列：\n\n1. 依赖：\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.1</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.atguigu.rabbitmq</groupId>\n    <artifactId>springboot-rabbitmq</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springboot-rabbitmq</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->\n        <!--web服务器，可以自启动-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n        <!--快速进行json转换-->\n        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.78</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.amqp/spring-rabbit-test -->\n        <dependency>\n            <groupId>org.springframework.amqp</groupId>\n            <artifactId>spring-rabbit-test</artifactId>\n            <version>2.4.0</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.22</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n2. yml 配置文件：\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n```\n\n3. swagger 配置类：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.context.annotation.Bean;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 22:34\n */\npublic class SwaggerConfig {\n    @Bean\n    public Docket webApiConfig() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .groupName(\"webApi\")\n                .apiInfo(webApiInfo())\n                .select()\n                .build();\n    }\n\n    private ApiInfo webApiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"rabbitmq  接口文档\")\n                .description(\" 本文档描述了 rabbitmq  微服务接口定义\")\n                .version(\"1.0\")\n                .contact(new Contact(\"enjoy6288\", \"http://atguigu.com\",\n                        \"1846015350@qq.com\"))\n                .build();\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638490298754-a2b1ced5-676b-4f68-86e0-31f05266088f.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=215&id=u8ba627f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=215&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132048&status=done&style=none&taskId=ud9c3f28a-b8df-44d1-b9df-dc90c70e046&title=&width=1100#averageHue=%23f9f8f6&crop=0&crop=0&crop=1&crop=1&id=Iv7m8&originHeight=215&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 声明队列配置文件：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:15\n * TTL队列，  配置文件类代码\n */\n@Configuration\npublic class TtlQueueConfig {\n    //普通交换机的名称\n    public static final String X_EXCHANGE = \"X\";\n    //死信交换机的名称\n    public static final String Y_DEAD_LETTER_EXCHANGE = \"Y\";\n    //普通队列的名称\n    public static final String QUEUE_A = \"QA\";\n    public static final String QUEUE_B = \"QB\";\n    //死信队列的名称\n    public static final String DEAD_LETTER_QUEUE = \"QD\";\n\n    //声明xExchange 别名\n    @Bean(\"xExchange\")\n    public DirectExchange xExchange() {\n        return new DirectExchange(X_EXCHANGE);\n    }\n\n    @Bean(\"yExchange\")\n    public DirectExchange yExchange() {\n        return new DirectExchange(Y_DEAD_LETTER_EXCHANGE);\n    }\n\n    //声明普通队列  ttl为10s\n    @Bean(\"queueA\")\n    public Queue queueA() {\n        Map<String, Object> arguments = new HashMap<>(3);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        //设置ttl  单位为ms\n        arguments.put(\"x-message-ttl\", 10000);\n        return QueueBuilder.durable(QUEUE_A).withArguments(arguments).build();\n    }\n\n    //声明普通队列  ttl为40s\n    @Bean(\"queueB\")\n    public Queue queueB() {\n        Map<String, Object> arguments = new HashMap<>(3);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        //设置ttl  单位为ms\n        arguments.put(\"x-message-ttl\", 40000);\n        return QueueBuilder.durable(QUEUE_B).withArguments(arguments).build();\n    }\n\n    //死信队列\n    @Bean(\"queueD\")\n    public Queue queueD() {\n        return QueueBuilder.durable(DEAD_LETTER_QUEUE).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueABindingX(@Qualifier(\"queueA\") Queue queueA, @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueA).to(xExchange).with(\"XA\");\n    }\n\n    @Bean\n    public Binding queueBBindingX(@Qualifier(\"queueB\") Queue queueB, @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueB).to(xExchange).with(\"XB\");\n    }\n\n    @Bean\n    public Binding queueDBindingY(@Qualifier(\"queueD\") Queue queueD, @Qualifier(\"yExchange\") DirectExchange yExchange) {\n        return BindingBuilder.bind(queueD).to(yExchange).with(\"YD\");\n    }\n}\n```\n\n5. 消费者：接收消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 9:01\n * 队列ttl 消费者\n */\n@Slf4j\n@Component\npublic class DeadLetterQueueConsumer {\n\n    //接收消息\n    @RabbitListener(queues = \"QD\")\n    public void receiveD(Message message, Channel channel) {\n        String msg = new String(message.getBody());\n        log.info(\"当前时间：{}，收到死信队列的消息：{}\", new Date().toString(), msg);\n    }\n}\n```\n\n6. 发送消息：Controller\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:47\n * 发送延迟消息\n * <p>\n * http://localhost:8080/ttl/sendMsg/嘻嘻嘻\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ttl\")\npublic class SendMsgController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //开始发消息\n    @GetMapping(\"/sendMsg/{message}\")\n    public void sendMsg(@PathVariable String message) {\n        log.info(\"当前时间：{}，发送一条消息给两个ttl队列:{}\", new Date().toString(), message);\n        rabbitTemplate.convertAndSend(\"X\", \"XA\", \"消息来自ttl为10s的队列\" + message);\n        rabbitTemplate.convertAndSend(\"X\", \"XB\", \"消息来自ttl为40s的队列\" + message);\n    }\n}\n```\n\n<br />访问：[http://localhost:8080/ttl/sendMsg/](http://localhost:8080/ttl/sendMsg/)嘻嘻嘻<br />控制台打印结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494307481-a59aaddb-4efb-4200-9e05-0e34602ded36.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u66541ef9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=202&originWidth=1365&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62756&status=done&style=none&taskId=ua128108f-eaa5-47fc-ab0d-e56fe3f57f4&title=&width=1365#averageHue=%23333e45&crop=0&crop=0&crop=1&crop=1&id=tO8el&originHeight=202&originWidth=1365&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"5d575387\"></a>\n#### 延迟队列优化：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494906968-c2a2e16a-a5b3-4c44-83bc-5846e35977d0.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=333&id=u5def25ea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=333&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169463&status=done&style=none&taskId=uede9888d-c22a-46c9-a810-c9c1899d23a&title=&width=1070#averageHue=%23faf9f8&crop=0&crop=0&crop=1&crop=1&id=PCbH9&originHeight=333&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />增加一个 QC 普通队列声明后并绑定交换机 XC。<br />队列配置 中添加：\n\n```java\n//--------------------------------优化延迟队列-------------------------------------\n    //普通队列的名称（为了优化延迟队列）\n    public static final String QUEUE_C = \"QC\";\n\n    //声明QC\n    @Bean(\"queueC\")\n    public Queue queueC() {\n        Map<String, Object> arguments = new HashMap<>(2);\n        //设置死信交换机\n        arguments.put(\"x-dead-letter-exchange\", Y_DEAD_LETTER_EXCHANGE);\n        //设置死信routing-key\n        arguments.put(\"x-dead-letter-routing-key\", \"YD\");\n        return QueueBuilder.durable(QUEUE_C).withArguments(arguments).build();\n    }\n\n    //绑定普通队列QC和交换机\n    @Bean\n    public Binding queueCBindingX(@Qualifier(\"queueC\") Queue queueC,\n                                  @Qualifier(\"xExchange\") DirectExchange xExchange) {\n        return BindingBuilder.bind(queueC).to(xExchange).with(\"XC\");\n    }\n    //-----------------------------------优化延迟队列----------------------------------\n```\n\n添加 Controller 发消息控制器：\n\n```java\n//开始发消息  消息ttl\n    @GetMapping(\"/sendExpireMsg/{message}/{ttlTime}\")\n    public void sendMsg(@PathVariable String message, @PathVariable String ttlTime) {\n        log.info(\"当前时间：{}，发送一条时长{}毫秒，ttl信息给队列QC:{}\", new Date().toString(), ttlTime, message);\n        rabbitTemplate.convertAndSend(\"X\", \"XC\", message, msg -> {\n            //发送消息的时候  延迟时长\n            msg.getMessageProperties().setExpiration(ttlTime);\n            return msg;\n        });\n    }\n```\n\n测试：\n\n1. http://localhost:8080/ttl/sendExpireMsg/你好 1/20000\n2. http://localhost:8080/ttl/sendExpireMsg/你好 2/2000\n\n结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638517312025-dfbbfd0b-a82c-4432-a395-2e7cc7c6e48f.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=149&id=u18e59259&margin=%5Bobject%20Object%5D&name=image.png&originHeight=149&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42107&status=done&style=none&taskId=uff6fb06a-df03-451f-b886-52364055048&title=&width=1285#averageHue=%23344049&crop=0&crop=0&crop=1&crop=1&id=efjYm&originHeight=149&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d0cad89d\"></a>\n## 延迟队列（基于插件）\n\n进入 rabbitmq 安装目录下的 plugins 目录 ，cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins<br />执行命令让该插件生效：rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br />然后重启 rabbitmq：systemctl restart rabbitmq-server<br />会发现交换机多了一个新类型，意味着延迟消息将由交换机来完成，而不是队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638519642120-f3258006-3639-4551-805e-26bbd1e67c85.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=530&id=u66b7d498&margin=%5Bobject%20Object%5D&name=image.png&originHeight=767&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56472&status=done&style=none&taskId=u707609ca-e368-4b6c-9833-ec8cc57ca15&title=&width=477.00006103515625#averageHue=%23f6f4f4&crop=0&crop=0&crop=1&crop=1&id=PD1AH&originHeight=767&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n原来的情况：基于死信<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520455616-cfcde47e-bee3-4ef6-83b6-6630dbe54d9a.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=443&id=ua9957719&margin=%5Bobject%20Object%5D&name=image.png&originHeight=601&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=226301&status=done&style=none&taskId=ua95f3b09-635a-4782-abfd-57901f34a8b&title=&width=760.9862060546875#averageHue=%23f8f8f8&crop=0&crop=0&crop=1&crop=1&id=UOPGa&originHeight=601&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />现在：基于延迟插件<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520591056-7591eaf6-b99f-4059-8cbb-6a6ee0ea64f2.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u11577081&margin=%5Bobject%20Object%5D&name=image.png&originHeight=224&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94107&status=done&style=none&taskId=u47b17a31-4f94-4f3c-a75f-2014f181765&title=&width=770.9896240234375#averageHue=%23f4f4f4&crop=0&crop=0&crop=1&crop=1&id=a4gyh&originHeight=224&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />代码架构：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520764180-7b9e927e-1166-470d-ac32-dda16bb87ae1.png#clientId=u7522214d-0203-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=188&id=ud9b4ba5b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=1062&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84300&status=done&style=none&taskId=u12c568cb-6151-4b2f-8f49-3f721530b6d&title=&width=1062#averageHue=%23f8faf2&crop=0&crop=0&crop=1&crop=1&id=cPAio&originHeight=188&originWidth=1062&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 16:41\n */\n@Configuration\npublic class DelayedQueueConfig {\n    //队列\n    public static final String DELAYED_QUEUE_NAME = \"delayed.name\";\n    //交换机\n    public static final String DELAYED_EXCHANGE_NAME = \"delayed.exchange\";\n    //routing-key\n    public static final String DELAYED_ROUTING_KEY = \"delayed.routingkey\";\n\n    //声明队列\n    @Bean\n    public Queue delayedQueue() {\n        return QueueBuilder.durable(DELAYED_QUEUE_NAME).build();\n    }\n\n    //声明交换机 基于插件\n    @Bean\n    public CustomExchange delayedExchange() {\n        Map<String, Object> arguments = new HashMap<>();\n        arguments.put(\"x-delayed-type\", \"direct\");\n        /**\n         * 1. 交换机的名称\n         * 2. 交换机的类型\n         * 3. 是否需要持久化\n         * 4. 是否需要自动删除\n         * 5. 其他的参数\n         */\n        return new CustomExchange(DELAYED_EXCHANGE_NAME, \"x-delayed-message\", true, false, arguments);\n    }\n\n    //绑定\n    @Bean\n    public Binding delayedQueueBindingDelayedExchange(@Qualifier(\"delayedQueue\") Queue delayedQueue,\n                                                      @Qualifier(\"delayedExchange\") CustomExchange delayedExchange) {\n        return BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();\n    }\n}\n```\n\n2. Controller 生产者：\n\n```java\n//发消息  基于延迟插件\n    @GetMapping(\"/sendDelayMsg/{message}/{delayTime}\")\n    public void sendMsg(@PathVariable String message, @PathVariable Integer delayTime) {\n        log.info(\"当前时间:{},发送一条时长{}毫秒信息给延迟队列delayed.queue:{}\", new Date().toString(), delayTime, message);\n        rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME, DelayedQueueConfig.DELAYED_ROUTING_KEY, message, msg -> {\n            //发送消息的时候   延迟时长  单位：ms\n            msg.getMessageProperties().setDelay(delayTime);\n            return msg;\n        });\n    }\n```\n\n3. 消费者：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.DelayedQueueConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 19:36\n * 消费者 基于插件的延迟消息\n */\n@Slf4j\n@Component\npublic class DelayQueueConsumer {\n    //监听消息\n    @RabbitListener(queues = DelayedQueueConfig.DELAYED_QUEUE_NAME)\n    public void receiveDelayQueue(Message message) {\n        String msg = new String(message.getBody());\n        log.info(\"当前时间:{},收到延迟队列的消息：{}\", new Date().toString(), msg);\n    }\n}\n```\n\n测试：<br />发起请求：[http://localhost:8080/ttl/sendDelayMsg/com](http://localhost:8080/ttl/sendDelayMsg/com) on baby1/20000<br /> [http://localhost:8080/ttl/sendDelayMsg/com](http://localhost:8080/ttl/sendDelayMsg/com) on baby2/2000<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532349237-315b969f-d021-4448-8aa8-d5a1d41950a0.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=208&id=uf33e7fe7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=208&originWidth=1432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71640&status=done&style=none&taskId=ue722c22b-16d9-40a2-9a28-e95348df5d0&title=&width=1432#averageHue=%23333e45&crop=0&crop=0&crop=1&crop=1&id=P79jF&originHeight=208&originWidth=1432&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532663153-40afab72-d363-4536-94fc-4889e40d764b.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=224&id=u7813c3ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=266&originWidth=1121&originalType=binary&ratio=1&rotation=0&showTitle=false&size=457006&status=done&style=none&taskId=u0e4002d8-2179-43cc-bcfd-7c69cd127b5&title=&width=941.9896240234375#averageHue=%23cccac1&crop=0&crop=0&crop=1&crop=1&id=aEVGf&originHeight=266&originWidth=1121&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"d338501f\"></a>\n## 发布确认高级\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533419869-3aa9b7ad-ee4e-4fd8-9e42-fd6af4aafe70.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=225&id=u7ed4e098&margin=%5Bobject%20Object%5D&name=image.png&originHeight=341&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=186643&status=done&style=none&taskId=uc65852ff-c2a9-416e-bef6-2991c80fa8b&title=&width=623.0000610351562#averageHue=%23f8e2d2&crop=0&crop=0&crop=1&crop=1&id=OAmnb&originHeight=341&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=) <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533456413-9ead4e1d-f118-4a55-8d05-bcdd4d5fc47f.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=131&id=u954992f9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=144&originWidth=839&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73103&status=done&style=none&taskId=u9819bc42-f398-487a-b319-358e2acd1ba&title=&width=762.9931030273438#averageHue=%23f8e7d7&crop=0&crop=0&crop=1&crop=1&id=sjopK&originHeight=144&originWidth=839&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3f64dd13\"></a>\n### 回调接口 : (若交换机收不到消息)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = \"confirm_exchange\";\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = \"confirm_queue\";\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = \"key1\";\n\n    //声明交换机\n    @Bean\n    public DirectExchange confirmExchange() {\n        return new DirectExchange(CONFIRM_EXCHANGE_NAME);\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(\"confirmQueue\") Queue confirmQueue,\n                                        @Qualifier(\"confirmExchange\") DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n}\n```\n\n2. 生产者：发消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/confirm\")\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(\"/sendMessage/{message}\")\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData = new CorrelationData(\"1\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME, ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData);\n        log.info(\"发送消息内容为：{}\", message);\n    }\n}\n```\n\n3. 消费者：\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:33\n * 接收消息\n */\n@Slf4j\n@Component\npublic class Consumer {\n    @RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)\n    public void receiveConfirmMessage(Message message) {\n        String msg = new String(message.getBody());\n        log.info(\"接收到的队列confirm.queue消息：{}\", msg);\n    }\n}\n```\n\n4. 回调接口\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:50\n * 回调接口\n */\n@Slf4j\n@Component\npublic class MyCallBack implements RabbitTemplate.ConfirmCallback {\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n    }\n\n    /**\n     * 交换机确认回调方法\n     * 1. 发消息  交换机接收到了  回调\n     * 1.1 correlationData 保存回调消息的id及相关信息\n     * 1.2 交换机收到消息  ack = true\n     * 1.3 cause  null\n     * 2. 发消息 交换机接收失败 回调\n     * 2.1 correlationData 保存回调消息的id及相关信息\n     * 2.2 交换机收到消息 ack = false\n     * 2.3 cause  失败的原因\n     *\n     * @param correlationData\n     * @param ack\n     * @param cause\n     */\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n        String id = correlationData != null ? correlationData.getId() : \"\";\n        if (ack) {\n            log.info(\"交换机已经收到id为：{}的消息\", id);\n        } else {\n            log.error(\"交换机还未收到id为:{}的消息，由于原因：{}\", id, cause);\n        }\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537772169-a45dc229-e5ed-410a-8e46-69f3fb39f21e.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=518&id=u396acbb1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=518&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=369736&status=done&style=none&taskId=u8a93ee99-1d87-4fd1-880d-a166a5e50f1&title=&width=973#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=Bk8N5&originHeight=518&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated    # 消息确认机制\n```\n\n5. 发送请求 : http://localhost:8080/confirm/sendMessage/大家好 1\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537854600-e11783cd-28be-4b75-8f36-434ecab3f990.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=ue332f12f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=190&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51915&status=done&style=none&taskId=uba52e997-898f-49e3-9067-645cfb69f68&title=&width=1135#averageHue=%23323d44&crop=0&crop=0&crop=1&crop=1&id=Emijw&originHeight=190&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n6. 测试交换机收不到消息：在发送消息中，将交换机名字后面拼接上\"123\"，再次启动，发送请求： http://localhost:8080/confirm/sendMessage/大家好 1\n\n会得到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538268620-8dcbc2ae-eaa1-4b60-8822-9cd20f509c52.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=222&id=u3e470d69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1872&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66288&status=done&style=none&taskId=u7f0330f7-a846-488e-8b25-71c1f3cf0a7&title=&width=1872#averageHue=%23303c43&crop=0&crop=0&crop=1&crop=1&id=J3ZRH&originHeight=222&originWidth=1872&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n7. 测试队列收不到消息\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息  生产者\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/confirm\")\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(\"/sendMessage/{message}\")\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData1 = new CorrelationData(\"1\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData1);\n        log.info(\"发送消息内容为：{}\", message);\n\n        CorrelationData correlationData2 = new CorrelationData(\"2\");\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY+\"2\", message, correlationData2);\n        log.info(\"发送消息内容为：{}\", message);\n    }\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538743381-bfc4680e-692b-4303-a0f3-87cd9425978d.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=247&id=u241a2996&margin=%5Bobject%20Object%5D&name=image.png&originHeight=247&originWidth=1157&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67266&status=done&style=none&taskId=u3edf7078-e740-4b0a-866c-03de3cfb9db&title=&width=1157#averageHue=%23313c43&crop=0&crop=0&crop=1&crop=1&id=SGy2Z&originHeight=247&originWidth=1157&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可见，队列没有收到消息，也没有应答和确认。\n\n<a name=\"9a49228a\"></a>\n### 若队列收不到消息\n\n\n\n<a name=\"7df88dac\"></a>\n#### 回退消息\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638539584832-557a9bbc-89d4-4162-a0d4-599eb7f3df21.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=210&id=u40b5093d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=210&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=298616&status=done&style=none&taskId=u13a46749-be43-4430-beb2-483ea013efc&title=&width=976#averageHue=%23bcbbb7&crop=0&crop=0&crop=1&crop=1&id=thCkG&originHeight=210&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n```java\nspring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated   # 消息确认机制\n    publisher-returns: true       # 发布确认机制（消息在交换机那若路由失败，则会回退消息给生产者）\n```\n\n回退接口：\n\n```java\n//注入\n@PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n        rabbitTemplate.setReturnsCallback(this);\n    }\n/**\n     * 可以在当消息传递过程中，不可达目的地时将消息返回给生产者\n     * 只有不可到目的地时，才进行回退\n     *\n     * @param returnedMessage\n     */\n    @Override\n    public void returnedMessage(ReturnedMessage returnedMessage) {\n        log.error(\"消息{}，被交换机{}退回，退回原因：{},路由key:{}\",\n                new String(returnedMessage.getMessage().getBody()),\n                returnedMessage.getExchange(),\n                returnedMessage.getReplyText(),\n                returnedMessage.getRoutingKey());\n    }\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638542234889-03b41ef6-8fc5-4ffb-9f36-7287d4ff9476.png#clientId=u44e4b0cf-fc9d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=267&id=uddd5e8ec&margin=%5Bobject%20Object%5D&name=image.png&originHeight=267&originWidth=1293&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78730&status=done&style=none&taskId=u4c513758-cf34-415c-a9f3-845a33faec5&title=&width=1293#averageHue=%23303d45&crop=0&crop=0&crop=1&crop=1&id=tOHQ4&originHeight=267&originWidth=1293&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"2d534732\"></a>\n#### 备份交换机\n\n添加一个交换机和两个队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638578627259-759238ba-aac5-42f9-b645-401c5c9a05d2.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=328&id=ud35a1613&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197049&status=done&style=none&taskId=u04e4ef45-34c3-49a8-84c0-93d70b4ebb6&title=&width=930#averageHue=%23f7e6d5&crop=0&crop=0&crop=1&crop=1&id=j2ALj&originHeight=328&originWidth=930&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n1. 配置类\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = \"confirm_exchange\";\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = \"confirm_queue\";\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = \"key1\";\n    // --------------------------备份交换机---------------------------------\n    //备份交换机\n    public static final String BACKUP_EXCHANGE_NAME = \"backup_exchange\";\n\n    //备份队列\n    public static final String BACKUP_QUEUE_NAME = \"backup_queue\";\n\n    //报警队列\n    public static final String WARNING_QUEUE_NAME = \"warning_queue\";\n\n    //--------------------------------------------------------------------\n    //声明确认交换机（要转发到备份交换机）\n    @Bean\n    public DirectExchange confirmExchange() {\n        return ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(true)\n                .withArgument(\"alternate-exchange\", BACKUP_EXCHANGE_NAME).build();\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(\"confirmQueue\") Queue confirmQueue,\n                                        @Qualifier(\"confirmExchange\") DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n\n    //备份交换机\n    @Bean\n    public FanoutExchange backupExchange() {\n        return new FanoutExchange(BACKUP_EXCHANGE_NAME);\n    }\n\n    //备份队列\n    @Bean\n    public Queue backupQueue() {\n        return QueueBuilder.durable(BACKUP_QUEUE_NAME).build();\n    }\n\n    //报警队列\n    @Bean\n    public Queue warningQueue() {\n        return QueueBuilder.durable(WARNING_QUEUE_NAME).build();\n    }\n\n    //绑定（备份交换机和备份队列）\n    @Bean\n    public Binding backupQueueBindingBackupExchange(@Qualifier(\"backupExchange\") FanoutExchange backupExchange, @Qualifier(\"backupQueue\") Queue backupQueue) {\n        return BindingBuilder.bind(backupQueue).to(backupExchange);\n    }\n\n    //绑定（备份交换机和报警队列）\n    @Bean\n    public Binding warningQueueBindingBackupExchange(@Qualifier(\"backupExchange\") FanoutExchange backupExchange, @Qualifier(\"warningQueue\") Queue warningQueue) {\n        return BindingBuilder.bind(warningQueue).to(backupExchange);\n    }\n}\n```\n\n2. 消费者（报警消费者）\n\n```java\npackage com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/4 9:10\n * 报警消费者\n */\n@Component\n@Slf4j\npublic class WarningConsumer {\n    //接收报警消息\n    @RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)\n    public void receiveWarningMsg(Message message) {\n        String msg = new String(message.getBody());\n        log.error(\"报警发现不可路由消息：{}\", msg);\n    }\n}\n```\n\n发送请求：http://localhost:8080/confirm/sendMessage/大家好 1<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581402507-07326d95-5109-4750-b3ab-c4751b23d55d.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=263&id=udc9907e1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=263&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75848&status=done&style=none&taskId=u7fb8b716-7979-4acf-b11c-fe1cb99bebd&title=&width=1171#averageHue=%23313d44&crop=0&crop=0&crop=1&crop=1&id=Lep12&originHeight=263&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n> **备份交换机的优先级高于回退消息、**\n\n\n\n\n<a name=\"c06ec42e\"></a>\n## 其他知识点\n\n\n\n<a name=\"71a92fdf\"></a>\n### 幂等性\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581856478-4611604a-34c1-486b-a3b7-c809f3d94f0e.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=620&id=ua03a1a2a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=620&originWidth=977&originalType=binary&ratio=1&rotation=0&showTitle=false&size=628166&status=done&style=none&taskId=u3bbefde1-d01a-481e-b831-abe2598835f&title=&width=977#averageHue=%23c4c3c0&crop=0&crop=0&crop=1&crop=1&id=pWlKw&originHeight=620&originWidth=977&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582165848-9189cc73-c68b-4631-b30d-dad30387a032.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=523&id=u37f187c9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=523&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=609037&status=done&style=none&taskId=udd6ff171-0753-4d6f-a510-a8761c65fcb&title=&width=1001#averageHue=%23ccc9c2&crop=0&crop=0&crop=1&crop=1&id=o6DXP&originHeight=523&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n\n\n<a name=\"507580b5\"></a>\n### 优先级队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582363595-025332ba-94e1-4485-b6ab-e0542d69fab7.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=326&id=u83200fbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=326&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&size=447217&status=done&style=none&taskId=ueea7db03-7906-4cef-baef-0ebe50a0185&title=&width=987#averageHue=%23cccbc8&crop=0&crop=0&crop=1&crop=1&id=h3cca&originHeight=326&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582579936-dd221c3d-efc6-4e4b-b854-6667d27682a1.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=343&id=u3930b1c7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=402&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288467&status=done&style=none&taskId=u70a2eadf-0b86-470c-a5a8-b7d8f612ad3&title=&width=1010.9896240234375#averageHue=%23f4f2f2&crop=0&crop=0&crop=1&crop=1&id=WVQYU&originHeight=402&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />实现优先级:\n\n1. 生产者：\n\n```java\npackage com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = \"hello1\";\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        //设置工厂ip  连接rabbitmq的队列\n//        factory.setHost(\"59.110.171.189\");\n//        //用户名\n//        factory.setUsername(\"admin\");\n//        //密码\n//        factory.setPassword(\"123\");\n//        //创建连接\n//        Connection connection = factory.newConnection();\n//        //获取信道\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        Map<String, Object> arguments = new HashMap<>();\n        //官方允许是0-255之间。此处设置10. 允许优先级范围为0-10   不要设置过大   浪费CPU与内存\n        arguments.put(\"x-max-priority\", 10);\n        channel.queueDeclare(QUEUE_NAME, true, false, false, arguments);\n        //发消息\n        for (int i = 0; i < 11; i++) {\n            String message = \"info\" + i;\n            if (i == 5) {\n                //设置优先级\n                AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().priority(5).build();\n                channel.basicPublish(\"\", QUEUE_NAME, properties, message.getBytes());\n            } else {\n                channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n            }\n        }\n        /*\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        System.out.println(\"消息发送完毕\");\n    }\n}\n```\n\n启动生产者：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584428018-a99005d9-2193-463c-9f45-3f72656510ca.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=245&id=u9109bfc5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=245&originWidth=673&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24479&status=done&style=none&taskId=u0a4a6f5a-f03f-4ab3-8fcc-d9bdc327aad&title=&width=673#averageHue=%232d3940&crop=0&crop=0&crop=1&crop=1&id=shKB3&originHeight=245&originWidth=673&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"07eab7c1\"></a>\n### ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584267331-0bf02c8d-6536-43a8-aa18-ee5f4ed82255.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=500&id=AvLAP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=1065&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74831&status=done&style=none&taskId=u77c77f80-cfec-453b-bc9f-f82bf26b07c&title=&width=1065#averageHue=%23f0eeed&crop=0&crop=0&crop=1&crop=1&id=cIQXz&originHeight=500&originWidth=1065&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 消费者 :\n\n```java\npackage com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = \"hello1\";\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        factory.setHost(\"59.110.171.189\");\n//        factory.setUsername(\"admin\");\n//        factory.setPassword(\"123\");\n//        Connection connection = factory.newConnection();\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明 接收消息(成功后的回调)\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(new String(message.getBody()));\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"消息消费被中断\");\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}\n```\n\n启动消费者，<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584610103-d784c402-b9b7-4321-80d9-c4b95990f410.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=u91a8ee8e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36450&status=done&style=none&taskId=u90a3da53-d612-4152-b8b6-157c3e789ca&title=&width=652#averageHue=%232b373e&crop=0&crop=0&crop=1&crop=1&id=UEHzd&originHeight=346&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"8508a884\"></a>\n### 惰性队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584657059-9bf42f28-e7a0-4c4f-8a39-c56038bd0071.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=425&id=ud4e3da7e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=425&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&size=597255&status=done&style=none&taskId=u2ff8ea80-3715-4c63-a718-4d71e1b8488&title=&width=993#averageHue=%23d0cfca&crop=0&crop=0&crop=1&crop=1&id=wMAkZ&originHeight=425&originWidth=993&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584904322-348e89b5-e2f2-4df0-ba11-7540a061f849.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=613&id=u9cab5578&margin=%5Bobject%20Object%5D&name=image.png&originHeight=613&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=404748&status=done&style=none&taskId=uc0905b86-a7ec-4a0f-8a69-356a47ad688&title=&width=1175#averageHue=%23f5f3f3&crop=0&crop=0&crop=1&crop=1&id=NaNR3&originHeight=613&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />惰性队列执行性能不太好，因此默认情况下不使用惰性队列，而使用正常队列。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585096408-ecb74216-dfa9-41e3-b7bd-bd5236b2c1da.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=431&id=u4ab29e59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=431&originWidth=967&originalType=binary&ratio=1&rotation=0&showTitle=false&size=466179&status=done&style=none&taskId=ub1da4c7a-e46a-44f7-9b2f-e5129f4a839&title=&width=967#averageHue=%23cdccc9&crop=0&crop=0&crop=1&crop=1&id=ZtuGu&originHeight=431&originWidth=967&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585305462-e73859d4-5121-406a-b308-57cede7f1bac.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=413&id=uf8c1b8a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=413&originWidth=966&originalType=binary&ratio=1&rotation=0&showTitle=false&size=247424&status=done&style=none&taskId=ua29dd158-1851-4974-bd9b-3c01a9c0ea5&title=&width=966#averageHue=%23f5f5f4&crop=0&crop=0&crop=1&crop=1&id=wFSJu&originHeight=413&originWidth=966&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- 惰性队列从**磁盘**上读取消息，因此消费消息比较慢，但是内存消耗较小，在内存中只存储一些索引。一旦需要消费这些消息时，惰性队列会通过内存中的索引，去读取磁盘中相应的消息，到内存，再消费消息。\n- 正常队列从**内存**中读取消息，因此消费消息比较快，但是内存消耗较大。\n\n<a name=\"23eaf825\"></a>\n## rabbitmq 集群\n\n\n\n<a name=\"c0131d2a\"></a>\n### 集群原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638586666884-b99e8e77-81ef-4547-a9cd-1dcd00e86009.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=501&id=u84ce9d05&margin=%5Bobject%20Object%5D&name=image.png&originHeight=501&originWidth=1025&originalType=binary&ratio=1&rotation=0&showTitle=false&size=171726&status=done&style=none&taskId=ud7aa0990-8e0c-4e31-9dd1-c6d20007401&title=&width=1025#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=hjXVB&originHeight=501&originWidth=1025&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"b80e581a\"></a>\n### 镜像队列（备份）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638587610363-c97ef89e-768e-4278-a087-89f20e211145.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=348&id=ue8695270&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=981&originalType=binary&ratio=1&rotation=0&showTitle=false&size=453959&status=done&style=none&taskId=ue9f78068-c45e-4cc9-a3e0-595ae6c7337&title=&width=981#averageHue=%23c9c8c5&crop=0&crop=0&crop=1&crop=1&id=FTNYI&originHeight=348&originWidth=981&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"3702723f\"></a>\n### 高可用负载均衡\n\n若节点 1 宕机了，生产者需要连接节点 2 或节点 3。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588031855-ab97c0f3-9861-4222-b593-0a4dbfbf566d.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=754&id=u0c60fb59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=754&originWidth=1028&originalType=binary&ratio=1&rotation=0&showTitle=false&size=344345&status=done&style=none&taskId=uaef85042-099b-42a3-8caf-268a89b7438&title=&width=1028#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=XmCHx&originHeight=754&originWidth=1028&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />出现问题：生产者无法变更 rabbitmq 的 ip，此时需要借助外力 Haproxy。\n\n<a name=\"ea97af39\"></a>\n#### Haproxy 实现高可用 负载均衡（高并发）\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588332155-384a9066-f6ed-434c-bd8d-a08678795b99.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u91155287&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&size=240431&status=done&style=none&taskId=u9a4dff8d-f824-447c-b845-2962ddc0650&title=&width=973#averageHue=%23dadad7&crop=0&crop=0&crop=1&crop=1&id=BHuXj&originHeight=177&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588403571-837d2496-d169-4b00-aa3c-4459e5dfd616.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=644&id=u63b0c105&margin=%5Bobject%20Object%5D&name=image.png&originHeight=644&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&size=224363&status=done&style=none&taskId=u400f5630-901e-4db7-8556-6d72a1f206a&title=&width=740#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=FRrD8&originHeight=644&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588495639-57e1823e-e317-48f1-bd99-4a64ab26b8b3.png#clientId=ueb126df1-e3fc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=711&id=uefaa64c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=711&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&size=371827&status=done&style=none&taskId=u8f30ca6f-4949-4c9d-899d-b31600baa56&title=&width=860#averageHue=%23f6f5f5&crop=0&crop=0&crop=1&crop=1&id=K5Fpn&originHeight=711&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"80fc5d12\"></a>\n## 联合交换机\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638600972390-f8eabb13-fdba-432b-8b93-c4798757e13e.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=660&id=u1565c7a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=660&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=882067&status=done&style=none&taskId=u40ae3ed4-1bbc-4baa-b912-40f55e8b353&title=&width=1136#averageHue=%23cecac2&crop=0&crop=0&crop=1&crop=1&id=FkHCS&originHeight=660&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601768985-91857261-fe17-4687-bc9f-f8d9daf1a364.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=524&id=uafeaba48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=1115&originalType=binary&ratio=1&rotation=0&showTitle=false&size=307899&status=done&style=none&taskId=u4499a665-a618-4138-a2f2-5bdf1dbaca0&title=&width=1115#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=FgJli&originHeight=524&originWidth=1115&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601930969-0c445ecb-7e66-43cd-a7d1-3aa8c76f884d.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=581&id=u6d4c749b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=581&originWidth=505&originalType=binary&ratio=1&rotation=0&showTitle=false&size=221677&status=done&style=none&taskId=uf8d981fd-837f-4eb6-83f6-a7deba0a018&title=&width=505#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=NxTl9&originHeight=581&originWidth=505&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602088334-f76d8ba1-5c6d-4280-87c8-b7d58d42f902.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=506&id=u4b7146f5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=506&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&size=158537&status=done&style=none&taskId=u64d80530-7388-4c12-9d3b-48d90765e0b&title=&width=976#averageHue=%23fcfbfb&crop=0&crop=0&crop=1&crop=1&id=oVYwK&originHeight=506&originWidth=976&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602110103-8ee2df46-7982-4b08-a6c8-e4d9c701b69f.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=666&id=u65df8122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=666&originWidth=933&originalType=binary&ratio=1&rotation=0&showTitle=false&size=302115&status=done&style=none&taskId=u970ef30c-4b50-4327-928e-6bf0cdbc242&title=&width=933#averageHue=%23f6f5f5&crop=0&crop=0&crop=1&crop=1&id=A9wRm&originHeight=666&originWidth=933&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"997a4ba0\"></a>\n## 联邦队列\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602602857-2efc1842-e9c7-409e-a302-2b4c63e92027.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=833&id=u3d500d40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=833&originWidth=1312&originalType=binary&ratio=1&rotation=0&showTitle=false&size=553687&status=done&style=none&taskId=u77ecfe28-0a6d-4318-bc8e-c80d6183ecc&title=&width=1312#averageHue=%23f7f6f6&crop=0&crop=0&crop=1&crop=1&id=qvMwP&originHeight=833&originWidth=1312&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />两个不同地区数据同步。<br /> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603240478-ba4a3a39-d3dc-41b3-9ee9-c8d9f2718ff9.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=551&id=u0dc6d91b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=551&originWidth=1149&originalType=binary&ratio=1&rotation=0&showTitle=false&size=244288&status=done&style=none&taskId=u65c1251d-b002-4909-ae1d-f27aa9d85ee&title=&width=1149#averageHue=%23fbfaf9&crop=0&crop=0&crop=1&crop=1&id=Rmak1&originHeight=551&originWidth=1149&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"Shovel\"></a>\n## Shovel\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603352779-28d006e0-d330-4802-935c-040341c1ca8d.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=324&id=uc852da4a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=324&originWidth=1287&originalType=binary&ratio=1&rotation=0&showTitle=false&size=568699&status=done&style=none&taskId=u2b770501-53fa-4cbc-a428-000590e2c17&title=&width=1287#averageHue=%23d1cfc8&crop=0&crop=0&crop=1&crop=1&id=fxL0i&originHeight=324&originWidth=1287&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603460089-03466d04-df20-4ab2-8968-f1b5ef5905ca.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=409&id=ua502f49e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=409&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188661&status=done&style=none&taskId=u48a08d45-4dad-40e0-9723-55db3e3ef79&title=&width=871#averageHue=%23f8f7f7&crop=0&crop=0&crop=1&crop=1&id=lh1tz&originHeight=409&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603378352-15aca4d9-af9b-48c1-b796-60a86b637ebd.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=667&id=uec9ad770&margin=%5Bobject%20Object%5D&name=image.png&originHeight=667&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266940&status=done&style=none&taskId=u8acd6a6e-3ed2-4306-8639-2eeb16612c3&title=&width=864#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=jpTqS&originHeight=667&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br /> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603594801-6bd296a5-c23b-418f-a94e-5261833d5605.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=592&id=u903663bb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&size=194438&status=done&style=none&taskId=ud10d2c55-8f5b-4b88-b096-8942402c361&title=&width=994#averageHue=%23fcfbfb&crop=0&crop=0&crop=1&crop=1&id=oSJ3T&originHeight=592&originWidth=994&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603639753-9ae10564-7bad-4528-afd2-867c58d1f413.png#clientId=u1823549f-f362-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=121&id=u71e6fa9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=121&originWidth=1169&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88867&status=done&style=none&taskId=u55070310-f786-4b38-98ce-55db2f75ca1&title=&width=1169#averageHue=%23efefef&crop=0&crop=0&crop=1&crop=1&id=Gjcgc&originHeight=121&originWidth=1169&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u0d7e0fb8\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><p id=\"uc679db55\" class=\"ne-p\"><span class=\"ne-text\">title: RabbitMQ学习笔记<br /></span><span class=\"ne-text\">categories: 知识</span></p><p id=\"ue3ff7f66\" class=\"ne-p\"><span class=\"ne-text\">updated: 2021-11-05</span></p><p id=\"uceec00a5\" class=\"ne-p\"><span class=\"ne-text\">date: 2021-11-05<br /></span><span class=\"ne-text\">tags: [RabbitMQ, 消息中间件]</span></p><p id=\"ud1be1966\" class=\"ne-p\"><span class=\"ne-text\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201910%2F20191018012402811963.png&amp;refer=http%3A%2F%2Fimage.bubuko.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267173&amp;t=5d1df4c7b1043f63bcf583ceffddf4d3</span></p><p id=\"uaca5ecf0\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"u34c88f82\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u5a3553e0\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1630671540955-650bc67f-569a-4cef-a095-ec73a3b34897.png#clientId=uc20dad1f-a2b4-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=740&amp;id=u64b4ea35&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=740&amp;originWidth=1340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=584856&amp;status=done&amp;style=none&amp;taskId=u20a11e76-4e9c-49b4-8ca4-cc25eac0808&amp;title=&amp;width=1340\" width=\"1340\" id=\"FmDdj\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1630672453989-c5f9d3cf-e77f-4c3e-8a9d-173b49f0aa4c.png#clientId=uc20dad1f-a2b4-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=473&amp;id=ub505e50f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=473&amp;originWidth=1544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=451836&amp;status=done&amp;style=none&amp;taskId=u973d9d93-5ee4-44e2-9f50-b28d8e8f15e&amp;title=&amp;width=1544\" width=\"1544\" id=\"N1Vbj\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1630673109375-2f65953f-32f5-4be8-9353-9d08abb6587f.png#clientId=uc20dad1f-a2b4-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=794&amp;id=uce851ada&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=794&amp;originWidth=1520&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=669042&amp;status=done&amp;style=none&amp;taskId=u1e0c19d3-9eae-4ab1-9e35-b33c4bbbcd6&amp;title=&amp;width=1520\" width=\"1520\" id=\"zGC4d\" class=\"ne-image\"></p><p id=\"u329797e5\" class=\"ne-p\"><br></p><h2 id=\"9c0cd8ed\"><span class=\"ne-text\">为什么要用 rabbitMQ？</span></h2><h3 id=\"81220e89\"><span class=\"ne-text\">1. 流量削峰</span></h3><p id=\"u034d5ee5\" class=\"ne-p\"><br></p><p id=\"u03a10fc5\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998719062-ee3b7961-8606-40b9-9bd6-139143630402.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=91&amp;id=u7a7d8c10&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=182&amp;originWidth=990&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78126&amp;status=done&amp;style=none&amp;taskId=u903bdc4d-2ce4-4ac8-97d1-9cf8226327b&amp;title=&amp;width=495\" width=\"990\" id=\"Ds1E5\" class=\"ne-image\"></p><p id=\"u874b8d44\" class=\"ne-p\"><br></p><h3 id=\"c491023f\"><span class=\"ne-text\">2. 应用解耦</span></h3><p id=\"ue8c60717\" class=\"ne-p\"><br></p><p id=\"u4ba4ff6a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1637998760193-a4f14c2c-a22b-4c92-b207-ae58a962577a.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=182&amp;id=u8f01ca2b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=363&amp;originWidth=1085&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=190648&amp;status=done&amp;style=none&amp;taskId=u30e77d52-0f3b-4d69-b06f-8229a9c232f&amp;title=&amp;width=542.5&amp;referrerpolicy=no-referrer\" width=\"1085\" id=\"hMEcn\" class=\"ne-image\"></p><p id=\"u6d37b294\" class=\"ne-p\"><br></p><h3 id=\"d4ef8fda\"><span class=\"ne-text\">3. 异步处理</span></h3><p id=\"ufa9eb4bc\" class=\"ne-p\"><br></p><p id=\"u20a06663\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009293978-1fde3fa6-5de6-476b-bc8f-4381749e748c.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=315&amp;id=u2602b5b4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=630&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=283589&amp;status=done&amp;style=none&amp;taskId=uf5236049-2c88-4e12-b15e-7d99585efad&amp;title=&amp;width=583.5\" width=\"1167\" id=\"EqXpn\" class=\"ne-image\"></p><p id=\"u0a94a1a3\" class=\"ne-p\"><br></p><h2 id=\"753ccaa2\"><span class=\"ne-text\">RabbitMQ 核心部分</span></h2><p id=\"u29bdd22c\" class=\"ne-p\"><br></p><p id=\"uab230d58\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009378104-cb162a2f-4170-4d24-99c1-4e3ee09087ae.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=284&amp;id=u45cac300&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=568&amp;originWidth=1077&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=305514&amp;status=done&amp;style=none&amp;taskId=u95a38925-5c34-45dd-bfca-d140d73dc3f&amp;title=&amp;width=538.5\" width=\"1077\" id=\"TB3Zf\" class=\"ne-image\"></p><p id=\"u0943ec06\" class=\"ne-p\"><br></p><h2 id=\"a260da3a\"><span class=\"ne-text\">各个名词介绍</span></h2><p id=\"u9ab39537\" class=\"ne-p\"><br></p><p id=\"ub76612d7\" class=\"ne-p\"><br></p><p id=\"u698e3664\" class=\"ne-p\"><br></p><h3 id=\"c83a4ba0\"><span class=\"ne-text\">RabbitMQ 工作原理</span></h3><p id=\"u21effb62\" class=\"ne-p\"><br></p><p id=\"ua7741f7e\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009501957-eb0902f3-1fa1-47d5-9bc7-8d03f6e12de0.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=257&amp;id=u79c375f5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=514&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=210068&amp;status=done&amp;style=none&amp;taskId=ue02a7c50-c563-46af-a784-5ae4c1dcdfe&amp;title=&amp;width=530\" width=\"1060\" id=\"sf1J3\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009567915-6084eb1d-d428-47ec-844f-b3b48c6c6d0c.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=310&amp;id=u9337433a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=619&amp;originWidth=1135&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=776522&amp;status=done&amp;style=none&amp;taskId=uced2ac5e-e117-4050-8e39-087f63ff410&amp;title=&amp;width=567.5\" width=\"1135\" id=\"ft4q6\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638009610891-4a5dba18-6006-41bf-a068-b2f33ed7df48.png#clientId=udb8aea13-24db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=63&amp;id=u38d6f233&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=126&amp;originWidth=1128&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136646&amp;status=done&amp;style=none&amp;taskId=u3dada18e-9ab8-40c9-8042-2e2f9f40306&amp;title=&amp;width=564\" width=\"1128\" id=\"rJuNv\" class=\"ne-image\"></p><p id=\"u1525aa57\" class=\"ne-p\"><br></p><h2 id=\"e655a410\"><span class=\"ne-text\">安装</span></h2><p id=\"u05de2581\" class=\"ne-p\"><br></p><p id=\"uf6aced4d\" class=\"ne-p\"><a href=\"https://www.rabbitmq.com/download.html\" data-href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">rabbitmq.com/download.html</span></a><span class=\"ne-text\"><br /></span><span class=\"ne-text\">erlang 和 rabbitMQ 版本匹配：<br /></span><a href=\"https://www.cnblogs.com/gne-hwz/p/10714013.html\" data-href=\"https://www.cnblogs.com/gne-hwz/p/10714013.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.cnblogs.com/gne-hwz/p/10714013.html</span></a><span class=\"ne-text\"><br /></span><span class=\"ne-text\">安装：</span><a href=\"https://blog.csdn.net/almahehe/article/details/75390572\" data-href=\"https://blog.csdn.net/almahehe/article/details/75390572\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://blog.csdn.net/almahehe/article/details/75390572</span></a><span class=\"ne-text\"><br /></span><span class=\"ne-text\">（建议看尚硅谷视频进行快速安装）<br /></span><span class=\"ne-text\">安装之后，可以访问 ip:15672 ，查看发送消息的端口（5672）和用户。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638169386681-e382c30c-baba-4fbb-bd40-aaa7b0a1eac6.png#clientId=uc4bbfa15-6ab6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=173&amp;id=u1a771f9c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=102&amp;originWidth=450&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28980&amp;status=done&amp;style=none&amp;taskId=ua13bea1f-438b-4ef8-8913-b4ccb9fa78c&amp;title=&amp;width=761.9931030273438\" width=\"450\" id=\"pNXMC\" class=\"ne-image\"></p><p id=\"u9691fe71\" class=\"ne-p\"><br></p><h2 id=\"c729f8ef\"><span class=\"ne-text\">简单队列模式</span></h2><h3 id=\"f5abe6f8\"><span class=\"ne-text\">生产者代码</span></h3><p id=\"u9247b990\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ua2bec32f\"><span class=\"ne-text\">项目依赖：</span></li></ol><p id=\"ua99c915f\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"0859d073\" class=\"ne-codeblock language-xml\">&lt;dependencies&gt;\n        &lt;!--指定jdk编译版本--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;\n        &lt;!--rabbitmq依赖客户端--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;\n            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;\n            &lt;version&gt;5.8.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;\n        &lt;!--操作文件流的依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n            &lt;version&gt;2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;</pre><p id=\"ud6903308\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"uadcc7a78\"><span class=\"ne-text\">生产者代码：</span></li></ol><p id=\"u087456f1\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"551912bc\" class=\"ne-codeblock language-java\">japackage com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = &quot;hello&quot;;\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        //设置工厂ip  连接rabbitmq的队列\n        factory.setHost(&quot;59.110.171.189&quot;);\n        //用户名\n        factory.setUsername(&quot;admin&quot;);\n        //密码\n        factory.setPassword(&quot;123&quot;);\n        //创建连接\n        Connection connection = factory.newConnection();\n        //获取信道\n        Channel channel = connection.createChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n                4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n                5.其他参数（延迟消息......）\n         */\n\n        channel.queueDeclare(QUEUE_NAME,false,false,false,null);\n        //发消息\n        String message = &quot;hello world&quot;;\n        /**\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        channel.basicPublish(&quot;&quot;,QUEUE_NAME,null,message.getBytes());\n        System.out.println(&quot;消息发送完毕&quot;);\n    }\n}</pre><p id=\"ua3657b02\" class=\"ne-p\"><br></p><p id=\"u11483b33\" class=\"ne-p\"><span class=\"ne-text\">如果运行报超时错误，需要打开云服务器的安全组 5672 端口。<br /></span><span class=\"ne-text\">（参考博客：</span><a href=\"https://www.cnblogs.com/jxearlier/p/11920825.html\" data-href=\"https://www.cnblogs.com/jxearlier/p/11920825.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.cnblogs.com/jxearlier/p/11920825.html</span></a><span class=\"ne-text\">）</span></p><h3 id=\"3b753fe7\"><span class=\"ne-text\">消费者代码</span></h3><p id=\"ud87a77a1\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"d7bd0f8f\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.one;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = &quot;hello&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(&quot;59.110.171.189&quot;);\n        factory.setUsername(&quot;admin&quot;);\n        factory.setPassword(&quot;123&quot;);\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        //声明 接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(message);\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -&gt; {\n            System.out.println(&quot;消息消费被中断&quot;);\n        };\n        /**\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true,deliverCallback,cancelCallback);\n    }\n}</pre><p id=\"u161ab880\" class=\"ne-p\"><br></p><p id=\"u2f7061dc\" class=\"ne-p\"><span class=\"ne-text\">运行结果：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638172828992-073b0df6-a480-4260-a724-e17e9191a44c.png#clientId=uc4bbfa15-6ab6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=20&amp;id=u3ee077b2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=20&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2932&amp;status=done&amp;style=none&amp;taskId=ud645c173-0157-49f2-89fb-5d58c2cd89a&amp;title=&amp;width=296\" width=\"296\" id=\"kWU4Y\" class=\"ne-image\"></p><p id=\"u0b7711d3\" class=\"ne-p\"><br></p><h3 id=\"56a70cf7\"><span class=\"ne-text\">测试生产者和消费者代码：</span></h3><p id=\"uac0eac74\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u4916faee\"><span class=\"ne-text\">先运行消费者代码，发现没有消息，再运行生产者代码，发送消息，再看消费者代码控制台，此时已经接收到消息。</span></li></ol><p id=\"ua57feed9\" class=\"ne-p\"><br></p><h2 id=\"3d1bae02\"><span class=\"ne-text\">工作队列模式</span></h2><p id=\"u8a14f32f\" class=\"ne-p\"><br></p><p id=\"u924e23c9\" class=\"ne-p\"><br></p><p id=\"ub993060c\" class=\"ne-p\"><br></p><h3 id=\"d9addd15\"><span class=\"ne-text\">轮训分发消息</span></h3><p id=\"u0a21536f\" class=\"ne-p\"><br></p><p id=\"u1c457a9d\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638191830547-a43bbaa1-a524-4603-b6a9-0824e943cf9c.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=546&amp;id=ucf96c5e0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=546&amp;originWidth=1278&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=220503&amp;status=done&amp;style=none&amp;taskId=ub030755f-49df-4184-9d0d-65bfa0e561e&amp;title=&amp;width=1278\" width=\"1278\" id=\"kyxCV\" class=\"ne-image\"></p><p id=\"ubbe06130\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ua4977f19\"><span class=\"ne-text\">抽取连接工厂工具类：</span></li></ol><p id=\"u1321a065\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"d79993aa\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.utils;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:48\n * 连接工厂创建信道的工具类\n */\npublic class RabbitMqUtils {\n    public static Channel getChannel() throws IOException, TimeoutException {\n        //创建连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(&quot;59.110.171.189&quot;);\n        factory.setUsername(&quot;admin&quot;);\n        factory.setPassword(&quot;123&quot;);\n        Connection connection = factory.newConnection();\n        Channel channel = connection.createChannel();\n        return channel;\n    }\n}</pre><p id=\"u63f36183\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u07f51501\"><span class=\"ne-text\">工作线程代码：（消费者）</span></li></ol><p id=\"ud95a0f1f\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"9d76e763\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.CancelCallback;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\nimport com.rabbitmq.client.Delivery;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 19:55\n * 这是一个工作线程（相当于之前的消费者）\n */\npublic class Worker01 {\n    //队列名称\n    public static final String QUEUE_NAME = &quot;hello&quot;;\n\n    //接收消息 的工作线程\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //消息的接收\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;接收到的消息：&quot; + new String(message.getBody()));\n        };\n        //消息接收被取消时 执行\n        CancelCallback cancelCallback = (consumerTag) -&gt; {\n            System.out.println(consumerTag + &quot;消费者取消消费接口回调逻辑&quot;);\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}</pre><p id=\"u3c81ab45\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u3d36e889\"><span class=\"ne-text\">启动两个工作线程（消费者）</span></li></ol><p id=\"ub9bad24a\" class=\"ne-p\"><br></p><p id=\"u880b1412\" class=\"ne-p\"><span class=\"ne-text\">前提是在 idea 设置允许方法多个并行运行：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188489814-b081e679-bc7f-4cad-964e-bfb80575820c.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=636&amp;id=uf61f07dc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=869&amp;originWidth=1143&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=94819&amp;status=done&amp;style=none&amp;taskId=u4472c929-c48f-4a7d-ab7d-ec2994b75e5&amp;title=&amp;width=836.9862060546875\" width=\"1143\" id=\"zVInE\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638188418807-97ce766a-47ef-458c-8413-d496cbcddbed.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=172&amp;id=u35f12aab&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=172&amp;originWidth=669&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20804&amp;status=done&amp;style=none&amp;taskId=uf688cf36-6dc9-43f1-be3d-946b8a45d78&amp;title=&amp;width=669\" width=\"669\" id=\"yNG1N\" class=\"ne-image\"></p><p id=\"ub776168d\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"ud4caf9e9\"><span class=\"ne-text\">生产者代码：</span></li></ol><p id=\"u09bb0f44\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"5346bd81\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.two;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 21:04\n * 生产者 发送大量消息\n */\npublic class Task01 {\n    public static final String QUEUE_NAME = &quot;hello&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /*\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());\n            System.out.println(&quot;发送消息完成：&quot; + message);\n        }\n    }\n}</pre><p id=\"u0c3323ed\" class=\"ne-p\"><br></p><ol start=\"5\" class=\"ne-ol\"><li id=\"u5fbb9819\"><span class=\"ne-text\">测试：启动生产者</span></li></ol><p id=\"u647c8fbd\" class=\"ne-p\"><br></p><p id=\"ud09fcf35\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192109706-2649384b-8559-4d7e-8609-220f576c3e25.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=275&amp;id=u4261e57f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=275&amp;originWidth=591&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25224&amp;status=done&amp;style=none&amp;taskId=ue3dff20d-583f-4d0b-bb12-94ccae95bc1&amp;title=&amp;width=591\" width=\"591\" id=\"PuJou\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">可以看见消费者轮循接收消息：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192164342-16d183be-bbe5-4de9-bac4-d87bd87a746b.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=179&amp;id=ue97a7cdb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=179&amp;originWidth=591&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23018&amp;status=done&amp;style=none&amp;taskId=u7cff6d1a-b142-4d52-a1c5-1cca6fd241e&amp;title=&amp;width=591\" width=\"591\" id=\"Upfv4\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638192176544-d380de90-ff7a-48a7-a080-c4a1ac193460.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=198&amp;id=ubb73d589&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=198&amp;originWidth=598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23978&amp;status=done&amp;style=none&amp;taskId=u3ac63e3a-6d82-4340-9fed-c68c8fbf564&amp;title=&amp;width=598\" width=\"598\" id=\"xLv8Q\" class=\"ne-image\"></p><p id=\"u9b4baf19\" class=\"ne-p\"><br></p><h2 id=\"269fc561\"><span class=\"ne-text\">消息应答</span></h2><p id=\"u6a6463c8\" class=\"ne-p\"><br></p><p id=\"uce771e06\" class=\"ne-p\"><br></p><p id=\"u4921363f\" class=\"ne-p\"><br></p><h3 id=\"398e8d91\"><span class=\"ne-text\">自动应答</span></h3><p id=\"u375825be\" class=\"ne-p\"><br></p><p id=\"ua916566e\" class=\"ne-p\"><span class=\"ne-text\">不建议使用，仅适用在消费者可以高效并以某种速率能够处理这些消息的情况。</span></p><p id=\"u5267e3be\" class=\"ne-p\"><br></p><h3 id=\"a7945bf1\"><span class=\"ne-text\">手动应答</span></h3><p id=\"uc5fde435\" class=\"ne-p\"><br></p><p id=\"ud58827d8\" class=\"ne-p\"><br></p><p id=\"u5b06088a\" class=\"ne-p\"><br></p><h4 id=\"bdff53ca\"><span class=\"ne-text\">消息应答的方法：</span></h4><p id=\"u91742edc\" class=\"ne-p\"><br></p><p id=\"u50ffcea8\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638193415623-6b7ff26f-8cc3-4abd-b1c6-41f79897f0cf.png#clientId=u43ded51d-0244-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=312&amp;id=ud16b0385&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=312&amp;originWidth=737&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=100867&amp;status=done&amp;style=none&amp;taskId=u39cf8244-b605-4c5d-baca-fe2103cd9d3&amp;title=&amp;width=737\" width=\"737\" id=\"S2b1y\" class=\"ne-image\"></p><p id=\"u9dec6f82\" class=\"ne-p\"><br></p><h4 id=\"70c2cd3d\"><span class=\"ne-text\">批量处理 Multiple</span></h4><p id=\"ubcb490e9\" class=\"ne-p\"><br></p><p id=\"u50a423cf\" class=\"ne-p\"><span class=\"ne-text\">手动应答的好处：可以批量应答，并减少网络拥堵。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638282925466-4d3081e6-809c-4a5f-9472-741dacb0cc7c.png#clientId=ub82069db-0272-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=588&amp;id=u97ebb457&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=811&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=292383&amp;status=done&amp;style=none&amp;taskId=uf04a703e-97b1-4fe2-b58f-33d8b0dff4d&amp;title=&amp;width=741.9931030273438\" width=\"1024\" id=\"rUzZh\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">但是批量应答可能会丢失消息。所以尽量不要批量应答，将 multiple 设置为 false。</span></p><p id=\"ue797ecdd\" class=\"ne-p\"><br></p><h3 id=\"8f744d87\"><span class=\"ne-text\">消息自动重新入队</span></h3><p id=\"ub78af706\" class=\"ne-p\"><br></p><p id=\"u48684c84\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317239422-ab1bab41-ac6f-4a05-b3c5-c539d9e6dcd1.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=85&amp;id=u97c18f3b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=79&amp;originWidth=665&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57746&amp;status=done&amp;style=none&amp;taskId=u14e494b5-3291-4daf-ada5-47aafa5eab0&amp;title=&amp;width=715.0000610351562\" width=\"665\" id=\"qAYOD\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638317701734-1133a417-ebbe-4ad9-8453-f0803583491a.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=308&amp;id=u7be19416&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=469&amp;originWidth=1088&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=306122&amp;status=done&amp;style=none&amp;taskId=u7d90ec89-bd9a-4090-bda5-c09c6014c27&amp;title=&amp;width=714.9862060546875\" width=\"1088\" id=\"o9cFt\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">测试：<br /></span><span class=\"ne-text\"> 1. 生产者：</span></p><p id=\"uf22d07da\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"07cf3bd5\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:46\n * 消息在手动应答时不丢失,放回队列中重新消费\n */\npublic class Task2 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = &quot;ack_queue&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明队列\n        channel.queueDeclare(TASK_QUEUE_NAME, false, false, false, null);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(&quot;&quot;, TASK_QUEUE_NAME, null, message.getBytes());\n            System.out.println(&quot;生产者发出消息：&quot; + message);\n        }\n    }\n}</pre><p id=\"u7a59e1ef\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ua5680886\"><span class=\"ne-text\">两个消费者（消息手动应答）：</span></li></ol><p id=\"u9ced89cf\" class=\"ne-p\"><br></p><p id=\"udf412596\" class=\"ne-p\"><span class=\"ne-text\">消费者一：</span></p><p id=\"ueae64f29\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"7fa74098\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work03 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = &quot;ack_queue&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(&quot;C1等待接收消息处理时间较短&quot;);\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            //沉睡1s\n            SleepUtils.sleep(1);\n            System.out.println(&quot;接收到的消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -&gt; {\n            System.out.println(consumerTag + &quot;消费者取消消费接口的回调逻辑&quot;);\n        }));\n    }\n}</pre><p id=\"u510b8aea\" class=\"ne-p\"><br></p><p id=\"u13871e3e\" class=\"ne-p\"><span class=\"ne-text\">消费者二：</span></p><p id=\"ufa927a3f\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"f6acdd41\" class=\"ne-codeblock language-xml\">package com.atguigu.rabbitmq.three;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.atguigu.rabbitmq.utils.SleepUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 14:58\n * 消息在手动应答时不丢失，放回队列中重新消费\n */\npublic class Work04 {\n    //队列名称\n    public static final String TASK_QUEUE_NAME = &quot;ack_queue&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(&quot;C2等待接收消息处理时间较短&quot;);\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            //沉睡1s\n            SleepUtils.sleep(30);\n            System.out.println(&quot;接收到的消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n            //手动应答（通过信道）\n            /*参数：\n            1. 消息的标记 tag\n            2. 是否批量应答  false:不批量应答信道中的消息，true:批量\n             */\n            channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n        };\n        //采用手动应答\n        boolean autoAck = false;\n        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, (consumerTag -&gt; {\n            System.out.println(consumerTag + &quot;消费者取消消费接口的回调逻辑&quot;);\n        }));\n    }\n}</pre><p id=\"ucab58ba8\" class=\"ne-p\"><br></p><p id=\"u3fb35c0e\" class=\"ne-p\"><span class=\"ne-text\">测试步骤：<br /></span><span class=\"ne-text\">① 先启动 task2，创建 ack_queue 队列；（在 ip:15672 的 queue 列表中可以看到目前拥有的队列）<br /></span><span class=\"ne-text\">② 启动 work02，work03 接收消息（消费者）；<br /></span><span class=\"ne-text\">③ 发消息：在 task2 控制台输入 aa,bb,cc,dd,ee,ff，可以看到 work2 和 work3 是轮训接收消息；如果到 work03 应该接收消息 ee 时，work03 突然挂掉，此时 ee 会被转发给 work02 中的 C1，这时 C1 会接收到 ee，因此消息不会丢失，这说明了 rabbitmq 有手动应答的能力，只要没有收到消息，就不会手动应答，从而将消息放回队列。而队列又再次将消息传递给 C1 进行重新消费，从而导致 ee 并没有丢失。</span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638348662336-051f5011-f512-44d1-bb05-053e49ba050c.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=499&amp;id=u60c5aa9e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=499&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=254728&amp;status=done&amp;style=none&amp;taskId=u6c03afcd-9d58-4d4b-b839-5e4801e20e0&amp;title=&amp;width=1092\" width=\"1092\" id=\"Rq0q6\" class=\"ne-image\"></p><p id=\"ub25bd699\" class=\"ne-p\"><br></p><h2 id=\"274a6bb3\"><span class=\"ne-text\">队列持久化</span></h2><p id=\"u65611189\" class=\"ne-p\"><br></p><p id=\"ue951fa0d\" class=\"ne-p\"><span class=\"ne-text\">如果存在同名未被持久化的队列，则需要先删除原先的未被持久化的队列，再重新生成一个持久化队列。</span></p><p id=\"u9565990f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"1a197cbd\" class=\"ne-codeblock language-java\">//声明队列\nboolean durable = true; //在生产者中，需要让queue进行持久化\nchannel.queueDeclare(TASK_QUEUE_NAME, durable, false, false, null);</pre><p id=\"ua4a455e1\" class=\"ne-p\"><br></p><p id=\"u003d6059\" class=\"ne-p\"><span class=\"ne-text\">生成一个持久化队列之后，在 rabbitmq 控制台中这个队列的 features 属性会出现 D（代表持久化）。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638359722330-59d15b49-1b8d-4d93-85aa-ecd40227bd45.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=129&amp;id=ufd6f763b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=129&amp;originWidth=781&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13881&amp;status=done&amp;style=none&amp;taskId=uab54d6ef-4036-4edf-bca6-ba4a9dcac1d&amp;title=&amp;width=781\" width=\"781\" id=\"iMXeX\" class=\"ne-image\"></p><p id=\"u3e80b572\" class=\"ne-p\"><br></p><h2 id=\"f1739dad\"><span class=\"ne-text\">消息持久化</span></h2><p id=\"uc661f556\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2ac9ced1\" class=\"ne-codeblock language-java\">//设置生产者发送消息为持久化消息（要求保存到磁盘上MessageProperties.PERSISTENT_TEXT_PLAIN）\nchannel.basicPublish(&quot;&quot;, TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());</pre><p id=\"u478658c1\" class=\"ne-p\"><br></p><p id=\"u88b0d835\" class=\"ne-p\"><br></p><p id=\"u2a1a3ee8\" class=\"ne-p\"><br></p><h2 id=\"afba844e\"><span class=\"ne-text\">不公平分发</span></h2><p id=\"ubf424800\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"b23fdf5a\" class=\"ne-codeblock language-java\">//在消费者中接收消息之前设置不公平分发\nint prefetchCount = 1;\nchannel.basicQos(prefetchCount);</pre><p id=\"u6ed41d59\" class=\"ne-p\"><br></p><p id=\"u828c250f\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361240814-a1349c7f-2e3e-410a-ba3b-f2f872fab0bb.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=232&amp;id=u1ff04a34&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=232&amp;originWidth=385&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20173&amp;status=done&amp;style=none&amp;taskId=ub1b60899-802e-4d67-9aed-a99c48b5db3&amp;title=&amp;width=385\" width=\"385\" id=\"vTMLG\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361251165-68b13d22-fe49-4fd8-9471-26161051c180.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=177&amp;id=u477bebf6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=177&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18613&amp;status=done&amp;style=none&amp;taskId=ue60522ee-50ed-46f9-ae69-472369ce4b6&amp;title=&amp;width=431\" width=\"431\" id=\"zGQk4\" class=\"ne-image\"></p><p id=\"u606a7603\" class=\"ne-p\"><br></p><h2 id=\"e7e8ffe0\"><span class=\"ne-text\">预取值</span></h2><p id=\"uc821be09\" class=\"ne-p\"><br></p><p id=\"uf28a9818\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638361857297-fa168e46-191d-44b2-8ce2-df2cb52a382d.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=282&amp;id=ue1e2c233&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=453&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=347909&amp;status=done&amp;style=none&amp;taskId=ue241edd5-d375-46cb-9668-4a4eb4d7c9c&amp;title=&amp;width=703.0000610351562\" width=\"1130\" id=\"mwjn3\" class=\"ne-image\"></p><p id=\"u85729c36\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"1f902658\" class=\"ne-codeblock language-java\">int prefetchCount = 5;\nchannel.basicQos(prefetchCount);</pre><p id=\"uac932245\" class=\"ne-p\"><br></p><p id=\"ucf3fd997\" class=\"ne-p\"><br></p><p id=\"u92071e4b\" class=\"ne-p\"><br></p><h2 id=\"1e9c309f\"><span class=\"ne-text\">发布确认原理</span></h2><p id=\"ua7b44864\" class=\"ne-p\"><br></p><p id=\"uf9cf497a\" class=\"ne-p\"><br></p><p id=\"uc237fdfc\" class=\"ne-p\"><br></p><h2 id=\"e61fd426\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638364988019-b29d7c44-ebca-4978-95fd-034500d1bd7b.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=369&amp;id=u98ff6bb0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=369&amp;originWidth=930&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=222643&amp;status=done&amp;style=none&amp;taskId=ua25c2547-8233-4893-8d5b-4406b84e85f&amp;title=&amp;width=930\" width=\"930\" id=\"Xek0V\" class=\"ne-image\"></h2><p id=\"ub971425a\" class=\"ne-p\"><br></p><p id=\"uff8b9cca\" class=\"ne-p\"><span class=\"ne-text\">在信道之后开启发布确认：</span></p><p id=\"u0e87e7d9\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"ad539932\" class=\"ne-codeblock language-java\">//信道开启发布确认\nchannel.confirmSelect();</pre><p id=\"u240d4823\" class=\"ne-p\"><br></p><p id=\"uda74d6f1\" class=\"ne-p\"><br></p><p id=\"u11342da4\" class=\"ne-p\"><br></p><h2 id=\"f1ad8c9b\"><span class=\"ne-text\">单个发布确认</span></h2><p id=\"u3cbeb3a0\" class=\"ne-p\"><br></p><p id=\"uc4d6c015\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638365489548-64267da5-f60d-4b88-98af-bdf5806d5038.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=203&amp;id=ub1148f56&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=203&amp;originWidth=993&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=342872&amp;status=done&amp;style=none&amp;taskId=u2df32a3e-4c69-4599-868a-d81e33495ec&amp;title=&amp;width=993\" width=\"993\" id=\"qVQAu\" class=\"ne-image\"></p><p id=\"u6734b8e1\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"e9bbaca4\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.four;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/1 21:32\n * 发布确认模式：\n * 使用的时间  比较哪种确认方式是最好的\n * 1.单个确认\n * 2.批量确认\n * 3.异步批量确认\n */\npublic class ConfireMessage {\n    //批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n    }\n\n    //单个确认\n    public static void publicMessageIndividually() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发消息\n        for (int i = 0; i &lt; MESSAGE_COUNT; i++) {\n            String massage = i + &quot;&quot;;\n            channel.basicPublish(&quot;&quot;, queueName, null, massage.getBytes());\n            //单个消息就马上进行发布确认\n            boolean flag = channel.waitForConfirms();\n            if (flag) {\n                System.out.println(&quot;消息发送成功&quot;);\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;发布&quot;+MESSAGE_COUNT+&quot;个单独确认消息，耗时&quot;+(end - begin)+&quot;ms&quot;);\n    }\n}</pre><p id=\"u662ff4b5\" class=\"ne-p\"><br></p><p id=\"u9a18410d\" class=\"ne-p\"><br></p><p id=\"ud961b543\" class=\"ne-p\"><br></p><h2 id=\"498cf9b3\"><span class=\"ne-text\">批量发布确认</span></h2><p id=\"ue56ad038\" class=\"ne-p\"><br></p><p id=\"ub790e1b8\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638366964213-10397181-357d-4896-9e91-84690b69c982.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=137&amp;id=ude627a73&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=137&amp;originWidth=968&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=206130&amp;status=done&amp;style=none&amp;taskId=u0c3dafe3-1f66-4cc1-83ba-f5e8edae8b3&amp;title=&amp;width=968\" width=\"968\" id=\"tMsLz\" class=\"ne-image\"></p><p id=\"u31587570\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2f62025c\" class=\"ne-codeblock language-java\">//批量发布确认\n    public static void publicMessageBatch() throws IOException, TimeoutException, InterruptedException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量确认消息大小\n        int batchSize = 100;\n        //批量发布消息， 批量发布确认\n        for (int i = 0; i &lt; MESSAGE_COUNT; i++) {\n            String message = i + &quot;&quot;;\n            channel.basicPublish(&quot;&quot;, queueName, null, message.getBytes());\n            //发布确认\n            if (i % batchSize == 0) {\n                channel.waitForConfirms();\n            }\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;发布&quot; + MESSAGE_COUNT + &quot;个批量确认消息，耗时&quot; + (end - begin) + &quot;ms&quot;);\n    }</pre><p id=\"uf3e134d2\" class=\"ne-p\"><br></p><p id=\"u47f2cb22\" class=\"ne-p\"><br></p><p id=\"u6d154a3b\" class=\"ne-p\"><br></p><h2 id=\"836eb661\"><span class=\"ne-text\">异步发布确认</span></h2><p id=\"u0f0edc87\" class=\"ne-p\"><br></p><p id=\"u494d78ca\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368249755-46e1c3b8-f891-48b0-a77b-21b9a80f4e5e.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=119&amp;id=u5fcd19f7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=119&amp;originWidth=1189&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=231115&amp;status=done&amp;style=none&amp;taskId=u473c99f9-e088-4ad3-84e3-82e606c7d63&amp;title=&amp;width=1189\" width=\"1189\" id=\"Jwh7I\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638368124379-5cdb8cbd-707a-4a1f-92f4-3dc511a9ec11.png#clientId=u446e2507-b64d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=571&amp;id=u4b5d988b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=441&amp;originWidth=964&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=239080&amp;status=done&amp;style=none&amp;taskId=ua0b85de0-7119-4e3a-a0be-75854b9aaac&amp;title=&amp;width=1248.9931030273438\" width=\"964\" id=\"T1TVR\" class=\"ne-image\"></p><p id=\"u52c10243\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"d6247f11\" class=\"ne-codeblock language-java\">//批量发消息的个数\n    public static final int MESSAGE_COUNT = 1000;\n\n    public static void main(String[] args) throws InterruptedException, TimeoutException, IOException {\n        //1. 单个确认\n//        ConfireMessage.publicMessageIndividually(); //发布1000个单独确认消息，耗时29726ms\n//        2. 批量确认\n//        ConfireMessage.publicMessageBatch();  //发布1000个批量确认消息，耗时761ms（弊端：无法确认哪个消息未被确认）\n//        3. 异步确认\n        ConfireMessage.publicMessageAsync(); //发布1000个异步确认消息，耗时181ms\n    }\n//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -&gt; {\n            System.out.println(&quot;确认的消息&quot; + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -&gt; {\n            System.out.println(&quot;未确认的消息&quot; + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //异步发布确认\n        for (int i = 0; i &lt; MESSAGE_COUNT; i++) {\n            String massage = &quot;消息&quot; + i;\n            channel.basicPublish(&quot;&quot;, queueName, null, massage.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;发布&quot; + MESSAGE_COUNT + &quot;个异步确认消息，耗时&quot; + (end - begin) + &quot;ms&quot;);\n    }</pre><p id=\"uc4a48e34\" class=\"ne-p\"><br></p><p id=\"u32eb914f\" class=\"ne-p\"><br></p><p id=\"u776a938a\" class=\"ne-p\"><br></p><h2 id=\"e8b363bb\"><span class=\"ne-text\">如何处理异步未确认消息</span></h2><p id=\"ucecfe414\" class=\"ne-p\"><br></p><p id=\"uf632b3ef\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638404469016-06a08296-9aa6-4d65-8d1c-4c70fb4cd5b8.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=97&amp;id=u0927e367&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=97&amp;originWidth=1033&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=122865&amp;status=done&amp;style=none&amp;taskId=u67d3a3c6-2f1a-4be9-9c0c-f7d2e743935&amp;title=&amp;width=1033\" width=\"1033\" id=\"frSPr\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">上述异步确认有两个线程：</span></p><p id=\"uf8bfc172\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ueacc7571\"><span class=\"ne-text\">发消息的线程</span></li></ul><ul class=\"ne-ul\"><li id=\"u5e95d849\"><span class=\"ne-text\">监听器的线程</span></li></ul><p id=\"u51d043a1\" class=\"ne-p\"><br></p><p id=\"u969efa72\" class=\"ne-p\"><span class=\"ne-text\">两个线程之间交互，只能用</span><strong><span class=\"ne-text\">并发链路式队列（可以在确认发布与发布线程之间进行消息传递）</span></strong><span class=\"ne-text\">。</span></p><p id=\"u60c1e577\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"0a036573\" class=\"ne-codeblock language-java\">//异步发布确认\n    public static void publicMessageAsync() throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        String queueName = UUID.randomUUID().toString();\n        //用信道声明队列\n        channel.queueDeclare(queueName, true, false, false, null);\n        //开启发布确认\n        channel.confirmSelect();\n        /*\n        线程安全有序的哈希表，适用于高并发的情况\n        1. 轻松的将序号与消息进行关联\n        2. 轻松批量删除条目，只要给序号\n        3.支持高并发(多线程)\n         */\n        ConcurrentSkipListMap&lt;Long,String&gt; outstandingConfirms = new ConcurrentSkipListMap&lt;&gt;();\n\n        //消息确认成功，回调函数\n        ConfirmCallback ackCallback = (deliveryTag, multiple) -&gt; {\n            //2. 删除已经确认的消息   剩下的就是未确认的消息\n            if(multiple){\n                //如果是批量确认，就去批量删除\n                ConcurrentNavigableMap&lt;Long,String&gt; confirmed = outstandingConfirms.headMap(deliveryTag);\n                confirmed.clear();\n            }else{\n                //如果是单个确认，就去单个删除\n                outstandingConfirms.remove(deliveryTag);\n            }\n            System.out.println(&quot;确认的消息&quot; + deliveryTag);\n        };\n        //消息确认失败，回调函数\n        ConfirmCallback nackCallback = (deliveryTag, multiple) -&gt; {\n            //3. 打印未确认的消息有哪些\n            String message = outstandingConfirms.get(deliveryTag);\n            System.out.println(&quot;未确认的消息是：&quot;+message+&quot;:::::未确认的消息tag:&quot; + deliveryTag);\n        };\n        //准备消息的监听器，监听哪些消息成功了，哪些消息失败了\n        channel.addConfirmListener(ackCallback, nackCallback);  //异步通知\n        //开始时间\n        long begin = System.currentTimeMillis();\n        //批量发送消息\n        for (int i = 0; i &lt; MESSAGE_COUNT; i++) {\n            String message = &quot;消息&quot; + i;\n            // 1. 此处记录下所有要发送的消息  消息的总和(每发一次消息就记录一次)\n            outstandingConfirms.put(channel.getNextPublishSeqNo(),message);\n            channel.basicPublish(&quot;&quot;, queueName, null, message.getBytes());\n\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;发布&quot; + MESSAGE_COUNT + &quot;个异步确认消息，耗时&quot; + (end - begin) + &quot;ms&quot;);\n    }</pre><p id=\"u24ef3936\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u6e59d7fb\" class=\"ne-p\"><span class=\"ne-text\">以上三种发布确认速度对比：</span></p></div><p id=\"u53e9db23\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"uafded0e5\"><span class=\"ne-text\">单独发布消息：同步等待确认，简单，但吞吐量非常有限。</span></li></ul><ul class=\"ne-ul\"><li id=\"u94b38ace\"><span class=\"ne-text\">批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题，很难推断出是哪条出现了问题</span></li></ul><ul class=\"ne-ul\"><li id=\"uc70e4029\"><span class=\"ne-text\">异步处理：最佳性能和资源利用，在出现错误的情况下，可以很好的控制，但是实现起来稍微难些。</span></li></ul><p id=\"u9569dffd\" class=\"ne-p\"><br></p><h2 id=\"04596875\"><span class=\"ne-text\">交换机</span></h2><p id=\"u2d479111\" class=\"ne-p\"><br></p><p id=\"u97889cc2\" class=\"ne-p\"><br></p><p id=\"u80d50401\" class=\"ne-p\"><br></p><h3 id=\"a3034a5f\"><span class=\"ne-text\">交换机的作用</span></h3><p id=\"u03675e5f\" class=\"ne-p\"><br></p><p id=\"u10101ef7\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638406810806-e429e00e-78d1-42e2-ab92-c3a53f8c2fa9.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=270&amp;id=uc3415ba1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=387&amp;originWidth=1291&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=191628&amp;status=done&amp;style=none&amp;taskId=uee2f50b0-7b80-4d38-9c1b-25806445f5f&amp;title=&amp;width=900.9896240234375\" width=\"1291\" id=\"tFgNi\" class=\"ne-image\"></p><p id=\"u73fbd331\" class=\"ne-p\"><br></p><h3 id=\"f71f343d\"><span class=\"ne-text\">交换机的类型</span></h3><p id=\"ufcff41c1\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ud837129c\"><span class=\"ne-text\">直接（direct）== 路由类型</span></li></ul><ul class=\"ne-ul\"><li id=\"u3a192338\"><span class=\"ne-text\">主题（topic）</span></li></ul><ul class=\"ne-ul\"><li id=\"u181beacc\"><span class=\"ne-text\">标题（headers）（企业不常用）</span></li></ul><ul class=\"ne-ul\"><li id=\"ude1c64c5\"><span class=\"ne-text\">扇出（fanout）== 发布订阅类型</span></li></ul><ul class=\"ne-ul\"><li id=\"ubc65d5ac\"><span class=\"ne-text\">无名类型（默认类型），通常用空串进行识别</span></li></ul><p id=\"u7841bf48\" class=\"ne-p\"><br></p><p id=\"uabda8adb\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407294007-f1bd9624-be98-4b90-ba72-9c29d88c326d.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=76&amp;id=u21ac6756&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=76&amp;originWidth=987&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=103665&amp;status=done&amp;style=none&amp;taskId=u47150f74-3b3b-4cc4-befe-f25d9650214&amp;title=&amp;width=987\" width=\"987\" id=\"KlfHY\" class=\"ne-image\"></p><p id=\"uefca42b0\" class=\"ne-p\"><br></p><h3 id=\"192ebf07\"><span class=\"ne-text\">临时队列</span></h3><p id=\"u759723a3\" class=\"ne-p\"><br></p><p id=\"ua828dd89\" class=\"ne-p\"><span class=\"ne-text\">不带有持久化，一旦断开消费者的连接，队列将被自动删除。<br /></span><span class=\"ne-text\"></span></p><p id=\"u117c1c40\" class=\"ne-p\"><br></p><p id=\"udc7c1eb9\" class=\"ne-p\"><span class=\"ne-text\">创建临时队列：</span></p><p id=\"uc7d27537\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"493f5cb2\" class=\"ne-codeblock language-java\">String queueName = channel.queueDeclare().getQueue();</pre><p id=\"uf4a72fb6\" class=\"ne-p\"><br></p><p id=\"u0810dd91\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638407906977-786b78e8-bfba-4cab-9aee-9ac7ec38a884.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=278&amp;id=u31ce7deb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=410&amp;originWidth=1086&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55531&amp;status=done&amp;style=none&amp;taskId=ub3aa0ca4-c823-418b-b8c7-0b7fbd67333&amp;title=&amp;width=736.9896240234375\" width=\"1086\" id=\"T0K86\" class=\"ne-image\"></p><p id=\"u186f5254\" class=\"ne-p\"><br></p><h3 id=\"f4f12c7a\"><span class=\"ne-text\">绑定</span></h3><p id=\"u3f311869\" class=\"ne-p\"><br></p><p id=\"u06749896\" class=\"ne-p\"><span class=\"ne-text\">就是交换机与队列之间的捆绑关系。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408143523-d4c904d9-33e5-46bd-ad67-885e78b4c34b.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=637&amp;id=u8140e36d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=637&amp;originWidth=487&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26522&amp;status=done&amp;style=none&amp;taskId=ua5ea4c46-36c5-4183-aefe-f6a3f676385&amp;title=&amp;width=487\" width=\"487\" id=\"fwITJ\" class=\"ne-image\"></p><p id=\"u2f756d95\" class=\"ne-p\"><br></p><h3 id=\"b3f97d74\"><span class=\"ne-text\">发布订阅模式（扇出模式 fanout）</span></h3><p id=\"u60ac1fb4\" class=\"ne-p\"><br></p><p id=\"u47c5c857\" class=\"ne-p\"><span class=\"ne-text\">类似广播，两个 routingkey 相同<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638408427104-577b627a-521a-4d94-89be-5bf0102440ea.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=218&amp;id=u3ae99c2f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=292&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=205919&amp;status=done&amp;style=none&amp;taskId=ufe252eb8-02f2-410e-8b74-b8d091c0d4a&amp;title=&amp;width=894\" width=\"1200\" id=\"PeGnm\" class=\"ne-image\"></p><p id=\"u34a7c050\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ua058bafa\"><span class=\"ne-text\">生产者</span></li></ol><p id=\"u527d2fcd\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"064b8440\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class EmitLog {\n    public static final String EXCHANGE_NAME = &quot;logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(&quot;生产者发出消息：&quot; + message);\n        }\n    }\n}</pre><p id=\"ube6bfff0\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u9725dfb0\"><span class=\"ne-text\">两个消费者</span></li></ol><p id=\"u2a01f03c\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"4ebe62a0\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs01 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = &quot;logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, &quot;&quot;);\n        System.out.println(&quot;等待接收消息，把接收的消息打印在屏幕上。。。。&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;ReceiveLogs01控制台接收到消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag-&gt;{});\n    }\n}</pre><p id=\"u7d8e0aa1\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"bd022965\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.five;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:35\n */\npublic class ReceiveLogs02 {\n    //交换机的名称\n    public static final String EXCHANGE_NAME = &quot;logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);\n        //声明一个队列  临时队列 (生成一个临时队列，队列的名称是随机的，当消费者断开与队列的连接的时候，队列就自动删除)\n        String queueName = channel.queueDeclare().getQueue();\n        //绑定交换机与队列\n        channel.queueBind(queueName, EXCHANGE_NAME, &quot;&quot;);\n        System.out.println(&quot;等待接收消息，把接收的消息打印在屏幕上。。。。&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;ReceiveLogs02控制台接收到消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(queueName, true,  deliverCallback,consumerTag-&gt;{});\n    }\n}</pre><p id=\"ub0920585\" class=\"ne-p\"><br></p><p id=\"u9415957b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410904168-80b297c1-26ef-4ee4-815c-065abea79bd2.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=328&amp;id=u29891926&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=328&amp;originWidth=580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28269&amp;status=done&amp;style=none&amp;taskId=u6700fa8b-9b2f-4717-91cf-0dfb20b528b&amp;title=&amp;width=580\" width=\"580\" id=\"Jf7Cl\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410913426-c4d1faa3-7b8b-478c-ba35-665d73e98e8b.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=248&amp;id=ua55ed718&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=248&amp;originWidth=528&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34020&amp;status=done&amp;style=none&amp;taskId=u415b65a3-7d21-4e16-a1a0-a15d7f3c4ca&amp;title=&amp;width=528\" width=\"528\" id=\"HNmyl\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638410920504-2f4c6248-02a0-4765-8647-4c8ab63551e1.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=255&amp;id=u9c537a4f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=255&amp;originWidth=517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35282&amp;status=done&amp;style=none&amp;taskId=u97bfb701-f8bd-45ca-ac41-6f8259d9775&amp;title=&amp;width=517\" width=\"517\" id=\"BBNfG\" class=\"ne-image\"></p><p id=\"u64f3af66\" class=\"ne-p\"><br></p><h3 id=\"a7c987c4\"><span class=\"ne-text\">直接交换机（路由模式 direct）</span></h3><p id=\"u6628277e\" class=\"ne-p\"><br></p><p id=\"uc914fe9f\" class=\"ne-p\"><span class=\"ne-text\">两个 routingkey 不相同<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638411099834-bf80fb1d-473a-4a01-8553-e47ee2cd3670.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=303&amp;id=ueba6aa41&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=303&amp;originWidth=874&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98369&amp;status=done&amp;style=none&amp;taskId=u2145da18-8429-4959-ab30-43bcc28bb61&amp;title=&amp;width=874\" width=\"874\" id=\"t5eGH\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">可以多重绑定。<br /></span><strong><span class=\"ne-text\">生产者发消息给队列，直接交换机通过不同 routingkey 路由到相应的队列，然后消费者接收指定日志。</span></strong></p><p id=\"u3ab1ef95\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"uf3812b97\"><span class=\"ne-text\">发消息</span></li></ol><p id=\"u7dffc5fc\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2a901417\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 9:59\n * 发消息：交换机\n */\npublic class DirectLogs {\n    public static final String EXCHANGE_NAME = &quot;direct_logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            String message = scanner.next();\n            channel.basicPublish(EXCHANGE_NAME, &quot;error&quot;, null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(&quot;生产者发出消息：&quot; + message);\n        }\n    }\n}</pre><p id=\"uf9ac8eab\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ufe981695\"><span class=\"ne-text\">接收消息</span></li></ol><p id=\"uca90e43f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"fc2f4488\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect01 {\n    public static final String EXCHANGE_NAME = &quot;direct_logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(&quot;console&quot;,false,false,false,null);\n        channel.queueBind(&quot;console&quot;,EXCHANGE_NAME,&quot;info&quot;);\n        channel.queueBind(&quot;console&quot;,EXCHANGE_NAME,&quot;warning&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;ReceiveLogs01控制台接收到消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(&quot;console&quot;, true,  deliverCallback,consumerTag-&gt;{});\n\n    }\n}</pre><p id=\"u1cc8d4b5\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"d5727d5b\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.six;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 10:15\n */\npublic class ReceiveLogsDirect02 {\n    public static final String EXCHANGE_NAME = &quot;direct_logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明一个交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);\n        //声明一个队列\n        channel.queueDeclare(&quot;disk&quot;,false,false,false,null);\n        channel.queueBind(&quot;disk&quot;,EXCHANGE_NAME,&quot;error&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;ReceiveLogs02控制台接收到消息：&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(&quot;disk&quot;, true,  deliverCallback,consumerTag-&gt;{});\n\n    }\n}</pre><p id=\"uab85209b\" class=\"ne-p\"><br></p><p id=\"u1a362bc4\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413931242-2c3ef4c2-f3e6-4e6e-ba39-5437dad24d40.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=182&amp;id=u9de2b784&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=182&amp;originWidth=630&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21691&amp;status=done&amp;style=none&amp;taskId=u7cd93b89-df35-4f94-aa33-6626b0dc70b&amp;title=&amp;width=630\" width=\"630\" id=\"eyPPs\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638413948375-568b73ae-0203-4f53-9a9b-528667192aa2.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=182&amp;id=uc8400be0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=182&amp;originWidth=683&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24900&amp;status=done&amp;style=none&amp;taskId=u38d71d59-3dd8-4324-9fae-335fd043524&amp;title=&amp;width=683\" width=\"683\" id=\"U0kJT\" class=\"ne-image\"></p><p id=\"u154435a1\" class=\"ne-p\"><br></p><h3 id=\"c4e17e43\"><span class=\"ne-text\">主题交换机（Topic）</span></h3><p id=\"ubdbf1ba0\" class=\"ne-p\"><br></p><p id=\"ucae3280a\" class=\"ne-p\"><span class=\"ne-text\">规范：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638414479059-98f3dc8e-ee99-4093-b2cb-81eaecec9acb.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=226&amp;id=u34e92b6a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=226&amp;originWidth=834&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170475&amp;status=done&amp;style=none&amp;taskId=ue217ff8b-9da9-493e-9a4b-07c6ab22bab&amp;title=&amp;width=834\" width=\"834\" id=\"KCIOt\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415621949-8c1e4089-881d-482e-a377-ab7f224a2c92.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=257&amp;id=u76cf3ab8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=257&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=151366&amp;status=done&amp;style=none&amp;taskId=u98d7748e-2fc6-4df3-a740-cae3ba06db9&amp;title=&amp;width=801\" width=\"801\" id=\"HeQJL\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415680787-e95ef7a6-bec4-44b3-8e45-1e0c4adac6f7.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=350&amp;id=u280d2c9d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=350&amp;originWidth=829&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=181864&amp;status=done&amp;style=none&amp;taskId=u67807a72-c793-4b0b-a14e-e6270164016&amp;title=&amp;width=829\" width=\"829\" id=\"ZuvJl\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638415855921-8e2750b0-e5df-4b1c-90a3-7e3f696543d6.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=188&amp;id=uf97e55b4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=188&amp;originWidth=920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=178229&amp;status=done&amp;style=none&amp;taskId=ufb1118a1-0b9d-4a97-bd09-0ff626585f5&amp;title=&amp;width=920\" width=\"920\" id=\"iZC7I\" class=\"ne-image\"></p><p id=\"u5bf7d3d8\" class=\"ne-p\"><br></p><h3 id=\"36d4697d\"><span class=\"ne-text\">主题交换机（实战）</span></h3><p id=\"ub70d80a5\" class=\"ne-p\"><br></p><p id=\"uca5a3ec7\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638416303199-5f9e655c-c5c2-4a16-9d12-ba873c31c8e6.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=331&amp;id=u07108cc7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=331&amp;originWidth=1114&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=231103&amp;status=done&amp;style=none&amp;taskId=ud57ef875-e371-4fa6-980a-20a29a7366e&amp;title=&amp;width=1114\" width=\"1114\" id=\"zgYBJ\" class=\"ne-image\"></p><p id=\"u71bf4d07\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ub54f7556\"><span class=\"ne-text\">消费者</span></li></ol><p id=\"u39a550d2\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"1860808d\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * &lt;p&gt;\n * 消费者 C2\n */\npublic class ReceiveLogsTopic01 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = &quot;topic_logs&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;);\n        //声明队列\n        String queueName = &quot;Q1&quot;;\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, &quot;*.orange.*&quot;);\n        System.out.println(&quot;等待接收消息。。。。。&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(&quot;接收队列：&quot; + queueName + &quot;绑定键：&quot; + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -&gt; {\n        });\n    }\n\n}</pre><p id=\"ucf8d429e\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"6972b59b\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 11:37\n * 声明主题交换机  及相关队列\n * &lt;p&gt;\n * 消费者 C2\n */\npublic class ReceiveLogsTopic02 {\n    //交换机名称\n    public static final String EXCHANGE_NAME = &quot;topic_logs&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明交换机\n        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;);\n        //声明队列\n        String queueName = &quot;Q2&quot;;\n        channel.queueDeclare(queueName, false, false, false, null);\n        //交换机绑定 routingkey\n        channel.queueBind(queueName, EXCHANGE_NAME, &quot;*.*.rabbit&quot;);\n        channel.queueBind(queueName, EXCHANGE_NAME, &quot;lazy.#&quot;);\n        System.out.println(&quot;等待接收消息。。。。。&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(new String(message.getBody(), StandardCharsets.UTF_8));\n            System.out.println(&quot;接收队列：&quot; + queueName + &quot;绑定键：&quot; + message.getEnvelope().getRoutingKey());\n        };\n        //接收消息\n        channel.basicConsume(queueName, true, deliverCallback, consumerTag -&gt; {\n        });\n    }\n\n}</pre><p id=\"ubd93dfb6\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u9e924b7c\"><span class=\"ne-text\">生产者</span></li></ol><p id=\"u9a490197\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"56e802f3\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.seven;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.spec.ECField;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 14:45\n * 生产者\n */\npublic class EmitLogTopic {\n    public static final String EXCHANGE_NAME = &quot;topic_logs&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 下图绑定关系如下：\n         * Q1--&gt; 绑定的是： 中间带3个单词的字符串（*.orange*）\n         * Q2--&gt; 绑定的是： 最后一个单词是rabbit的3个单词（*.*.rabbit）\n         *                第一个单词是lazy的多个单词（lazy.#）\n         */\n        Map&lt;String, String&gt; bindingKeyMap = new HashMap&lt;&gt;();\n        bindingKeyMap.put(&quot;quick.orange.rabbit&quot;, &quot;被队列Q1Q2接收到&quot;);\n        bindingKeyMap.put(&quot;lazy.orange.elephant&quot;, &quot;被队列Q1Q2接收到&quot;);\n        bindingKeyMap.put(&quot;lazy.pink.rabbit&quot;, &quot;被队列Q1接收到&quot;);\n        bindingKeyMap.put(&quot;quick.brown.fox&quot;, &quot;被队列Q2接收到&quot;);\n        bindingKeyMap.put(&quot;quick.orange.male.rabbit&quot;, &quot;虽然满足两个绑定但只被队列Q2接收一次&quot;);\n        bindingKeyMap.put(&quot;quick.brown.fox&quot;, &quot;不匹配任何绑定不会被任何队列接收到会被丢弃&quot;);\n        bindingKeyMap.put(&quot;lazy.orange.male.rabbit&quot;, &quot;是四个单词不匹配任何绑定定会丢弃&quot;);\n        bindingKeyMap.put(&quot;lazy.orange.male.rabbit&quot;, &quot;是四个单词但匹配Q2&quot;);\n\n        for (Map.Entry&lt;String, String&gt; bindingKeyEntry : bindingKeyMap.entrySet()) {\n            String routingKey = bindingKeyEntry.getKey();\n            String message = bindingKeyEntry.getValue();\n            channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(&quot;生产者发出消息&quot; + message);\n        }\n    }\n}</pre><p id=\"u2545c488\" class=\"ne-p\"><br></p><p id=\"u8f7b2119\" class=\"ne-p\"><span class=\"ne-text\">先启动消费者，再启动生产者。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430253833-e55a9ffe-37a0-4c04-b7b7-093a65480f71.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=540&amp;id=u94f62b22&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=540&amp;originWidth=683&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63817&amp;status=done&amp;style=none&amp;taskId=u846aee7e-23e7-429c-8c68-098657667fa&amp;title=&amp;width=683\" width=\"683\" id=\"r1tul\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430292235-0a8fd8ca-fdd9-4f2e-9a52-de2398da4db4.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=548&amp;id=u5b1d2810&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=548&amp;originWidth=649&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60902&amp;status=done&amp;style=none&amp;taskId=uf769df3d-232c-4803-866e-9b789b65799&amp;title=&amp;width=649\" width=\"649\" id=\"p0vbD\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430299720-f401248d-7efc-425f-aff1-59f8cda3349d.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=257&amp;id=u7c6af404&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=257&amp;originWidth=674&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33728&amp;status=done&amp;style=none&amp;taskId=u0e4568aa-d243-4696-a1eb-02eebf586cf&amp;title=&amp;width=674\" width=\"674\" id=\"Axrk6\" class=\"ne-image\"></p><p id=\"u8c98ba91\" class=\"ne-p\"><br></p><h2 id=\"3dead64c\"><span class=\"ne-text\">死信队列</span></h2><p id=\"u1870ddac\" class=\"ne-p\"><br></p><p id=\"ub7284874\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430356782-4196f6b8-209f-489a-a5e5-e61974e711ef.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=299&amp;id=ud95905f1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=299&amp;originWidth=1069&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=430772&amp;status=done&amp;style=none&amp;taskId=ue469e4ea-c3e9-44f2-a5e6-4ac2443deba&amp;title=&amp;width=1069\" width=\"1069\" id=\"ZL2Da\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430504276-84f3e02c-d80f-4fe9-9b9a-b8d9ac3b8290.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=298&amp;id=u8670c10d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=298&amp;originWidth=643&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=162345&amp;status=done&amp;style=none&amp;taskId=ue72cf50e-a8d2-4f86-8a8f-e35ebf10e89&amp;title=&amp;width=643\" width=\"643\" id=\"rBdXQ\" class=\"ne-image\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638430601814-eb3112b8-d77b-4213-ad2c-df3c394a36b7.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=553&amp;id=ufda1712c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=553&amp;originWidth=1136&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=162361&amp;status=done&amp;style=none&amp;taskId=u55e88e2a-dc14-44b5-9eb9-8663773f317&amp;title=&amp;width=1136\" width=\"1136\" id=\"pQqf7\" class=\"ne-image\"></p><p id=\"uad6c0443\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"uc3ccb3d3\"><span class=\"ne-text\">消费者 1：</span></li></ul><p id=\"u3530fd70\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"6b32ccf8\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者1\n */\npublic class Consumer01 {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = &quot;normal_exchange&quot;;\n    //死信队列的名称\n    public static final String DEAD_EXCHANGE = &quot;dead_exchange&quot;;\n    //普通队列的名称\n    public static final String NORMAL_QUEUE = &quot;normal_queue&quot;;\n    //死信队列的名称\n    public static final String DEAD_QUEUE = &quot;dead_queue&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明死信和普通交换机， 类型为direct\n        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);\n        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);\n        //声明普通队列\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();\n        //过期时间\n//        arguments.put(&quot;x-message-ttl&quot;,10000);\n        //正常队列设置死信交换机\n        arguments.put(&quot;x-dead-letter-exchange&quot;, DEAD_EXCHANGE);\n        //设置死信RoutingKey\n        arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;lisi&quot;);\n        //设置正常队列的长度的限制\n//        arguments.put(&quot;x-max-length&quot;, 19);\n        channel.queueDeclare(NORMAL_QUEUE, false, false, false, arguments);\n        ///////////////////////////////////////////////////\n        //声明死信队列\n        channel.queueDeclare(DEAD_QUEUE, false, false, false, null);\n        //交换机与队列绑定\n        //绑定普通交换机与普通队列\n        channel.queueBind(NORMAL_QUEUE, NORMAL_EXCHANGE, &quot;zhangsan&quot;);\n        //绑定死信交换机与死信队列\n        channel.queueBind(DEAD_QUEUE, DEAD_EXCHANGE, &quot;lisi&quot;);\n        System.out.println(&quot;等待接收消息.........&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            String msg = new String(message.getBody(), StandardCharsets.UTF_8);\n            if (msg.equals(&quot;info5&quot;)) {\n                System.out.println(&quot;此消息被C1拒绝的&quot; + msg);\n                //拒绝此消息，并且不放回队列中。因此成为死信\n                channel.basicReject(message.getEnvelope().getDeliveryTag(), false);\n            } else {\n                System.out.println(&quot;Consumer01接收的消息&quot; + msg);\n                //不批量应答\n                channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n            }\n        };\n        //开启手动应答（如果不开启手动应答，就不存在拒绝了）\n        channel.basicConsume(NORMAL_QUEUE, false, deliverCallback, consumerTag -&gt; {\n        });\n    }\n}</pre><p id=\"u435ef8b3\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u991e0c89\"><span class=\"ne-text\">消费者 2：</span></li></ul><p id=\"ufa7c436f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"0aee91a1\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 15:40\n * 死信队列\n * 消费者2\n */\npublic class Consumer02 {\n    //死信队列的名称\n    public static final String DEAD_QUEUE = &quot;dead_queue&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        System.out.println(&quot;等待接收消息.........&quot;);\n        //接收消息\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(&quot;Consumer02接收的消息&quot; + new String(message.getBody(), StandardCharsets.UTF_8));\n        };\n        channel.basicConsume(DEAD_QUEUE, false, deliverCallback, consumerTag -&gt; {\n\n        });\n    }\n}</pre><p id=\"ud595d97e\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u2bd56aa9\"><span class=\"ne-text\">生产者：</span></li></ul><p id=\"u44801151\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"1656143b\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = &quot;normal_exchange&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(&quot;10000&quot;).build();\n        for (int i = 1; i &lt; 11; i++) {\n            String message = &quot;info&quot; + i;\n            channel.basicPublish(NORMAL_EXCHANGE, &quot;zhangsan&quot;, properties, message.getBytes());\n        }\n    }\n}</pre><p id=\"u6e029386\" class=\"ne-p\"><br></p><p id=\"u5a3eb9d2\" class=\"ne-p\"><span class=\"ne-text\">测试步骤：</span></p><p id=\"uba408812\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u835dcc9d\"><span class=\"ne-text\">运行消费者：会发现普通和死信交换机已经绑定各自的队列。</span></li></ol><p id=\"u058f5168\" class=\"ne-p\"><br></p><p id=\"u9ebcebd9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445377947-e4a087d0-b755-4178-aa6d-7ae082107bb0.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=495&amp;id=ud91030e8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=495&amp;originWidth=541&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23775&amp;status=done&amp;style=none&amp;taskId=u8f85c23d-a811-41b4-a478-a20609fc50a&amp;title=&amp;width=541\" width=\"541\" id=\"xwjE9\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638445475857-ba40932b-588f-43d3-b3a6-5f2660bcd241.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=498&amp;id=ub28b2410&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=498&amp;originWidth=601&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25129&amp;status=done&amp;style=none&amp;taskId=u8de3a461-08ce-49b9-9936-e0cf7fa1363&amp;title=&amp;width=601\" width=\"601\" id=\"Jcymv\" class=\"ne-image\"></p><p id=\"u62f48d77\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u09f241e0\"><span class=\"ne-text\">测试</span><strong><span class=\"ne-text\">队列达到最大长度</span></strong><span class=\"ne-text\">，关闭消费者 1 和 2，开启生产者：消息会积压在队列中，消费者 1 所在的普通队列消息限制有 6 条，剩下的 4 条会进入消费者 2 所在的死信队列。如下图所示：</span></li></ol><p id=\"u9dbb6efd\" class=\"ne-p\"><br></p><p id=\"ud3960aab\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638448087379-8c4e5c46-39ca-49fd-8024-4111b0a5d431.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=571&amp;id=u9eb9c88a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=571&amp;originWidth=1083&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=79389&amp;status=done&amp;style=none&amp;taskId=ua5f78b60-fd26-4cb8-9cf8-f0e0f17270b&amp;title=&amp;width=1083\" width=\"1083\" id=\"s5bzi\" class=\"ne-image\"></p><p id=\"ue98b05db\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"uc5b05a1e\"><span class=\"ne-text\">取消普通队列的最大长度限制，测试</span><strong><span class=\"ne-text\">消息 ttl 过期</span></strong><span class=\"ne-text\">：关闭消费者 1 和 2，开启生产者发送消息。（消息会因为没人接收，会在 ttl 时间内积压在普通队列中， ttl 过期后，消息会进入死信队列中。）</span></li></ol><p id=\"u66bade46\" class=\"ne-p\"><br></p><p id=\"u12585112\" class=\"ne-p\"><span class=\"ne-text\">生产者：</span></p><p id=\"u60d2c488\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"1656143b-1\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.eight;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 16:13\n * 死信队列-生产者\n */\npublic class Producer {\n    //普通交换机的名称\n    public static final String NORMAL_EXCHANGE = &quot;normal_exchange&quot;;\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        Channel channel = RabbitMqUtils.getChannel();\n        //死信时间  设置ttl时间\n        AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(&quot;10000&quot;).build();\n        for (int i = 1; i &lt; 11; i++) {\n            String message = &quot;info&quot; + i;\n            channel.basicPublish(NORMAL_EXCHANGE, &quot;zhangsan&quot;, properties, message.getBytes());\n        }\n    }\n}</pre><p id=\"ufcc5276d\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"u3643f27c\"><span class=\"ne-text\">测试</span><strong><span class=\"ne-text\">消息被拒</span></strong><span class=\"ne-text\">：</span></li></ol><p id=\"u1325a418\" class=\"ne-p\"><br></p><p id=\"u1e4cfe0d\" class=\"ne-p\"><span class=\"ne-text\">开启消费者 1 和 2，再开启生产者。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450659287-e191b69a-07c6-4d5e-8f54-05d22263a235.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=274&amp;id=u03d42d3b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=274&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32103&amp;status=done&amp;style=none&amp;taskId=uf69d66f1-feae-4ff6-83ca-af7f8a83127&amp;title=&amp;width=642\" width=\"642\" id=\"jR4qW\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450668535-06aa1842-3563-455e-bb20-6376694fae1f.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=202&amp;id=u33f7f3ac&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=202&amp;originWidth=616&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23460&amp;status=done&amp;style=none&amp;taskId=ua7a303f7-25d6-4fc0-8d46-d522a51ded6&amp;title=&amp;width=616\" width=\"616\" id=\"vAYSS\" class=\"ne-image\"></p><p id=\"u56fa6a3a\" class=\"ne-p\"><br></p><h2 id=\"38e2258c\"><span class=\"ne-text\">延迟队列（基于死信队列）</span></h2><p id=\"uaeb50e00\" class=\"ne-p\"><br></p><p id=\"uce6f04f4\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638450862631-363c8d24-6a72-463a-b827-201e6f79cb79.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=128&amp;id=u8aa7212b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=128&amp;originWidth=1081&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=190603&amp;status=done&amp;style=none&amp;taskId=ue97c71c8-4947-4c82-be00-e98e36ba920&amp;title=&amp;width=1081\" width=\"1081\" id=\"xrjpE\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638451047144-5f4983f1-3a0e-472b-95f3-26635a911749.png#clientId=u268c19fe-902d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=399&amp;id=ud5620b6f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=399&amp;originWidth=869&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=265988&amp;status=done&amp;style=none&amp;taskId=ub1f53a1e-1377-4e43-ab1d-13e29cf4118&amp;title=&amp;width=869\" width=\"869\" id=\"O4W2R\" class=\"ne-image\"></p><p id=\"u003e5655\" class=\"ne-p\"><br></p><h3 id=\"5bff6472\"><span class=\"ne-text\">整合 SpringBoot</span></h3><p id=\"ua9246d88\" class=\"ne-p\"><br></p><p id=\"u17c7855e\" class=\"ne-p\"><br></p><p id=\"u37d8ad14\" class=\"ne-p\"><br></p><h4 id=\"73ad366e\"><span class=\"ne-text\">实现延迟队列：</span></h4><p id=\"u50e8e4bb\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ue7753788\"><span class=\"ne-text\">依赖：</span></li></ol><p id=\"u3122c714\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"73700fd7\" class=\"ne-codeblock language-java\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.6.1&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.atguigu.rabbitmq&lt;/groupId&gt;\n    &lt;artifactId&gt;springboot-rabbitmq&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;springboot-rabbitmq&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;\n            &lt;version&gt;2.6.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;\n        &lt;!--web服务器，可以自启动--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.6.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--快速进行json转换--&gt;\n        &lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;1.2.78&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n            &lt;version&gt;3.0.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n            &lt;version&gt;3.0.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework.amqp/spring-rabbit-test --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-rabbit-test&lt;/artifactId&gt;\n            &lt;version&gt;2.4.0&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.22&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;</pre><p id=\"uc2b4899d\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u1245e541\"><span class=\"ne-text\">yml 配置文件：</span></li></ol><p id=\"u73830d88\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"c4ed4d31\" class=\"ne-codeblock language-java\">spring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123</pre><p id=\"uc99c78c6\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u7aebac69\"><span class=\"ne-text\">swagger 配置类：</span></li></ol><p id=\"u0ccd9e4c\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"e6248552\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.context.annotation.Bean;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/2 22:34\n */\npublic class SwaggerConfig {\n    @Bean\n    public Docket webApiConfig() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .groupName(&quot;webApi&quot;)\n                .apiInfo(webApiInfo())\n                .select()\n                .build();\n    }\n\n    private ApiInfo webApiInfo() {\n        return new ApiInfoBuilder()\n                .title(&quot;rabbitmq  接口文档&quot;)\n                .description(&quot; 本文档描述了 rabbitmq  微服务接口定义&quot;)\n                .version(&quot;1.0&quot;)\n                .contact(new Contact(&quot;enjoy6288&quot;, &quot;http://atguigu.com&quot;,\n                        &quot;1846015350@qq.com&quot;))\n                .build();\n    }\n}</pre><p id=\"u5da333d3\" class=\"ne-p\"><br></p><p id=\"u737ba50b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638490298754-a2b1ced5-676b-4f68-86e0-31f05266088f.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=215&amp;id=u8ba627f6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=215&amp;originWidth=1100&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=132048&amp;status=done&amp;style=none&amp;taskId=ud9c3f28a-b8df-44d1-b9df-dc90c70e046&amp;title=&amp;width=1100\" width=\"1100\" id=\"Iv7m8\" class=\"ne-image\"></p><p id=\"u13d19082\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"uce104d61\"><span class=\"ne-text\">声明队列配置文件：</span></li></ol><p id=\"u0de2ea78\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"34c7bc48\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:15\n * TTL队列，  配置文件类代码\n */\n@Configuration\npublic class TtlQueueConfig {\n    //普通交换机的名称\n    public static final String X_EXCHANGE = &quot;X&quot;;\n    //死信交换机的名称\n    public static final String Y_DEAD_LETTER_EXCHANGE = &quot;Y&quot;;\n    //普通队列的名称\n    public static final String QUEUE_A = &quot;QA&quot;;\n    public static final String QUEUE_B = &quot;QB&quot;;\n    //死信队列的名称\n    public static final String DEAD_LETTER_QUEUE = &quot;QD&quot;;\n\n    //声明xExchange 别名\n    @Bean(&quot;xExchange&quot;)\n    public DirectExchange xExchange() {\n        return new DirectExchange(X_EXCHANGE);\n    }\n\n    @Bean(&quot;yExchange&quot;)\n    public DirectExchange yExchange() {\n        return new DirectExchange(Y_DEAD_LETTER_EXCHANGE);\n    }\n\n    //声明普通队列  ttl为10s\n    @Bean(&quot;queueA&quot;)\n    public Queue queueA() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;(3);\n        //设置死信交换机\n        arguments.put(&quot;x-dead-letter-exchange&quot;, Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;YD&quot;);\n        //设置ttl  单位为ms\n        arguments.put(&quot;x-message-ttl&quot;, 10000);\n        return QueueBuilder.durable(QUEUE_A).withArguments(arguments).build();\n    }\n\n    //声明普通队列  ttl为40s\n    @Bean(&quot;queueB&quot;)\n    public Queue queueB() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;(3);\n        //设置死信交换机\n        arguments.put(&quot;x-dead-letter-exchange&quot;, Y_DEAD_LETTER_EXCHANGE);\n        //设置死信 routing-key\n        arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;YD&quot;);\n        //设置ttl  单位为ms\n        arguments.put(&quot;x-message-ttl&quot;, 40000);\n        return QueueBuilder.durable(QUEUE_B).withArguments(arguments).build();\n    }\n\n    //死信队列\n    @Bean(&quot;queueD&quot;)\n    public Queue queueD() {\n        return QueueBuilder.durable(DEAD_LETTER_QUEUE).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueABindingX(@Qualifier(&quot;queueA&quot;) Queue queueA, @Qualifier(&quot;xExchange&quot;) DirectExchange xExchange) {\n        return BindingBuilder.bind(queueA).to(xExchange).with(&quot;XA&quot;);\n    }\n\n    @Bean\n    public Binding queueBBindingX(@Qualifier(&quot;queueB&quot;) Queue queueB, @Qualifier(&quot;xExchange&quot;) DirectExchange xExchange) {\n        return BindingBuilder.bind(queueB).to(xExchange).with(&quot;XB&quot;);\n    }\n\n    @Bean\n    public Binding queueDBindingY(@Qualifier(&quot;queueD&quot;) Queue queueD, @Qualifier(&quot;yExchange&quot;) DirectExchange yExchange) {\n        return BindingBuilder.bind(queueD).to(yExchange).with(&quot;YD&quot;);\n    }\n}</pre><p id=\"u7e4c585b\" class=\"ne-p\"><br></p><ol start=\"5\" class=\"ne-ol\"><li id=\"u9edbfaeb\"><span class=\"ne-text\">消费者：接收消息</span></li></ol><p id=\"u938e6661\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2d9d521e\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 9:01\n * 队列ttl 消费者\n */\n@Slf4j\n@Component\npublic class DeadLetterQueueConsumer {\n\n    //接收消息\n    @RabbitListener(queues = &quot;QD&quot;)\n    public void receiveD(Message message, Channel channel) {\n        String msg = new String(message.getBody());\n        log.info(&quot;当前时间：{}，收到死信队列的消息：{}&quot;, new Date().toString(), msg);\n    }\n}</pre><p id=\"u5ff8aeb7\" class=\"ne-p\"><br></p><ol start=\"6\" class=\"ne-ol\"><li id=\"uf7ea6cd6\"><span class=\"ne-text\">发送消息：Controller</span></li></ol><p id=\"u4710b98f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"acb0bddc\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 8:47\n * 发送延迟消息\n * &lt;p&gt;\n * http://localhost:8080/ttl/sendMsg/嘻嘻嘻\n */\n@Slf4j\n@RestController\n@RequestMapping(&quot;/ttl&quot;)\npublic class SendMsgController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //开始发消息\n    @GetMapping(&quot;/sendMsg/{message}&quot;)\n    public void sendMsg(@PathVariable String message) {\n        log.info(&quot;当前时间：{}，发送一条消息给两个ttl队列:{}&quot;, new Date().toString(), message);\n        rabbitTemplate.convertAndSend(&quot;X&quot;, &quot;XA&quot;, &quot;消息来自ttl为10s的队列&quot; + message);\n        rabbitTemplate.convertAndSend(&quot;X&quot;, &quot;XB&quot;, &quot;消息来自ttl为40s的队列&quot; + message);\n    }\n}</pre><p id=\"uca8b3875\" class=\"ne-p\"><br></p><p id=\"u436ca17c\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">访问：</span><a href=\"http://localhost:8080/ttl/sendMsg/\" data-href=\"http://localhost:8080/ttl/sendMsg/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">http://localhost:8080/ttl/sendMsg/</span></a><span class=\"ne-text\">嘻嘻嘻<br /></span><span class=\"ne-text\">控制台打印结果：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494307481-a59aaddb-4efb-4200-9e05-0e34602ded36.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=202&amp;id=u66541ef9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=202&amp;originWidth=1365&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62756&amp;status=done&amp;style=none&amp;taskId=ua128108f-eaa5-47fc-ab0d-e56fe3f57f4&amp;title=&amp;width=1365\" width=\"1365\" id=\"tO8el\" class=\"ne-image\"></p><p id=\"uafa127ba\" class=\"ne-p\"><br></p><h4 id=\"5d575387\"><span class=\"ne-text\">延迟队列优化：</span></h4><p id=\"u6257e7bc\" class=\"ne-p\"><br></p><p id=\"uf1945132\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638494906968-c2a2e16a-a5b3-4c44-83bc-5846e35977d0.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=333&amp;id=u5def25ea&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=333&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=169463&amp;status=done&amp;style=none&amp;taskId=uede9888d-c22a-46c9-a810-c9c1899d23a&amp;title=&amp;width=1070\" width=\"1070\" id=\"PCbH9\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">增加一个 QC 普通队列声明后并绑定交换机 XC。<br /></span><span class=\"ne-text\">队列配置 中添加：</span></p><p id=\"u1c33e394\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"a7ebc7ee\" class=\"ne-codeblock language-java\">//--------------------------------优化延迟队列-------------------------------------\n    //普通队列的名称（为了优化延迟队列）\n    public static final String QUEUE_C = &quot;QC&quot;;\n\n    //声明QC\n    @Bean(&quot;queueC&quot;)\n    public Queue queueC() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;(2);\n        //设置死信交换机\n        arguments.put(&quot;x-dead-letter-exchange&quot;, Y_DEAD_LETTER_EXCHANGE);\n        //设置死信routing-key\n        arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;YD&quot;);\n        return QueueBuilder.durable(QUEUE_C).withArguments(arguments).build();\n    }\n\n    //绑定普通队列QC和交换机\n    @Bean\n    public Binding queueCBindingX(@Qualifier(&quot;queueC&quot;) Queue queueC,\n                                  @Qualifier(&quot;xExchange&quot;) DirectExchange xExchange) {\n        return BindingBuilder.bind(queueC).to(xExchange).with(&quot;XC&quot;);\n    }\n    //-----------------------------------优化延迟队列----------------------------------</pre><p id=\"u9bde3c53\" class=\"ne-p\"><br></p><p id=\"u6870970c\" class=\"ne-p\"><span class=\"ne-text\">添加 Controller 发消息控制器：</span></p><p id=\"u69dff3a4\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"37e62688\" class=\"ne-codeblock language-java\">//开始发消息  消息ttl\n    @GetMapping(&quot;/sendExpireMsg/{message}/{ttlTime}&quot;)\n    public void sendMsg(@PathVariable String message, @PathVariable String ttlTime) {\n        log.info(&quot;当前时间：{}，发送一条时长{}毫秒，ttl信息给队列QC:{}&quot;, new Date().toString(), ttlTime, message);\n        rabbitTemplate.convertAndSend(&quot;X&quot;, &quot;XC&quot;, message, msg -&gt; {\n            //发送消息的时候  延迟时长\n            msg.getMessageProperties().setExpiration(ttlTime);\n            return msg;\n        });\n    }</pre><p id=\"uba0c942f\" class=\"ne-p\"><br></p><p id=\"u44e0ad88\" class=\"ne-p\"><span class=\"ne-text\">测试：</span></p><p id=\"u8f450987\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ub256f62c\"><span class=\"ne-text\">http://localhost:8080/ttl/sendExpireMsg/你好 1/20000</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"u25a98c39\"><span class=\"ne-text\">http://localhost:8080/ttl/sendExpireMsg/你好 2/2000</span></li></ol><p id=\"u0b67b6a7\" class=\"ne-p\"><br></p><p id=\"ub6ce48d7\" class=\"ne-p\"><span class=\"ne-text\">结果：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638517312025-dfbbfd0b-a82c-4432-a395-2e7cc7c6e48f.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=149&amp;id=u18e59259&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=149&amp;originWidth=1285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42107&amp;status=done&amp;style=none&amp;taskId=uff6fb06a-df03-451f-b886-52364055048&amp;title=&amp;width=1285\" id=\"efjYm\" class=\"ne-image\"></p><p id=\"u23f2f74f\" class=\"ne-p\"><br></p><h2 id=\"d0cad89d\"><span class=\"ne-text\">延迟队列（基于插件）</span></h2><p id=\"u81531559\" class=\"ne-p\"><br></p><p id=\"ufd1c2e21\" class=\"ne-p\"><span class=\"ne-text\">进入 rabbitmq 安装目录下的 plugins 目录 ，cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins<br /></span><span class=\"ne-text\">执行命令让该插件生效：rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br /></span><span class=\"ne-text\">然后重启 rabbitmq：systemctl restart rabbitmq-server<br /></span><span class=\"ne-text\">会发现交换机多了一个新类型，意味着延迟消息将由交换机来完成，而不是队列。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638519642120-f3258006-3639-4551-805e-26bbd1e67c85.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=530&amp;id=u66b7d498&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=767&amp;originWidth=690&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56472&amp;status=done&amp;style=none&amp;taskId=u707609ca-e368-4b6c-9833-ec8cc57ca15&amp;title=&amp;width=477.00006103515625\" id=\"PD1AH\" class=\"ne-image\"><span class=\"ne-text\"><br /><br /><br /></span><span class=\"ne-text\">原来的情况：基于死信<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520455616-cfcde47e-bee3-4ef6-83b6-6630dbe54d9a.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=443&amp;id=ua9957719&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=601&amp;originWidth=1033&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=226301&amp;status=done&amp;style=none&amp;taskId=ua95f3b09-635a-4782-abfd-57901f34a8b&amp;title=&amp;width=760.9862060546875\" id=\"UOPGa\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">现在：基于延迟插件<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520591056-7591eaf6-b99f-4059-8cbb-6a6ee0ea64f2.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=177&amp;id=u11577081&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=224&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=94107&amp;status=done&amp;style=none&amp;taskId=u47b17a31-4f94-4f3c-a75f-2014f181765&amp;title=&amp;width=770.9896240234375\" id=\"a4gyh\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">代码架构：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638520764180-7b9e927e-1166-470d-ac32-dda16bb87ae1.png#clientId=u7522214d-0203-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=188&amp;id=ud9b4ba5b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=188&amp;originWidth=1062&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84300&amp;status=done&amp;style=none&amp;taskId=u12c568cb-6151-4b2f-8f49-3f721530b6d&amp;title=&amp;width=1062\" id=\"cPAio\" class=\"ne-image\"></p><p id=\"u2537b866\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u54cbff16\"><span class=\"ne-text\">配置类</span></li></ol><p id=\"ucf6f84e6\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"576e3b9e\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 16:41\n */\n@Configuration\npublic class DelayedQueueConfig {\n    //队列\n    public static final String DELAYED_QUEUE_NAME = &quot;delayed.name&quot;;\n    //交换机\n    public static final String DELAYED_EXCHANGE_NAME = &quot;delayed.exchange&quot;;\n    //routing-key\n    public static final String DELAYED_ROUTING_KEY = &quot;delayed.routingkey&quot;;\n\n    //声明队列\n    @Bean\n    public Queue delayedQueue() {\n        return QueueBuilder.durable(DELAYED_QUEUE_NAME).build();\n    }\n\n    //声明交换机 基于插件\n    @Bean\n    public CustomExchange delayedExchange() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();\n        arguments.put(&quot;x-delayed-type&quot;, &quot;direct&quot;);\n        /**\n         * 1. 交换机的名称\n         * 2. 交换机的类型\n         * 3. 是否需要持久化\n         * 4. 是否需要自动删除\n         * 5. 其他的参数\n         */\n        return new CustomExchange(DELAYED_EXCHANGE_NAME, &quot;x-delayed-message&quot;, true, false, arguments);\n    }\n\n    //绑定\n    @Bean\n    public Binding delayedQueueBindingDelayedExchange(@Qualifier(&quot;delayedQueue&quot;) Queue delayedQueue,\n                                                      @Qualifier(&quot;delayedExchange&quot;) CustomExchange delayedExchange) {\n        return BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();\n    }\n}</pre><p id=\"u88264fd1\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ue3e31a7b\"><span class=\"ne-text\">Controller 生产者：</span></li></ol><p id=\"u4fdb5ab5\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"eb8d3858\" class=\"ne-codeblock language-java\">//发消息  基于延迟插件\n    @GetMapping(&quot;/sendDelayMsg/{message}/{delayTime}&quot;)\n    public void sendMsg(@PathVariable String message, @PathVariable Integer delayTime) {\n        log.info(&quot;当前时间:{},发送一条时长{}毫秒信息给延迟队列delayed.queue:{}&quot;, new Date().toString(), delayTime, message);\n        rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME, DelayedQueueConfig.DELAYED_ROUTING_KEY, message, msg -&gt; {\n            //发送消息的时候   延迟时长  单位：ms\n            msg.getMessageProperties().setDelay(delayTime);\n            return msg;\n        });\n    }</pre><p id=\"uaa1f405b\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u4e37ad14\"><span class=\"ne-text\">消费者：</span></li></ol><p id=\"u8e368a72\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"20ede713\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.DelayedQueueConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 19:36\n * 消费者 基于插件的延迟消息\n */\n@Slf4j\n@Component\npublic class DelayQueueConsumer {\n    //监听消息\n    @RabbitListener(queues = DelayedQueueConfig.DELAYED_QUEUE_NAME)\n    public void receiveDelayQueue(Message message) {\n        String msg = new String(message.getBody());\n        log.info(&quot;当前时间:{},收到延迟队列的消息：{}&quot;, new Date().toString(), msg);\n    }\n}</pre><p id=\"uc629c46a\" class=\"ne-p\"><br></p><p id=\"u7f843083\" class=\"ne-p\"><span class=\"ne-text\">测试：<br /></span><span class=\"ne-text\">发起请求：</span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" data-href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span class=\"ne-text\"> on baby1/20000<br /></span><span class=\"ne-text\"> </span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" data-href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span class=\"ne-text\"> on baby2/2000<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532349237-315b969f-d021-4448-8aa8-d5a1d41950a0.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=208&amp;id=uf33e7fe7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=208&amp;originWidth=1432&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=71640&amp;status=done&amp;style=none&amp;taskId=ue722c22b-16d9-40a2-9a28-e95348df5d0&amp;title=&amp;width=1432\" id=\"P79jF\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638532663153-40afab72-d363-4536-94fc-4889e40d764b.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=224&amp;id=u7813c3ed&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=266&amp;originWidth=1121&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=457006&amp;status=done&amp;style=none&amp;taskId=u0e4002d8-2179-43cc-bcfd-7c69cd127b5&amp;title=&amp;width=941.9896240234375\" id=\"aEVGf\" class=\"ne-image\"></p><p id=\"u816be002\" class=\"ne-p\"><br></p><h2 id=\"d338501f\"><span class=\"ne-text\">发布确认高级</span></h2><p id=\"u78a1b073\" class=\"ne-p\"><br></p><p id=\"ue1d328fd\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533419869-3aa9b7ad-ee4e-4fd8-9e42-fd6af4aafe70.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=225&amp;id=u7ed4e098&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=341&amp;originWidth=945&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=186643&amp;status=done&amp;style=none&amp;taskId=uc65852ff-c2a9-416e-bef6-2991c80fa8b&amp;title=&amp;width=623.0000610351562\" id=\"OAmnb\" class=\"ne-image\"><span class=\"ne-text\"> <br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638533456413-9ead4e1d-f118-4a55-8d05-bcdd4d5fc47f.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=131&amp;id=u954992f9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=144&amp;originWidth=839&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73103&amp;status=done&amp;style=none&amp;taskId=u9819bc42-f398-487a-b319-358e2acd1ba&amp;title=&amp;width=762.9931030273438\" id=\"sjopK\" class=\"ne-image\"></p><p id=\"ua0b992e2\" class=\"ne-p\"><br></p><h3 id=\"3f64dd13\"><span class=\"ne-text\">回调接口 : (若交换机收不到消息)</span></h3><p id=\"uc0c6652d\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"uf961977a\"><span class=\"ne-text\">配置类</span></li></ol><p id=\"u1415f6ed\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2a45d705\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = &quot;confirm_exchange&quot;;\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = &quot;confirm_queue&quot;;\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = &quot;key1&quot;;\n\n    //声明交换机\n    @Bean\n    public DirectExchange confirmExchange() {\n        return new DirectExchange(CONFIRM_EXCHANGE_NAME);\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(&quot;confirmQueue&quot;) Queue confirmQueue,\n                                        @Qualifier(&quot;confirmExchange&quot;) DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n}</pre><p id=\"u4ecde0f6\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ua5227561\"><span class=\"ne-text\">生产者：发消息</span></li></ol><p id=\"ub699d97d\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"7ba8c971\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息\n */\n@Slf4j\n@RestController\n@RequestMapping(&quot;/confirm&quot;)\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(&quot;/sendMessage/{message}&quot;)\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData = new CorrelationData(&quot;1&quot;);\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME, ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData);\n        log.info(&quot;发送消息内容为：{}&quot;, message);\n    }\n}</pre><p id=\"ua928c4f5\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"u7b775a6c\"><span class=\"ne-text\">消费者：</span></li></ol><p id=\"ud61ac3f3\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"ee5ae00f\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:33\n * 接收消息\n */\n@Slf4j\n@Component\npublic class Consumer {\n    @RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)\n    public void receiveConfirmMessage(Message message) {\n        String msg = new String(message.getBody());\n        log.info(&quot;接收到的队列confirm.queue消息：{}&quot;, msg);\n    }\n}</pre><p id=\"u04196b83\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"u60a6d2ac\"><span class=\"ne-text\">回调接口</span></li></ol><p id=\"u706addb6\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"b57f810e\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:50\n * 回调接口\n */\n@Slf4j\n@Component\npublic class MyCallBack implements RabbitTemplate.ConfirmCallback {\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n    }\n\n    /**\n     * 交换机确认回调方法\n     * 1. 发消息  交换机接收到了  回调\n     * 1.1 correlationData 保存回调消息的id及相关信息\n     * 1.2 交换机收到消息  ack = true\n     * 1.3 cause  null\n     * 2. 发消息 交换机接收失败 回调\n     * 2.1 correlationData 保存回调消息的id及相关信息\n     * 2.2 交换机收到消息 ack = false\n     * 2.3 cause  失败的原因\n     *\n     * @param correlationData\n     * @param ack\n     * @param cause\n     */\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n        String id = correlationData != null ? correlationData.getId() : &quot;&quot;;\n        if (ack) {\n            log.info(&quot;交换机已经收到id为：{}的消息&quot;, id);\n        } else {\n            log.error(&quot;交换机还未收到id为:{}的消息，由于原因：{}&quot;, id, cause);\n        }\n    }\n}</pre><p id=\"uef78c20d\" class=\"ne-p\"><br></p><p id=\"ua5e09f93\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537772169-a45dc229-e5ed-410a-8e46-69f3fb39f21e.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=518&amp;id=u396acbb1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=518&amp;originWidth=973&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=369736&amp;status=done&amp;style=none&amp;taskId=u8a93ee99-1d87-4fd1-880d-a166a5e50f1&amp;title=&amp;width=973\" id=\"Bk8N5\" class=\"ne-image\"></p><p id=\"u67dd6b93\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"ab4a519d\" class=\"ne-codeblock language-java\">spring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated    # 消息确认机制</pre><p id=\"ub25474b6\" class=\"ne-p\"><br></p><ol start=\"5\" class=\"ne-ol\"><li id=\"ud16eafd0\"><span class=\"ne-text\">发送请求 : http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p id=\"u38416d74\" class=\"ne-p\"><br></p><p id=\"u78e4294b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638537854600-e11783cd-28be-4b75-8f36-434ecab3f990.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=190&amp;id=ue332f12f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=190&amp;originWidth=1135&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51915&amp;status=done&amp;style=none&amp;taskId=uba52e997-898f-49e3-9067-645cfb69f68&amp;title=&amp;width=1135\" id=\"Emijw\" class=\"ne-image\"></p><p id=\"u7221df5d\" class=\"ne-p\"><br></p><ol start=\"6\" class=\"ne-ol\"><li id=\"u9c66e047\"><span class=\"ne-text\">测试交换机收不到消息：在发送消息中，将交换机名字后面拼接上&quot;123&quot;，再次启动，发送请求： http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p id=\"ubcb758d6\" class=\"ne-p\"><br></p><p id=\"u22d07271\" class=\"ne-p\"><span class=\"ne-text\">会得到：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538268620-8dcbc2ae-eaa1-4b60-8822-9cd20f509c52.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=222&amp;id=u3e470d69&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=222&amp;originWidth=1872&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66288&amp;status=done&amp;style=none&amp;taskId=u7f0330f7-a846-488e-8b25-71c1f3cf0a7&amp;title=&amp;width=1872\" id=\"J3ZRH\" class=\"ne-image\"></p><p id=\"uc7e4f269\" class=\"ne-p\"><br></p><ol start=\"7\" class=\"ne-ol\"><li id=\"u8c7d1937\"><span class=\"ne-text\">测试队列收不到消息</span></li></ol><p id=\"u108dd925\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"8e842df0\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.controller;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:27\n * 开始发消息  生产者\n */\n@Slf4j\n@RestController\n@RequestMapping(&quot;/confirm&quot;)\npublic class ProducerController {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    //发消息\n    @GetMapping(&quot;/sendMessage/{message}&quot;)\n    public void sendMessage(@PathVariable String message) {\n        CorrelationData correlationData1 = new CorrelationData(&quot;1&quot;);\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY, message, correlationData1);\n        log.info(&quot;发送消息内容为：{}&quot;, message);\n\n        CorrelationData correlationData2 = new CorrelationData(&quot;2&quot;);\n        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,\n                ConfirmConfig.CONFIRM_ROUTING_KEY+&quot;2&quot;, message, correlationData2);\n        log.info(&quot;发送消息内容为：{}&quot;, message);\n    }\n}</pre><p id=\"u1b20db2a\" class=\"ne-p\"><br></p><p id=\"uce701b63\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638538743381-bfc4680e-692b-4303-a0f3-87cd9425978d.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=247&amp;id=u241a2996&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=247&amp;originWidth=1157&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67266&amp;status=done&amp;style=none&amp;taskId=u3edf7078-e740-4b0a-866c-03de3cfb9db&amp;title=&amp;width=1157\" id=\"SGy2Z\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">可见，队列没有收到消息，也没有应答和确认。</span></p><p id=\"ubbd10bfa\" class=\"ne-p\"><br></p><h3 id=\"9a49228a\"><span class=\"ne-text\">若队列收不到消息</span></h3><p id=\"uf0412cea\" class=\"ne-p\"><br></p><p id=\"u17a29e6c\" class=\"ne-p\"><br></p><p id=\"u18410005\" class=\"ne-p\"><br></p><h4 id=\"7df88dac\"><span class=\"ne-text\">回退消息</span></h4><p id=\"u6d37cd3e\" class=\"ne-p\"><br></p><p id=\"u9d159a4e\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638539584832-557a9bbc-89d4-4162-a0d4-599eb7f3df21.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=210&amp;id=u40b5093d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=210&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=298616&amp;status=done&amp;style=none&amp;taskId=u13a46749-be43-4430-beb2-483ea013efc&amp;title=&amp;width=976\" id=\"thCkG\" class=\"ne-image\"></p><p id=\"uf348cbd9\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9bc2e551\" class=\"ne-codeblock language-java\">spring:\n  rabbitmq:\n    host: 59.110.171.189\n    port: 5672\n    username: admin\n    password: 123\n    publisher-confirm-type: correlated   # 消息确认机制\n    publisher-returns: true       # 发布确认机制（消息在交换机那若路由失败，则会回退消息给生产者）</pre><p id=\"ude0471d2\" class=\"ne-p\"><br></p><p id=\"u4ecdba54\" class=\"ne-p\"><span class=\"ne-text\">回退接口：</span></p><p id=\"ub365cc32\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"0cc635d1\" class=\"ne-codeblock language-java\">//注入\n@PostConstruct\n    public void init() {\n        //注入 （需要将当前实现类注入到RabbitTemplate的ConfirmCallback函数式接口中）\n        rabbitTemplate.setConfirmCallback(this);\n        rabbitTemplate.setReturnsCallback(this);\n    }\n/**\n     * 可以在当消息传递过程中，不可达目的地时将消息返回给生产者\n     * 只有不可到目的地时，才进行回退\n     *\n     * @param returnedMessage\n     */\n    @Override\n    public void returnedMessage(ReturnedMessage returnedMessage) {\n        log.error(&quot;消息{}，被交换机{}退回，退回原因：{},路由key:{}&quot;,\n                new String(returnedMessage.getMessage().getBody()),\n                returnedMessage.getExchange(),\n                returnedMessage.getReplyText(),\n                returnedMessage.getRoutingKey());\n    }</pre><p id=\"u2654fc7c\" class=\"ne-p\"><br></p><p id=\"uf86bf68a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638542234889-03b41ef6-8fc5-4ffb-9f36-7287d4ff9476.png#clientId=u44e4b0cf-fc9d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=267&amp;id=uddd5e8ec&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=267&amp;originWidth=1293&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78730&amp;status=done&amp;style=none&amp;taskId=u4c513758-cf34-415c-a9f3-845a33faec5&amp;title=&amp;width=1293\" id=\"tOHQ4\" class=\"ne-image\"></p><p id=\"uc53a419f\" class=\"ne-p\"><br></p><h4 id=\"2d534732\"><span class=\"ne-text\">备份交换机</span></h4><p id=\"uabcf7a93\" class=\"ne-p\"><br></p><p id=\"u73453e3c\" class=\"ne-p\"><span class=\"ne-text\">添加一个交换机和两个队列。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638578627259-759238ba-aac5-42f9-b645-401c5c9a05d2.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=328&amp;id=ud35a1613&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=328&amp;originWidth=930&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=197049&amp;status=done&amp;style=none&amp;taskId=u04e4ef45-34c3-49a8-84c0-93d70b4ebb6&amp;title=&amp;width=930\" id=\"j2ALj\" class=\"ne-image\"></p><p id=\"udb3c78de\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u2c143d03\"><span class=\"ne-text\">配置类</span></li></ol><p id=\"u7df36999\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"7e31c035\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/3 20:15\n * 配置类  发布确认 （高级）\n */\n@Configuration\npublic class ConfirmConfig {\n    //交换机\n    public static final String CONFIRM_EXCHANGE_NAME = &quot;confirm_exchange&quot;;\n    //队列\n    public static final String CONFIRM_QUEUE_NAME = &quot;confirm_queue&quot;;\n    //routing-key\n    public static final String CONFIRM_ROUTING_KEY = &quot;key1&quot;;\n    // --------------------------备份交换机---------------------------------\n    //备份交换机\n    public static final String BACKUP_EXCHANGE_NAME = &quot;backup_exchange&quot;;\n\n    //备份队列\n    public static final String BACKUP_QUEUE_NAME = &quot;backup_queue&quot;;\n\n    //报警队列\n    public static final String WARNING_QUEUE_NAME = &quot;warning_queue&quot;;\n\n    //--------------------------------------------------------------------\n    //声明确认交换机（要转发到备份交换机）\n    @Bean\n    public DirectExchange confirmExchange() {\n        return ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(true)\n                .withArgument(&quot;alternate-exchange&quot;, BACKUP_EXCHANGE_NAME).build();\n    }\n\n    //声明队列\n    @Bean\n    public Queue confirmQueue() {\n        return QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();\n    }\n\n    //绑定交换机和队列\n    @Bean\n    public Binding queueBindingExchange(@Qualifier(&quot;confirmQueue&quot;) Queue confirmQueue,\n                                        @Qualifier(&quot;confirmExchange&quot;) DirectExchange confirmExchange) {\n        return BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);\n    }\n\n    //备份交换机\n    @Bean\n    public FanoutExchange backupExchange() {\n        return new FanoutExchange(BACKUP_EXCHANGE_NAME);\n    }\n\n    //备份队列\n    @Bean\n    public Queue backupQueue() {\n        return QueueBuilder.durable(BACKUP_QUEUE_NAME).build();\n    }\n\n    //报警队列\n    @Bean\n    public Queue warningQueue() {\n        return QueueBuilder.durable(WARNING_QUEUE_NAME).build();\n    }\n\n    //绑定（备份交换机和备份队列）\n    @Bean\n    public Binding backupQueueBindingBackupExchange(@Qualifier(&quot;backupExchange&quot;) FanoutExchange backupExchange, @Qualifier(&quot;backupQueue&quot;) Queue backupQueue) {\n        return BindingBuilder.bind(backupQueue).to(backupExchange);\n    }\n\n    //绑定（备份交换机和报警队列）\n    @Bean\n    public Binding warningQueueBindingBackupExchange(@Qualifier(&quot;backupExchange&quot;) FanoutExchange backupExchange, @Qualifier(&quot;warningQueue&quot;) Queue warningQueue) {\n        return BindingBuilder.bind(warningQueue).to(backupExchange);\n    }\n}</pre><p id=\"u2d96580e\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"ub0f9ce9a\"><span class=\"ne-text\">消费者（报警消费者）</span></li></ol><p id=\"u699010ce\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"35bc7912\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.springbootrabbitmq.consumer;\n\nimport com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/12/4 9:10\n * 报警消费者\n */\n@Component\n@Slf4j\npublic class WarningConsumer {\n    //接收报警消息\n    @RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)\n    public void receiveWarningMsg(Message message) {\n        String msg = new String(message.getBody());\n        log.error(&quot;报警发现不可路由消息：{}&quot;, msg);\n    }\n}</pre><p id=\"ud84928fa\" class=\"ne-p\"><br></p><p id=\"ue7878fb1\" class=\"ne-p\"><span class=\"ne-text\">发送请求：http://localhost:8080/confirm/sendMessage/大家好 1<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581402507-07326d95-5109-4750-b3ab-c4751b23d55d.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=263&amp;id=udc9907e1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=263&amp;originWidth=1171&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75848&amp;status=done&amp;style=none&amp;taskId=u7fb8b716-7979-4acf-b11c-fe1cb99bebd&amp;title=&amp;width=1171\" id=\"Lep12\" class=\"ne-image\"></p><p id=\"uc9ac1a25\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ud9d05a36\" class=\"ne-p\"><strong><span class=\"ne-text\">备份交换机的优先级高于回退消息、</span></strong></p></div><p id=\"ua078c614\" class=\"ne-p\"><br></p><p id=\"uab27aa2a\" class=\"ne-p\"><br></p><p id=\"ud02d49fe\" class=\"ne-p\"><br></p><h2 id=\"c06ec42e\"><span class=\"ne-text\">其他知识点</span></h2><p id=\"u4f098a02\" class=\"ne-p\"><br></p><p id=\"u3abc395c\" class=\"ne-p\"><br></p><p id=\"u471eac83\" class=\"ne-p\"><br></p><h3 id=\"71a92fdf\"><span class=\"ne-text\">幂等性</span></h3><p id=\"u648dd420\" class=\"ne-p\"><br></p><p id=\"u8e5b1edb\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638581856478-4611604a-34c1-486b-a3b7-c809f3d94f0e.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=620&amp;id=ua03a1a2a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=620&amp;originWidth=977&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=628166&amp;status=done&amp;style=none&amp;taskId=u3bbefde1-d01a-481e-b831-abe2598835f&amp;title=&amp;width=977\" id=\"pWlKw\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582165848-9189cc73-c68b-4631-b30d-dad30387a032.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=523&amp;id=u37f187c9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=523&amp;originWidth=1001&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=609037&amp;status=done&amp;style=none&amp;taskId=udd6ff171-0753-4d6f-a510-a8761c65fcb&amp;title=&amp;width=1001\" id=\"o6DXP\" class=\"ne-image\"></p><p id=\"u2dbfadbc\" class=\"ne-p\"><br></p><p id=\"ubcb1ea0b\" class=\"ne-p\"><br></p><p id=\"u62eecae6\" class=\"ne-p\"><br></p><h3 id=\"507580b5\"><span class=\"ne-text\">优先级队列</span></h3><p id=\"u7da11996\" class=\"ne-p\"><br></p><p id=\"u3cc63c54\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582363595-025332ba-94e1-4485-b6ab-e0542d69fab7.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=326&amp;id=u83200fbd&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=326&amp;originWidth=987&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=447217&amp;status=done&amp;style=none&amp;taskId=ueea7db03-7906-4cef-baef-0ebe50a0185&amp;title=&amp;width=987\" id=\"h3cca\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638582579936-dd221c3d-efc6-4e4b-b854-6667d27682a1.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=343&amp;id=u3930b1c7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=402&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=288467&amp;status=done&amp;style=none&amp;taskId=u70a2eadf-0b86-470c-a5a8-b7d8f612ad3&amp;title=&amp;width=1010.9896240234375\" id=\"WVQYU\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">实现优先级:</span></p><p id=\"u6cc05b3e\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ua6331a27\"><span class=\"ne-text\">生产者：</span></li></ol><p id=\"ua01e5a8f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"e42f278b\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.AMQP;\nimport com.rabbitmq.client.Channel;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/28 22:15\n * 生产者 ：发消息\n */\npublic class Producer {\n    //队列名称\n    private static final String QUEUE_NAME = &quot;hello1&quot;;\n\n    //发消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建一个连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        //设置工厂ip  连接rabbitmq的队列\n//        factory.setHost(&quot;59.110.171.189&quot;);\n//        //用户名\n//        factory.setUsername(&quot;admin&quot;);\n//        //密码\n//        factory.setPassword(&quot;123&quot;);\n//        //创建连接\n//        Connection connection = factory.newConnection();\n//        //获取信道\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        /**\n         * 生成一个队列\n         * 参数；1.队列名称\n         *      2.队列里面的消息是否持久化（磁盘），默认消息存储在内存中（不持久化false）\n         *      3.该队列是否只供一个消费者进行消费，是否消息独有，true只允许一个消费者进行消费，默认是false（可以多个消费者消费）\n         4. 是否自动删除，最后一个消费者断开连接后，该队列是否自动删除，true自动删除，false不自动删除\n         5.其他参数（延迟消息......）\n         */\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();\n        //官方允许是0-255之间。此处设置10. 允许优先级范围为0-10   不要设置过大   浪费CPU与内存\n        arguments.put(&quot;x-max-priority&quot;, 10);\n        channel.queueDeclare(QUEUE_NAME, true, false, false, arguments);\n        //发消息\n        for (int i = 0; i &lt; 11; i++) {\n            String message = &quot;info&quot; + i;\n            if (i == 5) {\n                //设置优先级\n                AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().priority(5).build();\n                channel.basicPublish(&quot;&quot;, QUEUE_NAME, properties, message.getBytes());\n            } else {\n                channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());\n            }\n        }\n        /*\n         * 发送一个消息\n         * 1. 发送到哪个交换机\n         * 2. 路由的key值是哪个，本次是队列的名称\n         * 3. 其他参数信息\n         * 4. 发送消息的消息体\n         */\n        System.out.println(&quot;消息发送完毕&quot;);\n    }\n}</pre><p id=\"uc6f9bdd8\" class=\"ne-p\"><br></p><p id=\"ue80f4739\" class=\"ne-p\"><span class=\"ne-text\">启动生产者：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584428018-a99005d9-2193-463c-9f45-3f72656510ca.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=245&amp;id=u9109bfc5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=245&amp;originWidth=673&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24479&amp;status=done&amp;style=none&amp;taskId=u0a4a6f5a-f03f-4ab3-8fcc-d9bdc327aad&amp;title=&amp;width=673\" id=\"shKB3\" class=\"ne-image\"></p><p id=\"u291a7eb3\" class=\"ne-p\"><br></p><h3 id=\"07eab7c1\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584267331-0bf02c8d-6536-43a8-aa18-ee5f4ed82255.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=500&amp;id=AvLAP&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=500&amp;originWidth=1065&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=74831&amp;status=done&amp;style=none&amp;taskId=u77c77f80-cfec-453b-bc9f-f82bf26b07c&amp;title=&amp;width=1065\" id=\"cIQXz\" class=\"ne-image\"></h3><p id=\"ucb9b4527\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"u5b439607\"><span class=\"ne-text\">消费者 :</span></li></ol><p id=\"u293cdbaa\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"81930e95\" class=\"ne-codeblock language-java\">package com.atguigu.rabbitmq.one;\n\nimport com.atguigu.rabbitmq.utils.RabbitMqUtils;\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @author LiFang\n * @version 1.0\n * @since 2021/11/29 15:04\n * 消费者:接收消息\n */\npublic class Consumer {\n    //队列名称\n    public static final String QUEUE_NAME = &quot;hello1&quot;;\n\n    //接收消息\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接工厂\n//        ConnectionFactory factory = new ConnectionFactory();\n//        factory.setHost(&quot;59.110.171.189&quot;);\n//        factory.setUsername(&quot;admin&quot;);\n//        factory.setPassword(&quot;123&quot;);\n//        Connection connection = factory.newConnection();\n//        Channel channel = connection.createChannel();\n        Channel channel = RabbitMqUtils.getChannel();\n        //声明 接收消息(成功后的回调)\n        DeliverCallback deliverCallback = (consumerTag, message) -&gt; {\n            System.out.println(new String(message.getBody()));\n        };\n        //取消消息时的回调\n        CancelCallback cancelCallback = consumerTag -&gt; {\n            System.out.println(&quot;消息消费被中断&quot;);\n        };\n        /*\n         * 消费者 消费消息\n         * 1.消费哪个队列\n         * 2. 消费成功之后是否要自动应答，true代表自动应答,false代表手动应答。\n         * 3. 消费者未成功消费的回调。\n         * 4. 消费者取消消费的回调\n         */\n        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);\n    }\n}</pre><p id=\"u16cfd581\" class=\"ne-p\"><br></p><p id=\"ud1908c6e\" class=\"ne-p\"><span class=\"ne-text\">启动消费者，<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584610103-d784c402-b9b7-4321-80d9-c4b95990f410.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=346&amp;id=u91a8ee8e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=346&amp;originWidth=652&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36450&amp;status=done&amp;style=none&amp;taskId=u90a3da53-d612-4152-b8b6-157c3e789ca&amp;title=&amp;width=652\" id=\"UEHzd\" class=\"ne-image\"></p><p id=\"u87611f1d\" class=\"ne-p\"><br></p><h3 id=\"8508a884\"><span class=\"ne-text\">惰性队列</span></h3><p id=\"uc5f84afb\" class=\"ne-p\"><br></p><p id=\"u0b31325e\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584657059-9bf42f28-e7a0-4c4f-8a39-c56038bd0071.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=425&amp;id=ud4e3da7e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=425&amp;originWidth=993&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=597255&amp;status=done&amp;style=none&amp;taskId=u2ff8ea80-3715-4c63-a718-4d71e1b8488&amp;title=&amp;width=993\" id=\"wMAkZ\" class=\"ne-image\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638584904322-348e89b5-e2f2-4df0-ba11-7540a061f849.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=613&amp;id=u9cab5578&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=613&amp;originWidth=1175&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=404748&amp;status=done&amp;style=none&amp;taskId=uc0905b86-a7ec-4a0f-8a69-356a47ad688&amp;title=&amp;width=1175\" id=\"NaNR3\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">惰性队列执行性能不太好，因此默认情况下不使用惰性队列，而使用正常队列。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585096408-ecb74216-dfa9-41e3-b7bd-bd5236b2c1da.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=431&amp;id=u4ab29e59&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=431&amp;originWidth=967&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=466179&amp;status=done&amp;style=none&amp;taskId=ub1da4c7a-e46a-44f7-9b2f-e5129f4a839&amp;title=&amp;width=967\" id=\"ZtuGu\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638585305462-e73859d4-5121-406a-b308-57cede7f1bac.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=413&amp;id=uf8c1b8a8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=413&amp;originWidth=966&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247424&amp;status=done&amp;style=none&amp;taskId=ua29dd158-1851-4974-bd9b-3c01a9c0ea5&amp;title=&amp;width=966\" id=\"wFSJu\" class=\"ne-image\"></p><p id=\"u76b838dd\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u4d99bf08\"><span class=\"ne-text\">惰性队列从</span><strong><span class=\"ne-text\">磁盘</span></strong><span class=\"ne-text\">上读取消息，因此消费消息比较慢，但是内存消耗较小，在内存中只存储一些索引。一旦需要消费这些消息时，惰性队列会通过内存中的索引，去读取磁盘中相应的消息，到内存，再消费消息。</span></li></ul><ul class=\"ne-ul\"><li id=\"u07689e77\"><span class=\"ne-text\">正常队列从</span><strong><span class=\"ne-text\">内存</span></strong><span class=\"ne-text\">中读取消息，因此消费消息比较快，但是内存消耗较大。</span></li></ul><p id=\"u27df5c54\" class=\"ne-p\"><br></p><h2 id=\"23eaf825\"><span class=\"ne-text\">rabbitmq 集群</span></h2><p id=\"u5557a767\" class=\"ne-p\"><br></p><p id=\"u0ad69f32\" class=\"ne-p\"><br></p><p id=\"u20e292f4\" class=\"ne-p\"><br></p><h3 id=\"c0131d2a\"><span class=\"ne-text\">集群原理</span></h3><p id=\"u5c043ed3\" class=\"ne-p\"><br></p><p id=\"udb2f051a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638586666884-b99e8e77-81ef-4547-a9cd-1dcd00e86009.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=501&amp;id=u84ce9d05&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=501&amp;originWidth=1025&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=171726&amp;status=done&amp;style=none&amp;taskId=ud7aa0990-8e0c-4e31-9dd1-c6d20007401&amp;title=&amp;width=1025\" id=\"hjXVB\" class=\"ne-image\"></p><p id=\"u13f38595\" class=\"ne-p\"><br></p><h3 id=\"b80e581a\"><span class=\"ne-text\">镜像队列（备份）</span></h3><p id=\"u18d348a8\" class=\"ne-p\"><br></p><p id=\"u638524b5\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638587610363-c97ef89e-768e-4278-a087-89f20e211145.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=348&amp;id=ue8695270&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=348&amp;originWidth=981&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=453959&amp;status=done&amp;style=none&amp;taskId=ue9f78068-c45e-4cc9-a3e0-595ae6c7337&amp;title=&amp;width=981\" id=\"FTNYI\" class=\"ne-image\"></p><p id=\"ube043d14\" class=\"ne-p\"><br></p><h3 id=\"3702723f\"><span class=\"ne-text\">高可用负载均衡</span></h3><p id=\"u442f2d09\" class=\"ne-p\"><br></p><p id=\"u2e5b02e2\" class=\"ne-p\"><span class=\"ne-text\">若节点 1 宕机了，生产者需要连接节点 2 或节点 3。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588031855-ab97c0f3-9861-4222-b593-0a4dbfbf566d.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=754&amp;id=u0c60fb59&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=754&amp;originWidth=1028&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=344345&amp;status=done&amp;style=none&amp;taskId=uaef85042-099b-42a3-8caf-268a89b7438&amp;title=&amp;width=1028\" id=\"XmCHx\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">出现问题：生产者无法变更 rabbitmq 的 ip，此时需要借助外力 Haproxy。</span></p><p id=\"u7f61765f\" class=\"ne-p\"><br></p><h4 id=\"ea97af39\"><span class=\"ne-text\">Haproxy 实现高可用 负载均衡（高并发）</span></h4><p id=\"ubf6aa704\" class=\"ne-p\"><br></p><p id=\"ud147c6a9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588332155-384a9066-f6ed-434c-bd8d-a08678795b99.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=177&amp;id=u91155287&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=177&amp;originWidth=973&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=240431&amp;status=done&amp;style=none&amp;taskId=u9a4dff8d-f824-447c-b845-2962ddc0650&amp;title=&amp;width=973\" id=\"BHuXj\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588403571-837d2496-d169-4b00-aa3c-4459e5dfd616.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=644&amp;id=u63b0c105&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=644&amp;originWidth=740&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=224363&amp;status=done&amp;style=none&amp;taskId=u400f5630-901e-4db7-8556-6d72a1f206a&amp;title=&amp;width=740\" id=\"FRrD8\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638588495639-57e1823e-e317-48f1-bd99-4a64ab26b8b3.png#clientId=ueb126df1-e3fc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=711&amp;id=uefaa64c3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=711&amp;originWidth=860&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=371827&amp;status=done&amp;style=none&amp;taskId=u8f30ca6f-4949-4c9d-899d-b31600baa56&amp;title=&amp;width=860\" id=\"K5Fpn\" class=\"ne-image\"></p><p id=\"ub8c1111e\" class=\"ne-p\"><br></p><h2 id=\"80fc5d12\"><span class=\"ne-text\">联合交换机</span></h2><p id=\"uf8765abf\" class=\"ne-p\"><br></p><p id=\"u19f4fde9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638600972390-f8eabb13-fdba-432b-8b93-c4798757e13e.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=660&amp;id=u1565c7a2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=660&amp;originWidth=1136&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=882067&amp;status=done&amp;style=none&amp;taskId=u40ae3ed4-1bbc-4baa-b912-40f55e8b353&amp;title=&amp;width=1136\" id=\"FkHCS\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601768985-91857261-fe17-4687-bc9f-f8d9daf1a364.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=524&amp;id=uafeaba48&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=524&amp;originWidth=1115&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=307899&amp;status=done&amp;style=none&amp;taskId=u4499a665-a618-4138-a2f2-5bdf1dbaca0&amp;title=&amp;width=1115\" id=\"FgJli\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638601930969-0c445ecb-7e66-43cd-a7d1-3aa8c76f884d.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=581&amp;id=u6d4c749b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=581&amp;originWidth=505&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=221677&amp;status=done&amp;style=none&amp;taskId=uf8d981fd-837f-4eb6-83f6-a7deba0a018&amp;title=&amp;width=505\" id=\"NxTl9\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602088334-f76d8ba1-5c6d-4280-87c8-b7d58d42f902.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=506&amp;id=u4b7146f5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=506&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=158537&amp;status=done&amp;style=none&amp;taskId=u64d80530-7388-4c12-9d3b-48d90765e0b&amp;title=&amp;width=976\" id=\"oVYwK\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602110103-8ee2df46-7982-4b08-a6c8-e4d9c701b69f.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=666&amp;id=u65df8122&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=666&amp;originWidth=933&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=302115&amp;status=done&amp;style=none&amp;taskId=u970ef30c-4b50-4327-928e-6bf0cdbc242&amp;title=&amp;width=933\" id=\"A9wRm\" class=\"ne-image\"></p><p id=\"u6827fec5\" class=\"ne-p\"><br></p><h2 id=\"997a4ba0\"><span class=\"ne-text\">联邦队列</span></h2><p id=\"ud2dd89e2\" class=\"ne-p\"><br></p><p id=\"ufbf7e7f8\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638602602857-2efc1842-e9c7-409e-a302-2b4c63e92027.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=833&amp;id=u3d500d40&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=833&amp;originWidth=1312&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=553687&amp;status=done&amp;style=none&amp;taskId=u77ecfe28-0a6d-4318-bc8e-c80d6183ecc&amp;title=&amp;width=1312\" id=\"qvMwP\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">两个不同地区数据同步。<br /></span><span class=\"ne-text\"> </span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603240478-ba4a3a39-d3dc-41b3-9ee9-c8d9f2718ff9.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=551&amp;id=u0dc6d91b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=551&amp;originWidth=1149&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244288&amp;status=done&amp;style=none&amp;taskId=u65c1251d-b002-4909-ae1d-f27aa9d85ee&amp;title=&amp;width=1149\" id=\"Rmak1\" class=\"ne-image\"></p><p id=\"u6d139d21\" class=\"ne-p\"><br></p><h2 id=\"Shovel\"><span class=\"ne-text\">Shovel</span></h2><p id=\"u8914465d\" class=\"ne-p\"><br></p><p id=\"ufcf1b723\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603352779-28d006e0-d330-4802-935c-040341c1ca8d.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=324&amp;id=uc852da4a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=324&amp;originWidth=1287&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=568699&amp;status=done&amp;style=none&amp;taskId=u2b770501-53fa-4cbc-a428-000590e2c17&amp;title=&amp;width=1287\" id=\"fxL0i\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603460089-03466d04-df20-4ab2-8968-f1b5ef5905ca.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=409&amp;id=ua502f49e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=409&amp;originWidth=871&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=188661&amp;status=done&amp;style=none&amp;taskId=u48a08d45-4dad-40e0-9723-55db3e3ef79&amp;title=&amp;width=871\" id=\"lh1tz\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603378352-15aca4d9-af9b-48c1-b796-60a86b637ebd.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=667&amp;id=uec9ad770&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=667&amp;originWidth=864&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=266940&amp;status=done&amp;style=none&amp;taskId=u8acd6a6e-3ed2-4306-8639-2eeb16612c3&amp;title=&amp;width=864\" id=\"jpTqS\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\"> </span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603594801-6bd296a5-c23b-418f-a94e-5261833d5605.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=592&amp;id=u903663bb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=592&amp;originWidth=994&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=194438&amp;status=done&amp;style=none&amp;taskId=ud10d2c55-8f5b-4b88-b096-8942402c361&amp;title=&amp;width=994\" id=\"oSJ3T\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2324645/1638603639753-9ae10564-7bad-4528-afd2-867c58d1f413.png#clientId=u1823549f-f362-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=121&amp;id=u71e6fa9c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=121&amp;originWidth=1169&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88867&amp;status=done&amp;style=none&amp;taskId=u55070310-f786-4b38-98ce-55db2f75ca1&amp;title=&amp;width=1169\" id=\"Gjcgc\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u0d7e0fb8\" id=\"u0d7e0fb8\"><span data-lake-id=\"u909f53e3\" id=\"u909f53e3\">---</span></p><p data-lake-id=\"uc679db55\" id=\"uc679db55\"><span data-lake-id=\"u4c1a62fc\" id=\"u4c1a62fc\">title: RabbitMQ学习笔记<br /></span><span data-lake-id=\"u55719a35\" id=\"u55719a35\">categories: 知识</span></p><p data-lake-id=\"ue3ff7f66\" id=\"ue3ff7f66\"><span data-lake-id=\"u8224b5f3\" id=\"u8224b5f3\">updated: 2021-11-05</span></p><p data-lake-id=\"uceec00a5\" id=\"uceec00a5\"><span data-lake-id=\"u52abd9e8\" id=\"u52abd9e8\">date: 2021-11-05<br /></span><span data-lake-id=\"u4e35ecf9\" id=\"u4e35ecf9\">tags: [RabbitMQ, 消息中间件]</span></p><p data-lake-id=\"ud1be1966\" id=\"ud1be1966\"><span data-lake-id=\"u63972e28\" id=\"u63972e28\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201910%2F20191018012402811963.png&amp;refer=http%3A%2F%2Fimage.bubuko.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267173&amp;t=5d1df4c7b1043f63bcf583ceffddf4d3</span></p><p data-lake-id=\"uaca5ecf0\" id=\"uaca5ecf0\"><span data-lake-id=\"udd666371\" id=\"udd666371\">--- </span></p><p data-lake-id=\"u34c88f82\" id=\"u34c88f82\"><span data-lake-id=\"ufccbef48\" id=\"ufccbef48\">​</span><br></p><p data-lake-id=\"u5a3553e0\" id=\"u5a3553e0\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630671540955-650bc67f-569a-4cef-a095-ec73a3b34897.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D740%26id%3Du64b4ea35%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D740%26originWidth%3D1340%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D584856%26status%3Ddone%26style%3Dnone%26taskId%3Du20a11e76-4e9c-49b4-8ca4-cc25eac0808%26title%3D%26width%3D1340%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1340%2C%22originHeight%22%3A740%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efe7e7%22%2C%22id%22%3A%22FmDdj%22%7D\"></card><span data-lake-id=\"uc073c3a2\" id=\"uc073c3a2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630672453989-c5f9d3cf-e77f-4c3e-8a9d-173b49f0aa4c.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D473%26id%3Dub505e50f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D473%26originWidth%3D1544%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D451836%26status%3Ddone%26style%3Dnone%26taskId%3Du973d9d93-5ee4-44e2-9f50-b28d8e8f15e%26title%3D%26width%3D1544%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1544%2C%22originHeight%22%3A473%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22N1Vbj%22%7D\"></card><span data-lake-id=\"ufdb92570\" id=\"ufdb92570\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630673109375-2f65953f-32f5-4be8-9353-9d08abb6587f.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D794%26id%3Duce851ada%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D794%26originWidth%3D1520%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D669042%26status%3Ddone%26style%3Dnone%26taskId%3Du1e0c19d3-9eae-4ab1-9e35-b33c4bbbcd6%26title%3D%26width%3D1520%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1520%2C%22originHeight%22%3A794%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23b2b1b0%22%2C%22id%22%3A%22zGC4d%22%7D\"></card></p><p data-lake-id=\"u329797e5\" id=\"u329797e5\"><br></p><h2 data-lake-id=\"9c0cd8ed\" id=\"9c0cd8ed\"><span data-lake-id=\"u0c12fd73\" id=\"u0c12fd73\">为什么要用 rabbitMQ？</span></h2><h3 data-lake-id=\"81220e89\" id=\"81220e89\"><span data-lake-id=\"u450596fc\" id=\"u450596fc\">1. 流量削峰</span></h3><p data-lake-id=\"u034d5ee5\" id=\"u034d5ee5\"><br></p><p data-lake-id=\"u03a10fc5\" id=\"u03a10fc5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1637998719062-ee3b7961-8606-40b9-9bd6-139143630402.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D91%26id%3Du7a7d8c10%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D990%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D78126%26status%3Ddone%26style%3Dnone%26taskId%3Du903bdc4d-2ce4-4ac8-97d1-9cf8226327b%26title%3D%26width%3D495%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A990%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22Ds1E5%22%7D\"></card></p><p data-lake-id=\"u874b8d44\" id=\"u874b8d44\"><br></p><h3 data-lake-id=\"c491023f\" id=\"c491023f\"><span data-lake-id=\"u898d65ad\" id=\"u898d65ad\">2. 应用解耦</span></h3><p data-lake-id=\"ue8c60717\" id=\"ue8c60717\"><br></p><p data-lake-id=\"u4ba4ff6a\" id=\"u4ba4ff6a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1637998760193-a4f14c2c-a22b-4c92-b207-ae58a962577a.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Du8f01ca2b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D363%26originWidth%3D1085%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D190648%26status%3Ddone%26style%3Dnone%26taskId%3Du30e77d52-0f3b-4d69-b06f-8229a9c232f%26title%3D%26width%3D542.5%26referrerpolicy%3Dno-referrer%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1085%2C%22originHeight%22%3A363%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22hMEcn%22%7D\"></card></p><p data-lake-id=\"u6d37b294\" id=\"u6d37b294\"><br></p><h3 data-lake-id=\"d4ef8fda\" id=\"d4ef8fda\"><span data-lake-id=\"u020e8192\" id=\"u020e8192\">3. 异步处理</span></h3><p data-lake-id=\"ufa9eb4bc\" id=\"ufa9eb4bc\"><br></p><p data-lake-id=\"u20a06663\" id=\"u20a06663\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009293978-1fde3fa6-5de6-476b-bc8f-4381749e748c.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D315%26id%3Du2602b5b4%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D630%26originWidth%3D1167%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D283589%26status%3Ddone%26style%3Dnone%26taskId%3Duf5236049-2c88-4e12-b15e-7d99585efad%26title%3D%26width%3D583.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1167%2C%22originHeight%22%3A630%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22EqXpn%22%7D\"></card></p><p data-lake-id=\"u0a94a1a3\" id=\"u0a94a1a3\"><br></p><h2 data-lake-id=\"753ccaa2\" id=\"753ccaa2\"><span data-lake-id=\"u4a58fcf4\" id=\"u4a58fcf4\">RabbitMQ 核心部分</span></h2><p data-lake-id=\"u29bdd22c\" id=\"u29bdd22c\"><br></p><p data-lake-id=\"uab230d58\" id=\"uab230d58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009378104-cb162a2f-4170-4d24-99c1-4e3ee09087ae.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D284%26id%3Du45cac300%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D568%26originWidth%3D1077%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D305514%26status%3Ddone%26style%3Dnone%26taskId%3Du95a38925-5c34-45dd-bfca-d140d73dc3f%26title%3D%26width%3D538.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1077%2C%22originHeight%22%3A568%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f2f1%22%2C%22id%22%3A%22TB3Zf%22%7D\"></card></p><p data-lake-id=\"u0943ec06\" id=\"u0943ec06\"><br></p><h2 data-lake-id=\"a260da3a\" id=\"a260da3a\"><span data-lake-id=\"u4615632f\" id=\"u4615632f\">各个名词介绍</span></h2><p data-lake-id=\"u9ab39537\" id=\"u9ab39537\"><br></p><p data-lake-id=\"ub76612d7\" id=\"ub76612d7\"><br></p><p data-lake-id=\"u698e3664\" id=\"u698e3664\"><br></p><h3 data-lake-id=\"c83a4ba0\" id=\"c83a4ba0\"><span data-lake-id=\"ud5ce219f\" id=\"ud5ce219f\">RabbitMQ 工作原理</span></h3><p data-lake-id=\"u21effb62\" id=\"u21effb62\"><br></p><p data-lake-id=\"ua7741f7e\" id=\"ua7741f7e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009501957-eb0902f3-1fa1-47d5-9bc7-8d03f6e12de0.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du79c375f5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D514%26originWidth%3D1060%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D210068%26status%3Ddone%26style%3Dnone%26taskId%3Due02a7c50-c563-46af-a784-5ae4c1dcdfe%26title%3D%26width%3D530%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1060%2C%22originHeight%22%3A514%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efc150%22%2C%22id%22%3A%22sf1J3%22%7D\"></card><span data-lake-id=\"u0075424c\" id=\"u0075424c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009567915-6084eb1d-d428-47ec-844f-b3b48c6c6d0c.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D310%26id%3Du9337433a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D619%26originWidth%3D1135%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D776522%26status%3Ddone%26style%3Dnone%26taskId%3Duced2ac5e-e117-4050-8e39-087f63ff410%26title%3D%26width%3D567.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1135%2C%22originHeight%22%3A619%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e1dccf%22%2C%22id%22%3A%22ft4q6%22%7D\"></card><span data-lake-id=\"u893d075b\" id=\"u893d075b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009610891-4a5dba18-6006-41bf-a068-b2f33ed7df48.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D63%26id%3Du38d6f233%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D126%26originWidth%3D1128%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D136646%26status%3Ddone%26style%3Dnone%26taskId%3Du3dada18e-9ab8-40c9-8042-2e2f9f40306%26title%3D%26width%3D564%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1128%2C%22originHeight%22%3A126%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cdc5b8%22%2C%22id%22%3A%22rJuNv%22%7D\"></card></p><p data-lake-id=\"u1525aa57\" id=\"u1525aa57\"><br></p><h2 data-lake-id=\"e655a410\" id=\"e655a410\"><span data-lake-id=\"u705eb6e6\" id=\"u705eb6e6\">安装</span></h2><p data-lake-id=\"u05de2581\" id=\"u05de2581\"><br></p><p data-lake-id=\"uf6aced4d\" id=\"uf6aced4d\"><a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" data-lake-id=\"ue8f1a388\" id=\"ue8f1a388\"><span data-lake-id=\"u33a9052d\" id=\"u33a9052d\">rabbitmq.com/download.html</span></a><span data-lake-id=\"uf625d546\" id=\"uf625d546\"><br /></span><span data-lake-id=\"u097a9a4a\" id=\"u097a9a4a\">erlang 和 rabbitMQ 版本匹配：<br /></span><a href=\"https://www.cnblogs.com/gne-hwz/p/10714013.html\" target=\"_blank\" data-lake-id=\"u79f01256\" id=\"u79f01256\"><span data-lake-id=\"u5287bc87\" id=\"u5287bc87\">https://www.cnblogs.com/gne-hwz/p/10714013.html</span></a><span data-lake-id=\"u1249a5dd\" id=\"u1249a5dd\"><br /></span><span data-lake-id=\"u5969764e\" id=\"u5969764e\">安装：</span><a href=\"https://blog.csdn.net/almahehe/article/details/75390572\" target=\"_blank\" data-lake-id=\"u4866f597\" id=\"u4866f597\"><span data-lake-id=\"uf1b9b81f\" id=\"uf1b9b81f\">https://blog.csdn.net/almahehe/article/details/75390572</span></a><span data-lake-id=\"ua09b2180\" id=\"ua09b2180\"><br /></span><span data-lake-id=\"u9b14d83d\" id=\"u9b14d83d\">（建议看尚硅谷视频进行快速安装）<br /></span><span data-lake-id=\"ue3b0bc72\" id=\"ue3b0bc72\">安装之后，可以访问 ip:15672 ，查看发送消息的端口（5672）和用户。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638169386681-e382c30c-baba-4fbb-bd40-aaa7b0a1eac6.png%23clientId%3Duc4bbfa15-6ab6-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D173%26id%3Du1a771f9c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D102%26originWidth%3D450%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D28980%26status%3Ddone%26style%3Dnone%26taskId%3Dua13bea1f-438b-4ef8-8913-b4ccb9fa78c%26title%3D%26width%3D761.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A450%2C%22originHeight%22%3A102%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1f1f1%22%2C%22id%22%3A%22pNXMC%22%7D\"></card></p><p data-lake-id=\"u9691fe71\" id=\"u9691fe71\"><br></p><h2 data-lake-id=\"c729f8ef\" id=\"c729f8ef\"><span data-lake-id=\"ufb9fdbed\" id=\"ufb9fdbed\">简单队列模式</span></h2><h3 data-lake-id=\"f5abe6f8\" id=\"f5abe6f8\"><span data-lake-id=\"ueaf18294\" id=\"ueaf18294\">生产者代码</span></h3><p data-lake-id=\"u9247b990\" id=\"u9247b990\"><br></p><ol list=\"ua5bc81d8\"><li fid=\"ud363da97\" data-lake-id=\"ua2bec32f\" id=\"ua2bec32f\"><span data-lake-id=\"ud39a2801\" id=\"ud39a2801\">项目依赖：</span></li></ol><p data-lake-id=\"ua99c915f\" id=\"ua99c915f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E6%8C%87%E5%AE%9Ajdk%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.apache.maven.plugins%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Emaven-compiler-plugin%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.8.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.rabbitmq%2Famqp-client%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--rabbitmq%E4%BE%9D%E8%B5%96%E5%AE%A2%E6%88%B7%E7%AB%AF--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecom.rabbitmq%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Eamqp-client%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E5.8.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcommons-io%2Fcommons-io%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E6%B5%81%E7%9A%84%E4%BE%9D%E8%B5%96--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecommons-io%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Ecommons-io%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.slf4j%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Eslf4j-simple%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.7.25%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220859d073%22%7D\"></card><p data-lake-id=\"ud6903308\" id=\"ud6903308\"><br></p><ol list=\"u6eef3ccd\" start=\"2\"><li fid=\"uc78933dd\" data-lake-id=\"uadcc7a78\" id=\"uadcc7a78\"><span data-lake-id=\"u4718b128\" id=\"u4718b128\">生产者代码：</span></li></ol><p data-lake-id=\"u087456f1\" id=\"u087456f1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22japackage%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.Connection%3B%5Cnimport%20com.rabbitmq.client.ConnectionFactory%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F28%2022%3A15%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%EF%BC%9A%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%8E%82ip%20%20%E8%BF%9E%E6%8E%A5rabbitmq%E7%9A%84%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E6%88%B7%E5%90%8D%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%AF%86%E7%A0%81%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E4%BF%A1%E9%81%93%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22hello%20world%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E5%8F%91%E9%80%81%E5%88%B0%E5%93%AA%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E8%B7%AF%E7%94%B1%E7%9A%84key%E5%80%BC%E6%98%AF%E5%93%AA%E4%B8%AA%EF%BC%8C%E6%9C%AC%E6%AC%A1%E6%98%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2CQUEUE_NAME%2Cnull%2Cmessage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E5%AE%8C%E6%AF%95%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22551912bc%22%7D\"></card><p data-lake-id=\"ua3657b02\" id=\"ua3657b02\"><br></p><p data-lake-id=\"u11483b33\" id=\"u11483b33\"><span data-lake-id=\"u967b6ec8\" id=\"u967b6ec8\">如果运行报超时错误，需要打开云服务器的安全组 5672 端口。<br /></span><span data-lake-id=\"udc1e13a8\" id=\"udc1e13a8\">（参考博客：</span><a href=\"https://www.cnblogs.com/jxearlier/p/11920825.html\" target=\"_blank\" data-lake-id=\"u7dcde88d\" id=\"u7dcde88d\"><span data-lake-id=\"udec279e8\" id=\"udec279e8\">https://www.cnblogs.com/jxearlier/p/11920825.html</span></a><span data-lake-id=\"u5dae9d38\" id=\"u5dae9d38\">）</span></p><h3 data-lake-id=\"3b753fe7\" id=\"3b753fe7\"><span data-lake-id=\"uae969ae3\" id=\"uae969ae3\">消费者代码</span></h3><p data-lake-id=\"ud87a77a1\" id=\"ud87a77a1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.rabbitmq.client.*%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2015%3A04%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%3A%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%96%E6%B6%88%E6%B6%88%E6%81%AF%E6%97%B6%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E8%A2%AB%E4%B8%AD%E6%96%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2CdeliverCallback%2CcancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d7bd0f8f%22%7D\"></card><p data-lake-id=\"u161ab880\" id=\"u161ab880\"><br></p><p data-lake-id=\"u2f7061dc\" id=\"u2f7061dc\"><span data-lake-id=\"u492a9635\" id=\"u492a9635\">运行结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638172828992-073b0df6-a480-4260-a724-e17e9191a44c.png%23clientId%3Duc4bbfa15-6ab6-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D20%26id%3Du3ee077b2%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D20%26originWidth%3D296%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D2932%26status%3Ddone%26style%3Dnone%26taskId%3Dud645c173-0157-49f2-89fb-5d58c2cd89a%26title%3D%26width%3D296%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A296%2C%22originHeight%22%3A20%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3e49%22%2C%22id%22%3A%22kWU4Y%22%7D\"></card></p><p data-lake-id=\"u0b7711d3\" id=\"u0b7711d3\"><br></p><h3 data-lake-id=\"56a70cf7\" id=\"56a70cf7\"><span data-lake-id=\"u6cb3fb74\" id=\"u6cb3fb74\">测试生产者和消费者代码：</span></h3><p data-lake-id=\"uac0eac74\" id=\"uac0eac74\"><br></p><ol list=\"u51f71829\"><li fid=\"ucee08304\" data-lake-id=\"u4916faee\" id=\"u4916faee\"><span data-lake-id=\"u36a54dd5\" id=\"u36a54dd5\">先运行消费者代码，发现没有消息，再运行生产者代码，发送消息，再看消费者代码控制台，此时已经接收到消息。</span></li></ol><p data-lake-id=\"ua57feed9\" id=\"ua57feed9\"><br></p><h2 data-lake-id=\"3d1bae02\" id=\"3d1bae02\"><span data-lake-id=\"u9f020e50\" id=\"u9f020e50\">工作队列模式</span></h2><p data-lake-id=\"u8a14f32f\" id=\"u8a14f32f\"><br></p><p data-lake-id=\"u924e23c9\" id=\"u924e23c9\"><br></p><p data-lake-id=\"ub993060c\" id=\"ub993060c\"><br></p><h3 data-lake-id=\"d9addd15\" id=\"d9addd15\"><span data-lake-id=\"u3ad8ec7f\" id=\"u3ad8ec7f\">轮训分发消息</span></h3><p data-lake-id=\"u0a21536f\" id=\"u0a21536f\"><br></p><p data-lake-id=\"u1c457a9d\" id=\"u1c457a9d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638191830547-a43bbaa1-a524-4603-b6a9-0824e943cf9c.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D546%26id%3Ducf96c5e0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D546%26originWidth%3D1278%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D220503%26status%3Ddone%26style%3Dnone%26taskId%3Dub030755f-49df-4184-9d0d-65bfa0e561e%26title%3D%26width%3D1278%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1278%2C%22originHeight%22%3A546%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22kyxCV%22%7D\"></card></p><p data-lake-id=\"ubbe06130\" id=\"ubbe06130\"><br></p><ol list=\"u993bcc81\"><li fid=\"ub0e7382c\" data-lake-id=\"ua4977f19\" id=\"ua4977f19\"><span data-lake-id=\"u142ff8d4\" id=\"u142ff8d4\">抽取连接工厂工具类：</span></li></ol><p data-lake-id=\"u1321a065\" id=\"u1321a065\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.utils%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.Connection%3B%5Cnimport%20com.rabbitmq.client.ConnectionFactory%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2019%3A48%5Cn%20*%20%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%E5%88%9B%E5%BB%BA%E4%BF%A1%E9%81%93%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%5Cn%20*%2F%5Cnpublic%20class%20RabbitMqUtils%20%7B%5Cn%20%20%20%20public%20static%20Channel%20getChannel()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20return%20channel%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d79993aa%22%7D\"></card><p data-lake-id=\"u63f36183\" id=\"u63f36183\"><br></p><ol list=\"u9211bc6e\" start=\"2\"><li fid=\"uaa9721e3\" data-lake-id=\"u07f51501\" id=\"u07f51501\"><span data-lake-id=\"uf408d5cc\" id=\"uf408d5cc\">工作线程代码：（消费者）</span></li></ol><p data-lake-id=\"ud95a0f1f\" id=\"ud95a0f1f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.two%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.CancelCallback%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cnimport%20com.rabbitmq.client.Delivery%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2019%3A55%5Cn%20*%20%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%B9%8B%E5%89%8D%E7%9A%84%E6%B6%88%E8%B4%B9%E8%80%85%EF%BC%89%5Cn%20*%2F%5Cnpublic%20class%20Worker01%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%9A%84%E6%8E%A5%E6%94%B6%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6%E8%A2%AB%E5%8F%96%E6%B6%88%E6%97%B6%20%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20(consumerTag)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2C%20deliverCallback%2C%20cancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%229d76e763%22%7D\"></card><p data-lake-id=\"u3c81ab45\" id=\"u3c81ab45\"><br></p><ol list=\"u1721a5be\" start=\"3\"><li fid=\"u2f522a92\" data-lake-id=\"u3d36e889\" id=\"u3d36e889\"><span data-lake-id=\"u40d2ed30\" id=\"u40d2ed30\">启动两个工作线程（消费者）</span></li></ol><p data-lake-id=\"ub9bad24a\" id=\"ub9bad24a\"><br></p><p data-lake-id=\"u880b1412\" id=\"u880b1412\"><span data-lake-id=\"ud7746195\" id=\"ud7746195\">前提是在 idea 设置允许方法多个并行运行：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638188489814-b081e679-bc7f-4cad-964e-bfb80575820c.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D636%26id%3Duf61f07dc%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D869%26originWidth%3D1143%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D94819%26status%3Ddone%26style%3Dnone%26taskId%3Du4472c929-c48f-4a7d-ab7d-ec2994b75e5%26title%3D%26width%3D836.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1143%2C%22originHeight%22%3A869%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233b4043%22%2C%22id%22%3A%22zVInE%22%7D\"></card><span data-lake-id=\"ubfdf41bf\" id=\"ubfdf41bf\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638188418807-97ce766a-47ef-458c-8413-d496cbcddbed.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D172%26id%3Du35f12aab%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D172%26originWidth%3D669%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D20804%26status%3Ddone%26style%3Dnone%26taskId%3Duf688cf36-6dc9-43f1-be3d-946b8a45d78%26title%3D%26width%3D669%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A669%2C%22originHeight%22%3A172%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232a373f%22%2C%22id%22%3A%22yNG1N%22%7D\"></card></p><p data-lake-id=\"ub776168d\" id=\"ub776168d\"><br></p><ol list=\"u8fb16ba1\" start=\"4\"><li fid=\"u324d4ebf\" data-lake-id=\"ud4caf9e9\" id=\"ud4caf9e9\"><span data-lake-id=\"uf8568ee5\" id=\"uf8568ee5\">生产者代码：</span></li></ol><p data-lake-id=\"u09bb0f44\" id=\"u09bb0f44\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.two%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2021%3A04%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%E5%8F%91%E9%80%81%E5%A4%A7%E9%87%8F%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Task01%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%AE%8C%E6%88%90%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%225346bd81%22%7D\"></card><p data-lake-id=\"u0c3323ed\" id=\"u0c3323ed\"><br></p><ol list=\"u35971760\" start=\"5\"><li fid=\"u07c2ae97\" data-lake-id=\"u5fbb9819\" id=\"u5fbb9819\"><span data-lake-id=\"u5bb71885\" id=\"u5bb71885\">测试：启动生产者</span></li></ol><p data-lake-id=\"u647c8fbd\" id=\"u647c8fbd\"><br></p><p data-lake-id=\"ud09fcf35\" id=\"ud09fcf35\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192109706-2649384b-8559-4d7e-8609-220f576c3e25.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D275%26id%3Du4261e57f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D275%26originWidth%3D591%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D25224%26status%3Ddone%26style%3Dnone%26taskId%3Due3dff20d-583f-4d0b-bb12-94ccae95bc1%26title%3D%26width%3D591%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A275%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c373d%22%2C%22id%22%3A%22PuJou%22%7D\"></card><span data-lake-id=\"ud9d3a671\" id=\"ud9d3a671\"><br /></span><span data-lake-id=\"uc8756aef\" id=\"uc8756aef\">可以看见消费者轮循接收消息：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192164342-16d183be-bbe5-4de9-bac4-d87bd87a746b.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D179%26id%3Due97a7cdb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D179%26originWidth%3D591%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23018%26status%3Ddone%26style%3Dnone%26taskId%3Du7cff6d1a-b142-4d52-a1c5-1cca6fd241e%26title%3D%26width%3D591%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A179%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3c44%22%2C%22id%22%3A%22Upfv4%22%7D\"></card><span data-lake-id=\"ude7e3baa\" id=\"ude7e3baa\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192176544-d380de90-ff7a-48a7-a080-c4a1ac193460.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D198%26id%3Dubb73d589%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D198%26originWidth%3D598%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23978%26status%3Ddone%26style%3Dnone%26taskId%3Du3ac63e3a-6d82-4340-9fed-c68c8fbf564%26title%3D%26width%3D598%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A598%2C%22originHeight%22%3A198%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3b43%22%2C%22id%22%3A%22xLv8Q%22%7D\"></card></p><p data-lake-id=\"u9b4baf19\" id=\"u9b4baf19\"><br></p><h2 data-lake-id=\"269fc561\" id=\"269fc561\"><span data-lake-id=\"ucee7fa76\" id=\"ucee7fa76\">消息应答</span></h2><p data-lake-id=\"u6a6463c8\" id=\"u6a6463c8\"><br></p><p data-lake-id=\"uce771e06\" id=\"uce771e06\"><br></p><p data-lake-id=\"u4921363f\" id=\"u4921363f\"><br></p><h3 data-lake-id=\"398e8d91\" id=\"398e8d91\"><span data-lake-id=\"u29d2557e\" id=\"u29d2557e\">自动应答</span></h3><p data-lake-id=\"u375825be\" id=\"u375825be\"><br></p><p data-lake-id=\"ua916566e\" id=\"ua916566e\"><span data-lake-id=\"ue97919fe\" id=\"ue97919fe\">不建议使用，仅适用在消费者可以高效并以某种速率能够处理这些消息的情况。</span></p><p data-lake-id=\"u5267e3be\" id=\"u5267e3be\"><br></p><h3 data-lake-id=\"a7945bf1\" id=\"a7945bf1\"><span data-lake-id=\"uc4459f0a\" id=\"uc4459f0a\">手动应答</span></h3><p data-lake-id=\"uc5fde435\" id=\"uc5fde435\"><br></p><p data-lake-id=\"ud58827d8\" id=\"ud58827d8\"><br></p><p data-lake-id=\"u5b06088a\" id=\"u5b06088a\"><br></p><h4 data-lake-id=\"bdff53ca\" id=\"bdff53ca\"><span data-lake-id=\"u8e89b299\" id=\"u8e89b299\">消息应答的方法：</span></h4><p data-lake-id=\"u91742edc\" id=\"u91742edc\"><br></p><p data-lake-id=\"u50ffcea8\" id=\"u50ffcea8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638193415623-6b7ff26f-8cc3-4abd-b1c6-41f79897f0cf.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D312%26id%3Dud16b0385%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D312%26originWidth%3D737%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D100867%26status%3Ddone%26style%3Dnone%26taskId%3Du39cf8244-b605-4c5d-baca-fe2103cd9d3%26title%3D%26width%3D737%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A737%2C%22originHeight%22%3A312%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22S2b1y%22%7D\"></card></p><p data-lake-id=\"u9dec6f82\" id=\"u9dec6f82\"><br></p><h4 data-lake-id=\"70c2cd3d\" id=\"70c2cd3d\"><span data-lake-id=\"udd5077f9\" id=\"udd5077f9\">批量处理 Multiple</span></h4><p data-lake-id=\"ubcb490e9\" id=\"ubcb490e9\"><br></p><p data-lake-id=\"u50a423cf\" id=\"u50a423cf\"><span data-lake-id=\"u38f6a02d\" id=\"u38f6a02d\">手动应答的好处：可以批量应答，并减少网络拥堵。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638282925466-4d3081e6-809c-4a5f-9472-741dacb0cc7c.png%23clientId%3Dub82069db-0272-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D588%26id%3Du97ebb457%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D811%26originWidth%3D1024%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D292383%26status%3Ddone%26style%3Dnone%26taskId%3Duf04a703e-97b1-4fe2-b58f-33d8b0dff4d%26title%3D%26width%3D741.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1024%2C%22originHeight%22%3A811%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f5f5%22%2C%22id%22%3A%22rUzZh%22%7D\"></card><span data-lake-id=\"uccc1f103\" id=\"uccc1f103\"><br /></span><span data-lake-id=\"udcc741b7\" id=\"udcc741b7\">但是批量应答可能会丢失消息。所以尽量不要批量应答，将 multiple 设置为 false。</span></p><p data-lake-id=\"ue797ecdd\" id=\"ue797ecdd\"><br></p><h3 data-lake-id=\"8f744d87\" id=\"8f744d87\"><span data-lake-id=\"u0947adaa\" id=\"u0947adaa\">消息自动重新入队</span></h3><p data-lake-id=\"ub78af706\" id=\"ub78af706\"><br></p><p data-lake-id=\"u48684c84\" id=\"u48684c84\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638317239422-ab1bab41-ac6f-4a05-b3c5-c539d9e6dcd1.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D85%26id%3Du97c18f3b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D79%26originWidth%3D665%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D57746%26status%3Ddone%26style%3Dnone%26taskId%3Du14e494b5-3291-4daf-ada5-47aafa5eab0%26title%3D%26width%3D715.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A665%2C%22originHeight%22%3A79%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ebeae9%22%2C%22id%22%3A%22qAYOD%22%7D\"></card><span data-lake-id=\"u261fb783\" id=\"u261fb783\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638317701734-1133a417-ebbe-4ad9-8453-f0803583491a.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D308%26id%3Du7be19416%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D469%26originWidth%3D1088%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D306122%26status%3Ddone%26style%3Dnone%26taskId%3Du7d90ec89-bd9a-4090-bda5-c09c6014c27%26title%3D%26width%3D714.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1088%2C%22originHeight%22%3A469%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e5e4df%22%2C%22id%22%3A%22o9cFt%22%7D\"></card><span data-lake-id=\"u63cecd77\" id=\"u63cecd77\"><br /></span><span data-lake-id=\"u3de7e416\" id=\"u3de7e416\">测试：<br /></span><span data-lake-id=\"u4dc11cc9\" id=\"u4dc11cc9\"> 1. 生产者：</span></p><p data-lake-id=\"uf22d07da\" id=\"uf22d07da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A46%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%2C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Task2%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(TASK_QUEUE_NAME%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20TASK_QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2207cf3bd5%22%7D\"></card><p data-lake-id=\"u7a59e1ef\" id=\"u7a59e1ef\"><br></p><ol list=\"u5f697a5a\" start=\"2\"><li fid=\"u2dd03fad\" data-lake-id=\"ua5680886\" id=\"ua5680886\"><span data-lake-id=\"u3013537c\" id=\"u3013537c\">两个消费者（消息手动应答）：</span></li></ol><p data-lake-id=\"u9ced89cf\" id=\"u9ced89cf\"><br></p><p data-lake-id=\"udf412596\" id=\"udf412596\"><span data-lake-id=\"u8c75a599\" id=\"u8c75a599\">消费者一：</span></p><p data-lake-id=\"ueae64f29\" id=\"ueae64f29\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.atguigu.rabbitmq.utils.SleepUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A58%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%EF%BC%8C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Work03%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22C1%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E8%BE%83%E7%9F%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%89%E7%9D%A11s%5Cn%20%20%20%20%20%20%20%20%20%20%20%20SleepUtils.sleep(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E9%80%9A%E8%BF%87%E4%BF%A1%E9%81%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%E5%8F%82%E6%95%B0%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%201.%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%A0%87%E8%AE%B0%20tag%5Cn%20%20%20%20%20%20%20%20%20%20%20%202.%20%E6%98%AF%E5%90%A6%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%20%20false%3A%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%E4%BF%A1%E9%81%93%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8Ctrue%3A%E6%89%B9%E9%87%8F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%87%87%E7%94%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20boolean%20autoAck%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(TASK_QUEUE_NAME%2C%20autoAck%2C%20deliverCallback%2C%20(consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227fa74098%22%7D\"></card><p data-lake-id=\"u510b8aea\" id=\"u510b8aea\"><br></p><p data-lake-id=\"u13871e3e\" id=\"u13871e3e\"><span data-lake-id=\"u6439174b\" id=\"u6439174b\">消费者二：</span></p><p data-lake-id=\"ufa927a3f\" id=\"ufa927a3f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.atguigu.rabbitmq.utils.SleepUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A58%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%EF%BC%8C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Work04%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22C2%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E8%BE%83%E7%9F%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%89%E7%9D%A11s%5Cn%20%20%20%20%20%20%20%20%20%20%20%20SleepUtils.sleep(30)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E9%80%9A%E8%BF%87%E4%BF%A1%E9%81%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%E5%8F%82%E6%95%B0%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%201.%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%A0%87%E8%AE%B0%20tag%5Cn%20%20%20%20%20%20%20%20%20%20%20%202.%20%E6%98%AF%E5%90%A6%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%20%20false%3A%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%E4%BF%A1%E9%81%93%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8Ctrue%3A%E6%89%B9%E9%87%8F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%87%87%E7%94%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20boolean%20autoAck%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(TASK_QUEUE_NAME%2C%20autoAck%2C%20deliverCallback%2C%20(consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22f6acdd41%22%7D\"></card><p data-lake-id=\"ucab58ba8\" id=\"ucab58ba8\"><br></p><p data-lake-id=\"u3fb35c0e\" id=\"u3fb35c0e\"><span data-lake-id=\"ub6504087\" id=\"ub6504087\">测试步骤：<br /></span><span data-lake-id=\"uc0861472\" id=\"uc0861472\">① 先启动 task2，创建 ack_queue 队列；（在 ip:15672 的 queue 列表中可以看到目前拥有的队列）<br /></span><span data-lake-id=\"uf95d76a3\" id=\"uf95d76a3\">② 启动 work02，work03 接收消息（消费者）；<br /></span><span data-lake-id=\"ua771a0ff\" id=\"ua771a0ff\">③ 发消息：在 task2 控制台输入 aa,bb,cc,dd,ee,ff，可以看到 work2 和 work3 是轮训接收消息；如果到 work03 应该接收消息 ee 时，work03 突然挂掉，此时 ee 会被转发给 work02 中的 C1，这时 C1 会接收到 ee，因此消息不会丢失，这说明了 rabbitmq 有手动应答的能力，只要没有收到消息，就不会手动应答，从而将消息放回队列。而队列又再次将消息传递给 C1 进行重新消费，从而导致 ee 并没有丢失。</span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638348662336-051f5011-f512-44d1-bb05-053e49ba050c.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D499%26id%3Du60c5aa9e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D499%26originWidth%3D1092%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D254728%26status%3Ddone%26style%3Dnone%26taskId%3Du6c03afcd-9d58-4d4b-b839-5e4801e20e0%26title%3D%26width%3D1092%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1092%2C%22originHeight%22%3A499%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22Rq0q6%22%7D\"></card></p><p data-lake-id=\"ub25bd699\" id=\"ub25bd699\"><br></p><h2 data-lake-id=\"274a6bb3\" id=\"274a6bb3\"><span data-lake-id=\"u3b0468ca\" id=\"u3b0468ca\">队列持久化</span></h2><p data-lake-id=\"u65611189\" id=\"u65611189\"><br></p><p data-lake-id=\"ue951fa0d\" id=\"ue951fa0d\"><span data-lake-id=\"u4a41f4f0\" id=\"u4a41f4f0\">如果存在同名未被持久化的队列，则需要先删除原先的未被持久化的队列，再重新生成一个持久化队列。</span></p><p data-lake-id=\"u9565990f\" id=\"u9565990f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cnboolean%20durable%20%3D%20true%3B%20%2F%2F%E5%9C%A8%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%AD%EF%BC%8C%E9%9C%80%E8%A6%81%E8%AE%A9queue%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96%5Cnchannel.queueDeclare(TASK_QUEUE_NAME%2C%20durable%2C%20false%2C%20false%2C%20null)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221a197cbd%22%7D\"></card><p data-lake-id=\"ua4a455e1\" id=\"ua4a455e1\"><br></p><p data-lake-id=\"u003d6059\" id=\"u003d6059\"><span data-lake-id=\"ub4006d96\" id=\"ub4006d96\">生成一个持久化队列之后，在 rabbitmq 控制台中这个队列的 features 属性会出现 D（代表持久化）。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638359722330-59d15b49-1b8d-4d93-85aa-ecd40227bd45.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D129%26id%3Dufd6f763b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D129%26originWidth%3D781%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D13881%26status%3Ddone%26style%3Dnone%26taskId%3Duab54d6ef-4036-4edf-bca6-ba4a9dcac1d%26title%3D%26width%3D781%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A781%2C%22originHeight%22%3A129%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f1f0%22%2C%22id%22%3A%22iMXeX%22%7D\"></card></p><p data-lake-id=\"u3e80b572\" id=\"u3e80b572\"><br></p><h2 data-lake-id=\"f1739dad\" id=\"f1739dad\"><span data-lake-id=\"ufec32f24\" id=\"ufec32f24\">消息持久化</span></h2><p data-lake-id=\"uc661f556\" id=\"uc661f556\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E8%AE%BE%E7%BD%AE%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E4%B8%BA%E6%8C%81%E4%B9%85%E5%8C%96%E6%B6%88%E6%81%AF%EF%BC%88%E8%A6%81%E6%B1%82%E4%BF%9D%E5%AD%98%E5%88%B0%E7%A3%81%E7%9B%98%E4%B8%8AMessageProperties.PERSISTENT_TEXT_PLAIN%EF%BC%89%5Cnchannel.basicPublish(%5C%22%5C%22%2C%20TASK_QUEUE_NAME%2C%20MessageProperties.PERSISTENT_TEXT_PLAIN%2C%20message.getBytes())%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222ac9ced1%22%7D\"></card><p data-lake-id=\"u478658c1\" id=\"u478658c1\"><br></p><p data-lake-id=\"u88b0d835\" id=\"u88b0d835\"><br></p><p data-lake-id=\"u2a1a3ee8\" id=\"u2a1a3ee8\"><br></p><h2 data-lake-id=\"afba844e\" id=\"afba844e\"><span data-lake-id=\"u1e31118a\" id=\"u1e31118a\">不公平分发</span></h2><p data-lake-id=\"ubf424800\" id=\"ubf424800\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%9C%A8%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%AD%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%B9%8B%E5%89%8D%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%5Cnint%20prefetchCount%20%3D%201%3B%5Cnchannel.basicQos(prefetchCount)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22b23fdf5a%22%7D\"></card><p data-lake-id=\"u6ed41d59\" id=\"u6ed41d59\"><br></p><p data-lake-id=\"u828c250f\" id=\"u828c250f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361240814-a1349c7f-2e3e-410a-ba3b-f2f872fab0bb.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D232%26id%3Du1ff04a34%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D232%26originWidth%3D385%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D20173%26status%3Ddone%26style%3Dnone%26taskId%3Dub1b60899-802e-4d67-9aed-a99c48b5db3%26title%3D%26width%3D385%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A385%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303d45%22%2C%22id%22%3A%22vTMLG%22%7D\"></card><span data-lake-id=\"uac36cfc2\" id=\"uac36cfc2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361251165-68b13d22-fe49-4fd8-9471-26161051c180.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du477bebf6%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D177%26originWidth%3D431%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D18613%26status%3Ddone%26style%3Dnone%26taskId%3Due60522ee-50ed-46f9-ae69-472369ce4b6%26title%3D%26width%3D431%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A431%2C%22originHeight%22%3A177%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c3a42%22%2C%22id%22%3A%22zGQk4%22%7D\"></card></p><p data-lake-id=\"u606a7603\" id=\"u606a7603\"><br></p><h2 data-lake-id=\"e7e8ffe0\" id=\"e7e8ffe0\"><span data-lake-id=\"u8c5b6027\" id=\"u8c5b6027\">预取值</span></h2><p data-lake-id=\"uc821be09\" id=\"uc821be09\"><br></p><p data-lake-id=\"uf28a9818\" id=\"uf28a9818\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361857297-fa168e46-191d-44b2-8ce2-df2cb52a382d.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D282%26id%3Due1e2c233%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D453%26originWidth%3D1130%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D347909%26status%3Ddone%26style%3Dnone%26taskId%3Due241edd5-d375-46cb-9668-4a4eb4d7c9c%26title%3D%26width%3D703.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1130%2C%22originHeight%22%3A453%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e4e4e5%22%2C%22id%22%3A%22mwjn3%22%7D\"></card></p><p data-lake-id=\"u85729c36\" id=\"u85729c36\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22int%20prefetchCount%20%3D%205%3B%5Cnchannel.basicQos(prefetchCount)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221f902658%22%7D\"></card><p data-lake-id=\"uac932245\" id=\"uac932245\"><br></p><p data-lake-id=\"ucf3fd997\" id=\"ucf3fd997\"><br></p><p data-lake-id=\"u92071e4b\" id=\"u92071e4b\"><br></p><h2 data-lake-id=\"1e9c309f\" id=\"1e9c309f\"><span data-lake-id=\"u32130f3f\" id=\"u32130f3f\">发布确认原理</span></h2><p data-lake-id=\"ua7b44864\" id=\"ua7b44864\"><br></p><p data-lake-id=\"uf9cf497a\" id=\"uf9cf497a\"><br></p><p data-lake-id=\"uc237fdfc\" id=\"uc237fdfc\"><br></p><h2 data-lake-id=\"e61fd426\" id=\"e61fd426\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638364988019-b29d7c44-ebca-4978-95fd-034500d1bd7b.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D369%26id%3Du98ff6bb0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D369%26originWidth%3D930%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D222643%26status%3Ddone%26style%3Dnone%26taskId%3Dua25c2547-8233-4893-8d5b-4406b84e85f%26title%3D%26width%3D930%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A930%2C%22originHeight%22%3A369%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafb%22%2C%22id%22%3A%22Xek0V%22%7D\"></card></h2><p data-lake-id=\"ub971425a\" id=\"ub971425a\"><br></p><p data-lake-id=\"uff8b9cca\" id=\"uff8b9cca\"><span data-lake-id=\"uc353e344\" id=\"uc353e344\">在信道之后开启发布确认：</span></p><p data-lake-id=\"u0e87e7d9\" id=\"u0e87e7d9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E4%BF%A1%E9%81%93%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cnchannel.confirmSelect()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ad539932%22%7D\"></card><p data-lake-id=\"u240d4823\" id=\"u240d4823\"><br></p><p data-lake-id=\"uda74d6f1\" id=\"uda74d6f1\"><br></p><p data-lake-id=\"u11342da4\" id=\"u11342da4\"><br></p><h2 data-lake-id=\"f1ad8c9b\" id=\"f1ad8c9b\"><span data-lake-id=\"uf0e1d45c\" id=\"uf0e1d45c\">单个发布确认</span></h2><p data-lake-id=\"u3cbeb3a0\" id=\"u3cbeb3a0\"><br></p><p data-lake-id=\"uc4d6c015\" id=\"uc4d6c015\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638365489548-64267da5-f60d-4b88-98af-bdf5806d5038.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D203%26id%3Dub1148f56%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D203%26originWidth%3D993%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D342872%26status%3Ddone%26style%3Dnone%26taskId%3Du2df32a3e-4c69-4599-868a-d81e33495ec%26title%3D%26width%3D993%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A993%2C%22originHeight%22%3A203%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d0dcda%22%2C%22id%22%3A%22qVQAu%22%7D\"></card></p><p data-lake-id=\"u6734b8e1\" id=\"u6734b8e1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.four%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.UUID%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2021%3A32%5Cn%20*%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A%5Cn%20*%20%E4%BD%BF%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%20%20%E6%AF%94%E8%BE%83%E5%93%AA%E7%A7%8D%E7%A1%AE%E8%AE%A4%E6%96%B9%E5%BC%8F%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%5Cn%20*%201.%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20*%202.%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%20*%203.%E5%BC%82%E6%AD%A5%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%20*%2F%5Cnpublic%20class%20ConfireMessage%20%7B%5Cn%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20public%20static%20final%20int%20MESSAGE_COUNT%20%3D%201000%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20InterruptedException%2C%20TimeoutException%2C%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F1.%20%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20ConfireMessage.publicMessageIndividually()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B629726ms%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageIndividually()%20throws%20IOException%2C%20TimeoutException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20massage%20%3D%20i%20%2B%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20massage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8D%95%E4%B8%AA%E6%B6%88%E6%81%AF%E5%B0%B1%E9%A9%AC%E4%B8%8A%E8%BF%9B%E8%A1%8C%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20boolean%20flag%20%3D%20channel.waitForConfirms()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(flag)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%2BMESSAGE_COUNT%2B%5C%22%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%2B(end%20-%20begin)%2B%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e9bbaca4%22%7D\"></card><p data-lake-id=\"u662ff4b5\" id=\"u662ff4b5\"><br></p><p data-lake-id=\"u9a18410d\" id=\"u9a18410d\"><br></p><p data-lake-id=\"ud961b543\" id=\"ud961b543\"><br></p><h2 data-lake-id=\"498cf9b3\" id=\"498cf9b3\"><span data-lake-id=\"u10e0af31\" id=\"u10e0af31\">批量发布确认</span></h2><p data-lake-id=\"ue56ad038\" id=\"ue56ad038\"><br></p><p data-lake-id=\"ub790e1b8\" id=\"ub790e1b8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638366964213-10397181-357d-4896-9e91-84690b69c982.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D137%26id%3Dude627a73%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D137%26originWidth%3D968%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D206130%26status%3Ddone%26style%3Dnone%26taskId%3Du0c3dafe3-1f66-4cc1-83ba-f5e8edae8b3%26title%3D%26width%3D968%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A968%2C%22originHeight%22%3A137%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d7d9d8%22%2C%22id%22%3A%22tMsLz%22%7D\"></card></p><p data-lake-id=\"u31587570\" id=\"u31587570\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageBatch()%20throws%20IOException%2C%20TimeoutException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%E5%A4%A7%E5%B0%8F%5Cn%20%20%20%20%20%20%20%20int%20batchSize%20%3D%20100%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF%EF%BC%8C%20%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20i%20%2B%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%25%20batchSize%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.waitForConfirms()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222f62025c%22%7D\"></card><p data-lake-id=\"uf3e134d2\" id=\"uf3e134d2\"><br></p><p data-lake-id=\"u47f2cb22\" id=\"u47f2cb22\"><br></p><p data-lake-id=\"u6d154a3b\" id=\"u6d154a3b\"><br></p><h2 data-lake-id=\"836eb661\" id=\"836eb661\"><span data-lake-id=\"u4945ac71\" id=\"u4945ac71\">异步发布确认</span></h2><p data-lake-id=\"u0f0edc87\" id=\"u0f0edc87\"><br></p><p data-lake-id=\"u494d78ca\" id=\"u494d78ca\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638368249755-46e1c3b8-f891-48b0-a77b-21b9a80f4e5e.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D119%26id%3Du5fcd19f7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D119%26originWidth%3D1189%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D231115%26status%3Ddone%26style%3Dnone%26taskId%3Du473c99f9-e088-4ad3-84e3-82e606c7d63%26title%3D%26width%3D1189%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1189%2C%22originHeight%22%3A119%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e2dfd4%22%2C%22id%22%3A%22Jwh7I%22%7D\"></card><span data-lake-id=\"uf46f8c96\" id=\"uf46f8c96\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638368124379-5cdb8cbd-707a-4a1f-92f4-3dc511a9ec11.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D571%26id%3Du4b5d988b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D441%26originWidth%3D964%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D239080%26status%3Ddone%26style%3Dnone%26taskId%3Dua0b85de0-7119-4e3a-a0be-75854b9aaac%26title%3D%26width%3D1248.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A964%2C%22originHeight%22%3A441%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22T1TVR%22%7D\"></card></p><p data-lake-id=\"u52c10243\" id=\"u52c10243\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20public%20static%20final%20int%20MESSAGE_COUNT%20%3D%201000%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20InterruptedException%2C%20TimeoutException%2C%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F1.%20%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%2F%2F%20%20%20%20%20%20%20%20ConfireMessage.publicMessageIndividually()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B629726ms%5Cn%2F%2F%20%20%20%20%20%20%20%202.%20%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%2F%2F%20%20%20%20%20%20%20%20ConfireMessage.publicMessageBatch()%3B%20%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6761ms%EF%BC%88%E5%BC%8A%E7%AB%AF%EF%BC%9A%E6%97%A0%E6%B3%95%E7%A1%AE%E8%AE%A4%E5%93%AA%E4%B8%AA%E6%B6%88%E6%81%AF%E6%9C%AA%E8%A2%AB%E7%A1%AE%E8%AE%A4%EF%BC%89%5Cn%2F%2F%20%20%20%20%20%20%20%203.%20%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20ConfireMessage.publicMessageAsync()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6181ms%5Cn%20%20%20%20%7D%5Cn%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageAsync()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%88%90%E5%8A%9F%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20ackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20nackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%87%86%E5%A4%87%E6%B6%88%E6%81%AF%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%8C%E7%9B%91%E5%90%AC%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E5%A4%B1%E8%B4%A5%E4%BA%86%5Cn%20%20%20%20%20%20%20%20channel.addConfirmListener(ackCallback%2C%20nackCallback)%3B%20%20%2F%2F%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20massage%20%3D%20%5C%22%E6%B6%88%E6%81%AF%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20massage.getBytes())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d6247f11%22%7D\"></card><p data-lake-id=\"uc4a48e34\" id=\"uc4a48e34\"><br></p><p data-lake-id=\"u32eb914f\" id=\"u32eb914f\"><br></p><p data-lake-id=\"u776a938a\" id=\"u776a938a\"><br></p><h2 data-lake-id=\"e8b363bb\" id=\"e8b363bb\"><span data-lake-id=\"uf8094a1f\" id=\"uf8094a1f\">如何处理异步未确认消息</span></h2><p data-lake-id=\"ucecfe414\" id=\"ucecfe414\"><br></p><p data-lake-id=\"uf632b3ef\" id=\"uf632b3ef\"><span data-lake-id=\"u39a67765\" id=\"u39a67765\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638404469016-06a08296-9aa6-4d65-8d1c-4c70fb4cd5b8.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D97%26id%3Du0927e367%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D97%26originWidth%3D1033%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D122865%26status%3Ddone%26style%3Dnone%26taskId%3Du67d3a3c6-2f1a-4be9-9c0c-f7d2e743935%26title%3D%26width%3D1033%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1033%2C%22originHeight%22%3A97%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dcd8cd%22%2C%22id%22%3A%22frSPr%22%7D\"></card><span data-lake-id=\"u2e30a431\" id=\"u2e30a431\"><br /></span><span data-lake-id=\"u52adf52f\" id=\"u52adf52f\">上述异步确认有两个线程：</span></p><p data-lake-id=\"uf8bfc172\" id=\"uf8bfc172\"><br></p><ul list=\"u45e3622c\"><li fid=\"uc618e51c\" data-lake-id=\"ueacc7571\" id=\"ueacc7571\"><span data-lake-id=\"u97ac8cde\" id=\"u97ac8cde\">发消息的线程</span></li></ul><ul list=\"u70863da8\"><li fid=\"u94e1bd53\" data-lake-id=\"u5e95d849\" id=\"u5e95d849\"><span data-lake-id=\"uf05b2386\" id=\"uf05b2386\">监听器的线程</span></li></ul><p data-lake-id=\"u51d043a1\" id=\"u51d043a1\"><br></p><p data-lake-id=\"u969efa72\" id=\"u969efa72\"><span data-lake-id=\"u56ff6b24\" id=\"u56ff6b24\">两个线程之间交互，只能用</span><strong><span data-lake-id=\"ue97cc8c5\" id=\"ue97cc8c5\">并发链路式队列（可以在确认发布与发布线程之间进行消息传递）</span></strong><span data-lake-id=\"ud94ae86f\" id=\"ud94ae86f\">。</span></p><p data-lake-id=\"u60c1e577\" id=\"u60c1e577\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageAsync()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%89%E5%BA%8F%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E6%83%85%E5%86%B5%5Cn%20%20%20%20%20%20%20%201.%20%E8%BD%BB%E6%9D%BE%E7%9A%84%E5%B0%86%E5%BA%8F%E5%8F%B7%E4%B8%8E%E6%B6%88%E6%81%AF%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%5Cn%20%20%20%20%20%20%20%202.%20%E8%BD%BB%E6%9D%BE%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%9D%A1%E7%9B%AE%EF%BC%8C%E5%8F%AA%E8%A6%81%E7%BB%99%E5%BA%8F%E5%8F%B7%5Cn%20%20%20%20%20%20%20%203.%E6%94%AF%E6%8C%81%E9%AB%98%E5%B9%B6%E5%8F%91(%E5%A4%9A%E7%BA%BF%E7%A8%8B)%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ConcurrentSkipListMap%3CLong%2CString%3E%20outstandingConfirms%20%3D%20new%20ConcurrentSkipListMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%88%90%E5%8A%9F%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20ackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F2.%20%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%20%20%20%E5%89%A9%E4%B8%8B%E7%9A%84%E5%B0%B1%E6%98%AF%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(multiple)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%98%AF%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%B0%B1%E5%8E%BB%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConcurrentNavigableMap%3CLong%2CString%3E%20confirmed%20%3D%20outstandingConfirms.headMap(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20confirmed.clear()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%98%AF%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%B0%B1%E5%8E%BB%E5%8D%95%E4%B8%AA%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20outstandingConfirms.remove(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20nackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F3.%20%E6%89%93%E5%8D%B0%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%89%E5%93%AA%E4%BA%9B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20outstandingConfirms.get(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%EF%BC%9A%5C%22%2Bmessage%2B%5C%22%3A%3A%3A%3A%3A%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AFtag%3A%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%87%86%E5%A4%87%E6%B6%88%E6%81%AF%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%8C%E7%9B%91%E5%90%AC%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E5%A4%B1%E8%B4%A5%E4%BA%86%5Cn%20%20%20%20%20%20%20%20channel.addConfirmListener(ackCallback%2C%20nackCallback)%3B%20%20%2F%2F%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22%E6%B6%88%E6%81%AF%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%201.%20%E6%AD%A4%E5%A4%84%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E6%B6%88%E6%81%AF%20%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%80%BB%E5%92%8C(%E6%AF%8F%E5%8F%91%E4%B8%80%E6%AC%A1%E6%B6%88%E6%81%AF%E5%B0%B1%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20outstandingConfirms.put(channel.getNextPublishSeqNo()%2Cmessage)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20message.getBytes())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220a036573%22%7D\"></card><p data-lake-id=\"u24ef3936\" id=\"u24ef3936\"><br></p><blockquote data-lake-id=\"u468ca4b1\" id=\"u468ca4b1\"><p data-lake-id=\"u6e59d7fb\" id=\"u6e59d7fb\"><span data-lake-id=\"u4c233bde\" id=\"u4c233bde\">以上三种发布确认速度对比：</span></p></blockquote><p data-lake-id=\"u53e9db23\" id=\"u53e9db23\"><br></p><ul list=\"ubda67d26\"><li fid=\"u90682ff7\" data-lake-id=\"uafded0e5\" id=\"uafded0e5\"><span data-lake-id=\"u55706386\" id=\"u55706386\">单独发布消息：同步等待确认，简单，但吞吐量非常有限。</span></li></ul><ul list=\"u920464d7\"><li fid=\"u864c41fe\" data-lake-id=\"u94b38ace\" id=\"u94b38ace\"><span data-lake-id=\"ue688ad98\" id=\"ue688ad98\">批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题，很难推断出是哪条出现了问题</span></li></ul><ul list=\"u1811646a\"><li fid=\"ucee8d4b9\" data-lake-id=\"uc70e4029\" id=\"uc70e4029\"><span data-lake-id=\"uce17cf14\" id=\"uce17cf14\">异步处理：最佳性能和资源利用，在出现错误的情况下，可以很好的控制，但是实现起来稍微难些。</span></li></ul><p data-lake-id=\"u9569dffd\" id=\"u9569dffd\"><br></p><h2 data-lake-id=\"04596875\" id=\"04596875\"><span data-lake-id=\"u613065a8\" id=\"u613065a8\">交换机</span></h2><p data-lake-id=\"u2d479111\" id=\"u2d479111\"><br></p><p data-lake-id=\"u97889cc2\" id=\"u97889cc2\"><br></p><p data-lake-id=\"u80d50401\" id=\"u80d50401\"><br></p><h3 data-lake-id=\"a3034a5f\" id=\"a3034a5f\"><span data-lake-id=\"ud107708e\" id=\"ud107708e\">交换机的作用</span></h3><p data-lake-id=\"u03675e5f\" id=\"u03675e5f\"><br></p><p data-lake-id=\"u10101ef7\" id=\"u10101ef7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638406810806-e429e00e-78d1-42e2-ab92-c3a53f8c2fa9.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D270%26id%3Duc3415ba1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D387%26originWidth%3D1291%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D191628%26status%3Ddone%26style%3Dnone%26taskId%3Duee2f50b0-7b80-4d38-9c1b-25806445f5f%26title%3D%26width%3D900.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1291%2C%22originHeight%22%3A387%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f4f4%22%2C%22id%22%3A%22tFgNi%22%7D\"></card></p><p data-lake-id=\"u73fbd331\" id=\"u73fbd331\"><br></p><h3 data-lake-id=\"f71f343d\" id=\"f71f343d\"><span data-lake-id=\"udce3eba1\" id=\"udce3eba1\">交换机的类型</span></h3><p data-lake-id=\"ufcff41c1\" id=\"ufcff41c1\"><br></p><ul list=\"u6b7fcdd4\"><li fid=\"uc60d6b8e\" data-lake-id=\"ud837129c\" id=\"ud837129c\"><span data-lake-id=\"u86ef0948\" id=\"u86ef0948\">直接（direct）== 路由类型</span></li></ul><ul list=\"u64dabf1f\"><li fid=\"u13283976\" data-lake-id=\"u3a192338\" id=\"u3a192338\"><span data-lake-id=\"u11dc7ef6\" id=\"u11dc7ef6\">主题（topic）</span></li></ul><ul list=\"uf43ec12e\"><li fid=\"uf7678f46\" data-lake-id=\"u181beacc\" id=\"u181beacc\"><span data-lake-id=\"ubaca4975\" id=\"ubaca4975\">标题（headers）（企业不常用）</span></li></ul><ul list=\"uf352ef6e\"><li fid=\"u49f78635\" data-lake-id=\"ude1c64c5\" id=\"ude1c64c5\"><span data-lake-id=\"u6f4ca6d9\" id=\"u6f4ca6d9\">扇出（fanout）== 发布订阅类型</span></li></ul><ul list=\"u17450d46\"><li fid=\"u8c74f284\" data-lake-id=\"ubc65d5ac\" id=\"ubc65d5ac\"><span data-lake-id=\"uc966f232\" id=\"uc966f232\">无名类型（默认类型），通常用空串进行识别</span></li></ul><p data-lake-id=\"u7841bf48\" id=\"u7841bf48\"><br></p><p data-lake-id=\"uabda8adb\" id=\"uabda8adb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638407294007-f1bd9624-be98-4b90-ba72-9c29d88c326d.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D76%26id%3Du21ac6756%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D76%26originWidth%3D987%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D103665%26status%3Ddone%26style%3Dnone%26taskId%3Du47150f74-3b3b-4cc4-befe-f25d9650214%26title%3D%26width%3D987%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A987%2C%22originHeight%22%3A76%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cbc7bb%22%2C%22id%22%3A%22KlfHY%22%7D\"></card></p><p data-lake-id=\"uefca42b0\" id=\"uefca42b0\"><br></p><h3 data-lake-id=\"192ebf07\" id=\"192ebf07\"><span data-lake-id=\"u9072179f\" id=\"u9072179f\">临时队列</span></h3><p data-lake-id=\"u759723a3\" id=\"u759723a3\"><br></p><p data-lake-id=\"ua828dd89\" id=\"ua828dd89\"><span data-lake-id=\"ud0203d2a\" id=\"ud0203d2a\">不带有持久化，一旦断开消费者的连接，队列将被自动删除。<br /></span><span data-lake-id=\"uef76f3f7\" id=\"uef76f3f7\">​</span></p><p data-lake-id=\"u117c1c40\" id=\"u117c1c40\"><br></p><p data-lake-id=\"udc7c1eb9\" id=\"udc7c1eb9\"><span data-lake-id=\"u26374f4c\" id=\"u26374f4c\">创建临时队列：</span></p><p data-lake-id=\"uc7d27537\" id=\"uc7d27537\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22493f5cb2%22%7D\"></card><p data-lake-id=\"uf4a72fb6\" id=\"uf4a72fb6\"><br></p><p data-lake-id=\"u0810dd91\" id=\"u0810dd91\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638407906977-786b78e8-bfba-4cab-9aee-9ac7ec38a884.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D278%26id%3Du31ce7deb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D410%26originWidth%3D1086%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D55531%26status%3Ddone%26style%3Dnone%26taskId%3Dub3aa0ca4-c823-418b-b8c7-0b7fbd67333%26title%3D%26width%3D736.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1086%2C%22originHeight%22%3A410%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f2f1%22%2C%22id%22%3A%22T0K86%22%7D\"></card></p><p data-lake-id=\"u186f5254\" id=\"u186f5254\"><br></p><h3 data-lake-id=\"f4f12c7a\" id=\"f4f12c7a\"><span data-lake-id=\"ucf133bc6\" id=\"ucf133bc6\">绑定</span></h3><p data-lake-id=\"u3f311869\" id=\"u3f311869\"><br></p><p data-lake-id=\"u06749896\" id=\"u06749896\"><span data-lake-id=\"u2397429d\" id=\"u2397429d\">就是交换机与队列之间的捆绑关系。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638408143523-d4c904d9-33e5-46bd-ad67-885e78b4c34b.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D637%26id%3Du8140e36d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D637%26originWidth%3D487%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D26522%26status%3Ddone%26style%3Dnone%26taskId%3Dua5ea4c46-36c5-4183-aefe-f6a3f676385%26title%3D%26width%3D487%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A487%2C%22originHeight%22%3A637%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf5f5%22%2C%22id%22%3A%22fwITJ%22%7D\"></card></p><p data-lake-id=\"u2f756d95\" id=\"u2f756d95\"><br></p><h3 data-lake-id=\"b3f97d74\" id=\"b3f97d74\"><span data-lake-id=\"u8d977267\" id=\"u8d977267\">发布订阅模式（扇出模式 fanout）</span></h3><p data-lake-id=\"u60ac1fb4\" id=\"u60ac1fb4\"><br></p><p data-lake-id=\"u47c5c857\" id=\"u47c5c857\"><span data-lake-id=\"ufc889c6d\" id=\"ufc889c6d\">类似广播，两个 routingkey 相同<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638408427104-577b627a-521a-4d94-89be-5bf0102440ea.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D218%26id%3Du3ae99c2f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D292%26originWidth%3D1200%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D205919%26status%3Ddone%26style%3Dnone%26taskId%3Dufe252eb8-02f2-410e-8b74-b8d091c0d4a%26title%3D%26width%3D894%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1200%2C%22originHeight%22%3A292%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8ebea%22%2C%22id%22%3A%22PeGnm%22%7D\"></card></p><p data-lake-id=\"u34a7c050\" id=\"u34a7c050\"><br></p><ol list=\"u4e11381f\"><li fid=\"uffe46d07\" data-lake-id=\"ua058bafa\" id=\"ua058bafa\"><span data-lake-id=\"udd2b4bc0\" id=\"udd2b4bc0\">生产者</span></li></ol><p data-lake-id=\"u527d2fcd\" id=\"u527d2fcd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A59%5Cn%20*%20%E5%8F%91%E6%B6%88%E6%81%AF%EF%BC%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20*%2F%5Cnpublic%20class%20EmitLog%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20%5C%22%5C%22%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22064b8440%22%7D\"></card><p data-lake-id=\"ube6bfff0\" id=\"ube6bfff0\"><br></p><ol list=\"u503d83bd\" start=\"2\"><li fid=\"udec7f53c\" data-lake-id=\"u9725dfb0\" id=\"u9725dfb0\"><span data-lake-id=\"ue0140b5f\" id=\"ue0140b5f\">两个消费者</span></li></ol><p data-lake-id=\"u2a01f03c\" id=\"u2a01f03c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A35%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogs01%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%20%20%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%20(%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%EF%BC%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84%EF%BC%8C%E5%BD%93%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%9F%E5%88%97%E5%B0%B1%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4)%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%EF%BC%8C%E6%8A%8A%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%E6%89%93%E5%8D%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs01%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%224ebe62a0%22%7D\"></card><p data-lake-id=\"u7d8e0aa1\" id=\"u7d8e0aa1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A35%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogs02%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%20%20%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%20(%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%EF%BC%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84%EF%BC%8C%E5%BD%93%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%9F%E5%88%97%E5%B0%B1%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4)%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%EF%BC%8C%E6%8A%8A%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%E6%89%93%E5%8D%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs02%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22bd022965%22%7D\"></card><p data-lake-id=\"ub0920585\" id=\"ub0920585\"><br></p><p data-lake-id=\"u9415957b\" id=\"u9415957b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410904168-80b297c1-26ef-4ee4-815c-065abea79bd2.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D328%26id%3Du29891926%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D328%26originWidth%3D580%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D28269%26status%3Ddone%26style%3Dnone%26taskId%3Du6700fa8b-9b2f-4717-91cf-0dfb20b528b%26title%3D%26width%3D580%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A580%2C%22originHeight%22%3A328%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c383f%22%2C%22id%22%3A%22Jf7Cl%22%7D\"></card><span data-lake-id=\"uc0fe1860\" id=\"uc0fe1860\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410913426-c4d1faa3-7b8b-478c-ba35-665d73e98e8b.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D248%26id%3Dua55ed718%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D248%26originWidth%3D528%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D34020%26status%3Ddone%26style%3Dnone%26taskId%3Du415b65a3-7d21-4e16-a1a0-a15d7f3c4ca%26title%3D%26width%3D528%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A528%2C%22originHeight%22%3A248%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323e46%22%2C%22id%22%3A%22HNmyl%22%7D\"></card><span data-lake-id=\"u6e5683e5\" id=\"u6e5683e5\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410920504-2f4c6248-02a0-4765-8647-4c8ab63551e1.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D255%26id%3Du9c537a4f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D255%26originWidth%3D517%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D35282%26status%3Ddone%26style%3Dnone%26taskId%3Du97bfb701-f8bd-45ca-ac41-6f8259d9775%26title%3D%26width%3D517%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A517%2C%22originHeight%22%3A255%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323e46%22%2C%22id%22%3A%22BBNfG%22%7D\"></card></p><p data-lake-id=\"u64f3af66\" id=\"u64f3af66\"><br></p><h3 data-lake-id=\"a7c987c4\" id=\"a7c987c4\"><span data-lake-id=\"u0a451a87\" id=\"u0a451a87\">直接交换机（路由模式 direct）</span></h3><p data-lake-id=\"u6628277e\" id=\"u6628277e\"><br></p><p data-lake-id=\"uc914fe9f\" id=\"uc914fe9f\"><span data-lake-id=\"ud4ff4146\" id=\"ud4ff4146\">两个 routingkey 不相同<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638411099834-bf80fb1d-473a-4a01-8553-e47ee2cd3670.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D303%26id%3Dueba6aa41%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D303%26originWidth%3D874%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D98369%26status%3Ddone%26style%3Dnone%26taskId%3Du2145da18-8429-4959-ab30-43bcc28bb61%26title%3D%26width%3D874%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A874%2C%22originHeight%22%3A303%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6e6e4%22%2C%22id%22%3A%22t5eGH%22%7D\"></card><span data-lake-id=\"u1eb7de15\" id=\"u1eb7de15\"><br /></span><span data-lake-id=\"u9ba6bc34\" id=\"u9ba6bc34\">可以多重绑定。<br /></span><strong><span data-lake-id=\"uba4e10e3\" id=\"uba4e10e3\">生产者发消息给队列，直接交换机通过不同 routingkey 路由到相应的队列，然后消费者接收指定日志。</span></strong></p><p data-lake-id=\"u3ab1ef95\" id=\"u3ab1ef95\"><br></p><ol list=\"ub56a82f0\"><li fid=\"u29f08130\" data-lake-id=\"uf3812b97\" id=\"uf3812b97\"><span data-lake-id=\"ue933e58c\" id=\"ue933e58c\">发消息</span></li></ol><p data-lake-id=\"u7dffc5fc\" id=\"u7dffc5fc\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A59%5Cn%20*%20%E5%8F%91%E6%B6%88%E6%81%AF%EF%BC%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20*%2F%5Cnpublic%20class%20DirectLogs%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20%5C%22error%5C%22%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222a901417%22%7D\"></card><p data-lake-id=\"uf9ac8eab\" id=\"uf9ac8eab\"><br></p><ol list=\"uad1b784c\" start=\"2\"><li fid=\"u3cab60b9\" data-lake-id=\"ufe981695\" id=\"ufe981695\"><span data-lake-id=\"u9b69f27d\" id=\"u9b69f27d\">接收消息</span></li></ol><p data-lake-id=\"uca90e43f\" id=\"uca90e43f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2010%3A15%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsDirect01%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(%5C%22console%5C%22%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22console%5C%22%2CEXCHANGE_NAME%2C%5C%22info%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22console%5C%22%2CEXCHANGE_NAME%2C%5C%22warning%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs01%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(%5C%22console%5C%22%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22fc2f4488%22%7D\"></card><p data-lake-id=\"u1cc8d4b5\" id=\"u1cc8d4b5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2010%3A15%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsDirect02%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(%5C%22disk%5C%22%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22disk%5C%22%2CEXCHANGE_NAME%2C%5C%22error%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs02%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(%5C%22disk%5C%22%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d5727d5b%22%7D\"></card><p data-lake-id=\"uab85209b\" id=\"uab85209b\"><br></p><p data-lake-id=\"u1a362bc4\" id=\"u1a362bc4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638413931242-2c3ef4c2-f3e6-4e6e-ba39-5437dad24d40.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Du9de2b784%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D630%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D21691%26status%3Ddone%26style%3Dnone%26taskId%3Du7cd93b89-df35-4f94-aa33-6626b0dc70b%26title%3D%26width%3D630%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A630%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c3941%22%2C%22id%22%3A%22eyPPs%22%7D\"></card><span data-lake-id=\"u37cd2242\" id=\"u37cd2242\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638413948375-568b73ae-0203-4f53-9a9b-528667192aa2.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Duc8400be0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D683%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D24900%26status%3Ddone%26style%3Dnone%26taskId%3Du38d71d59-3dd8-4324-9fae-335fd043524%26title%3D%26width%3D683%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A683%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3b43%22%2C%22id%22%3A%22U0kJT%22%7D\"></card></p><p data-lake-id=\"u154435a1\" id=\"u154435a1\"><br></p><h3 data-lake-id=\"c4e17e43\" id=\"c4e17e43\"><span data-lake-id=\"u9924c5e2\" id=\"u9924c5e2\">主题交换机（Topic）</span></h3><p data-lake-id=\"ubdbf1ba0\" id=\"ubdbf1ba0\"><br></p><p data-lake-id=\"ucae3280a\" id=\"ucae3280a\"><span data-lake-id=\"uc1d10b00\" id=\"uc1d10b00\">规范：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638414479059-98f3dc8e-ee99-4093-b2cb-81eaecec9acb.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D226%26id%3Du34e92b6a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D226%26originWidth%3D834%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D170475%26status%3Ddone%26style%3Dnone%26taskId%3Due217ff8b-9da9-493e-9a4b-07c6ab22bab%26title%3D%26width%3D834%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A834%2C%22originHeight%22%3A226%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cfcac1%22%2C%22id%22%3A%22KCIOt%22%7D\"></card><span data-lake-id=\"u579a3771\" id=\"u579a3771\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415621949-8c1e4089-881d-482e-a377-ab7f224a2c92.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du76cf3ab8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D257%26originWidth%3D801%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D151366%26status%3Ddone%26style%3Dnone%26taskId%3Du98d7748e-2fc6-4df3-a740-cae3ba06db9%26title%3D%26width%3D801%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A801%2C%22originHeight%22%3A257%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e6a198%22%2C%22id%22%3A%22HeQJL%22%7D\"></card><span data-lake-id=\"u141af3b3\" id=\"u141af3b3\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415680787-e95ef7a6-bec4-44b3-8e45-1e0c4adac6f7.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D350%26id%3Du280d2c9d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D350%26originWidth%3D829%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D181864%26status%3Ddone%26style%3Dnone%26taskId%3Du67807a72-c793-4b0b-a14e-e6270164016%26title%3D%26width%3D829%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A829%2C%22originHeight%22%3A350%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e08176%22%2C%22id%22%3A%22ZuvJl%22%7D\"></card><span data-lake-id=\"u97ad8abd\" id=\"u97ad8abd\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415855921-8e2750b0-e5df-4b1c-90a3-7e3f696543d6.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D188%26id%3Duf97e55b4%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D188%26originWidth%3D920%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D178229%26status%3Ddone%26style%3Dnone%26taskId%3Dufb1118a1-0b9d-4a97-bd09-0ff626585f5%26title%3D%26width%3D920%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A920%2C%22originHeight%22%3A188%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c2beb2%22%2C%22id%22%3A%22iZC7I%22%7D\"></card></p><p data-lake-id=\"u5bf7d3d8\" id=\"u5bf7d3d8\"><br></p><h3 data-lake-id=\"36d4697d\" id=\"36d4697d\"><span data-lake-id=\"ud625f05f\" id=\"ud625f05f\">主题交换机（实战）</span></h3><p data-lake-id=\"ub70d80a5\" id=\"ub70d80a5\"><br></p><p data-lake-id=\"uca5a3ec7\" id=\"uca5a3ec7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638416303199-5f9e655c-c5c2-4a16-9d12-ba873c31c8e6.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D331%26id%3Du07108cc7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D331%26originWidth%3D1114%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D231103%26status%3Ddone%26style%3Dnone%26taskId%3Dud57ef875-e371-4fa6-980a-20a29a7366e%26title%3D%26width%3D1114%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1114%2C%22originHeight%22%3A331%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4eae8%22%2C%22id%22%3A%22zgYBJ%22%7D\"></card></p><p data-lake-id=\"u71bf4d07\" id=\"u71bf4d07\"><br></p><ol list=\"ud4092d2a\"><li fid=\"u74054fe3\" data-lake-id=\"ub54f7556\" id=\"ub54f7556\"><span data-lake-id=\"u8b30a1dc\" id=\"u8b30a1dc\">消费者</span></li></ol><p data-lake-id=\"u39a550d2\" id=\"u39a550d2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2011%3A37%5Cn%20*%20%E5%A3%B0%E6%98%8E%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%20%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%98%9F%E5%88%97%5Cn%20*%20%3Cp%3E%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20C2%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsTopic01%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22topic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20%5C%22Q1%5C%22%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%20routingkey%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22*.orange.*%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E9%98%9F%E5%88%97%EF%BC%9A%5C%22%20%2B%20queueName%20%2B%20%5C%22%E7%BB%91%E5%AE%9A%E9%94%AE%EF%BC%9A%5C%22%20%2B%20message.getEnvelope().getRoutingKey())%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221860808d%22%7D\"></card><p data-lake-id=\"ucf8d429e\" id=\"ucf8d429e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2011%3A37%5Cn%20*%20%E5%A3%B0%E6%98%8E%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%20%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%98%9F%E5%88%97%5Cn%20*%20%3Cp%3E%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20C2%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsTopic02%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22topic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20%5C%22Q2%5C%22%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%20routingkey%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22*.*.rabbit%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22lazy.%23%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E9%98%9F%E5%88%97%EF%BC%9A%5C%22%20%2B%20queueName%20%2B%20%5C%22%E7%BB%91%E5%AE%9A%E9%94%AE%EF%BC%9A%5C%22%20%2B%20message.getEnvelope().getRoutingKey())%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%226972b59b%22%7D\"></card><p data-lake-id=\"ubd93dfb6\" id=\"ubd93dfb6\"><br></p><ol list=\"u65e6951e\" start=\"2\"><li fid=\"u8b725ab3\" data-lake-id=\"u9e924b7c\" id=\"u9e924b7c\"><span data-lake-id=\"uabdadacb\" id=\"uabdadacb\">生产者</span></li></ol><p data-lake-id=\"u9a490197\" id=\"u9a490197\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.security.spec.ECField%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2014%3A45%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20EmitLogTopic%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E4%B8%8B%E5%9B%BE%E7%BB%91%E5%AE%9A%E5%85%B3%E7%B3%BB%E5%A6%82%E4%B8%8B%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20*%20Q1--%3E%20%E7%BB%91%E5%AE%9A%E7%9A%84%E6%98%AF%EF%BC%9A%20%E4%B8%AD%E9%97%B4%E5%B8%A63%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88*.orange*%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20Q2--%3E%20%E7%BB%91%E5%AE%9A%E7%9A%84%E6%98%AF%EF%BC%9A%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E6%98%AFrabbit%E7%9A%843%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%88*.*.rabbit%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E6%98%AFlazy%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%88lazy.%23%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20String%3E%20bindingKeyMap%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.orange.rabbit%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.elephant%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.pink.rabbit%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.brown.fox%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.orange.male.rabbit%5C%22%2C%20%5C%22%E8%99%BD%E7%84%B6%E6%BB%A1%E8%B6%B3%E4%B8%A4%E4%B8%AA%E7%BB%91%E5%AE%9A%E4%BD%86%E5%8F%AA%E8%A2%AB%E9%98%9F%E5%88%97Q2%E6%8E%A5%E6%94%B6%E4%B8%80%E6%AC%A1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.brown.fox%5C%22%2C%20%5C%22%E4%B8%8D%E5%8C%B9%E9%85%8D%E4%BB%BB%E4%BD%95%E7%BB%91%E5%AE%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E4%BB%BB%E4%BD%95%E9%98%9F%E5%88%97%E6%8E%A5%E6%94%B6%E5%88%B0%E4%BC%9A%E8%A2%AB%E4%B8%A2%E5%BC%83%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.male.rabbit%5C%22%2C%20%5C%22%E6%98%AF%E5%9B%9B%E4%B8%AA%E5%8D%95%E8%AF%8D%E4%B8%8D%E5%8C%B9%E9%85%8D%E4%BB%BB%E4%BD%95%E7%BB%91%E5%AE%9A%E5%AE%9A%E4%BC%9A%E4%B8%A2%E5%BC%83%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.male.rabbit%5C%22%2C%20%5C%22%E6%98%AF%E5%9B%9B%E4%B8%AA%E5%8D%95%E8%AF%8D%E4%BD%86%E5%8C%B9%E9%85%8DQ2%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20for%20(Map.Entry%3CString%2C%20String%3E%20bindingKeyEntry%20%3A%20bindingKeyMap.entrySet())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20routingKey%20%3D%20bindingKeyEntry.getKey()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20bindingKeyEntry.getValue()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20routingKey%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2256e802f3%22%7D\"></card><p data-lake-id=\"u2545c488\" id=\"u2545c488\"><br></p><p data-lake-id=\"u8f7b2119\" id=\"u8f7b2119\"><span data-lake-id=\"u35993936\" id=\"u35993936\">先启动消费者，再启动生产者。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430253833-e55a9ffe-37a0-4c04-b7b7-093a65480f71.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D540%26id%3Du94f62b22%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D540%26originWidth%3D683%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D63817%26status%3Ddone%26style%3Dnone%26taskId%3Du846aee7e-23e7-429c-8c68-098657667fa%26title%3D%26width%3D683%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A683%2C%22originHeight%22%3A540%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3a41%22%2C%22id%22%3A%22r1tul%22%7D\"></card><span data-lake-id=\"u868c8c5a\" id=\"u868c8c5a\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430292235-0a8fd8ca-fdd9-4f2e-9a52-de2398da4db4.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D548%26id%3Du5b1d2810%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D548%26originWidth%3D649%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D60902%26status%3Ddone%26style%3Dnone%26taskId%3Duf769df3d-232c-4803-866e-9b789b65799%26title%3D%26width%3D649%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A649%2C%22originHeight%22%3A548%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303b42%22%2C%22id%22%3A%22p0vbD%22%7D\"></card><span data-lake-id=\"uc40afe97\" id=\"uc40afe97\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430299720-f401248d-7efc-425f-aff1-59f8cda3349d.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du7c6af404%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D257%26originWidth%3D674%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D33728%26status%3Ddone%26style%3Dnone%26taskId%3Du0e4568aa-d243-4696-a1eb-02eebf586cf%26title%3D%26width%3D674%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A674%2C%22originHeight%22%3A257%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23313d44%22%2C%22id%22%3A%22Axrk6%22%7D\"></card></p><p data-lake-id=\"u8c98ba91\" id=\"u8c98ba91\"><br></p><h2 data-lake-id=\"3dead64c\" id=\"3dead64c\"><span data-lake-id=\"u047b4415\" id=\"u047b4415\">死信队列</span></h2><p data-lake-id=\"u1870ddac\" id=\"u1870ddac\"><br></p><p data-lake-id=\"ub7284874\" id=\"ub7284874\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430356782-4196f6b8-209f-489a-a5e5-e61974e711ef.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D299%26id%3Dud95905f1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D299%26originWidth%3D1069%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D430772%26status%3Ddone%26style%3Dnone%26taskId%3Due469e4ea-c3e9-44f2-a5e6-4ac2443deba%26title%3D%26width%3D1069%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1069%2C%22originHeight%22%3A299%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dad7cf%22%2C%22id%22%3A%22ZL2Da%22%7D\"></card><span data-lake-id=\"u8cdb6967\" id=\"u8cdb6967\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430504276-84f3e02c-d80f-4fe9-9b9a-b8d9ac3b8290.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D298%26id%3Du8670c10d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D298%26originWidth%3D643%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D162345%26status%3Ddone%26style%3Dnone%26taskId%3Due72cf50e-a8d2-4f86-8a8f-e35ebf10e89%26title%3D%26width%3D643%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A643%2C%22originHeight%22%3A298%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ddd6c3%22%2C%22id%22%3A%22rBdXQ%22%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430601814-eb3112b8-d77b-4213-ad2c-df3c394a36b7.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D553%26id%3Dufda1712c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D553%26originWidth%3D1136%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D162361%26status%3Ddone%26style%3Dnone%26taskId%3Du55e88e2a-dc14-44b5-9eb9-8663773f317%26title%3D%26width%3D1136%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1136%2C%22originHeight%22%3A553%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfafa%22%2C%22id%22%3A%22pQqf7%22%7D\"></card></p><p data-lake-id=\"uad6c0443\" id=\"uad6c0443\"><br></p><ul list=\"ub4dba9c5\"><li fid=\"u4ab60c3a\" data-lake-id=\"uc3ccb3d3\" id=\"uc3ccb3d3\"><span data-lake-id=\"u77883d71\" id=\"u77883d71\">消费者 1：</span></li></ul><p data-lake-id=\"u3530fd70\" id=\"u3530fd70\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2015%3A40%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%851%5Cn%20*%2F%5Cnpublic%20class%20Consumer01%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_EXCHANGE%20%3D%20%5C%22dead_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_QUEUE%20%3D%20%5C%22normal_queue%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_QUEUE%20%3D%20%5C%22dead_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%AD%BB%E4%BF%A1%E5%92%8C%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%8C%20%E7%B1%BB%E5%9E%8B%E4%B8%BAdirect%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(NORMAL_EXCHANGE%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(DEAD_EXCHANGE%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%5Cn%2F%2F%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C10000)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%A3%E5%B8%B8%E9%98%9F%E5%88%97%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20DEAD_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1RoutingKey%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22lisi%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%A3%E5%B8%B8%E9%98%9F%E5%88%97%E7%9A%84%E9%95%BF%E5%BA%A6%E7%9A%84%E9%99%90%E5%88%B6%5Cn%2F%2F%20%20%20%20%20%20%20%20arguments.put(%5C%22x-max-length%5C%22%2C%2019)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(NORMAL_QUEUE%2C%20false%2C%20false%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(DEAD_QUEUE%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%E7%BB%91%E5%AE%9A%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(NORMAL_QUEUE%2C%20NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(DEAD_QUEUE%2C%20DEAD_EXCHANGE%2C%20%5C%22lisi%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.........%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(msg.equals(%5C%22info5%5C%22))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%AD%A4%E6%B6%88%E6%81%AF%E8%A2%ABC1%E6%8B%92%E7%BB%9D%E7%9A%84%5C%22%20%2B%20msg)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8B%92%E7%BB%9D%E6%AD%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E3%80%82%E5%9B%A0%E6%AD%A4%E6%88%90%E4%B8%BA%E6%AD%BB%E4%BF%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicReject(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Consumer01%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20msg)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%BC%80%E5%90%AF%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8C%E5%B0%B1%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%8B%92%E7%BB%9D%E4%BA%86%EF%BC%89%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(NORMAL_QUEUE%2C%20false%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%226b32ccf8%22%7D\"></card><p data-lake-id=\"u435ef8b3\" id=\"u435ef8b3\"><br></p><ul list=\"u9833d078\"><li fid=\"uafeaa448\" data-lake-id=\"u991e0c89\" id=\"u991e0c89\"><span data-lake-id=\"u6d37fec1\" id=\"u6d37fec1\">消费者 2：</span></li></ul><p data-lake-id=\"ufa7c436f\" id=\"ufa7c436f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2015%3A40%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%852%5Cn%20*%2F%5Cnpublic%20class%20Consumer02%20%7B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_QUEUE%20%3D%20%5C%22dead_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.........%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Consumer02%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(DEAD_QUEUE%2C%20false%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220aee91a1%22%7D\"></card><p data-lake-id=\"ud595d97e\" id=\"ud595d97e\"><br></p><ul list=\"u7a57cbe8\"><li fid=\"u52c405ea\" data-lake-id=\"u2bd56aa9\" id=\"u2bd56aa9\"><span data-lake-id=\"ubce8fc66\" id=\"ubce8fc66\">生产者：</span></li></ul><p data-lake-id=\"u44801151\" id=\"u44801151\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2016%3A13%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97-%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E6%97%B6%E9%97%B4%20%20%E8%AE%BE%E7%BD%AEttl%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().expiration(%5C%2210000%5C%22).build()%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221656143b%22%7D\"></card><p data-lake-id=\"u6e029386\" id=\"u6e029386\"><br></p><p data-lake-id=\"u5a3eb9d2\" id=\"u5a3eb9d2\"><span data-lake-id=\"uea2ed46a\" id=\"uea2ed46a\">测试步骤：</span></p><p data-lake-id=\"uba408812\" id=\"uba408812\"><br></p><ol list=\"u12605c33\"><li fid=\"u8cc5814f\" data-lake-id=\"u835dcc9d\" id=\"u835dcc9d\"><span data-lake-id=\"u643f8ba9\" id=\"u643f8ba9\">运行消费者：会发现普通和死信交换机已经绑定各自的队列。</span></li></ol><p data-lake-id=\"u058f5168\" id=\"u058f5168\"><br></p><p data-lake-id=\"u9ebcebd9\" id=\"u9ebcebd9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638445377947-e4a087d0-b755-4178-aa6d-7ae082107bb0.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D495%26id%3Dud91030e8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D495%26originWidth%3D541%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23775%26status%3Ddone%26style%3Dnone%26taskId%3Du8f85c23d-a811-41b4-a478-a20609fc50a%26title%3D%26width%3D541%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A541%2C%22originHeight%22%3A495%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f6%22%2C%22id%22%3A%22xwjE9%22%7D\"></card><span data-lake-id=\"u20dcc1c0\" id=\"u20dcc1c0\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638445475857-ba40932b-588f-43d3-b3a6-5f2660bcd241.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D498%26id%3Dub28b2410%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D498%26originWidth%3D601%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D25129%26status%3Ddone%26style%3Dnone%26taskId%3Du8de3a461-08ce-49b9-9936-e0cf7fa1363%26title%3D%26width%3D601%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A601%2C%22originHeight%22%3A498%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22Jcymv%22%7D\"></card></p><p data-lake-id=\"u62f48d77\" id=\"u62f48d77\"><br></p><ol list=\"u58c0cf9c\" start=\"2\"><li fid=\"ufe890c6a\" data-lake-id=\"u09f241e0\" id=\"u09f241e0\"><span data-lake-id=\"u80004425\" id=\"u80004425\">测试</span><strong><span data-lake-id=\"u9f91257d\" id=\"u9f91257d\">队列达到最大长度</span></strong><span data-lake-id=\"uec0838b8\" id=\"uec0838b8\">，关闭消费者 1 和 2，开启生产者：消息会积压在队列中，消费者 1 所在的普通队列消息限制有 6 条，剩下的 4 条会进入消费者 2 所在的死信队列。如下图所示：</span></li></ol><p data-lake-id=\"u9dbb6efd\" id=\"u9dbb6efd\"><br></p><p data-lake-id=\"ud3960aab\" id=\"ud3960aab\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638448087379-8c4e5c46-39ca-49fd-8024-4111b0a5d431.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D571%26id%3Du9eb9c88a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D571%26originWidth%3D1083%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D79389%26status%3Ddone%26style%3Dnone%26taskId%3Dua5f78b60-fd26-4cb8-9cf8-f0e0f17270b%26title%3D%26width%3D1083%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1083%2C%22originHeight%22%3A571%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1eeed%22%2C%22id%22%3A%22s5bzi%22%7D\"></card></p><p data-lake-id=\"ue98b05db\" id=\"ue98b05db\"><br></p><ol list=\"u16ba7dae\" start=\"3\"><li fid=\"u3f9d6140\" data-lake-id=\"uc5b05a1e\" id=\"uc5b05a1e\"><span data-lake-id=\"u3d2dd79c\" id=\"u3d2dd79c\">取消普通队列的最大长度限制，测试</span><strong><span data-lake-id=\"u66fe44e1\" id=\"u66fe44e1\">消息 ttl 过期</span></strong><span data-lake-id=\"u0eb10fc6\" id=\"u0eb10fc6\">：关闭消费者 1 和 2，开启生产者发送消息。（消息会因为没人接收，会在 ttl 时间内积压在普通队列中， ttl 过期后，消息会进入死信队列中。）</span></li></ol><p data-lake-id=\"u66bade46\" id=\"u66bade46\"><br></p><p data-lake-id=\"u12585112\" id=\"u12585112\"><span data-lake-id=\"u50a28f4b\" id=\"u50a28f4b\">生产者：</span></p><p data-lake-id=\"u60d2c488\" id=\"u60d2c488\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2016%3A13%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97-%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E6%97%B6%E9%97%B4%20%20%E8%AE%BE%E7%BD%AEttl%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().expiration(%5C%2210000%5C%22).build()%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221656143b-1%22%7D\"></card><p data-lake-id=\"ufcc5276d\" id=\"ufcc5276d\"><br></p><ol list=\"u6e510735\" start=\"4\"><li fid=\"ub9db9807\" data-lake-id=\"u3643f27c\" id=\"u3643f27c\"><span data-lake-id=\"ud42e38c6\" id=\"ud42e38c6\">测试</span><strong><span data-lake-id=\"u7a7018e8\" id=\"u7a7018e8\">消息被拒</span></strong><span data-lake-id=\"u3f6dd4c9\" id=\"u3f6dd4c9\">：</span></li></ol><p data-lake-id=\"u1325a418\" id=\"u1325a418\"><br></p><p data-lake-id=\"u1e4cfe0d\" id=\"u1e4cfe0d\"><span data-lake-id=\"u012d5846\" id=\"u012d5846\">开启消费者 1 和 2，再开启生产者。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450659287-e191b69a-07c6-4d5e-8f54-05d22263a235.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D274%26id%3Du03d42d3b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D274%26originWidth%3D642%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D32103%26status%3Ddone%26style%3Dnone%26taskId%3Duf69d66f1-feae-4ff6-83ca-af7f8a83127%26title%3D%26width%3D642%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A274%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3b43%22%2C%22id%22%3A%22jR4qW%22%7D\"></card><span data-lake-id=\"u2fc681b9\" id=\"u2fc681b9\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450668535-06aa1842-3563-455e-bb20-6376694fae1f.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D202%26id%3Du33f7f3ac%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D202%26originWidth%3D616%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23460%26status%3Ddone%26style%3Dnone%26taskId%3Dua7a303f7-25d6-4fc0-8d46-d522a51ded6%26title%3D%26width%3D616%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A616%2C%22originHeight%22%3A202%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232d3a42%22%2C%22id%22%3A%22vAYSS%22%7D\"></card></p><p data-lake-id=\"u56fa6a3a\" id=\"u56fa6a3a\"><br></p><h2 data-lake-id=\"38e2258c\" id=\"38e2258c\"><span data-lake-id=\"ub402faff\" id=\"ub402faff\">延迟队列（基于死信队列）</span></h2><p data-lake-id=\"uaeb50e00\" id=\"uaeb50e00\"><br></p><p data-lake-id=\"uce6f04f4\" id=\"uce6f04f4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450862631-363c8d24-6a72-463a-b827-201e6f79cb79.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D128%26id%3Du8aa7212b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D128%26originWidth%3D1081%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D190603%26status%3Ddone%26style%3Dnone%26taskId%3Due97c71c8-4947-4c82-be00-e98e36ba920%26title%3D%26width%3D1081%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1081%2C%22originHeight%22%3A128%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e1dfd3%22%2C%22id%22%3A%22xrjpE%22%7D\"></card><span data-lake-id=\"u28d9db40\" id=\"u28d9db40\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638451047144-5f4983f1-3a0e-472b-95f3-26635a911749.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D399%26id%3Dud5620b6f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D399%26originWidth%3D869%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D265988%26status%3Ddone%26style%3Dnone%26taskId%3Dub1f53a1e-1377-4e43-ab1d-13e29cf4118%26title%3D%26width%3D869%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A869%2C%22originHeight%22%3A399%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f2%22%2C%22id%22%3A%22O4W2R%22%7D\"></card></p><p data-lake-id=\"u003e5655\" id=\"u003e5655\"><br></p><h3 data-lake-id=\"5bff6472\" id=\"5bff6472\"><span data-lake-id=\"u69a0df70\" id=\"u69a0df70\">整合 SpringBoot</span></h3><p data-lake-id=\"ua9246d88\" id=\"ua9246d88\"><br></p><p data-lake-id=\"u17c7855e\" id=\"u17c7855e\"><br></p><p data-lake-id=\"u37d8ad14\" id=\"u37d8ad14\"><br></p><h4 data-lake-id=\"73ad366e\" id=\"73ad366e\"><span data-lake-id=\"u0a7e6e9e\" id=\"u0a7e6e9e\">实现延迟队列：</span></h4><p data-lake-id=\"u50e8e4bb\" id=\"u50e8e4bb\"><br></p><ol list=\"u3facdfea\"><li fid=\"u192c3c99\" data-lake-id=\"ue7753788\" id=\"ue7753788\"><span data-lake-id=\"udfd2b47e\" id=\"udfd2b47e\">依赖：</span></li></ol><p data-lake-id=\"u3122c714\" id=\"u3122c714\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cproject%20xmlns%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%5C%22%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%20%20%20%20%20%20%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%20https%3A%2F%2Fmaven.apache.org%2Fxsd%2Fmaven-4.0.0.xsd%5C%22%3E%5Cn%20%20%20%20%3CmodelVersion%3E4.0.0%3C%2FmodelVersion%3E%5Cn%20%20%20%20%3Cparent%3E%5Cn%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-parent%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3CrelativePath%2F%3E%20%3C!--%20lookup%20parent%20from%20repository%20--%3E%5Cn%20%20%20%20%3C%2Fparent%3E%5Cn%20%20%20%20%3CgroupId%3Ecom.atguigu.rabbitmq%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Espringboot-rabbitmq%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E0.0.1-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3Cname%3Espringboot-rabbitmq%3C%2Fname%3E%5Cn%20%20%20%20%3Cdescription%3EDemo%20project%20for%20Spring%20Boot%3C%2Fdescription%3E%5Cn%20%20%20%20%3Cproperties%3E%5Cn%20%20%20%20%20%20%20%20%3Cjava.version%3E1.8%3C%2Fjava.version%3E%5Cn%20%20%20%20%3C%2Fproperties%3E%5Cn%20%20%20%20%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-test%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.boot%2Fspring-boot-starter-amqp%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-amqp%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.boot%2Fspring-boot-starter-web%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--web%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%90%AF%E5%8A%A8--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-web%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E5%BF%AB%E9%80%9F%E8%BF%9B%E8%A1%8Cjson%E8%BD%AC%E6%8D%A2--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.alibaba%2Ffastjson%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecom.alibaba%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Efastjson%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.2.78%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.springfox%2Fspringfox-swagger2%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eio.springfox%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espringfox-swagger2%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.0.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.springfox%2Fspringfox-swagger-ui%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eio.springfox%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espringfox-swagger-ui%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.0.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.amqp%2Fspring-rabbit-test%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.amqp%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-rabbit-test%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.4.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.projectlombok%2Flombok%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Elombok%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.18.22%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Eprovided%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%5Cn%5Cn%20%20%20%20%3Cbuild%3E%5Cn%20%20%20%20%20%20%20%20%3Cplugins%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cplugin%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-maven-plugin%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fplugin%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fplugins%3E%5Cn%20%20%20%20%3C%2Fbuild%3E%5Cn%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2273700fd7%22%7D\"></card><p data-lake-id=\"uc2b4899d\" id=\"uc2b4899d\"><br></p><ol list=\"u61a89e08\" start=\"2\"><li fid=\"u69964bea\" data-lake-id=\"u1245e541\" id=\"u1245e541\"><span data-lake-id=\"u9f81332b\" id=\"u9f81332b\">yml 配置文件：</span></li></ol><p data-lake-id=\"u73830d88\" id=\"u73830d88\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22c4ed4d31%22%7D\"></card><p data-lake-id=\"uc99c78c6\" id=\"uc99c78c6\"><br></p><ol list=\"u91eb0172\" start=\"3\"><li fid=\"u49c48c85\" data-lake-id=\"u7aebac69\" id=\"u7aebac69\"><span data-lake-id=\"ua76b3319\" id=\"ua76b3319\">swagger 配置类：</span></li></ol><p data-lake-id=\"u0ccd9e4c\" id=\"u0ccd9e4c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20springfox.documentation.builders.ApiInfoBuilder%3B%5Cnimport%20springfox.documentation.service.ApiInfo%3B%5Cnimport%20springfox.documentation.service.Contact%3B%5Cnimport%20springfox.documentation.spi.DocumentationType%3B%5Cnimport%20springfox.documentation.spring.web.plugins.Docket%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2022%3A34%5Cn%20*%2F%5Cnpublic%20class%20SwaggerConfig%20%7B%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Docket%20webApiConfig()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Docket(DocumentationType.SWAGGER_2)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.groupName(%5C%22webApi%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.apiInfo(webApiInfo())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.select()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20ApiInfo%20webApiInfo()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20ApiInfoBuilder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.title(%5C%22rabbitmq%20%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.description(%5C%22%20%E6%9C%AC%E6%96%87%E6%A1%A3%E6%8F%8F%E8%BF%B0%E4%BA%86%20rabbitmq%20%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.version(%5C%221.0%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.contact(new%20Contact(%5C%22enjoy6288%5C%22%2C%20%5C%22http%3A%2F%2Fatguigu.com%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%221846015350%40qq.com%5C%22))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e6248552%22%7D\"></card><p data-lake-id=\"u5da333d3\" id=\"u5da333d3\"><br></p><p data-lake-id=\"u737ba50b\" id=\"u737ba50b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638490298754-a2b1ced5-676b-4f68-86e0-31f05266088f.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D215%26id%3Du8ba627f6%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D215%26originWidth%3D1100%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D132048%26status%3Ddone%26style%3Dnone%26taskId%3Dud9c3f28a-b8df-44d1-b9df-dc90c70e046%26title%3D%26width%3D1100%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1100%2C%22originHeight%22%3A215%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f8f6%22%2C%22id%22%3A%22Iv7m8%22%7D\"></card></p><p data-lake-id=\"u13d19082\" id=\"u13d19082\"><br></p><ol list=\"u34fa8725\" start=\"4\"><li fid=\"ucf82ec3b\" data-lake-id=\"uce104d61\" id=\"uce104d61\"><span data-lake-id=\"u508e2cbd\" id=\"u508e2cbd\">声明队列配置文件：</span></li></ol><p data-lake-id=\"u0de2ea78\" id=\"u0de2ea78\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%208%3A15%5Cn%20*%20TTL%E9%98%9F%E5%88%97%EF%BC%8C%20%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B1%BB%E4%BB%A3%E7%A0%81%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20TtlQueueConfig%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20X_EXCHANGE%20%3D%20%5C%22X%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20Y_DEAD_LETTER_EXCHANGE%20%3D%20%5C%22Y%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_A%20%3D%20%5C%22QA%5C%22%3B%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_B%20%3D%20%5C%22QB%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_LETTER_QUEUE%20%3D%20%5C%22QD%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8ExExchange%20%E5%88%AB%E5%90%8D%5Cn%20%20%20%20%40Bean(%5C%22xExchange%5C%22)%5Cn%20%20%20%20public%20DirectExchange%20xExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(X_EXCHANGE)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean(%5C%22yExchange%5C%22)%5Cn%20%20%20%20public%20DirectExchange%20yExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%20%20ttl%E4%B8%BA10s%5Cn%20%20%20%20%40Bean(%5C%22queueA%5C%22)%5Cn%20%20%20%20public%20Queue%20queueA()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(3)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%20routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AEttl%20%20%E5%8D%95%E4%BD%8D%E4%B8%BAms%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C%2010000)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_A).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%20%20ttl%E4%B8%BA40s%5Cn%20%20%20%20%40Bean(%5C%22queueB%5C%22)%5Cn%20%20%20%20public%20Queue%20queueB()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(3)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%20routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AEttl%20%20%E5%8D%95%E4%BD%8D%E4%B8%BAms%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C%2040000)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_B).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean(%5C%22queueD%5C%22)%5Cn%20%20%20%20public%20Queue%20queueD()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(DEAD_LETTER_QUEUE).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueABindingX(%40Qualifier(%5C%22queueA%5C%22)%20Queue%20queueA%2C%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueA).to(xExchange).with(%5C%22XA%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBBindingX(%40Qualifier(%5C%22queueB%5C%22)%20Queue%20queueB%2C%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueB).to(xExchange).with(%5C%22XB%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueDBindingY(%40Qualifier(%5C%22queueD%5C%22)%20Queue%20queueD%2C%20%40Qualifier(%5C%22yExchange%5C%22)%20DirectExchange%20yExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueD).to(yExchange).with(%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2234c7bc48%22%7D\"></card><p data-lake-id=\"u7e4c585b\" id=\"u7e4c585b\"><br></p><ol list=\"u5cc5c3b4\" start=\"5\"><li fid=\"u2f0d55b4\" data-lake-id=\"u9edbfaeb\" id=\"u9edbfaeb\"><span data-lake-id=\"u32b3978b\" id=\"u32b3978b\">消费者：接收消息</span></li></ol><p data-lake-id=\"u938e6661\" id=\"u938e6661\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%209%3A01%5Cn%20*%20%E9%98%9F%E5%88%97ttl%20%E6%B6%88%E8%B4%B9%E8%80%85%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20DeadLetterQueueConsumer%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20%5C%22QD%5C%22)%5Cn%20%20%20%20public%20void%20receiveD(Message%20message%2C%20Channel%20channel)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E6%94%B6%E5%88%B0%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222d9d521e%22%7D\"></card><p data-lake-id=\"u5ff8aeb7\" id=\"u5ff8aeb7\"><br></p><ol list=\"ufdf833d6\" start=\"6\"><li fid=\"u698e0874\" data-lake-id=\"uf7ea6cd6\" id=\"uf7ea6cd6\"><span data-lake-id=\"u44854cf1\" id=\"u44854cf1\">发送消息：Controller</span></li></ol><p data-lake-id=\"u4710b98f\" id=\"u4710b98f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20io.swagger.annotations.ApiModelProperty%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%208%3A47%5Cn%20*%20%E5%8F%91%E9%80%81%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%5Cn%20*%20%3Cp%3E%5Cn%20*%20http%3A%2F%2Flocalhost%3A8080%2Fttl%2FsendMsg%2F%E5%98%BB%E5%98%BB%E5%98%BB%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fttl%5C%22)%5Cnpublic%20class%20SendMsgController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMsg%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%A4%E4%B8%AAttl%E9%98%9F%E5%88%97%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XA%5C%22%2C%20%5C%22%E6%B6%88%E6%81%AF%E6%9D%A5%E8%87%AAttl%E4%B8%BA10s%E7%9A%84%E9%98%9F%E5%88%97%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XB%5C%22%2C%20%5C%22%E6%B6%88%E6%81%AF%E6%9D%A5%E8%87%AAttl%E4%B8%BA40s%E7%9A%84%E9%98%9F%E5%88%97%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22acb0bddc%22%7D\"></card><p data-lake-id=\"uca8b3875\" id=\"uca8b3875\"><br></p><p data-lake-id=\"u436ca17c\" id=\"u436ca17c\"><span data-lake-id=\"uab388077\" id=\"uab388077\"><br /></span><span data-lake-id=\"u0771e048\" id=\"u0771e048\">访问：</span><a href=\"http://localhost:8080/ttl/sendMsg/\" target=\"_blank\" data-lake-id=\"ue5bdafdd\" id=\"ue5bdafdd\"><span data-lake-id=\"u0f558b97\" id=\"u0f558b97\">http://localhost:8080/ttl/sendMsg/</span></a><span data-lake-id=\"u1325674b\" id=\"u1325674b\">嘻嘻嘻<br /></span><span data-lake-id=\"udcc8b286\" id=\"udcc8b286\">控制台打印结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638494307481-a59aaddb-4efb-4200-9e05-0e34602ded36.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D202%26id%3Du66541ef9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D202%26originWidth%3D1365%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D62756%26status%3Ddone%26style%3Dnone%26taskId%3Dua128108f-eaa5-47fc-ab0d-e56fe3f57f4%26title%3D%26width%3D1365%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1365%2C%22originHeight%22%3A202%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23333e45%22%2C%22id%22%3A%22tO8el%22%7D\"></card></p><p data-lake-id=\"uafa127ba\" id=\"uafa127ba\"><br></p><h4 data-lake-id=\"5d575387\" id=\"5d575387\"><span data-lake-id=\"uf06e7824\" id=\"uf06e7824\">延迟队列优化：</span></h4><p data-lake-id=\"u6257e7bc\" id=\"u6257e7bc\"><br></p><p data-lake-id=\"uf1945132\" id=\"uf1945132\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638494906968-c2a2e16a-a5b3-4c44-83bc-5846e35977d0.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D333%26id%3Du5def25ea%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D333%26originWidth%3D1070%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D169463%26status%3Ddone%26style%3Dnone%26taskId%3Duede9888d-c22a-46c9-a810-c9c1899d23a%26title%3D%26width%3D1070%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1070%2C%22originHeight%22%3A333%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf9f8%22%2C%22id%22%3A%22PCbH9%22%7D\"></card><span data-lake-id=\"ucf912ccb\" id=\"ucf912ccb\"><br /></span><span data-lake-id=\"uabebb465\" id=\"uabebb465\">增加一个 QC 普通队列声明后并绑定交换机 XC。<br /></span><span data-lake-id=\"u7f39ff3a\" id=\"u7f39ff3a\">队列配置 中添加：</span></p><p data-lake-id=\"u1c33e394\" id=\"u1c33e394\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F--------------------------------%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97-------------------------------------%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%EF%BC%88%E4%B8%BA%E4%BA%86%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_C%20%3D%20%5C%22QC%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8EQC%5Cn%20%20%20%20%40Bean(%5C%22queueC%5C%22)%5Cn%20%20%20%20public%20Queue%20queueC()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(2)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_C).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97QC%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueCBindingX(%40Qualifier(%5C%22queueC%5C%22)%20Queue%20queueC%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueC).to(xExchange).with(%5C%22XC%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F-----------------------------------%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97----------------------------------%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22a7ebc7ee%22%7D\"></card><p data-lake-id=\"u9bde3c53\" id=\"u9bde3c53\"><br></p><p data-lake-id=\"u6870970c\" id=\"u6870970c\"><span data-lake-id=\"uc6706f78\" id=\"uc6706f78\">添加 Controller 发消息控制器：</span></p><p data-lake-id=\"u69dff3a4\" id=\"u69dff3a4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E6%B6%88%E6%81%AFttl%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendExpireMsg%2F%7Bmessage%7D%2F%7BttlTime%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message%2C%20%40PathVariable%20String%20ttlTime)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%97%B6%E9%95%BF%7B%7D%E6%AF%AB%E7%A7%92%EF%BC%8Cttl%E4%BF%A1%E6%81%AF%E7%BB%99%E9%98%9F%E5%88%97QC%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20ttlTime%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XC%5C%22%2C%20message%2C%20msg%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%97%B6%E5%80%99%20%20%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%95%BF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20msg.getMessageProperties().setExpiration(ttlTime)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20msg%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2237e62688%22%7D\"></card><p data-lake-id=\"uba0c942f\" id=\"uba0c942f\"><br></p><p data-lake-id=\"u44e0ad88\" id=\"u44e0ad88\"><span data-lake-id=\"ud37c99fe\" id=\"ud37c99fe\">测试：</span></p><p data-lake-id=\"u8f450987\" id=\"u8f450987\"><br></p><ol list=\"ueb5e0837\"><li fid=\"u1b4d933a\" data-lake-id=\"ub256f62c\" id=\"ub256f62c\"><span data-lake-id=\"u2294acc6\" id=\"u2294acc6\">http://localhost:8080/ttl/sendExpireMsg/你好 1/20000</span></li></ol><ol list=\"u9ff940f0\" start=\"2\"><li fid=\"ue6b2c004\" data-lake-id=\"u25a98c39\" id=\"u25a98c39\"><span data-lake-id=\"u371386de\" id=\"u371386de\">http://localhost:8080/ttl/sendExpireMsg/你好 2/2000</span></li></ol><p data-lake-id=\"u0b67b6a7\" id=\"u0b67b6a7\"><br></p><p data-lake-id=\"ub6ce48d7\" id=\"ub6ce48d7\"><span data-lake-id=\"u13466df4\" id=\"u13466df4\">结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638517312025-dfbbfd0b-a82c-4432-a395-2e7cc7c6e48f.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D149%26id%3Du18e59259%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D149%26originWidth%3D1285%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D42107%26status%3Ddone%26style%3Dnone%26taskId%3Duff6fb06a-df03-451f-b886-52364055048%26title%3D%26width%3D1285%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22efjYm%22%7D\"></card></p><p data-lake-id=\"u23f2f74f\" id=\"u23f2f74f\"><br></p><h2 data-lake-id=\"d0cad89d\" id=\"d0cad89d\"><span data-lake-id=\"u85be1934\" id=\"u85be1934\">延迟队列（基于插件）</span></h2><p data-lake-id=\"u81531559\" id=\"u81531559\"><br></p><p data-lake-id=\"ufd1c2e21\" id=\"ufd1c2e21\"><span data-lake-id=\"u630fc20d\" id=\"u630fc20d\">进入 rabbitmq 安装目录下的 plugins 目录 ，cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins<br /></span><span data-lake-id=\"u62a50af5\" id=\"u62a50af5\">执行命令让该插件生效：rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br /></span><span data-lake-id=\"u3bface68\" id=\"u3bface68\">然后重启 rabbitmq：systemctl restart rabbitmq-server<br /></span><span data-lake-id=\"u9db1a728\" id=\"u9db1a728\">会发现交换机多了一个新类型，意味着延迟消息将由交换机来完成，而不是队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638519642120-f3258006-3639-4551-805e-26bbd1e67c85.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D530%26id%3Du66b7d498%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D767%26originWidth%3D690%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D56472%26status%3Ddone%26style%3Dnone%26taskId%3Du707609ca-e368-4b6c-9833-ec8cc57ca15%26title%3D%26width%3D477.00006103515625%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22PD1AH%22%7D\"></card><span data-lake-id=\"u2f8263ea\" id=\"u2f8263ea\"><br /><br /><br /></span><span data-lake-id=\"ud9ab44e0\" id=\"ud9ab44e0\">原来的情况：基于死信<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520455616-cfcde47e-bee3-4ef6-83b6-6630dbe54d9a.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D443%26id%3Dua9957719%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D601%26originWidth%3D1033%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D226301%26status%3Ddone%26style%3Dnone%26taskId%3Dua95f3b09-635a-4782-abfd-57901f34a8b%26title%3D%26width%3D760.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22UOPGa%22%7D\"></card><span data-lake-id=\"u4f03ca10\" id=\"u4f03ca10\"><br /></span><span data-lake-id=\"u3dd91de7\" id=\"u3dd91de7\">现在：基于延迟插件<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520591056-7591eaf6-b99f-4059-8cbb-6a6ee0ea64f2.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du11577081%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D224%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D94107%26status%3Ddone%26style%3Dnone%26taskId%3Du47b17a31-4f94-4f3c-a75f-2014f181765%26title%3D%26width%3D770.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22a4gyh%22%7D\"></card><span data-lake-id=\"ud0d616ab\" id=\"ud0d616ab\"><br /></span><span data-lake-id=\"u294d8a9a\" id=\"u294d8a9a\">代码架构：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520764180-7b9e927e-1166-470d-ac32-dda16bb87ae1.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D188%26id%3Dud9b4ba5b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D188%26originWidth%3D1062%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D84300%26status%3Ddone%26style%3Dnone%26taskId%3Du12c568cb-6151-4b2f-8f49-3f721530b6d%26title%3D%26width%3D1062%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22cPAio%22%7D\"></card></p><p data-lake-id=\"u2537b866\" id=\"u2537b866\"><br></p><ol list=\"udc24c677\"><li fid=\"u2d0fa43d\" data-lake-id=\"u54cbff16\" id=\"u54cbff16\"><span data-lake-id=\"u497ba1cf\" id=\"u497ba1cf\">配置类</span></li></ol><p data-lake-id=\"ucf6f84e6\" id=\"ucf6f84e6\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2016%3A41%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20DelayedQueueConfig%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_QUEUE_NAME%20%3D%20%5C%22delayed.name%5C%22%3B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_EXCHANGE_NAME%20%3D%20%5C%22delayed.exchange%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_ROUTING_KEY%20%3D%20%5C%22delayed.routingkey%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20delayedQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(DELAYED_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20CustomExchange%20delayedExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-delayed-type%5C%22%2C%20%5C%22direct%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%8C%81%E4%B9%85%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20*%205.%20%E5%85%B6%E4%BB%96%E7%9A%84%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20return%20new%20CustomExchange(DELAYED_EXCHANGE_NAME%2C%20%5C%22x-delayed-message%5C%22%2C%20true%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20delayedQueueBindingDelayedExchange(%40Qualifier(%5C%22delayedQueue%5C%22)%20Queue%20delayedQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22delayedExchange%5C%22)%20CustomExchange%20delayedExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22576e3b9e%22%7D\"></card><p data-lake-id=\"u88264fd1\" id=\"u88264fd1\"><br></p><ol list=\"ub8ffacac\" start=\"2\"><li fid=\"u680ffbb9\" data-lake-id=\"ue3e31a7b\" id=\"ue3e31a7b\"><span data-lake-id=\"u5b76b6d1\" id=\"u5b76b6d1\">Controller 生产者：</span></li></ol><p data-lake-id=\"u4fdb5ab5\" id=\"u4fdb5ab5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E5%9F%BA%E4%BA%8E%E5%BB%B6%E8%BF%9F%E6%8F%92%E4%BB%B6%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendDelayMsg%2F%7Bmessage%7D%2F%7BdelayTime%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message%2C%20%40PathVariable%20Integer%20delayTime)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%3A%7B%7D%2C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%97%B6%E9%95%BF%7B%7D%E6%AF%AB%E7%A7%92%E4%BF%A1%E6%81%AF%E7%BB%99%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97delayed.queue%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20delayTime%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME%2C%20DelayedQueueConfig.DELAYED_ROUTING_KEY%2C%20message%2C%20msg%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%97%B6%E5%80%99%20%20%20%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%95%BF%20%20%E5%8D%95%E4%BD%8D%EF%BC%9Ams%5Cn%20%20%20%20%20%20%20%20%20%20%20%20msg.getMessageProperties().setDelay(delayTime)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20msg%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22eb8d3858%22%7D\"></card><p data-lake-id=\"uaa1f405b\" id=\"uaa1f405b\"><br></p><ol list=\"u4c1a94d3\" start=\"3\"><li fid=\"uf67e9227\" data-lake-id=\"u4e37ad14\" id=\"u4e37ad14\"><span data-lake-id=\"uc301cdab\" id=\"uc301cdab\">消费者：</span></li></ol><p data-lake-id=\"u8e368a72\" id=\"u8e368a72\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.DelayedQueueConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2019%3A36%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20DelayQueueConsumer%20%7B%5Cn%20%20%20%20%2F%2F%E7%9B%91%E5%90%AC%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20DelayedQueueConfig.DELAYED_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveDelayQueue(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%3A%7B%7D%2C%E6%94%B6%E5%88%B0%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2220ede713%22%7D\"></card><p data-lake-id=\"uc629c46a\" id=\"uc629c46a\"><br></p><p data-lake-id=\"u7f843083\" id=\"u7f843083\"><span data-lake-id=\"u7ccea2ef\" id=\"u7ccea2ef\">测试：<br /></span><span data-lake-id=\"ufb9ca283\" id=\"ufb9ca283\">发起请求：</span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" data-lake-id=\"u0ed23d19\" id=\"u0ed23d19\"><span data-lake-id=\"ucce40a65\" id=\"ucce40a65\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span data-lake-id=\"u6e4179e0\" id=\"u6e4179e0\"> on baby1/20000<br /></span><span data-lake-id=\"ub54e37e9\" id=\"ub54e37e9\"> </span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" data-lake-id=\"u591aeafc\" id=\"u591aeafc\"><span data-lake-id=\"u41e0134b\" id=\"u41e0134b\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span data-lake-id=\"u06ea87d6\" id=\"u06ea87d6\"> on baby2/2000<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638532349237-315b969f-d021-4448-8aa8-d5a1d41950a0.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D208%26id%3Duf33e7fe7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D208%26originWidth%3D1432%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D71640%26status%3Ddone%26style%3Dnone%26taskId%3Due722c22b-16d9-40a2-9a28-e95348df5d0%26title%3D%26width%3D1432%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22P79jF%22%7D\"></card><span data-lake-id=\"u0735baa9\" id=\"u0735baa9\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638532663153-40afab72-d363-4536-94fc-4889e40d764b.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D224%26id%3Du7813c3ed%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D266%26originWidth%3D1121%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D457006%26status%3Ddone%26style%3Dnone%26taskId%3Du0e4002d8-2179-43cc-bcfd-7c69cd127b5%26title%3D%26width%3D941.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22aEVGf%22%7D\"></card></p><p data-lake-id=\"u816be002\" id=\"u816be002\"><br></p><h2 data-lake-id=\"d338501f\" id=\"d338501f\"><span data-lake-id=\"uf2c90131\" id=\"uf2c90131\">发布确认高级</span></h2><p data-lake-id=\"u78a1b073\" id=\"u78a1b073\"><br></p><p data-lake-id=\"ue1d328fd\" id=\"ue1d328fd\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638533419869-3aa9b7ad-ee4e-4fd8-9e42-fd6af4aafe70.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D225%26id%3Du7ed4e098%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D341%26originWidth%3D945%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D186643%26status%3Ddone%26style%3Dnone%26taskId%3Duc65852ff-c2a9-416e-bef6-2991c80fa8b%26title%3D%26width%3D623.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22OAmnb%22%7D\"></card><span data-lake-id=\"u02ce7662\" id=\"u02ce7662\"> <br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638533456413-9ead4e1d-f118-4a55-8d05-bcdd4d5fc47f.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D131%26id%3Du954992f9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D144%26originWidth%3D839%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D73103%26status%3Ddone%26style%3Dnone%26taskId%3Du9819bc42-f398-487a-b319-358e2acd1ba%26title%3D%26width%3D762.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22sjopK%22%7D\"></card></p><p data-lake-id=\"ua0b992e2\" id=\"ua0b992e2\"><br></p><h3 data-lake-id=\"3f64dd13\" id=\"3f64dd13\"><span data-lake-id=\"uc55d922c\" id=\"uc55d922c\">回调接口 : (若交换机收不到消息)</span></h3><p data-lake-id=\"uc0c6652d\" id=\"uc0c6652d\"><br></p><ol list=\"u18e7d6f4\"><li fid=\"uf5a85a9a\" data-lake-id=\"uf961977a\" id=\"uf961977a\"><span data-lake-id=\"u663b1458\" id=\"u663b1458\">配置类</span></li></ol><p data-lake-id=\"u1415f6ed\" id=\"u1415f6ed\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A15%5Cn%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%20%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%20%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20ConfirmConfig%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_EXCHANGE_NAME%20%3D%20%5C%22confirm_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_QUEUE_NAME%20%3D%20%5C%22confirm_queue%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_ROUTING_KEY%20%3D%20%5C%22key1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20DirectExchange%20confirmExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(CONFIRM_EXCHANGE_NAME)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20confirmQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(CONFIRM_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBindingExchange(%40Qualifier(%5C%22confirmQueue%5C%22)%20Queue%20confirmQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22confirmExchange%5C%22)%20DirectExchange%20confirmExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222a45d705%22%7D\"></card><p data-lake-id=\"u4ecde0f6\" id=\"u4ecde0f6\"><br></p><ol list=\"ub54f2c05\" start=\"2\"><li fid=\"u4e3bb631\" data-lake-id=\"ua5227561\" id=\"ua5227561\"><span data-lake-id=\"ued86c520\" id=\"ued86c520\">生产者：发消息</span></li></ol><p data-lake-id=\"ub699d97d\" id=\"ub699d97d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A27%5Cn%20*%20%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fconfirm%5C%22)%5Cnpublic%20class%20ProducerController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMessage%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMessage(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData%20%3D%20new%20CorrelationData(%5C%221%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%20ConfirmConfig.CONFIRM_ROUTING_KEY%2C%20message%2C%20correlationData)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227ba8c971%22%7D\"></card><p data-lake-id=\"ua928c4f5\" id=\"ua928c4f5\"><br></p><ol list=\"u3aa9a4e3\" start=\"3\"><li fid=\"u4732e243\" data-lake-id=\"u7b775a6c\" id=\"u7b775a6c\"><span data-lake-id=\"u0cd0e120\" id=\"u0cd0e120\">消费者：</span></li></ol><p data-lake-id=\"ud61ac3f3\" id=\"ud61ac3f3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A33%5Cn%20*%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20ConfirmConfig.CONFIRM_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveConfirmMessage(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E9%98%9F%E5%88%97confirm.queue%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ee5ae00f%22%7D\"></card><p data-lake-id=\"u04196b83\" id=\"u04196b83\"><br></p><ol list=\"u99465ece\" start=\"4\"><li fid=\"u995125c0\" data-lake-id=\"u60a6d2ac\" id=\"u60a6d2ac\"><span data-lake-id=\"uda277bab\" id=\"uda277bab\">回调接口</span></li></ol><p data-lake-id=\"u706addb6\" id=\"u706addb6\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20javax.annotation.PostConstruct%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A50%5Cn%20*%20%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20MyCallBack%20implements%20RabbitTemplate.ConfirmCallback%20%7B%5Cn%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%40PostConstruct%5Cn%20%20%20%20public%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B3%A8%E5%85%A5%20%EF%BC%88%E9%9C%80%E8%A6%81%E5%B0%86%E5%BD%93%E5%89%8D%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%B3%A8%E5%85%A5%E5%88%B0RabbitTemplate%E7%9A%84ConfirmCallback%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E4%B8%AD%EF%BC%89%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setConfirmCallback(this)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%A1%AE%E8%AE%A4%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%201.%20%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%8E%A5%E6%94%B6%E5%88%B0%E4%BA%86%20%20%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20*%201.1%20correlationData%20%E4%BF%9D%E5%AD%98%E5%9B%9E%E8%B0%83%E6%B6%88%E6%81%AF%E7%9A%84id%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%201.2%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%20%20ack%20%3D%20true%5Cn%20%20%20%20%20*%201.3%20cause%20%20null%5Cn%20%20%20%20%20*%202.%20%E5%8F%91%E6%B6%88%E6%81%AF%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%8E%A5%E6%94%B6%E5%A4%B1%E8%B4%A5%20%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20*%202.1%20correlationData%20%E4%BF%9D%E5%AD%98%E5%9B%9E%E8%B0%83%E6%B6%88%E6%81%AF%E7%9A%84id%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%202.2%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%20ack%20%3D%20false%5Cn%20%20%20%20%20*%202.3%20cause%20%20%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20correlationData%5Cn%20%20%20%20%20*%20%40param%20ack%5Cn%20%20%20%20%20*%20%40param%20cause%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20confirm(CorrelationData%20correlationData%2C%20boolean%20ack%2C%20String%20cause)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20id%20%3D%20correlationData%20!%3D%20null%20%3F%20correlationData.getId()%20%3A%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20if%20(ack)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%B2%E7%BB%8F%E6%94%B6%E5%88%B0id%E4%B8%BA%EF%BC%9A%7B%7D%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%2C%20id)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.error(%5C%22%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%BF%98%E6%9C%AA%E6%94%B6%E5%88%B0id%E4%B8%BA%3A%7B%7D%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8C%E7%94%B1%E4%BA%8E%E5%8E%9F%E5%9B%A0%EF%BC%9A%7B%7D%5C%22%2C%20id%2C%20cause)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22b57f810e%22%7D\"></card><p data-lake-id=\"uef78c20d\" id=\"uef78c20d\"><br></p><p data-lake-id=\"ua5e09f93\" id=\"ua5e09f93\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638537772169-a45dc229-e5ed-410a-8e46-69f3fb39f21e.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D518%26id%3Du396acbb1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D518%26originWidth%3D973%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D369736%26status%3Ddone%26style%3Dnone%26taskId%3Du8a93ee99-1d87-4fd1-880d-a166a5e50f1%26title%3D%26width%3D973%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22Bk8N5%22%7D\"></card></p><p data-lake-id=\"u67dd6b93\" id=\"u67dd6b93\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%5Cn%20%20%20%20publisher-confirm-type%3A%20correlated%20%20%20%20%23%20%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ab4a519d%22%7D\"></card><p data-lake-id=\"ub25474b6\" id=\"ub25474b6\"><br></p><ol list=\"u6cb1d6f7\" start=\"5\"><li fid=\"u8a5f17a7\" data-lake-id=\"ud16eafd0\" id=\"ud16eafd0\"><span data-lake-id=\"u14d7f9ca\" id=\"u14d7f9ca\">发送请求 : http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p data-lake-id=\"u38416d74\" id=\"u38416d74\"><br></p><p data-lake-id=\"u78e4294b\" id=\"u78e4294b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638537854600-e11783cd-28be-4b75-8f36-434ecab3f990.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D190%26id%3Due332f12f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D190%26originWidth%3D1135%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D51915%26status%3Ddone%26style%3Dnone%26taskId%3Duba52e997-898f-49e3-9067-645cfb69f68%26title%3D%26width%3D1135%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22Emijw%22%7D\"></card></p><p data-lake-id=\"u7221df5d\" id=\"u7221df5d\"><br></p><ol list=\"u6dde4edd\" start=\"6\"><li fid=\"u496945b0\" data-lake-id=\"u9c66e047\" id=\"u9c66e047\"><span data-lake-id=\"u6641ac44\" id=\"u6641ac44\">测试交换机收不到消息：在发送消息中，将交换机名字后面拼接上&quot;123&quot;，再次启动，发送请求： http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p data-lake-id=\"ubcb758d6\" id=\"ubcb758d6\"><br></p><p data-lake-id=\"u22d07271\" id=\"u22d07271\"><span data-lake-id=\"u70e7d21c\" id=\"u70e7d21c\">会得到：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638538268620-8dcbc2ae-eaa1-4b60-8822-9cd20f509c52.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D222%26id%3Du3e470d69%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D222%26originWidth%3D1872%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D66288%26status%3Ddone%26style%3Dnone%26taskId%3Du7f0330f7-a846-488e-8b25-71c1f3cf0a7%26title%3D%26width%3D1872%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22J3ZRH%22%7D\"></card></p><p data-lake-id=\"uc7e4f269\" id=\"uc7e4f269\"><br></p><ol list=\"ubf8d1f03\" start=\"7\"><li fid=\"ufd84ad2f\" data-lake-id=\"u8c7d1937\" id=\"u8c7d1937\"><span data-lake-id=\"u4796d64a\" id=\"u4796d64a\">测试队列收不到消息</span></li></ol><p data-lake-id=\"u108dd925\" id=\"u108dd925\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A27%5Cn%20*%20%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fconfirm%5C%22)%5Cnpublic%20class%20ProducerController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMessage%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMessage(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData1%20%3D%20new%20CorrelationData(%5C%221%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConfirmConfig.CONFIRM_ROUTING_KEY%2C%20message%2C%20correlationData1)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData2%20%3D%20new%20CorrelationData(%5C%222%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConfirmConfig.CONFIRM_ROUTING_KEY%2B%5C%222%5C%22%2C%20message%2C%20correlationData2)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%228e842df0%22%7D\"></card><p data-lake-id=\"u1b20db2a\" id=\"u1b20db2a\"><br></p><p data-lake-id=\"uce701b63\" id=\"uce701b63\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638538743381-bfc4680e-692b-4303-a0f3-87cd9425978d.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D247%26id%3Du241a2996%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D247%26originWidth%3D1157%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D67266%26status%3Ddone%26style%3Dnone%26taskId%3Du3edf7078-e740-4b0a-866c-03de3cfb9db%26title%3D%26width%3D1157%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22SGy2Z%22%7D\"></card><span data-lake-id=\"u94b8d528\" id=\"u94b8d528\"><br /></span><span data-lake-id=\"u11773354\" id=\"u11773354\">可见，队列没有收到消息，也没有应答和确认。</span></p><p data-lake-id=\"ubbd10bfa\" id=\"ubbd10bfa\"><br></p><h3 data-lake-id=\"9a49228a\" id=\"9a49228a\"><span data-lake-id=\"u69229606\" id=\"u69229606\">若队列收不到消息</span></h3><p data-lake-id=\"uf0412cea\" id=\"uf0412cea\"><br></p><p data-lake-id=\"u17a29e6c\" id=\"u17a29e6c\"><br></p><p data-lake-id=\"u18410005\" id=\"u18410005\"><br></p><h4 data-lake-id=\"7df88dac\" id=\"7df88dac\"><span data-lake-id=\"uacff6e07\" id=\"uacff6e07\">回退消息</span></h4><p data-lake-id=\"u6d37cd3e\" id=\"u6d37cd3e\"><br></p><p data-lake-id=\"u9d159a4e\" id=\"u9d159a4e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638539584832-557a9bbc-89d4-4162-a0d4-599eb7f3df21.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D210%26id%3Du40b5093d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D210%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D298616%26status%3Ddone%26style%3Dnone%26taskId%3Du13a46749-be43-4430-beb2-483ea013efc%26title%3D%26width%3D976%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22thCkG%22%7D\"></card></p><p data-lake-id=\"uf348cbd9\" id=\"uf348cbd9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%5Cn%20%20%20%20publisher-confirm-type%3A%20correlated%20%20%20%23%20%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20publisher-returns%3A%20true%20%20%20%20%20%20%20%23%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%EF%BC%88%E6%B6%88%E6%81%AF%E5%9C%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%82%A3%E8%8B%A5%E8%B7%AF%E7%94%B1%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%88%99%E4%BC%9A%E5%9B%9E%E9%80%80%E6%B6%88%E6%81%AF%E7%BB%99%E7%94%9F%E4%BA%A7%E8%80%85%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%229bc2e551%22%7D\"></card><p data-lake-id=\"ude0471d2\" id=\"ude0471d2\"><br></p><p data-lake-id=\"u4ecdba54\" id=\"u4ecdba54\"><span data-lake-id=\"u58fdf937\" id=\"u58fdf937\">回退接口：</span></p><p data-lake-id=\"ub365cc32\" id=\"ub365cc32\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%B3%A8%E5%85%A5%5Cn%40PostConstruct%5Cn%20%20%20%20public%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B3%A8%E5%85%A5%20%EF%BC%88%E9%9C%80%E8%A6%81%E5%B0%86%E5%BD%93%E5%89%8D%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%B3%A8%E5%85%A5%E5%88%B0RabbitTemplate%E7%9A%84ConfirmCallback%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E4%B8%AD%EF%BC%89%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setConfirmCallback(this)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setReturnsCallback(this)%3B%5Cn%20%20%20%20%7D%5Cn%2F**%5Cn%20%20%20%20%20*%20%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%BD%93%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B8%8D%E5%8F%AF%E8%BE%BE%E7%9B%AE%E7%9A%84%E5%9C%B0%E6%97%B6%E5%B0%86%E6%B6%88%E6%81%AF%E8%BF%94%E5%9B%9E%E7%BB%99%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20%20%20%20%20*%20%E5%8F%AA%E6%9C%89%E4%B8%8D%E5%8F%AF%E5%88%B0%E7%9B%AE%E7%9A%84%E5%9C%B0%E6%97%B6%EF%BC%8C%E6%89%8D%E8%BF%9B%E8%A1%8C%E5%9B%9E%E9%80%80%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20returnedMessage%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20returnedMessage(ReturnedMessage%20returnedMessage)%20%7B%5Cn%20%20%20%20%20%20%20%20log.error(%5C%22%E6%B6%88%E6%81%AF%7B%7D%EF%BC%8C%E8%A2%AB%E4%BA%A4%E6%8D%A2%E6%9C%BA%7B%7D%E9%80%80%E5%9B%9E%EF%BC%8C%E9%80%80%E5%9B%9E%E5%8E%9F%E5%9B%A0%EF%BC%9A%7B%7D%2C%E8%B7%AF%E7%94%B1key%3A%7B%7D%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20String(returnedMessage.getMessage().getBody())%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getExchange()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getReplyText()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getRoutingKey())%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220cc635d1%22%7D\"></card><p data-lake-id=\"u2654fc7c\" id=\"u2654fc7c\"><br></p><p data-lake-id=\"uf86bf68a\" id=\"uf86bf68a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638542234889-03b41ef6-8fc5-4ffb-9f36-7287d4ff9476.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D267%26id%3Duddd5e8ec%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D267%26originWidth%3D1293%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D78730%26status%3Ddone%26style%3Dnone%26taskId%3Du4c513758-cf34-415c-a9f3-845a33faec5%26title%3D%26width%3D1293%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22tOHQ4%22%7D\"></card></p><p data-lake-id=\"uc53a419f\" id=\"uc53a419f\"><br></p><h4 data-lake-id=\"2d534732\" id=\"2d534732\"><span data-lake-id=\"u10e834ce\" id=\"u10e834ce\">备份交换机</span></h4><p data-lake-id=\"uabcf7a93\" id=\"uabcf7a93\"><br></p><p data-lake-id=\"u73453e3c\" id=\"u73453e3c\"><span data-lake-id=\"ueeed5229\" id=\"ueeed5229\">添加一个交换机和两个队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638578627259-759238ba-aac5-42f9-b645-401c5c9a05d2.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D328%26id%3Dud35a1613%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D328%26originWidth%3D930%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D197049%26status%3Ddone%26style%3Dnone%26taskId%3Du04e4ef45-34c3-49a8-84c0-93d70b4ebb6%26title%3D%26width%3D930%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22j2ALj%22%7D\"></card></p><p data-lake-id=\"udb3c78de\" id=\"udb3c78de\"><br></p><ol list=\"u15b76342\"><li fid=\"u4c5a4eb6\" data-lake-id=\"u2c143d03\" id=\"u2c143d03\"><span data-lake-id=\"u8bcff5cb\" id=\"u8bcff5cb\">配置类</span></li></ol><p data-lake-id=\"u7df36999\" id=\"u7df36999\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A15%5Cn%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%20%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%20%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20ConfirmConfig%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_EXCHANGE_NAME%20%3D%20%5C%22confirm_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_QUEUE_NAME%20%3D%20%5C%22confirm_queue%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_ROUTING_KEY%20%3D%20%5C%22key1%5C%22%3B%5Cn%20%20%20%20%2F%2F%20--------------------------%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA---------------------------------%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20BACKUP_EXCHANGE_NAME%20%3D%20%5C%22backup_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20BACKUP_QUEUE_NAME%20%3D%20%5C%22backup_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20WARNING_QUEUE_NAME%20%3D%20%5C%22warning_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F--------------------------------------------------------------------%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E7%A1%AE%E8%AE%A4%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%88%E8%A6%81%E8%BD%AC%E5%8F%91%E5%88%B0%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20DirectExchange%20confirmExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(true)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.withArgument(%5C%22alternate-exchange%5C%22%2C%20BACKUP_EXCHANGE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20confirmQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(CONFIRM_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBindingExchange(%40Qualifier(%5C%22confirmQueue%5C%22)%20Queue%20confirmQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22confirmExchange%5C%22)%20DirectExchange%20confirmExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20FanoutExchange%20backupExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20FanoutExchange(BACKUP_EXCHANGE_NAME)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20backupQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(BACKUP_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20warningQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(WARNING_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%EF%BC%88%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20backupQueueBindingBackupExchange(%40Qualifier(%5C%22backupExchange%5C%22)%20FanoutExchange%20backupExchange%2C%20%40Qualifier(%5C%22backupQueue%5C%22)%20Queue%20backupQueue)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(backupQueue).to(backupExchange)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%EF%BC%88%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20warningQueueBindingBackupExchange(%40Qualifier(%5C%22backupExchange%5C%22)%20FanoutExchange%20backupExchange%2C%20%40Qualifier(%5C%22warningQueue%5C%22)%20Queue%20warningQueue)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(warningQueue).to(backupExchange)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227e31c035%22%7D\"></card><p data-lake-id=\"u2d96580e\" id=\"u2d96580e\"><br></p><ol list=\"u2e9dedfa\" start=\"2\"><li fid=\"ufdf85b68\" data-lake-id=\"ub0f9ce9a\" id=\"ub0f9ce9a\"><span data-lake-id=\"ua927c9ba\" id=\"ua927c9ba\">消费者（报警消费者）</span></li></ol><p data-lake-id=\"u699010ce\" id=\"u699010ce\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F4%209%3A10%5Cn%20*%20%E6%8A%A5%E8%AD%A6%E6%B6%88%E8%B4%B9%E8%80%85%5Cn%20*%2F%5Cn%40Component%5Cn%40Slf4j%5Cnpublic%20class%20WarningConsumer%20%7B%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20ConfirmConfig.WARNING_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveWarningMsg(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.error(%5C%22%E6%8A%A5%E8%AD%A6%E5%8F%91%E7%8E%B0%E4%B8%8D%E5%8F%AF%E8%B7%AF%E7%94%B1%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2235bc7912%22%7D\"></card><p data-lake-id=\"ud84928fa\" id=\"ud84928fa\"><br></p><p data-lake-id=\"ue7878fb1\" id=\"ue7878fb1\"><span data-lake-id=\"ud8e024bd\" id=\"ud8e024bd\">发送请求：http://localhost:8080/confirm/sendMessage/大家好 1<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638581402507-07326d95-5109-4750-b3ab-c4751b23d55d.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D263%26id%3Dudc9907e1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D263%26originWidth%3D1171%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D75848%26status%3Ddone%26style%3Dnone%26taskId%3Du7fb8b716-7979-4acf-b11c-fe1cb99bebd%26title%3D%26width%3D1171%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22Lep12%22%7D\"></card></p><p data-lake-id=\"uc9ac1a25\" id=\"uc9ac1a25\"><br></p><blockquote data-lake-id=\"u591724e9\" id=\"u591724e9\"><p data-lake-id=\"ud9d05a36\" id=\"ud9d05a36\"><strong><span data-lake-id=\"u1e4adb4e\" id=\"u1e4adb4e\">备份交换机的优先级高于回退消息、</span></strong></p></blockquote><p data-lake-id=\"ua078c614\" id=\"ua078c614\"><br></p><p data-lake-id=\"uab27aa2a\" id=\"uab27aa2a\"><br></p><p data-lake-id=\"ud02d49fe\" id=\"ud02d49fe\"><br></p><h2 data-lake-id=\"c06ec42e\" id=\"c06ec42e\"><span data-lake-id=\"u7369f8e6\" id=\"u7369f8e6\">其他知识点</span></h2><p data-lake-id=\"u4f098a02\" id=\"u4f098a02\"><br></p><p data-lake-id=\"u3abc395c\" id=\"u3abc395c\"><br></p><p data-lake-id=\"u471eac83\" id=\"u471eac83\"><br></p><h3 data-lake-id=\"71a92fdf\" id=\"71a92fdf\"><span data-lake-id=\"u20dc07dc\" id=\"u20dc07dc\">幂等性</span></h3><p data-lake-id=\"u648dd420\" id=\"u648dd420\"><br></p><p data-lake-id=\"u8e5b1edb\" id=\"u8e5b1edb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638581856478-4611604a-34c1-486b-a3b7-c809f3d94f0e.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D620%26id%3Dua03a1a2a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D620%26originWidth%3D977%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D628166%26status%3Ddone%26style%3Dnone%26taskId%3Du3bbefde1-d01a-481e-b831-abe2598835f%26title%3D%26width%3D977%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22pWlKw%22%7D\"></card><span data-lake-id=\"ude9d2f3b\" id=\"ude9d2f3b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582165848-9189cc73-c68b-4631-b30d-dad30387a032.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D523%26id%3Du37f187c9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D523%26originWidth%3D1001%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D609037%26status%3Ddone%26style%3Dnone%26taskId%3Dudd6ff171-0753-4d6f-a510-a8761c65fcb%26title%3D%26width%3D1001%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22o6DXP%22%7D\"></card></p><p data-lake-id=\"u2dbfadbc\" id=\"u2dbfadbc\"><br></p><p data-lake-id=\"ubcb1ea0b\" id=\"ubcb1ea0b\"><br></p><p data-lake-id=\"u62eecae6\" id=\"u62eecae6\"><br></p><h3 data-lake-id=\"507580b5\" id=\"507580b5\"><span data-lake-id=\"u3de3316a\" id=\"u3de3316a\">优先级队列</span></h3><p data-lake-id=\"u7da11996\" id=\"u7da11996\"><br></p><p data-lake-id=\"u3cc63c54\" id=\"u3cc63c54\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582363595-025332ba-94e1-4485-b6ab-e0542d69fab7.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D326%26id%3Du83200fbd%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D326%26originWidth%3D987%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D447217%26status%3Ddone%26style%3Dnone%26taskId%3Dueea7db03-7906-4cef-baef-0ebe50a0185%26title%3D%26width%3D987%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22h3cca%22%7D\"></card><span data-lake-id=\"u87ffed88\" id=\"u87ffed88\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582579936-dd221c3d-efc6-4e4b-b854-6667d27682a1.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D343%26id%3Du3930b1c7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D402%26originWidth%3D1186%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D288467%26status%3Ddone%26style%3Dnone%26taskId%3Du70a2eadf-0b86-470c-a5a8-b7d8f612ad3%26title%3D%26width%3D1010.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22WVQYU%22%7D\"></card><span data-lake-id=\"u5e870bf4\" id=\"u5e870bf4\"><br /></span><span data-lake-id=\"u54768020\" id=\"u54768020\">实现优先级:</span></p><p data-lake-id=\"u6cc05b3e\" id=\"u6cc05b3e\"><br></p><ol list=\"u3b2bd50a\"><li fid=\"uc81d90cd\" data-lake-id=\"ua6331a27\" id=\"ua6331a27\"><span data-lake-id=\"ue8e9a456\" id=\"ue8e9a456\">生产者：</span></li></ol><p data-lake-id=\"ua01e5a8f\" id=\"ua01e5a8f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F28%2022%3A15%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%EF%BC%9A%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%2F%2F%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%8E%82ip%20%20%E8%BF%9E%E6%8E%A5rabbitmq%E7%9A%84%E9%98%9F%E5%88%97%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E6%88%B7%E5%90%8D%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E5%AF%86%E7%A0%81%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%5Cn%2F%2F%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E4%BF%A1%E9%81%93%5Cn%2F%2F%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%AE%98%E6%96%B9%E5%85%81%E8%AE%B8%E6%98%AF0-255%E4%B9%8B%E9%97%B4%E3%80%82%E6%AD%A4%E5%A4%84%E8%AE%BE%E7%BD%AE10.%20%E5%85%81%E8%AE%B8%E4%BC%98%E5%85%88%E7%BA%A7%E8%8C%83%E5%9B%B4%E4%B8%BA0-10%20%20%20%E4%B8%8D%E8%A6%81%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%A4%A7%20%20%20%E6%B5%AA%E8%B4%B9CPU%E4%B8%8E%E5%86%85%E5%AD%98%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-max-priority%5C%22%2C%2010)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2C%20true%2C%20false%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%3D%3D%205)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().priority(5).build()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E5%8F%91%E9%80%81%E5%88%B0%E5%93%AA%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E8%B7%AF%E7%94%B1%E7%9A%84key%E5%80%BC%E6%98%AF%E5%93%AA%E4%B8%AA%EF%BC%8C%E6%9C%AC%E6%AC%A1%E6%98%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E5%AE%8C%E6%AF%95%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e42f278b%22%7D\"></card><p data-lake-id=\"uc6f9bdd8\" id=\"uc6f9bdd8\"><br></p><p data-lake-id=\"ue80f4739\" id=\"ue80f4739\"><span data-lake-id=\"ub89a1ea2\" id=\"ub89a1ea2\">启动生产者：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584428018-a99005d9-2193-463c-9f45-3f72656510ca.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D245%26id%3Du9109bfc5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D245%26originWidth%3D673%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D24479%26status%3Ddone%26style%3Dnone%26taskId%3Du0a4a6f5a-f03f-4ab3-8fcc-d9bdc327aad%26title%3D%26width%3D673%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22shKB3%22%7D\"></card></p><p data-lake-id=\"u291a7eb3\" id=\"u291a7eb3\"><br></p><h3 data-lake-id=\"07eab7c1\" id=\"07eab7c1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584267331-0bf02c8d-6536-43a8-aa18-ee5f4ed82255.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D500%26id%3DAvLAP%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D500%26originWidth%3D1065%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D74831%26status%3Ddone%26style%3Dnone%26taskId%3Du77c77f80-cfec-453b-bc9f-f82bf26b07c%26title%3D%26width%3D1065%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22cIQXz%22%7D\"></card></h3><p data-lake-id=\"ucb9b4527\" id=\"ucb9b4527\"><br></p><ol list=\"ufc7ca6f8\" start=\"2\"><li fid=\"ua7a7b9eb\" data-lake-id=\"u5b439607\" id=\"u5b439607\"><span data-lake-id=\"u556ed9c1\" id=\"u556ed9c1\">消费者 :</span></li></ol><p data-lake-id=\"u293cdbaa\" id=\"u293cdbaa\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.*%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Arrays%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2015%3A04%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%3A%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%2F%2F%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF(%E6%88%90%E5%8A%9F%E5%90%8E%E7%9A%84%E5%9B%9E%E8%B0%83)%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%96%E6%B6%88%E6%B6%88%E6%81%AF%E6%97%B6%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E8%A2%AB%E4%B8%AD%E6%96%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2C%20deliverCallback%2C%20cancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2281930e95%22%7D\"></card><p data-lake-id=\"u16cfd581\" id=\"u16cfd581\"><br></p><p data-lake-id=\"ud1908c6e\" id=\"ud1908c6e\"><span data-lake-id=\"ucb8356bd\" id=\"ucb8356bd\">启动消费者，<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584610103-d784c402-b9b7-4321-80d9-c4b95990f410.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D346%26id%3Du91a8ee8e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D346%26originWidth%3D652%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D36450%26status%3Ddone%26style%3Dnone%26taskId%3Du90a3da53-d612-4152-b8b6-157c3e789ca%26title%3D%26width%3D652%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22UEHzd%22%7D\"></card></p><p data-lake-id=\"u87611f1d\" id=\"u87611f1d\"><br></p><h3 data-lake-id=\"8508a884\" id=\"8508a884\"><span data-lake-id=\"u855e9604\" id=\"u855e9604\">惰性队列</span></h3><p data-lake-id=\"uc5f84afb\" id=\"uc5f84afb\"><br></p><p data-lake-id=\"u0b31325e\" id=\"u0b31325e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584657059-9bf42f28-e7a0-4c4f-8a39-c56038bd0071.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D425%26id%3Dud4e3da7e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D425%26originWidth%3D993%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D597255%26status%3Ddone%26style%3Dnone%26taskId%3Du2ff8ea80-3715-4c63-a718-4d71e1b8488%26title%3D%26width%3D993%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22wMAkZ%22%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584904322-348e89b5-e2f2-4df0-ba11-7540a061f849.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D613%26id%3Du9cab5578%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D613%26originWidth%3D1175%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D404748%26status%3Ddone%26style%3Dnone%26taskId%3Duc0905b86-a7ec-4a0f-8a69-356a47ad688%26title%3D%26width%3D1175%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22NaNR3%22%7D\"></card><span data-lake-id=\"u64172734\" id=\"u64172734\"><br /></span><span data-lake-id=\"uba38271b\" id=\"uba38271b\">惰性队列执行性能不太好，因此默认情况下不使用惰性队列，而使用正常队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638585096408-ecb74216-dfa9-41e3-b7bd-bd5236b2c1da.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D431%26id%3Du4ab29e59%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D431%26originWidth%3D967%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D466179%26status%3Ddone%26style%3Dnone%26taskId%3Dub1da4c7a-e46a-44f7-9b2f-e5129f4a839%26title%3D%26width%3D967%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ZtuGu%22%7D\"></card><span data-lake-id=\"u65e4732c\" id=\"u65e4732c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638585305462-e73859d4-5121-406a-b308-57cede7f1bac.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D413%26id%3Duf8c1b8a8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D413%26originWidth%3D966%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D247424%26status%3Ddone%26style%3Dnone%26taskId%3Dua29dd158-1851-4974-bd9b-3c01a9c0ea5%26title%3D%26width%3D966%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22wFSJu%22%7D\"></card></p><p data-lake-id=\"u76b838dd\" id=\"u76b838dd\"><br></p><ul list=\"ud877048a\"><li fid=\"u61f80eea\" data-lake-id=\"u4d99bf08\" id=\"u4d99bf08\"><span data-lake-id=\"u181db35b\" id=\"u181db35b\">惰性队列从</span><strong><span data-lake-id=\"ue23e1779\" id=\"ue23e1779\">磁盘</span></strong><span data-lake-id=\"u40148889\" id=\"u40148889\">上读取消息，因此消费消息比较慢，但是内存消耗较小，在内存中只存储一些索引。一旦需要消费这些消息时，惰性队列会通过内存中的索引，去读取磁盘中相应的消息，到内存，再消费消息。</span></li></ul><ul list=\"u055673c0\"><li fid=\"ud503864a\" data-lake-id=\"u07689e77\" id=\"u07689e77\"><span data-lake-id=\"ue0dc9030\" id=\"ue0dc9030\">正常队列从</span><strong><span data-lake-id=\"u2d44c37e\" id=\"u2d44c37e\">内存</span></strong><span data-lake-id=\"ub2ed9b46\" id=\"ub2ed9b46\">中读取消息，因此消费消息比较快，但是内存消耗较大。</span></li></ul><p data-lake-id=\"u27df5c54\" id=\"u27df5c54\"><br></p><h2 data-lake-id=\"23eaf825\" id=\"23eaf825\"><span data-lake-id=\"u5a936f08\" id=\"u5a936f08\">rabbitmq 集群</span></h2><p data-lake-id=\"u5557a767\" id=\"u5557a767\"><br></p><p data-lake-id=\"u0ad69f32\" id=\"u0ad69f32\"><br></p><p data-lake-id=\"u20e292f4\" id=\"u20e292f4\"><br></p><h3 data-lake-id=\"c0131d2a\" id=\"c0131d2a\"><span data-lake-id=\"u57794d8d\" id=\"u57794d8d\">集群原理</span></h3><p data-lake-id=\"u5c043ed3\" id=\"u5c043ed3\"><br></p><p data-lake-id=\"udb2f051a\" id=\"udb2f051a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638586666884-b99e8e77-81ef-4547-a9cd-1dcd00e86009.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D501%26id%3Du84ce9d05%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D501%26originWidth%3D1025%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D171726%26status%3Ddone%26style%3Dnone%26taskId%3Dud7aa0990-8e0c-4e31-9dd1-c6d20007401%26title%3D%26width%3D1025%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22hjXVB%22%7D\"></card></p><p data-lake-id=\"u13f38595\" id=\"u13f38595\"><br></p><h3 data-lake-id=\"b80e581a\" id=\"b80e581a\"><span data-lake-id=\"ua8738995\" id=\"ua8738995\">镜像队列（备份）</span></h3><p data-lake-id=\"u18d348a8\" id=\"u18d348a8\"><br></p><p data-lake-id=\"u638524b5\" id=\"u638524b5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638587610363-c97ef89e-768e-4278-a087-89f20e211145.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D348%26id%3Due8695270%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D348%26originWidth%3D981%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D453959%26status%3Ddone%26style%3Dnone%26taskId%3Due9f78068-c45e-4cc9-a3e0-595ae6c7337%26title%3D%26width%3D981%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22FTNYI%22%7D\"></card></p><p data-lake-id=\"ube043d14\" id=\"ube043d14\"><br></p><h3 data-lake-id=\"3702723f\" id=\"3702723f\"><span data-lake-id=\"u6b2b8ea2\" id=\"u6b2b8ea2\">高可用负载均衡</span></h3><p data-lake-id=\"u442f2d09\" id=\"u442f2d09\"><br></p><p data-lake-id=\"u2e5b02e2\" id=\"u2e5b02e2\"><span data-lake-id=\"ufc900772\" id=\"ufc900772\">若节点 1 宕机了，生产者需要连接节点 2 或节点 3。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588031855-ab97c0f3-9861-4222-b593-0a4dbfbf566d.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D754%26id%3Du0c60fb59%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D754%26originWidth%3D1028%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D344345%26status%3Ddone%26style%3Dnone%26taskId%3Duaef85042-099b-42a3-8caf-268a89b7438%26title%3D%26width%3D1028%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22XmCHx%22%7D\"></card><span data-lake-id=\"u6247fda2\" id=\"u6247fda2\"><br /></span><span data-lake-id=\"uf4b7c837\" id=\"uf4b7c837\">出现问题：生产者无法变更 rabbitmq 的 ip，此时需要借助外力 Haproxy。</span></p><p data-lake-id=\"u7f61765f\" id=\"u7f61765f\"><br></p><h4 data-lake-id=\"ea97af39\" id=\"ea97af39\"><span data-lake-id=\"u8b712db1\" id=\"u8b712db1\">Haproxy 实现高可用 负载均衡（高并发）</span></h4><p data-lake-id=\"ubf6aa704\" id=\"ubf6aa704\"><br></p><p data-lake-id=\"ud147c6a9\" id=\"ud147c6a9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588332155-384a9066-f6ed-434c-bd8d-a08678795b99.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du91155287%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D177%26originWidth%3D973%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D240431%26status%3Ddone%26style%3Dnone%26taskId%3Du9a4dff8d-f824-447c-b845-2962ddc0650%26title%3D%26width%3D973%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22BHuXj%22%7D\"></card><span data-lake-id=\"u550eb749\" id=\"u550eb749\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588403571-837d2496-d169-4b00-aa3c-4459e5dfd616.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D644%26id%3Du63b0c105%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D644%26originWidth%3D740%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D224363%26status%3Ddone%26style%3Dnone%26taskId%3Du400f5630-901e-4db7-8556-6d72a1f206a%26title%3D%26width%3D740%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22FRrD8%22%7D\"></card><span data-lake-id=\"uc1db626c\" id=\"uc1db626c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588495639-57e1823e-e317-48f1-bd99-4a64ab26b8b3.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D711%26id%3Duefaa64c3%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D711%26originWidth%3D860%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D371827%26status%3Ddone%26style%3Dnone%26taskId%3Du8f30ca6f-4949-4c9d-899d-b31600baa56%26title%3D%26width%3D860%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22K5Fpn%22%7D\"></card></p><p data-lake-id=\"ub8c1111e\" id=\"ub8c1111e\"><br></p><h2 data-lake-id=\"80fc5d12\" id=\"80fc5d12\"><span data-lake-id=\"u0e79ddbd\" id=\"u0e79ddbd\">联合交换机</span></h2><p data-lake-id=\"uf8765abf\" id=\"uf8765abf\"><br></p><p data-lake-id=\"u19f4fde9\" id=\"u19f4fde9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638600972390-f8eabb13-fdba-432b-8b93-c4798757e13e.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D660%26id%3Du1565c7a2%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D660%26originWidth%3D1136%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D882067%26status%3Ddone%26style%3Dnone%26taskId%3Du40ae3ed4-1bbc-4baa-b912-40f55e8b353%26title%3D%26width%3D1136%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22FkHCS%22%7D\"></card><span data-lake-id=\"ue7c4b67b\" id=\"ue7c4b67b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638601768985-91857261-fe17-4687-bc9f-f8d9daf1a364.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D524%26id%3Duafeaba48%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D524%26originWidth%3D1115%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D307899%26status%3Ddone%26style%3Dnone%26taskId%3Du4499a665-a618-4138-a2f2-5bdf1dbaca0%26title%3D%26width%3D1115%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22FgJli%22%7D\"></card><span data-lake-id=\"u07d151a2\" id=\"u07d151a2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638601930969-0c445ecb-7e66-43cd-a7d1-3aa8c76f884d.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D581%26id%3Du6d4c749b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D581%26originWidth%3D505%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D221677%26status%3Ddone%26style%3Dnone%26taskId%3Duf8d981fd-837f-4eb6-83f6-a7deba0a018%26title%3D%26width%3D505%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22NxTl9%22%7D\"></card><span data-lake-id=\"u4f114bbf\" id=\"u4f114bbf\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602088334-f76d8ba1-5c6d-4280-87c8-b7d58d42f902.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D506%26id%3Du4b7146f5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D506%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D158537%26status%3Ddone%26style%3Dnone%26taskId%3Du64d80530-7388-4c12-9d3b-48d90765e0b%26title%3D%26width%3D976%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22oVYwK%22%7D\"></card><span data-lake-id=\"ufecf6f23\" id=\"ufecf6f23\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602110103-8ee2df46-7982-4b08-a6c8-e4d9c701b69f.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D666%26id%3Du65df8122%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D666%26originWidth%3D933%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D302115%26status%3Ddone%26style%3Dnone%26taskId%3Du970ef30c-4b50-4327-928e-6bf0cdbc242%26title%3D%26width%3D933%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22A9wRm%22%7D\"></card></p><p data-lake-id=\"u6827fec5\" id=\"u6827fec5\"><br></p><h2 data-lake-id=\"997a4ba0\" id=\"997a4ba0\"><span data-lake-id=\"u484fad48\" id=\"u484fad48\">联邦队列</span></h2><p data-lake-id=\"ud2dd89e2\" id=\"ud2dd89e2\"><br></p><p data-lake-id=\"ufbf7e7f8\" id=\"ufbf7e7f8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602602857-2efc1842-e9c7-409e-a302-2b4c63e92027.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D833%26id%3Du3d500d40%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D833%26originWidth%3D1312%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D553687%26status%3Ddone%26style%3Dnone%26taskId%3Du77ecfe28-0a6d-4318-bc8e-c80d6183ecc%26title%3D%26width%3D1312%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22qvMwP%22%7D\"></card><span data-lake-id=\"u2cc42176\" id=\"u2cc42176\"><br /></span><span data-lake-id=\"u43963498\" id=\"u43963498\">两个不同地区数据同步。<br /></span><span data-lake-id=\"ufaa05362\" id=\"ufaa05362\"> </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603240478-ba4a3a39-d3dc-41b3-9ee9-c8d9f2718ff9.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D551%26id%3Du0dc6d91b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D551%26originWidth%3D1149%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D244288%26status%3Ddone%26style%3Dnone%26taskId%3Du65c1251d-b002-4909-ae1d-f27aa9d85ee%26title%3D%26width%3D1149%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22Rmak1%22%7D\"></card></p><p data-lake-id=\"u6d139d21\" id=\"u6d139d21\"><br></p><h2 data-lake-id=\"Shovel\" id=\"Shovel\"><span data-lake-id=\"uc6c63b07\" id=\"uc6c63b07\">Shovel</span></h2><p data-lake-id=\"u8914465d\" id=\"u8914465d\"><br></p><p data-lake-id=\"ufcf1b723\" id=\"ufcf1b723\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603352779-28d006e0-d330-4802-935c-040341c1ca8d.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D324%26id%3Duc852da4a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D324%26originWidth%3D1287%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D568699%26status%3Ddone%26style%3Dnone%26taskId%3Du2b770501-53fa-4cbc-a428-000590e2c17%26title%3D%26width%3D1287%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22fxL0i%22%7D\"></card><span data-lake-id=\"udab537c0\" id=\"udab537c0\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603460089-03466d04-df20-4ab2-8968-f1b5ef5905ca.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D409%26id%3Dua502f49e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D409%26originWidth%3D871%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D188661%26status%3Ddone%26style%3Dnone%26taskId%3Du48a08d45-4dad-40e0-9723-55db3e3ef79%26title%3D%26width%3D871%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22lh1tz%22%7D\"></card><span data-lake-id=\"ucad6ce11\" id=\"ucad6ce11\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603378352-15aca4d9-af9b-48c1-b796-60a86b637ebd.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D667%26id%3Duec9ad770%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D667%26originWidth%3D864%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D266940%26status%3Ddone%26style%3Dnone%26taskId%3Du8acd6a6e-3ed2-4306-8639-2eeb16612c3%26title%3D%26width%3D864%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22jpTqS%22%7D\"></card><span data-lake-id=\"u4fdf1f0b\" id=\"u4fdf1f0b\"><br /></span><span data-lake-id=\"uc8cf98b9\" id=\"uc8cf98b9\"> </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603594801-6bd296a5-c23b-418f-a94e-5261833d5605.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D592%26id%3Du903663bb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D592%26originWidth%3D994%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D194438%26status%3Ddone%26style%3Dnone%26taskId%3Dud10d2c55-8f5b-4b88-b096-8942402c361%26title%3D%26width%3D994%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22oSJ3T%22%7D\"></card><span data-lake-id=\"u6738e9dc\" id=\"u6738e9dc\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603639753-9ae10564-7bad-4528-afd2-867c58d1f413.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D121%26id%3Du71e6fa9c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D121%26originWidth%3D1169%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D88867%26status%3Ddone%26style%3Dnone%26taskId%3Du55070310-f786-4b38-98ce-55db2f75ca1%26title%3D%26width%3D1169%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22Gjcgc%22%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u0d7e0fb8\" id=\"u0d7e0fb8\"><span data-lake-id=\"u909f53e3\" id=\"u909f53e3\">---</span></p><p data-lake-id=\"uc679db55\" id=\"uc679db55\"><span data-lake-id=\"u4c1a62fc\" id=\"u4c1a62fc\">title: RabbitMQ学习笔记<br /></span><span data-lake-id=\"u55719a35\" id=\"u55719a35\">categories: 知识</span></p><p data-lake-id=\"ue3ff7f66\" id=\"ue3ff7f66\"><span data-lake-id=\"u8224b5f3\" id=\"u8224b5f3\">updated: 2021-11-05</span></p><p data-lake-id=\"uceec00a5\" id=\"uceec00a5\"><span data-lake-id=\"u52abd9e8\" id=\"u52abd9e8\">date: 2021-11-05<br /></span><span data-lake-id=\"u4e35ecf9\" id=\"u4e35ecf9\">tags: [RabbitMQ, 消息中间件]</span></p><p data-lake-id=\"ud1be1966\" id=\"ud1be1966\"><span data-lake-id=\"u63972e28\" id=\"u63972e28\">cover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201910%2F20191018012402811963.png&amp;refer=http%3A%2F%2Fimage.bubuko.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1671267173&amp;t=5d1df4c7b1043f63bcf583ceffddf4d3</span></p><p data-lake-id=\"uaca5ecf0\" id=\"uaca5ecf0\"><span data-lake-id=\"udd666371\" id=\"udd666371\">--- </span></p><p data-lake-id=\"u34c88f82\" id=\"u34c88f82\"><span data-lake-id=\"ufccbef48\" id=\"ufccbef48\">​</span><br></p><p data-lake-id=\"u5a3553e0\" id=\"u5a3553e0\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630671540955-650bc67f-569a-4cef-a095-ec73a3b34897.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D740%26id%3Du64b4ea35%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D740%26originWidth%3D1340%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D584856%26status%3Ddone%26style%3Dnone%26taskId%3Du20a11e76-4e9c-49b4-8ca4-cc25eac0808%26title%3D%26width%3D1340%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1340%2C%22originHeight%22%3A740%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efe7e7%22%2C%22id%22%3A%22FmDdj%22%7D\"></card><span data-lake-id=\"uc073c3a2\" id=\"uc073c3a2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630672453989-c5f9d3cf-e77f-4c3e-8a9d-173b49f0aa4c.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D473%26id%3Dub505e50f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D473%26originWidth%3D1544%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D451836%26status%3Ddone%26style%3Dnone%26taskId%3Du973d9d93-5ee4-44e2-9f50-b28d8e8f15e%26title%3D%26width%3D1544%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1544%2C%22originHeight%22%3A473%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22N1Vbj%22%7D\"></card><span data-lake-id=\"ufdb92570\" id=\"ufdb92570\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1630673109375-2f65953f-32f5-4be8-9353-9d08abb6587f.png%23clientId%3Duc20dad1f-a2b4-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D794%26id%3Duce851ada%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D794%26originWidth%3D1520%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D669042%26status%3Ddone%26style%3Dnone%26taskId%3Du1e0c19d3-9eae-4ab1-9e35-b33c4bbbcd6%26title%3D%26width%3D1520%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1520%2C%22originHeight%22%3A794%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23b2b1b0%22%2C%22id%22%3A%22zGC4d%22%7D\"></card></p><p data-lake-id=\"u329797e5\" id=\"u329797e5\"><br></p><h2 data-lake-id=\"9c0cd8ed\" id=\"9c0cd8ed\"><span data-lake-id=\"u0c12fd73\" id=\"u0c12fd73\">为什么要用 rabbitMQ？</span></h2><h3 data-lake-id=\"81220e89\" id=\"81220e89\"><span data-lake-id=\"u450596fc\" id=\"u450596fc\">1. 流量削峰</span></h3><p data-lake-id=\"u034d5ee5\" id=\"u034d5ee5\"><br></p><p data-lake-id=\"u03a10fc5\" id=\"u03a10fc5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1637998719062-ee3b7961-8606-40b9-9bd6-139143630402.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D91%26id%3Du7a7d8c10%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D990%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D78126%26status%3Ddone%26style%3Dnone%26taskId%3Du903bdc4d-2ce4-4ac8-97d1-9cf8226327b%26title%3D%26width%3D495%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A990%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22Ds1E5%22%7D\"></card></p><p data-lake-id=\"u874b8d44\" id=\"u874b8d44\"><br></p><h3 data-lake-id=\"c491023f\" id=\"c491023f\"><span data-lake-id=\"u898d65ad\" id=\"u898d65ad\">2. 应用解耦</span></h3><p data-lake-id=\"ue8c60717\" id=\"ue8c60717\"><br></p><p data-lake-id=\"u4ba4ff6a\" id=\"u4ba4ff6a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1637998760193-a4f14c2c-a22b-4c92-b207-ae58a962577a.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Du8f01ca2b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D363%26originWidth%3D1085%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D190648%26status%3Ddone%26style%3Dnone%26taskId%3Du30e77d52-0f3b-4d69-b06f-8229a9c232f%26title%3D%26width%3D542.5%26referrerpolicy%3Dno-referrer%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1085%2C%22originHeight%22%3A363%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22hMEcn%22%7D\"></card></p><p data-lake-id=\"u6d37b294\" id=\"u6d37b294\"><br></p><h3 data-lake-id=\"d4ef8fda\" id=\"d4ef8fda\"><span data-lake-id=\"u020e8192\" id=\"u020e8192\">3. 异步处理</span></h3><p data-lake-id=\"ufa9eb4bc\" id=\"ufa9eb4bc\"><br></p><p data-lake-id=\"u20a06663\" id=\"u20a06663\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009293978-1fde3fa6-5de6-476b-bc8f-4381749e748c.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D315%26id%3Du2602b5b4%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D630%26originWidth%3D1167%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D283589%26status%3Ddone%26style%3Dnone%26taskId%3Duf5236049-2c88-4e12-b15e-7d99585efad%26title%3D%26width%3D583.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1167%2C%22originHeight%22%3A630%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22EqXpn%22%7D\"></card></p><p data-lake-id=\"u0a94a1a3\" id=\"u0a94a1a3\"><br></p><h2 data-lake-id=\"753ccaa2\" id=\"753ccaa2\"><span data-lake-id=\"u4a58fcf4\" id=\"u4a58fcf4\">RabbitMQ 核心部分</span></h2><p data-lake-id=\"u29bdd22c\" id=\"u29bdd22c\"><br></p><p data-lake-id=\"uab230d58\" id=\"uab230d58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009378104-cb162a2f-4170-4d24-99c1-4e3ee09087ae.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D284%26id%3Du45cac300%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D568%26originWidth%3D1077%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D305514%26status%3Ddone%26style%3Dnone%26taskId%3Du95a38925-5c34-45dd-bfca-d140d73dc3f%26title%3D%26width%3D538.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1077%2C%22originHeight%22%3A568%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f2f1%22%2C%22id%22%3A%22TB3Zf%22%7D\"></card></p><p data-lake-id=\"u0943ec06\" id=\"u0943ec06\"><br></p><h2 data-lake-id=\"a260da3a\" id=\"a260da3a\"><span data-lake-id=\"u4615632f\" id=\"u4615632f\">各个名词介绍</span></h2><p data-lake-id=\"u9ab39537\" id=\"u9ab39537\"><br></p><p data-lake-id=\"ub76612d7\" id=\"ub76612d7\"><br></p><p data-lake-id=\"u698e3664\" id=\"u698e3664\"><br></p><h3 data-lake-id=\"c83a4ba0\" id=\"c83a4ba0\"><span data-lake-id=\"ud5ce219f\" id=\"ud5ce219f\">RabbitMQ 工作原理</span></h3><p data-lake-id=\"u21effb62\" id=\"u21effb62\"><br></p><p data-lake-id=\"ua7741f7e\" id=\"ua7741f7e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009501957-eb0902f3-1fa1-47d5-9bc7-8d03f6e12de0.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du79c375f5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D514%26originWidth%3D1060%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D210068%26status%3Ddone%26style%3Dnone%26taskId%3Due02a7c50-c563-46af-a784-5ae4c1dcdfe%26title%3D%26width%3D530%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1060%2C%22originHeight%22%3A514%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efc150%22%2C%22id%22%3A%22sf1J3%22%7D\"></card><span data-lake-id=\"u0075424c\" id=\"u0075424c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009567915-6084eb1d-d428-47ec-844f-b3b48c6c6d0c.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D310%26id%3Du9337433a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D619%26originWidth%3D1135%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D776522%26status%3Ddone%26style%3Dnone%26taskId%3Duced2ac5e-e117-4050-8e39-087f63ff410%26title%3D%26width%3D567.5%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1135%2C%22originHeight%22%3A619%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e1dccf%22%2C%22id%22%3A%22ft4q6%22%7D\"></card><span data-lake-id=\"u893d075b\" id=\"u893d075b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638009610891-4a5dba18-6006-41bf-a068-b2f33ed7df48.png%23clientId%3Dudb8aea13-24db-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D63%26id%3Du38d6f233%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D126%26originWidth%3D1128%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D136646%26status%3Ddone%26style%3Dnone%26taskId%3Du3dada18e-9ab8-40c9-8042-2e2f9f40306%26title%3D%26width%3D564%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1128%2C%22originHeight%22%3A126%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cdc5b8%22%2C%22id%22%3A%22rJuNv%22%7D\"></card></p><p data-lake-id=\"u1525aa57\" id=\"u1525aa57\"><br></p><h2 data-lake-id=\"e655a410\" id=\"e655a410\"><span data-lake-id=\"u705eb6e6\" id=\"u705eb6e6\">安装</span></h2><p data-lake-id=\"u05de2581\" id=\"u05de2581\"><br></p><p data-lake-id=\"uf6aced4d\" id=\"uf6aced4d\"><a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" data-lake-id=\"ue8f1a388\" id=\"ue8f1a388\"><span data-lake-id=\"u33a9052d\" id=\"u33a9052d\">rabbitmq.com/download.html</span></a><span data-lake-id=\"uf625d546\" id=\"uf625d546\"><br /></span><span data-lake-id=\"u097a9a4a\" id=\"u097a9a4a\">erlang 和 rabbitMQ 版本匹配：<br /></span><a href=\"https://www.cnblogs.com/gne-hwz/p/10714013.html\" target=\"_blank\" data-lake-id=\"u79f01256\" id=\"u79f01256\"><span data-lake-id=\"u5287bc87\" id=\"u5287bc87\">https://www.cnblogs.com/gne-hwz/p/10714013.html</span></a><span data-lake-id=\"u1249a5dd\" id=\"u1249a5dd\"><br /></span><span data-lake-id=\"u5969764e\" id=\"u5969764e\">安装：</span><a href=\"https://blog.csdn.net/almahehe/article/details/75390572\" target=\"_blank\" data-lake-id=\"u4866f597\" id=\"u4866f597\"><span data-lake-id=\"uf1b9b81f\" id=\"uf1b9b81f\">https://blog.csdn.net/almahehe/article/details/75390572</span></a><span data-lake-id=\"ua09b2180\" id=\"ua09b2180\"><br /></span><span data-lake-id=\"u9b14d83d\" id=\"u9b14d83d\">（建议看尚硅谷视频进行快速安装）<br /></span><span data-lake-id=\"ue3b0bc72\" id=\"ue3b0bc72\">安装之后，可以访问 ip:15672 ，查看发送消息的端口（5672）和用户。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638169386681-e382c30c-baba-4fbb-bd40-aaa7b0a1eac6.png%23clientId%3Duc4bbfa15-6ab6-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D173%26id%3Du1a771f9c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D102%26originWidth%3D450%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D28980%26status%3Ddone%26style%3Dnone%26taskId%3Dua13bea1f-438b-4ef8-8913-b4ccb9fa78c%26title%3D%26width%3D761.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A450%2C%22originHeight%22%3A102%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1f1f1%22%2C%22id%22%3A%22pNXMC%22%7D\"></card></p><p data-lake-id=\"u9691fe71\" id=\"u9691fe71\"><br></p><h2 data-lake-id=\"c729f8ef\" id=\"c729f8ef\"><span data-lake-id=\"ufb9fdbed\" id=\"ufb9fdbed\">简单队列模式</span></h2><h3 data-lake-id=\"f5abe6f8\" id=\"f5abe6f8\"><span data-lake-id=\"ueaf18294\" id=\"ueaf18294\">生产者代码</span></h3><p data-lake-id=\"u9247b990\" id=\"u9247b990\"><br></p><ol list=\"ua5bc81d8\"><li fid=\"ud363da97\" data-lake-id=\"ua2bec32f\" id=\"ua2bec32f\"><span data-lake-id=\"ud39a2801\" id=\"ud39a2801\">项目依赖：</span></li></ol><p data-lake-id=\"ua99c915f\" id=\"ua99c915f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E6%8C%87%E5%AE%9Ajdk%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.apache.maven.plugins%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Emaven-compiler-plugin%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.8.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.rabbitmq%2Famqp-client%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--rabbitmq%E4%BE%9D%E8%B5%96%E5%AE%A2%E6%88%B7%E7%AB%AF--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecom.rabbitmq%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Eamqp-client%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E5.8.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcommons-io%2Fcommons-io%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E6%B5%81%E7%9A%84%E4%BE%9D%E8%B5%96--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecommons-io%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Ecommons-io%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.slf4j%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Eslf4j-simple%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.7.25%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220859d073%22%7D\"></card><p data-lake-id=\"ud6903308\" id=\"ud6903308\"><br></p><ol list=\"u6eef3ccd\" start=\"2\"><li fid=\"uc78933dd\" data-lake-id=\"uadcc7a78\" id=\"uadcc7a78\"><span data-lake-id=\"u4718b128\" id=\"u4718b128\">生产者代码：</span></li></ol><p data-lake-id=\"u087456f1\" id=\"u087456f1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22japackage%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.Connection%3B%5Cnimport%20com.rabbitmq.client.ConnectionFactory%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F28%2022%3A15%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%EF%BC%9A%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%8E%82ip%20%20%E8%BF%9E%E6%8E%A5rabbitmq%E7%9A%84%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E6%88%B7%E5%90%8D%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%AF%86%E7%A0%81%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E4%BF%A1%E9%81%93%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22hello%20world%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E5%8F%91%E9%80%81%E5%88%B0%E5%93%AA%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E8%B7%AF%E7%94%B1%E7%9A%84key%E5%80%BC%E6%98%AF%E5%93%AA%E4%B8%AA%EF%BC%8C%E6%9C%AC%E6%AC%A1%E6%98%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2CQUEUE_NAME%2Cnull%2Cmessage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E5%AE%8C%E6%AF%95%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22551912bc%22%7D\"></card><p data-lake-id=\"ua3657b02\" id=\"ua3657b02\"><br></p><p data-lake-id=\"u11483b33\" id=\"u11483b33\"><span data-lake-id=\"u967b6ec8\" id=\"u967b6ec8\">如果运行报超时错误，需要打开云服务器的安全组 5672 端口。<br /></span><span data-lake-id=\"udc1e13a8\" id=\"udc1e13a8\">（参考博客：</span><a href=\"https://www.cnblogs.com/jxearlier/p/11920825.html\" target=\"_blank\" data-lake-id=\"u7dcde88d\" id=\"u7dcde88d\"><span data-lake-id=\"udec279e8\" id=\"udec279e8\">https://www.cnblogs.com/jxearlier/p/11920825.html</span></a><span data-lake-id=\"u5dae9d38\" id=\"u5dae9d38\">）</span></p><h3 data-lake-id=\"3b753fe7\" id=\"3b753fe7\"><span data-lake-id=\"uae969ae3\" id=\"uae969ae3\">消费者代码</span></h3><p data-lake-id=\"ud87a77a1\" id=\"ud87a77a1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.rabbitmq.client.*%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2015%3A04%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%3A%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%96%E6%B6%88%E6%B6%88%E6%81%AF%E6%97%B6%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E8%A2%AB%E4%B8%AD%E6%96%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2CdeliverCallback%2CcancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d7bd0f8f%22%7D\"></card><p data-lake-id=\"u161ab880\" id=\"u161ab880\"><br></p><p data-lake-id=\"u2f7061dc\" id=\"u2f7061dc\"><span data-lake-id=\"u492a9635\" id=\"u492a9635\">运行结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638172828992-073b0df6-a480-4260-a724-e17e9191a44c.png%23clientId%3Duc4bbfa15-6ab6-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D20%26id%3Du3ee077b2%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D20%26originWidth%3D296%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D2932%26status%3Ddone%26style%3Dnone%26taskId%3Dud645c173-0157-49f2-89fb-5d58c2cd89a%26title%3D%26width%3D296%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A296%2C%22originHeight%22%3A20%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3e49%22%2C%22id%22%3A%22kWU4Y%22%7D\"></card></p><p data-lake-id=\"u0b7711d3\" id=\"u0b7711d3\"><br></p><h3 data-lake-id=\"56a70cf7\" id=\"56a70cf7\"><span data-lake-id=\"u6cb3fb74\" id=\"u6cb3fb74\">测试生产者和消费者代码：</span></h3><p data-lake-id=\"uac0eac74\" id=\"uac0eac74\"><br></p><ol list=\"u51f71829\"><li fid=\"ucee08304\" data-lake-id=\"u4916faee\" id=\"u4916faee\"><span data-lake-id=\"u36a54dd5\" id=\"u36a54dd5\">先运行消费者代码，发现没有消息，再运行生产者代码，发送消息，再看消费者代码控制台，此时已经接收到消息。</span></li></ol><p data-lake-id=\"ua57feed9\" id=\"ua57feed9\"><br></p><h2 data-lake-id=\"3d1bae02\" id=\"3d1bae02\"><span data-lake-id=\"u9f020e50\" id=\"u9f020e50\">工作队列模式</span></h2><p data-lake-id=\"u8a14f32f\" id=\"u8a14f32f\"><br></p><p data-lake-id=\"u924e23c9\" id=\"u924e23c9\"><br></p><p data-lake-id=\"ub993060c\" id=\"ub993060c\"><br></p><h3 data-lake-id=\"d9addd15\" id=\"d9addd15\"><span data-lake-id=\"u3ad8ec7f\" id=\"u3ad8ec7f\">轮训分发消息</span></h3><p data-lake-id=\"u0a21536f\" id=\"u0a21536f\"><br></p><p data-lake-id=\"u1c457a9d\" id=\"u1c457a9d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638191830547-a43bbaa1-a524-4603-b6a9-0824e943cf9c.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D546%26id%3Ducf96c5e0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D546%26originWidth%3D1278%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D220503%26status%3Ddone%26style%3Dnone%26taskId%3Dub030755f-49df-4184-9d0d-65bfa0e561e%26title%3D%26width%3D1278%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1278%2C%22originHeight%22%3A546%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22kyxCV%22%7D\"></card></p><p data-lake-id=\"ubbe06130\" id=\"ubbe06130\"><br></p><ol list=\"u993bcc81\"><li fid=\"ub0e7382c\" data-lake-id=\"ua4977f19\" id=\"ua4977f19\"><span data-lake-id=\"u142ff8d4\" id=\"u142ff8d4\">抽取连接工厂工具类：</span></li></ol><p data-lake-id=\"u1321a065\" id=\"u1321a065\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.utils%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.Connection%3B%5Cnimport%20com.rabbitmq.client.ConnectionFactory%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2019%3A48%5Cn%20*%20%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%E5%88%9B%E5%BB%BA%E4%BF%A1%E9%81%93%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%5Cn%20*%2F%5Cnpublic%20class%20RabbitMqUtils%20%7B%5Cn%20%20%20%20public%20static%20Channel%20getChannel()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20return%20channel%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d79993aa%22%7D\"></card><p data-lake-id=\"u63f36183\" id=\"u63f36183\"><br></p><ol list=\"u9211bc6e\" start=\"2\"><li fid=\"uaa9721e3\" data-lake-id=\"u07f51501\" id=\"u07f51501\"><span data-lake-id=\"uf408d5cc\" id=\"uf408d5cc\">工作线程代码：（消费者）</span></li></ol><p data-lake-id=\"ud95a0f1f\" id=\"ud95a0f1f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.two%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.CancelCallback%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cnimport%20com.rabbitmq.client.Delivery%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2019%3A55%5Cn%20*%20%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%B9%8B%E5%89%8D%E7%9A%84%E6%B6%88%E8%B4%B9%E8%80%85%EF%BC%89%5Cn%20*%2F%5Cnpublic%20class%20Worker01%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%9A%84%E6%8E%A5%E6%94%B6%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6%E8%A2%AB%E5%8F%96%E6%B6%88%E6%97%B6%20%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20(consumerTag)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2C%20deliverCallback%2C%20cancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%229d76e763%22%7D\"></card><p data-lake-id=\"u3c81ab45\" id=\"u3c81ab45\"><br></p><ol list=\"u1721a5be\" start=\"3\"><li fid=\"u2f522a92\" data-lake-id=\"u3d36e889\" id=\"u3d36e889\"><span data-lake-id=\"u40d2ed30\" id=\"u40d2ed30\">启动两个工作线程（消费者）</span></li></ol><p data-lake-id=\"ub9bad24a\" id=\"ub9bad24a\"><br></p><p data-lake-id=\"u880b1412\" id=\"u880b1412\"><span data-lake-id=\"ud7746195\" id=\"ud7746195\">前提是在 idea 设置允许方法多个并行运行：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638188489814-b081e679-bc7f-4cad-964e-bfb80575820c.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D636%26id%3Duf61f07dc%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D869%26originWidth%3D1143%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D94819%26status%3Ddone%26style%3Dnone%26taskId%3Du4472c929-c48f-4a7d-ab7d-ec2994b75e5%26title%3D%26width%3D836.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1143%2C%22originHeight%22%3A869%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233b4043%22%2C%22id%22%3A%22zVInE%22%7D\"></card><span data-lake-id=\"ubfdf41bf\" id=\"ubfdf41bf\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638188418807-97ce766a-47ef-458c-8413-d496cbcddbed.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D172%26id%3Du35f12aab%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D172%26originWidth%3D669%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D20804%26status%3Ddone%26style%3Dnone%26taskId%3Duf688cf36-6dc9-43f1-be3d-946b8a45d78%26title%3D%26width%3D669%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A669%2C%22originHeight%22%3A172%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232a373f%22%2C%22id%22%3A%22yNG1N%22%7D\"></card></p><p data-lake-id=\"ub776168d\" id=\"ub776168d\"><br></p><ol list=\"u8fb16ba1\" start=\"4\"><li fid=\"u324d4ebf\" data-lake-id=\"ud4caf9e9\" id=\"ud4caf9e9\"><span data-lake-id=\"uf8568ee5\" id=\"uf8568ee5\">生产者代码：</span></li></ol><p data-lake-id=\"u09bb0f44\" id=\"u09bb0f44\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.two%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2021%3A04%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%E5%8F%91%E9%80%81%E5%A4%A7%E9%87%8F%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Task01%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%AE%8C%E6%88%90%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%225346bd81%22%7D\"></card><p data-lake-id=\"u0c3323ed\" id=\"u0c3323ed\"><br></p><ol list=\"u35971760\" start=\"5\"><li fid=\"u07c2ae97\" data-lake-id=\"u5fbb9819\" id=\"u5fbb9819\"><span data-lake-id=\"u5bb71885\" id=\"u5bb71885\">测试：启动生产者</span></li></ol><p data-lake-id=\"u647c8fbd\" id=\"u647c8fbd\"><br></p><p data-lake-id=\"ud09fcf35\" id=\"ud09fcf35\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192109706-2649384b-8559-4d7e-8609-220f576c3e25.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D275%26id%3Du4261e57f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D275%26originWidth%3D591%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D25224%26status%3Ddone%26style%3Dnone%26taskId%3Due3dff20d-583f-4d0b-bb12-94ccae95bc1%26title%3D%26width%3D591%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A275%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c373d%22%2C%22id%22%3A%22PuJou%22%7D\"></card><span data-lake-id=\"ud9d3a671\" id=\"ud9d3a671\"><br /></span><span data-lake-id=\"uc8756aef\" id=\"uc8756aef\">可以看见消费者轮循接收消息：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192164342-16d183be-bbe5-4de9-bac4-d87bd87a746b.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D179%26id%3Due97a7cdb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D179%26originWidth%3D591%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23018%26status%3Ddone%26style%3Dnone%26taskId%3Du7cff6d1a-b142-4d52-a1c5-1cca6fd241e%26title%3D%26width%3D591%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A179%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3c44%22%2C%22id%22%3A%22Upfv4%22%7D\"></card><span data-lake-id=\"ude7e3baa\" id=\"ude7e3baa\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638192176544-d380de90-ff7a-48a7-a080-c4a1ac193460.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D198%26id%3Dubb73d589%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D198%26originWidth%3D598%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23978%26status%3Ddone%26style%3Dnone%26taskId%3Du3ac63e3a-6d82-4340-9fed-c68c8fbf564%26title%3D%26width%3D598%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A598%2C%22originHeight%22%3A198%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3b43%22%2C%22id%22%3A%22xLv8Q%22%7D\"></card></p><p data-lake-id=\"u9b4baf19\" id=\"u9b4baf19\"><br></p><h2 data-lake-id=\"269fc561\" id=\"269fc561\"><span data-lake-id=\"ucee7fa76\" id=\"ucee7fa76\">消息应答</span></h2><p data-lake-id=\"u6a6463c8\" id=\"u6a6463c8\"><br></p><p data-lake-id=\"uce771e06\" id=\"uce771e06\"><br></p><p data-lake-id=\"u4921363f\" id=\"u4921363f\"><br></p><h3 data-lake-id=\"398e8d91\" id=\"398e8d91\"><span data-lake-id=\"u29d2557e\" id=\"u29d2557e\">自动应答</span></h3><p data-lake-id=\"u375825be\" id=\"u375825be\"><br></p><p data-lake-id=\"ua916566e\" id=\"ua916566e\"><span data-lake-id=\"ue97919fe\" id=\"ue97919fe\">不建议使用，仅适用在消费者可以高效并以某种速率能够处理这些消息的情况。</span></p><p data-lake-id=\"u5267e3be\" id=\"u5267e3be\"><br></p><h3 data-lake-id=\"a7945bf1\" id=\"a7945bf1\"><span data-lake-id=\"uc4459f0a\" id=\"uc4459f0a\">手动应答</span></h3><p data-lake-id=\"uc5fde435\" id=\"uc5fde435\"><br></p><p data-lake-id=\"ud58827d8\" id=\"ud58827d8\"><br></p><p data-lake-id=\"u5b06088a\" id=\"u5b06088a\"><br></p><h4 data-lake-id=\"bdff53ca\" id=\"bdff53ca\"><span data-lake-id=\"u8e89b299\" id=\"u8e89b299\">消息应答的方法：</span></h4><p data-lake-id=\"u91742edc\" id=\"u91742edc\"><br></p><p data-lake-id=\"u50ffcea8\" id=\"u50ffcea8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638193415623-6b7ff26f-8cc3-4abd-b1c6-41f79897f0cf.png%23clientId%3Du43ded51d-0244-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D312%26id%3Dud16b0385%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D312%26originWidth%3D737%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D100867%26status%3Ddone%26style%3Dnone%26taskId%3Du39cf8244-b605-4c5d-baca-fe2103cd9d3%26title%3D%26width%3D737%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A737%2C%22originHeight%22%3A312%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22S2b1y%22%7D\"></card></p><p data-lake-id=\"u9dec6f82\" id=\"u9dec6f82\"><br></p><h4 data-lake-id=\"70c2cd3d\" id=\"70c2cd3d\"><span data-lake-id=\"udd5077f9\" id=\"udd5077f9\">批量处理 Multiple</span></h4><p data-lake-id=\"ubcb490e9\" id=\"ubcb490e9\"><br></p><p data-lake-id=\"u50a423cf\" id=\"u50a423cf\"><span data-lake-id=\"u38f6a02d\" id=\"u38f6a02d\">手动应答的好处：可以批量应答，并减少网络拥堵。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638282925466-4d3081e6-809c-4a5f-9472-741dacb0cc7c.png%23clientId%3Dub82069db-0272-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D588%26id%3Du97ebb457%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D811%26originWidth%3D1024%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D292383%26status%3Ddone%26style%3Dnone%26taskId%3Duf04a703e-97b1-4fe2-b58f-33d8b0dff4d%26title%3D%26width%3D741.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1024%2C%22originHeight%22%3A811%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f5f5%22%2C%22id%22%3A%22rUzZh%22%7D\"></card><span data-lake-id=\"uccc1f103\" id=\"uccc1f103\"><br /></span><span data-lake-id=\"udcc741b7\" id=\"udcc741b7\">但是批量应答可能会丢失消息。所以尽量不要批量应答，将 multiple 设置为 false。</span></p><p data-lake-id=\"ue797ecdd\" id=\"ue797ecdd\"><br></p><h3 data-lake-id=\"8f744d87\" id=\"8f744d87\"><span data-lake-id=\"u0947adaa\" id=\"u0947adaa\">消息自动重新入队</span></h3><p data-lake-id=\"ub78af706\" id=\"ub78af706\"><br></p><p data-lake-id=\"u48684c84\" id=\"u48684c84\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638317239422-ab1bab41-ac6f-4a05-b3c5-c539d9e6dcd1.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D85%26id%3Du97c18f3b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D79%26originWidth%3D665%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D57746%26status%3Ddone%26style%3Dnone%26taskId%3Du14e494b5-3291-4daf-ada5-47aafa5eab0%26title%3D%26width%3D715.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A665%2C%22originHeight%22%3A79%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ebeae9%22%2C%22id%22%3A%22qAYOD%22%7D\"></card><span data-lake-id=\"u261fb783\" id=\"u261fb783\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638317701734-1133a417-ebbe-4ad9-8453-f0803583491a.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D308%26id%3Du7be19416%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D469%26originWidth%3D1088%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D306122%26status%3Ddone%26style%3Dnone%26taskId%3Du7d90ec89-bd9a-4090-bda5-c09c6014c27%26title%3D%26width%3D714.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1088%2C%22originHeight%22%3A469%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e5e4df%22%2C%22id%22%3A%22o9cFt%22%7D\"></card><span data-lake-id=\"u63cecd77\" id=\"u63cecd77\"><br /></span><span data-lake-id=\"u3de7e416\" id=\"u3de7e416\">测试：<br /></span><span data-lake-id=\"u4dc11cc9\" id=\"u4dc11cc9\"> 1. 生产者：</span></p><p data-lake-id=\"uf22d07da\" id=\"uf22d07da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A46%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%2C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Task2%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(TASK_QUEUE_NAME%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20TASK_QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2207cf3bd5%22%7D\"></card><p data-lake-id=\"u7a59e1ef\" id=\"u7a59e1ef\"><br></p><ol list=\"u5f697a5a\" start=\"2\"><li fid=\"u2dd03fad\" data-lake-id=\"ua5680886\" id=\"ua5680886\"><span data-lake-id=\"u3013537c\" id=\"u3013537c\">两个消费者（消息手动应答）：</span></li></ol><p data-lake-id=\"u9ced89cf\" id=\"u9ced89cf\"><br></p><p data-lake-id=\"udf412596\" id=\"udf412596\"><span data-lake-id=\"u8c75a599\" id=\"u8c75a599\">消费者一：</span></p><p data-lake-id=\"ueae64f29\" id=\"ueae64f29\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.atguigu.rabbitmq.utils.SleepUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A58%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%EF%BC%8C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Work03%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22C1%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E8%BE%83%E7%9F%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%89%E7%9D%A11s%5Cn%20%20%20%20%20%20%20%20%20%20%20%20SleepUtils.sleep(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E9%80%9A%E8%BF%87%E4%BF%A1%E9%81%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%E5%8F%82%E6%95%B0%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%201.%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%A0%87%E8%AE%B0%20tag%5Cn%20%20%20%20%20%20%20%20%20%20%20%202.%20%E6%98%AF%E5%90%A6%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%20%20false%3A%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%E4%BF%A1%E9%81%93%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8Ctrue%3A%E6%89%B9%E9%87%8F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%87%87%E7%94%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20boolean%20autoAck%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(TASK_QUEUE_NAME%2C%20autoAck%2C%20deliverCallback%2C%20(consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227fa74098%22%7D\"></card><p data-lake-id=\"u510b8aea\" id=\"u510b8aea\"><br></p><p data-lake-id=\"u13871e3e\" id=\"u13871e3e\"><span data-lake-id=\"u6439174b\" id=\"u6439174b\">消费者二：</span></p><p data-lake-id=\"ufa927a3f\" id=\"ufa927a3f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.three%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.atguigu.rabbitmq.utils.SleepUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2014%3A58%5Cn%20*%20%E6%B6%88%E6%81%AF%E5%9C%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E6%97%B6%E4%B8%8D%E4%B8%A2%E5%A4%B1%EF%BC%8C%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E9%87%8D%E6%96%B0%E6%B6%88%E8%B4%B9%5Cn%20*%2F%5Cnpublic%20class%20Work04%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20TASK_QUEUE_NAME%20%3D%20%5C%22ack_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22C2%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E8%BE%83%E7%9F%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%89%E7%9D%A11s%5Cn%20%20%20%20%20%20%20%20%20%20%20%20SleepUtils.sleep(30)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E9%80%9A%E8%BF%87%E4%BF%A1%E9%81%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%E5%8F%82%E6%95%B0%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%201.%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%A0%87%E8%AE%B0%20tag%5Cn%20%20%20%20%20%20%20%20%20%20%20%202.%20%E6%98%AF%E5%90%A6%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%20%20false%3A%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%E4%BF%A1%E9%81%93%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8Ctrue%3A%E6%89%B9%E9%87%8F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%87%87%E7%94%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20boolean%20autoAck%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(TASK_QUEUE_NAME%2C%20autoAck%2C%20deliverCallback%2C%20(consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(consumerTag%20%2B%20%5C%22%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%9E%E8%B0%83%E9%80%BB%E8%BE%91%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22f6acdd41%22%7D\"></card><p data-lake-id=\"ucab58ba8\" id=\"ucab58ba8\"><br></p><p data-lake-id=\"u3fb35c0e\" id=\"u3fb35c0e\"><span data-lake-id=\"ub6504087\" id=\"ub6504087\">测试步骤：<br /></span><span data-lake-id=\"uc0861472\" id=\"uc0861472\">① 先启动 task2，创建 ack_queue 队列；（在 ip:15672 的 queue 列表中可以看到目前拥有的队列）<br /></span><span data-lake-id=\"uf95d76a3\" id=\"uf95d76a3\">② 启动 work02，work03 接收消息（消费者）；<br /></span><span data-lake-id=\"ua771a0ff\" id=\"ua771a0ff\">③ 发消息：在 task2 控制台输入 aa,bb,cc,dd,ee,ff，可以看到 work2 和 work3 是轮训接收消息；如果到 work03 应该接收消息 ee 时，work03 突然挂掉，此时 ee 会被转发给 work02 中的 C1，这时 C1 会接收到 ee，因此消息不会丢失，这说明了 rabbitmq 有手动应答的能力，只要没有收到消息，就不会手动应答，从而将消息放回队列。而队列又再次将消息传递给 C1 进行重新消费，从而导致 ee 并没有丢失。</span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638348662336-051f5011-f512-44d1-bb05-053e49ba050c.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D499%26id%3Du60c5aa9e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D499%26originWidth%3D1092%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D254728%26status%3Ddone%26style%3Dnone%26taskId%3Du6c03afcd-9d58-4d4b-b839-5e4801e20e0%26title%3D%26width%3D1092%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1092%2C%22originHeight%22%3A499%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22Rq0q6%22%7D\"></card></p><p data-lake-id=\"ub25bd699\" id=\"ub25bd699\"><br></p><h2 data-lake-id=\"274a6bb3\" id=\"274a6bb3\"><span data-lake-id=\"u3b0468ca\" id=\"u3b0468ca\">队列持久化</span></h2><p data-lake-id=\"u65611189\" id=\"u65611189\"><br></p><p data-lake-id=\"ue951fa0d\" id=\"ue951fa0d\"><span data-lake-id=\"u4a41f4f0\" id=\"u4a41f4f0\">如果存在同名未被持久化的队列，则需要先删除原先的未被持久化的队列，再重新生成一个持久化队列。</span></p><p data-lake-id=\"u9565990f\" id=\"u9565990f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cnboolean%20durable%20%3D%20true%3B%20%2F%2F%E5%9C%A8%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%AD%EF%BC%8C%E9%9C%80%E8%A6%81%E8%AE%A9queue%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96%5Cnchannel.queueDeclare(TASK_QUEUE_NAME%2C%20durable%2C%20false%2C%20false%2C%20null)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221a197cbd%22%7D\"></card><p data-lake-id=\"ua4a455e1\" id=\"ua4a455e1\"><br></p><p data-lake-id=\"u003d6059\" id=\"u003d6059\"><span data-lake-id=\"ub4006d96\" id=\"ub4006d96\">生成一个持久化队列之后，在 rabbitmq 控制台中这个队列的 features 属性会出现 D（代表持久化）。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638359722330-59d15b49-1b8d-4d93-85aa-ecd40227bd45.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D129%26id%3Dufd6f763b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D129%26originWidth%3D781%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D13881%26status%3Ddone%26style%3Dnone%26taskId%3Duab54d6ef-4036-4edf-bca6-ba4a9dcac1d%26title%3D%26width%3D781%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A781%2C%22originHeight%22%3A129%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f1f0%22%2C%22id%22%3A%22iMXeX%22%7D\"></card></p><p data-lake-id=\"u3e80b572\" id=\"u3e80b572\"><br></p><h2 data-lake-id=\"f1739dad\" id=\"f1739dad\"><span data-lake-id=\"ufec32f24\" id=\"ufec32f24\">消息持久化</span></h2><p data-lake-id=\"uc661f556\" id=\"uc661f556\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E8%AE%BE%E7%BD%AE%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E4%B8%BA%E6%8C%81%E4%B9%85%E5%8C%96%E6%B6%88%E6%81%AF%EF%BC%88%E8%A6%81%E6%B1%82%E4%BF%9D%E5%AD%98%E5%88%B0%E7%A3%81%E7%9B%98%E4%B8%8AMessageProperties.PERSISTENT_TEXT_PLAIN%EF%BC%89%5Cnchannel.basicPublish(%5C%22%5C%22%2C%20TASK_QUEUE_NAME%2C%20MessageProperties.PERSISTENT_TEXT_PLAIN%2C%20message.getBytes())%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222ac9ced1%22%7D\"></card><p data-lake-id=\"u478658c1\" id=\"u478658c1\"><br></p><p data-lake-id=\"u88b0d835\" id=\"u88b0d835\"><br></p><p data-lake-id=\"u2a1a3ee8\" id=\"u2a1a3ee8\"><br></p><h2 data-lake-id=\"afba844e\" id=\"afba844e\"><span data-lake-id=\"u1e31118a\" id=\"u1e31118a\">不公平分发</span></h2><p data-lake-id=\"ubf424800\" id=\"ubf424800\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%9C%A8%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%AD%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E4%B9%8B%E5%89%8D%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%5Cnint%20prefetchCount%20%3D%201%3B%5Cnchannel.basicQos(prefetchCount)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22b23fdf5a%22%7D\"></card><p data-lake-id=\"u6ed41d59\" id=\"u6ed41d59\"><br></p><p data-lake-id=\"u828c250f\" id=\"u828c250f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361240814-a1349c7f-2e3e-410a-ba3b-f2f872fab0bb.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D232%26id%3Du1ff04a34%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D232%26originWidth%3D385%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D20173%26status%3Ddone%26style%3Dnone%26taskId%3Dub1b60899-802e-4d67-9aed-a99c48b5db3%26title%3D%26width%3D385%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A385%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303d45%22%2C%22id%22%3A%22vTMLG%22%7D\"></card><span data-lake-id=\"uac36cfc2\" id=\"uac36cfc2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361251165-68b13d22-fe49-4fd8-9471-26161051c180.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du477bebf6%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D177%26originWidth%3D431%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D18613%26status%3Ddone%26style%3Dnone%26taskId%3Due60522ee-50ed-46f9-ae69-472369ce4b6%26title%3D%26width%3D431%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A431%2C%22originHeight%22%3A177%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c3a42%22%2C%22id%22%3A%22zGQk4%22%7D\"></card></p><p data-lake-id=\"u606a7603\" id=\"u606a7603\"><br></p><h2 data-lake-id=\"e7e8ffe0\" id=\"e7e8ffe0\"><span data-lake-id=\"u8c5b6027\" id=\"u8c5b6027\">预取值</span></h2><p data-lake-id=\"uc821be09\" id=\"uc821be09\"><br></p><p data-lake-id=\"uf28a9818\" id=\"uf28a9818\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638361857297-fa168e46-191d-44b2-8ce2-df2cb52a382d.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D282%26id%3Due1e2c233%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D453%26originWidth%3D1130%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D347909%26status%3Ddone%26style%3Dnone%26taskId%3Due241edd5-d375-46cb-9668-4a4eb4d7c9c%26title%3D%26width%3D703.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1130%2C%22originHeight%22%3A453%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e4e4e5%22%2C%22id%22%3A%22mwjn3%22%7D\"></card></p><p data-lake-id=\"u85729c36\" id=\"u85729c36\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22int%20prefetchCount%20%3D%205%3B%5Cnchannel.basicQos(prefetchCount)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221f902658%22%7D\"></card><p data-lake-id=\"uac932245\" id=\"uac932245\"><br></p><p data-lake-id=\"ucf3fd997\" id=\"ucf3fd997\"><br></p><p data-lake-id=\"u92071e4b\" id=\"u92071e4b\"><br></p><h2 data-lake-id=\"1e9c309f\" id=\"1e9c309f\"><span data-lake-id=\"u32130f3f\" id=\"u32130f3f\">发布确认原理</span></h2><p data-lake-id=\"ua7b44864\" id=\"ua7b44864\"><br></p><p data-lake-id=\"uf9cf497a\" id=\"uf9cf497a\"><br></p><p data-lake-id=\"uc237fdfc\" id=\"uc237fdfc\"><br></p><h2 data-lake-id=\"e61fd426\" id=\"e61fd426\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638364988019-b29d7c44-ebca-4978-95fd-034500d1bd7b.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D369%26id%3Du98ff6bb0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D369%26originWidth%3D930%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D222643%26status%3Ddone%26style%3Dnone%26taskId%3Dua25c2547-8233-4893-8d5b-4406b84e85f%26title%3D%26width%3D930%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A930%2C%22originHeight%22%3A369%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafb%22%2C%22id%22%3A%22Xek0V%22%7D\"></card></h2><p data-lake-id=\"ub971425a\" id=\"ub971425a\"><br></p><p data-lake-id=\"uff8b9cca\" id=\"uff8b9cca\"><span data-lake-id=\"uc353e344\" id=\"uc353e344\">在信道之后开启发布确认：</span></p><p data-lake-id=\"u0e87e7d9\" id=\"u0e87e7d9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E4%BF%A1%E9%81%93%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cnchannel.confirmSelect()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ad539932%22%7D\"></card><p data-lake-id=\"u240d4823\" id=\"u240d4823\"><br></p><p data-lake-id=\"uda74d6f1\" id=\"uda74d6f1\"><br></p><p data-lake-id=\"u11342da4\" id=\"u11342da4\"><br></p><h2 data-lake-id=\"f1ad8c9b\" id=\"f1ad8c9b\"><span data-lake-id=\"uf0e1d45c\" id=\"uf0e1d45c\">单个发布确认</span></h2><p data-lake-id=\"u3cbeb3a0\" id=\"u3cbeb3a0\"><br></p><p data-lake-id=\"uc4d6c015\" id=\"uc4d6c015\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638365489548-64267da5-f60d-4b88-98af-bdf5806d5038.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D203%26id%3Dub1148f56%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D203%26originWidth%3D993%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D342872%26status%3Ddone%26style%3Dnone%26taskId%3Du2df32a3e-4c69-4599-868a-d81e33495ec%26title%3D%26width%3D993%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A993%2C%22originHeight%22%3A203%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d0dcda%22%2C%22id%22%3A%22qVQAu%22%7D\"></card></p><p data-lake-id=\"u6734b8e1\" id=\"u6734b8e1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.four%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.UUID%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F1%2021%3A32%5Cn%20*%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A%5Cn%20*%20%E4%BD%BF%E7%94%A8%E7%9A%84%E6%97%B6%E9%97%B4%20%20%E6%AF%94%E8%BE%83%E5%93%AA%E7%A7%8D%E7%A1%AE%E8%AE%A4%E6%96%B9%E5%BC%8F%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%5Cn%20*%201.%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20*%202.%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%20*%203.%E5%BC%82%E6%AD%A5%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%20*%2F%5Cnpublic%20class%20ConfireMessage%20%7B%5Cn%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20public%20static%20final%20int%20MESSAGE_COUNT%20%3D%201000%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20InterruptedException%2C%20TimeoutException%2C%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F1.%20%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20ConfireMessage.publicMessageIndividually()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B629726ms%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageIndividually()%20throws%20IOException%2C%20TimeoutException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20massage%20%3D%20i%20%2B%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20massage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8D%95%E4%B8%AA%E6%B6%88%E6%81%AF%E5%B0%B1%E9%A9%AC%E4%B8%8A%E8%BF%9B%E8%A1%8C%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20boolean%20flag%20%3D%20channel.waitForConfirms()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(flag)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%2BMESSAGE_COUNT%2B%5C%22%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%2B(end%20-%20begin)%2B%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e9bbaca4%22%7D\"></card><p data-lake-id=\"u662ff4b5\" id=\"u662ff4b5\"><br></p><p data-lake-id=\"u9a18410d\" id=\"u9a18410d\"><br></p><p data-lake-id=\"ud961b543\" id=\"ud961b543\"><br></p><h2 data-lake-id=\"498cf9b3\" id=\"498cf9b3\"><span data-lake-id=\"u10e0af31\" id=\"u10e0af31\">批量发布确认</span></h2><p data-lake-id=\"ue56ad038\" id=\"ue56ad038\"><br></p><p data-lake-id=\"ub790e1b8\" id=\"ub790e1b8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638366964213-10397181-357d-4896-9e91-84690b69c982.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D137%26id%3Dude627a73%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D137%26originWidth%3D968%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D206130%26status%3Ddone%26style%3Dnone%26taskId%3Du0c3dafe3-1f66-4cc1-83ba-f5e8edae8b3%26title%3D%26width%3D968%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A968%2C%22originHeight%22%3A137%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d7d9d8%22%2C%22id%22%3A%22tMsLz%22%7D\"></card></p><p data-lake-id=\"u31587570\" id=\"u31587570\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageBatch()%20throws%20IOException%2C%20TimeoutException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%E5%A4%A7%E5%B0%8F%5Cn%20%20%20%20%20%20%20%20int%20batchSize%20%3D%20100%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF%EF%BC%8C%20%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20i%20%2B%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%25%20batchSize%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.waitForConfirms()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222f62025c%22%7D\"></card><p data-lake-id=\"uf3e134d2\" id=\"uf3e134d2\"><br></p><p data-lake-id=\"u47f2cb22\" id=\"u47f2cb22\"><br></p><p data-lake-id=\"u6d154a3b\" id=\"u6d154a3b\"><br></p><h2 data-lake-id=\"836eb661\" id=\"836eb661\"><span data-lake-id=\"u4945ac71\" id=\"u4945ac71\">异步发布确认</span></h2><p data-lake-id=\"u0f0edc87\" id=\"u0f0edc87\"><br></p><p data-lake-id=\"u494d78ca\" id=\"u494d78ca\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638368249755-46e1c3b8-f891-48b0-a77b-21b9a80f4e5e.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D119%26id%3Du5fcd19f7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D119%26originWidth%3D1189%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D231115%26status%3Ddone%26style%3Dnone%26taskId%3Du473c99f9-e088-4ad3-84e3-82e606c7d63%26title%3D%26width%3D1189%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1189%2C%22originHeight%22%3A119%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e2dfd4%22%2C%22id%22%3A%22Jwh7I%22%7D\"></card><span data-lake-id=\"uf46f8c96\" id=\"uf46f8c96\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638368124379-5cdb8cbd-707a-4a1f-92f4-3dc511a9ec11.png%23clientId%3Du446e2507-b64d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D571%26id%3Du4b5d988b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D441%26originWidth%3D964%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D239080%26status%3Ddone%26style%3Dnone%26taskId%3Dua0b85de0-7119-4e3a-a0be-75854b9aaac%26title%3D%26width%3D1248.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A964%2C%22originHeight%22%3A441%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22T1TVR%22%7D\"></card></p><p data-lake-id=\"u52c10243\" id=\"u52c10243\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20public%20static%20final%20int%20MESSAGE_COUNT%20%3D%201000%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20InterruptedException%2C%20TimeoutException%2C%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F1.%20%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%5Cn%2F%2F%20%20%20%20%20%20%20%20ConfireMessage.publicMessageIndividually()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B629726ms%5Cn%2F%2F%20%20%20%20%20%20%20%202.%20%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%5Cn%2F%2F%20%20%20%20%20%20%20%20ConfireMessage.publicMessageBatch()%3B%20%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6761ms%EF%BC%88%E5%BC%8A%E7%AB%AF%EF%BC%9A%E6%97%A0%E6%B3%95%E7%A1%AE%E8%AE%A4%E5%93%AA%E4%B8%AA%E6%B6%88%E6%81%AF%E6%9C%AA%E8%A2%AB%E7%A1%AE%E8%AE%A4%EF%BC%89%5Cn%2F%2F%20%20%20%20%20%20%20%203.%20%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20ConfireMessage.publicMessageAsync()%3B%20%2F%2F%E5%8F%91%E5%B8%831000%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6181ms%5Cn%20%20%20%20%7D%5Cn%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageAsync()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%88%90%E5%8A%9F%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20ackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20nackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%87%86%E5%A4%87%E6%B6%88%E6%81%AF%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%8C%E7%9B%91%E5%90%AC%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E5%A4%B1%E8%B4%A5%E4%BA%86%5Cn%20%20%20%20%20%20%20%20channel.addConfirmListener(ackCallback%2C%20nackCallback)%3B%20%20%2F%2F%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20massage%20%3D%20%5C%22%E6%B6%88%E6%81%AF%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20massage.getBytes())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d6247f11%22%7D\"></card><p data-lake-id=\"uc4a48e34\" id=\"uc4a48e34\"><br></p><p data-lake-id=\"u32eb914f\" id=\"u32eb914f\"><br></p><p data-lake-id=\"u776a938a\" id=\"u776a938a\"><br></p><h2 data-lake-id=\"e8b363bb\" id=\"e8b363bb\"><span data-lake-id=\"uf8094a1f\" id=\"uf8094a1f\">如何处理异步未确认消息</span></h2><p data-lake-id=\"ucecfe414\" id=\"ucecfe414\"><br></p><p data-lake-id=\"uf632b3ef\" id=\"uf632b3ef\"><span data-lake-id=\"u39a67765\" id=\"u39a67765\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638404469016-06a08296-9aa6-4d65-8d1c-4c70fb4cd5b8.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D97%26id%3Du0927e367%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D97%26originWidth%3D1033%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D122865%26status%3Ddone%26style%3Dnone%26taskId%3Du67d3a3c6-2f1a-4be9-9c0c-f7d2e743935%26title%3D%26width%3D1033%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1033%2C%22originHeight%22%3A97%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dcd8cd%22%2C%22id%22%3A%22frSPr%22%7D\"></card><span data-lake-id=\"u2e30a431\" id=\"u2e30a431\"><br /></span><span data-lake-id=\"u52adf52f\" id=\"u52adf52f\">上述异步确认有两个线程：</span></p><p data-lake-id=\"uf8bfc172\" id=\"uf8bfc172\"><br></p><ul list=\"u45e3622c\"><li fid=\"uc618e51c\" data-lake-id=\"ueacc7571\" id=\"ueacc7571\"><span data-lake-id=\"u97ac8cde\" id=\"u97ac8cde\">发消息的线程</span></li></ul><ul list=\"u70863da8\"><li fid=\"u94e1bd53\" data-lake-id=\"u5e95d849\" id=\"u5e95d849\"><span data-lake-id=\"uf05b2386\" id=\"uf05b2386\">监听器的线程</span></li></ul><p data-lake-id=\"u51d043a1\" id=\"u51d043a1\"><br></p><p data-lake-id=\"u969efa72\" id=\"u969efa72\"><span data-lake-id=\"u56ff6b24\" id=\"u56ff6b24\">两个线程之间交互，只能用</span><strong><span data-lake-id=\"ue97cc8c5\" id=\"ue97cc8c5\">并发链路式队列（可以在确认发布与发布线程之间进行消息传递）</span></strong><span data-lake-id=\"ud94ae86f\" id=\"ud94ae86f\">。</span></p><p data-lake-id=\"u60c1e577\" id=\"u60c1e577\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%BC%82%E6%AD%A5%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20public%20static%20void%20publicMessageAsync()%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20UUID.randomUUID().toString()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E4%BF%A1%E9%81%93%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20true%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%5Cn%20%20%20%20%20%20%20%20channel.confirmSelect()%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%89%E5%BA%8F%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8C%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E6%83%85%E5%86%B5%5Cn%20%20%20%20%20%20%20%201.%20%E8%BD%BB%E6%9D%BE%E7%9A%84%E5%B0%86%E5%BA%8F%E5%8F%B7%E4%B8%8E%E6%B6%88%E6%81%AF%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%5Cn%20%20%20%20%20%20%20%202.%20%E8%BD%BB%E6%9D%BE%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%9D%A1%E7%9B%AE%EF%BC%8C%E5%8F%AA%E8%A6%81%E7%BB%99%E5%BA%8F%E5%8F%B7%5Cn%20%20%20%20%20%20%20%203.%E6%94%AF%E6%8C%81%E9%AB%98%E5%B9%B6%E5%8F%91(%E5%A4%9A%E7%BA%BF%E7%A8%8B)%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ConcurrentSkipListMap%3CLong%2CString%3E%20outstandingConfirms%20%3D%20new%20ConcurrentSkipListMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%88%90%E5%8A%9F%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20ackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F2.%20%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%20%20%20%E5%89%A9%E4%B8%8B%E7%9A%84%E5%B0%B1%E6%98%AF%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(multiple)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%98%AF%E6%89%B9%E9%87%8F%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%B0%B1%E5%8E%BB%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConcurrentNavigableMap%3CLong%2CString%3E%20confirmed%20%3D%20outstandingConfirms.headMap(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20confirmed.clear()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%98%AF%E5%8D%95%E4%B8%AA%E7%A1%AE%E8%AE%A4%EF%BC%8C%E5%B0%B1%E5%8E%BB%E5%8D%95%E4%B8%AA%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20outstandingConfirms.remove(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20ConfirmCallback%20nackCallback%20%3D%20(deliveryTag%2C%20multiple)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F3.%20%E6%89%93%E5%8D%B0%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%89%E5%93%AA%E4%BA%9B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20outstandingConfirms.get(deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%EF%BC%9A%5C%22%2Bmessage%2B%5C%22%3A%3A%3A%3A%3A%E6%9C%AA%E7%A1%AE%E8%AE%A4%E7%9A%84%E6%B6%88%E6%81%AFtag%3A%5C%22%20%2B%20deliveryTag)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%87%86%E5%A4%87%E6%B6%88%E6%81%AF%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%8C%E7%9B%91%E5%90%AC%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%B6%88%E6%81%AF%E5%A4%B1%E8%B4%A5%E4%BA%86%5Cn%20%20%20%20%20%20%20%20channel.addConfirmListener(ackCallback%2C%20nackCallback)%3B%20%20%2F%2F%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20long%20begin%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20MESSAGE_COUNT%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22%E6%B6%88%E6%81%AF%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%201.%20%E6%AD%A4%E5%A4%84%E8%AE%B0%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E6%B6%88%E6%81%AF%20%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%80%BB%E5%92%8C(%E6%AF%8F%E5%8F%91%E4%B8%80%E6%AC%A1%E6%B6%88%E6%81%AF%E5%B0%B1%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20outstandingConfirms.put(channel.getNextPublishSeqNo()%2Cmessage)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20queueName%2C%20null%2C%20message.getBytes())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20long%20end%20%3D%20System.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8F%91%E5%B8%83%5C%22%20%2B%20MESSAGE_COUNT%20%2B%20%5C%22%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%A1%AE%E8%AE%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E8%80%97%E6%97%B6%5C%22%20%2B%20(end%20-%20begin)%20%2B%20%5C%22ms%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220a036573%22%7D\"></card><p data-lake-id=\"u24ef3936\" id=\"u24ef3936\"><br></p><blockquote data-lake-id=\"u468ca4b1\" id=\"u468ca4b1\"><p data-lake-id=\"u6e59d7fb\" id=\"u6e59d7fb\"><span data-lake-id=\"u4c233bde\" id=\"u4c233bde\">以上三种发布确认速度对比：</span></p></blockquote><p data-lake-id=\"u53e9db23\" id=\"u53e9db23\"><br></p><ul list=\"ubda67d26\"><li fid=\"u90682ff7\" data-lake-id=\"uafded0e5\" id=\"uafded0e5\"><span data-lake-id=\"u55706386\" id=\"u55706386\">单独发布消息：同步等待确认，简单，但吞吐量非常有限。</span></li></ul><ul list=\"u920464d7\"><li fid=\"u864c41fe\" data-lake-id=\"u94b38ace\" id=\"u94b38ace\"><span data-lake-id=\"ue688ad98\" id=\"ue688ad98\">批量发布消息：批量同步等待确认，简单，合理的吞吐量，一旦出现问题，很难推断出是哪条出现了问题</span></li></ul><ul list=\"u1811646a\"><li fid=\"ucee8d4b9\" data-lake-id=\"uc70e4029\" id=\"uc70e4029\"><span data-lake-id=\"uce17cf14\" id=\"uce17cf14\">异步处理：最佳性能和资源利用，在出现错误的情况下，可以很好的控制，但是实现起来稍微难些。</span></li></ul><p data-lake-id=\"u9569dffd\" id=\"u9569dffd\"><br></p><h2 data-lake-id=\"04596875\" id=\"04596875\"><span data-lake-id=\"u613065a8\" id=\"u613065a8\">交换机</span></h2><p data-lake-id=\"u2d479111\" id=\"u2d479111\"><br></p><p data-lake-id=\"u97889cc2\" id=\"u97889cc2\"><br></p><p data-lake-id=\"u80d50401\" id=\"u80d50401\"><br></p><h3 data-lake-id=\"a3034a5f\" id=\"a3034a5f\"><span data-lake-id=\"ud107708e\" id=\"ud107708e\">交换机的作用</span></h3><p data-lake-id=\"u03675e5f\" id=\"u03675e5f\"><br></p><p data-lake-id=\"u10101ef7\" id=\"u10101ef7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638406810806-e429e00e-78d1-42e2-ab92-c3a53f8c2fa9.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D270%26id%3Duc3415ba1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D387%26originWidth%3D1291%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D191628%26status%3Ddone%26style%3Dnone%26taskId%3Duee2f50b0-7b80-4d38-9c1b-25806445f5f%26title%3D%26width%3D900.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1291%2C%22originHeight%22%3A387%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f4f4%22%2C%22id%22%3A%22tFgNi%22%7D\"></card></p><p data-lake-id=\"u73fbd331\" id=\"u73fbd331\"><br></p><h3 data-lake-id=\"f71f343d\" id=\"f71f343d\"><span data-lake-id=\"udce3eba1\" id=\"udce3eba1\">交换机的类型</span></h3><p data-lake-id=\"ufcff41c1\" id=\"ufcff41c1\"><br></p><ul list=\"u6b7fcdd4\"><li fid=\"uc60d6b8e\" data-lake-id=\"ud837129c\" id=\"ud837129c\"><span data-lake-id=\"u86ef0948\" id=\"u86ef0948\">直接（direct）== 路由类型</span></li></ul><ul list=\"u64dabf1f\"><li fid=\"u13283976\" data-lake-id=\"u3a192338\" id=\"u3a192338\"><span data-lake-id=\"u11dc7ef6\" id=\"u11dc7ef6\">主题（topic）</span></li></ul><ul list=\"uf43ec12e\"><li fid=\"uf7678f46\" data-lake-id=\"u181beacc\" id=\"u181beacc\"><span data-lake-id=\"ubaca4975\" id=\"ubaca4975\">标题（headers）（企业不常用）</span></li></ul><ul list=\"uf352ef6e\"><li fid=\"u49f78635\" data-lake-id=\"ude1c64c5\" id=\"ude1c64c5\"><span data-lake-id=\"u6f4ca6d9\" id=\"u6f4ca6d9\">扇出（fanout）== 发布订阅类型</span></li></ul><ul list=\"u17450d46\"><li fid=\"u8c74f284\" data-lake-id=\"ubc65d5ac\" id=\"ubc65d5ac\"><span data-lake-id=\"uc966f232\" id=\"uc966f232\">无名类型（默认类型），通常用空串进行识别</span></li></ul><p data-lake-id=\"u7841bf48\" id=\"u7841bf48\"><br></p><p data-lake-id=\"uabda8adb\" id=\"uabda8adb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638407294007-f1bd9624-be98-4b90-ba72-9c29d88c326d.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D76%26id%3Du21ac6756%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D76%26originWidth%3D987%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D103665%26status%3Ddone%26style%3Dnone%26taskId%3Du47150f74-3b3b-4cc4-befe-f25d9650214%26title%3D%26width%3D987%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A987%2C%22originHeight%22%3A76%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cbc7bb%22%2C%22id%22%3A%22KlfHY%22%7D\"></card></p><p data-lake-id=\"uefca42b0\" id=\"uefca42b0\"><br></p><h3 data-lake-id=\"192ebf07\" id=\"192ebf07\"><span data-lake-id=\"u9072179f\" id=\"u9072179f\">临时队列</span></h3><p data-lake-id=\"u759723a3\" id=\"u759723a3\"><br></p><p data-lake-id=\"ua828dd89\" id=\"ua828dd89\"><span data-lake-id=\"ud0203d2a\" id=\"ud0203d2a\">不带有持久化，一旦断开消费者的连接，队列将被自动删除。<br /></span><span data-lake-id=\"uef76f3f7\" id=\"uef76f3f7\">​</span></p><p data-lake-id=\"u117c1c40\" id=\"u117c1c40\"><br></p><p data-lake-id=\"udc7c1eb9\" id=\"udc7c1eb9\"><span data-lake-id=\"u26374f4c\" id=\"u26374f4c\">创建临时队列：</span></p><p data-lake-id=\"uc7d27537\" id=\"uc7d27537\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22493f5cb2%22%7D\"></card><p data-lake-id=\"uf4a72fb6\" id=\"uf4a72fb6\"><br></p><p data-lake-id=\"u0810dd91\" id=\"u0810dd91\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638407906977-786b78e8-bfba-4cab-9aee-9ac7ec38a884.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D278%26id%3Du31ce7deb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D410%26originWidth%3D1086%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D55531%26status%3Ddone%26style%3Dnone%26taskId%3Dub3aa0ca4-c823-418b-b8c7-0b7fbd67333%26title%3D%26width%3D736.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1086%2C%22originHeight%22%3A410%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f2f1%22%2C%22id%22%3A%22T0K86%22%7D\"></card></p><p data-lake-id=\"u186f5254\" id=\"u186f5254\"><br></p><h3 data-lake-id=\"f4f12c7a\" id=\"f4f12c7a\"><span data-lake-id=\"ucf133bc6\" id=\"ucf133bc6\">绑定</span></h3><p data-lake-id=\"u3f311869\" id=\"u3f311869\"><br></p><p data-lake-id=\"u06749896\" id=\"u06749896\"><span data-lake-id=\"u2397429d\" id=\"u2397429d\">就是交换机与队列之间的捆绑关系。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638408143523-d4c904d9-33e5-46bd-ad67-885e78b4c34b.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D637%26id%3Du8140e36d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D637%26originWidth%3D487%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D26522%26status%3Ddone%26style%3Dnone%26taskId%3Dua5ea4c46-36c5-4183-aefe-f6a3f676385%26title%3D%26width%3D487%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A487%2C%22originHeight%22%3A637%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf5f5%22%2C%22id%22%3A%22fwITJ%22%7D\"></card></p><p data-lake-id=\"u2f756d95\" id=\"u2f756d95\"><br></p><h3 data-lake-id=\"b3f97d74\" id=\"b3f97d74\"><span data-lake-id=\"u8d977267\" id=\"u8d977267\">发布订阅模式（扇出模式 fanout）</span></h3><p data-lake-id=\"u60ac1fb4\" id=\"u60ac1fb4\"><br></p><p data-lake-id=\"u47c5c857\" id=\"u47c5c857\"><span data-lake-id=\"ufc889c6d\" id=\"ufc889c6d\">类似广播，两个 routingkey 相同<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638408427104-577b627a-521a-4d94-89be-5bf0102440ea.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D218%26id%3Du3ae99c2f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D292%26originWidth%3D1200%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D205919%26status%3Ddone%26style%3Dnone%26taskId%3Dufe252eb8-02f2-410e-8b74-b8d091c0d4a%26title%3D%26width%3D894%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1200%2C%22originHeight%22%3A292%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8ebea%22%2C%22id%22%3A%22PeGnm%22%7D\"></card></p><p data-lake-id=\"u34a7c050\" id=\"u34a7c050\"><br></p><ol list=\"u4e11381f\"><li fid=\"uffe46d07\" data-lake-id=\"ua058bafa\" id=\"ua058bafa\"><span data-lake-id=\"udd2b4bc0\" id=\"udd2b4bc0\">生产者</span></li></ol><p data-lake-id=\"u527d2fcd\" id=\"u527d2fcd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A59%5Cn%20*%20%E5%8F%91%E6%B6%88%E6%81%AF%EF%BC%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20*%2F%5Cnpublic%20class%20EmitLog%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20%5C%22%5C%22%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22064b8440%22%7D\"></card><p data-lake-id=\"ube6bfff0\" id=\"ube6bfff0\"><br></p><ol list=\"u503d83bd\" start=\"2\"><li fid=\"udec7f53c\" data-lake-id=\"u9725dfb0\" id=\"u9725dfb0\"><span data-lake-id=\"ue0140b5f\" id=\"ue0140b5f\">两个消费者</span></li></ol><p data-lake-id=\"u2a01f03c\" id=\"u2a01f03c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A35%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogs01%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%20%20%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%20(%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%EF%BC%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84%EF%BC%8C%E5%BD%93%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%9F%E5%88%97%E5%B0%B1%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4)%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%EF%BC%8C%E6%8A%8A%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%E6%89%93%E5%8D%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs01%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%224ebe62a0%22%7D\"></card><p data-lake-id=\"u7d8e0aa1\" id=\"u7d8e0aa1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.five%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A35%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogs02%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22fanout%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%20%20%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%20(%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%B4%E6%97%B6%E9%98%9F%E5%88%97%EF%BC%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84%EF%BC%8C%E5%BD%93%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%9F%E5%88%97%E5%B0%B1%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4)%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20channel.queueDeclare().getQueue()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%EF%BC%8C%E6%8A%8A%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%E6%89%93%E5%8D%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs02%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22bd022965%22%7D\"></card><p data-lake-id=\"ub0920585\" id=\"ub0920585\"><br></p><p data-lake-id=\"u9415957b\" id=\"u9415957b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410904168-80b297c1-26ef-4ee4-815c-065abea79bd2.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D328%26id%3Du29891926%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D328%26originWidth%3D580%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D28269%26status%3Ddone%26style%3Dnone%26taskId%3Du6700fa8b-9b2f-4717-91cf-0dfb20b528b%26title%3D%26width%3D580%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A580%2C%22originHeight%22%3A328%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c383f%22%2C%22id%22%3A%22Jf7Cl%22%7D\"></card><span data-lake-id=\"uc0fe1860\" id=\"uc0fe1860\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410913426-c4d1faa3-7b8b-478c-ba35-665d73e98e8b.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D248%26id%3Dua55ed718%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D248%26originWidth%3D528%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D34020%26status%3Ddone%26style%3Dnone%26taskId%3Du415b65a3-7d21-4e16-a1a0-a15d7f3c4ca%26title%3D%26width%3D528%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A528%2C%22originHeight%22%3A248%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323e46%22%2C%22id%22%3A%22HNmyl%22%7D\"></card><span data-lake-id=\"u6e5683e5\" id=\"u6e5683e5\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638410920504-2f4c6248-02a0-4765-8647-4c8ab63551e1.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D255%26id%3Du9c537a4f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D255%26originWidth%3D517%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D35282%26status%3Ddone%26style%3Dnone%26taskId%3Du97bfb701-f8bd-45ca-ac41-6f8259d9775%26title%3D%26width%3D517%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A517%2C%22originHeight%22%3A255%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323e46%22%2C%22id%22%3A%22BBNfG%22%7D\"></card></p><p data-lake-id=\"u64f3af66\" id=\"u64f3af66\"><br></p><h3 data-lake-id=\"a7c987c4\" id=\"a7c987c4\"><span data-lake-id=\"u0a451a87\" id=\"u0a451a87\">直接交换机（路由模式 direct）</span></h3><p data-lake-id=\"u6628277e\" id=\"u6628277e\"><br></p><p data-lake-id=\"uc914fe9f\" id=\"uc914fe9f\"><span data-lake-id=\"ud4ff4146\" id=\"ud4ff4146\">两个 routingkey 不相同<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638411099834-bf80fb1d-473a-4a01-8553-e47ee2cd3670.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D303%26id%3Dueba6aa41%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D303%26originWidth%3D874%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D98369%26status%3Ddone%26style%3Dnone%26taskId%3Du2145da18-8429-4959-ab30-43bcc28bb61%26title%3D%26width%3D874%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A874%2C%22originHeight%22%3A303%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6e6e4%22%2C%22id%22%3A%22t5eGH%22%7D\"></card><span data-lake-id=\"u1eb7de15\" id=\"u1eb7de15\"><br /></span><span data-lake-id=\"u9ba6bc34\" id=\"u9ba6bc34\">可以多重绑定。<br /></span><strong><span data-lake-id=\"uba4e10e3\" id=\"uba4e10e3\">生产者发消息给队列，直接交换机通过不同 routingkey 路由到相应的队列，然后消费者接收指定日志。</span></strong></p><p data-lake-id=\"u3ab1ef95\" id=\"u3ab1ef95\"><br></p><ol list=\"ub56a82f0\"><li fid=\"u29f08130\" data-lake-id=\"uf3812b97\" id=\"uf3812b97\"><span data-lake-id=\"ue933e58c\" id=\"ue933e58c\">发消息</span></li></ol><p data-lake-id=\"u7dffc5fc\" id=\"u7dffc5fc\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.Scanner%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%209%3A59%5Cn%20*%20%E5%8F%91%E6%B6%88%E6%81%AF%EF%BC%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20*%2F%5Cnpublic%20class%20DirectLogs%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20Scanner%20scanner%20%3D%20new%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20while%20(scanner.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20scanner.next()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20%5C%22error%5C%22%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222a901417%22%7D\"></card><p data-lake-id=\"uf9ac8eab\" id=\"uf9ac8eab\"><br></p><ol list=\"uad1b784c\" start=\"2\"><li fid=\"u3cab60b9\" data-lake-id=\"ufe981695\" id=\"ufe981695\"><span data-lake-id=\"u9b69f27d\" id=\"u9b69f27d\">接收消息</span></li></ol><p data-lake-id=\"uca90e43f\" id=\"uca90e43f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2010%3A15%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsDirect01%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(%5C%22console%5C%22%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22console%5C%22%2CEXCHANGE_NAME%2C%5C%22info%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22console%5C%22%2CEXCHANGE_NAME%2C%5C%22warning%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs01%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(%5C%22console%5C%22%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22fc2f4488%22%7D\"></card><p data-lake-id=\"u1cc8d4b5\" id=\"u1cc8d4b5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.six%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2010%3A15%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsDirect02%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22direct_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(%5C%22disk%5C%22%2Cfalse%2Cfalse%2Cfalse%2Cnull)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(%5C%22disk%5C%22%2CEXCHANGE_NAME%2C%5C%22error%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22ReceiveLogs02%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A5%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%EF%BC%9A%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(%5C%22disk%5C%22%2C%20true%2C%20%20deliverCallback%2CconsumerTag-%3E%7B%7D)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22d5727d5b%22%7D\"></card><p data-lake-id=\"uab85209b\" id=\"uab85209b\"><br></p><p data-lake-id=\"u1a362bc4\" id=\"u1a362bc4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638413931242-2c3ef4c2-f3e6-4e6e-ba39-5437dad24d40.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Du9de2b784%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D630%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D21691%26status%3Ddone%26style%3Dnone%26taskId%3Du7cd93b89-df35-4f94-aa33-6626b0dc70b%26title%3D%26width%3D630%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A630%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c3941%22%2C%22id%22%3A%22eyPPs%22%7D\"></card><span data-lake-id=\"u37cd2242\" id=\"u37cd2242\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638413948375-568b73ae-0203-4f53-9a9b-528667192aa2.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D182%26id%3Duc8400be0%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D182%26originWidth%3D683%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D24900%26status%3Ddone%26style%3Dnone%26taskId%3Du38d71d59-3dd8-4324-9fae-335fd043524%26title%3D%26width%3D683%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A683%2C%22originHeight%22%3A182%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3b43%22%2C%22id%22%3A%22U0kJT%22%7D\"></card></p><p data-lake-id=\"u154435a1\" id=\"u154435a1\"><br></p><h3 data-lake-id=\"c4e17e43\" id=\"c4e17e43\"><span data-lake-id=\"u9924c5e2\" id=\"u9924c5e2\">主题交换机（Topic）</span></h3><p data-lake-id=\"ubdbf1ba0\" id=\"ubdbf1ba0\"><br></p><p data-lake-id=\"ucae3280a\" id=\"ucae3280a\"><span data-lake-id=\"uc1d10b00\" id=\"uc1d10b00\">规范：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638414479059-98f3dc8e-ee99-4093-b2cb-81eaecec9acb.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D226%26id%3Du34e92b6a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D226%26originWidth%3D834%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D170475%26status%3Ddone%26style%3Dnone%26taskId%3Due217ff8b-9da9-493e-9a4b-07c6ab22bab%26title%3D%26width%3D834%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A834%2C%22originHeight%22%3A226%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cfcac1%22%2C%22id%22%3A%22KCIOt%22%7D\"></card><span data-lake-id=\"u579a3771\" id=\"u579a3771\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415621949-8c1e4089-881d-482e-a377-ab7f224a2c92.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du76cf3ab8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D257%26originWidth%3D801%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D151366%26status%3Ddone%26style%3Dnone%26taskId%3Du98d7748e-2fc6-4df3-a740-cae3ba06db9%26title%3D%26width%3D801%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A801%2C%22originHeight%22%3A257%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e6a198%22%2C%22id%22%3A%22HeQJL%22%7D\"></card><span data-lake-id=\"u141af3b3\" id=\"u141af3b3\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415680787-e95ef7a6-bec4-44b3-8e45-1e0c4adac6f7.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D350%26id%3Du280d2c9d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D350%26originWidth%3D829%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D181864%26status%3Ddone%26style%3Dnone%26taskId%3Du67807a72-c793-4b0b-a14e-e6270164016%26title%3D%26width%3D829%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A829%2C%22originHeight%22%3A350%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e08176%22%2C%22id%22%3A%22ZuvJl%22%7D\"></card><span data-lake-id=\"u97ad8abd\" id=\"u97ad8abd\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638415855921-8e2750b0-e5df-4b1c-90a3-7e3f696543d6.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D188%26id%3Duf97e55b4%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D188%26originWidth%3D920%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D178229%26status%3Ddone%26style%3Dnone%26taskId%3Dufb1118a1-0b9d-4a97-bd09-0ff626585f5%26title%3D%26width%3D920%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A920%2C%22originHeight%22%3A188%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c2beb2%22%2C%22id%22%3A%22iZC7I%22%7D\"></card></p><p data-lake-id=\"u5bf7d3d8\" id=\"u5bf7d3d8\"><br></p><h3 data-lake-id=\"36d4697d\" id=\"36d4697d\"><span data-lake-id=\"ud625f05f\" id=\"ud625f05f\">主题交换机（实战）</span></h3><p data-lake-id=\"ub70d80a5\" id=\"ub70d80a5\"><br></p><p data-lake-id=\"uca5a3ec7\" id=\"uca5a3ec7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638416303199-5f9e655c-c5c2-4a16-9d12-ba873c31c8e6.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D331%26id%3Du07108cc7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D331%26originWidth%3D1114%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D231103%26status%3Ddone%26style%3Dnone%26taskId%3Dud57ef875-e371-4fa6-980a-20a29a7366e%26title%3D%26width%3D1114%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1114%2C%22originHeight%22%3A331%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4eae8%22%2C%22id%22%3A%22zgYBJ%22%7D\"></card></p><p data-lake-id=\"u71bf4d07\" id=\"u71bf4d07\"><br></p><ol list=\"ud4092d2a\"><li fid=\"u74054fe3\" data-lake-id=\"ub54f7556\" id=\"ub54f7556\"><span data-lake-id=\"u8b30a1dc\" id=\"u8b30a1dc\">消费者</span></li></ol><p data-lake-id=\"u39a550d2\" id=\"u39a550d2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2011%3A37%5Cn%20*%20%E5%A3%B0%E6%98%8E%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%20%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%98%9F%E5%88%97%5Cn%20*%20%3Cp%3E%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20C2%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsTopic01%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22topic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20%5C%22Q1%5C%22%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%20routingkey%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22*.orange.*%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E9%98%9F%E5%88%97%EF%BC%9A%5C%22%20%2B%20queueName%20%2B%20%5C%22%E7%BB%91%E5%AE%9A%E9%94%AE%EF%BC%9A%5C%22%20%2B%20message.getEnvelope().getRoutingKey())%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221860808d%22%7D\"></card><p data-lake-id=\"ucf8d429e\" id=\"ucf8d429e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2011%3A37%5Cn%20*%20%E5%A3%B0%E6%98%8E%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%20%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%98%9F%E5%88%97%5Cn%20*%20%3Cp%3E%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20C2%5Cn%20*%2F%5Cnpublic%20class%20ReceiveLogsTopic02%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(EXCHANGE_NAME%2C%20%5C%22topic%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20String%20queueName%20%3D%20%5C%22Q2%5C%22%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(queueName%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%20routingkey%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22*.*.rabbit%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueBind(queueName%2C%20EXCHANGE_NAME%2C%20%5C%22lazy.%23%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E3%80%82%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%8E%A5%E6%94%B6%E9%98%9F%E5%88%97%EF%BC%9A%5C%22%20%2B%20queueName%20%2B%20%5C%22%E7%BB%91%E5%AE%9A%E9%94%AE%EF%BC%9A%5C%22%20%2B%20message.getEnvelope().getRoutingKey())%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(queueName%2C%20true%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%226972b59b%22%7D\"></card><p data-lake-id=\"ubd93dfb6\" id=\"ubd93dfb6\"><br></p><ol list=\"u65e6951e\" start=\"2\"><li fid=\"u8b725ab3\" data-lake-id=\"u9e924b7c\" id=\"u9e924b7c\"><span data-lake-id=\"uabdadacb\" id=\"uabdadacb\">生产者</span></li></ol><p data-lake-id=\"u9a490197\" id=\"u9a490197\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.seven%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.security.spec.ECField%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2014%3A45%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20EmitLogTopic%20%7B%5Cn%20%20%20%20public%20static%20final%20String%20EXCHANGE_NAME%20%3D%20%5C%22topic_logs%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E4%B8%8B%E5%9B%BE%E7%BB%91%E5%AE%9A%E5%85%B3%E7%B3%BB%E5%A6%82%E4%B8%8B%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20*%20Q1--%3E%20%E7%BB%91%E5%AE%9A%E7%9A%84%E6%98%AF%EF%BC%9A%20%E4%B8%AD%E9%97%B4%E5%B8%A63%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88*.orange*%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20Q2--%3E%20%E7%BB%91%E5%AE%9A%E7%9A%84%E6%98%AF%EF%BC%9A%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E6%98%AFrabbit%E7%9A%843%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%88*.*.rabbit%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E6%98%AFlazy%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%88lazy.%23%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20String%3E%20bindingKeyMap%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.orange.rabbit%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.elephant%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.pink.rabbit%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q1%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.brown.fox%5C%22%2C%20%5C%22%E8%A2%AB%E9%98%9F%E5%88%97Q2%E6%8E%A5%E6%94%B6%E5%88%B0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.orange.male.rabbit%5C%22%2C%20%5C%22%E8%99%BD%E7%84%B6%E6%BB%A1%E8%B6%B3%E4%B8%A4%E4%B8%AA%E7%BB%91%E5%AE%9A%E4%BD%86%E5%8F%AA%E8%A2%AB%E9%98%9F%E5%88%97Q2%E6%8E%A5%E6%94%B6%E4%B8%80%E6%AC%A1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22quick.brown.fox%5C%22%2C%20%5C%22%E4%B8%8D%E5%8C%B9%E9%85%8D%E4%BB%BB%E4%BD%95%E7%BB%91%E5%AE%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E4%BB%BB%E4%BD%95%E9%98%9F%E5%88%97%E6%8E%A5%E6%94%B6%E5%88%B0%E4%BC%9A%E8%A2%AB%E4%B8%A2%E5%BC%83%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.male.rabbit%5C%22%2C%20%5C%22%E6%98%AF%E5%9B%9B%E4%B8%AA%E5%8D%95%E8%AF%8D%E4%B8%8D%E5%8C%B9%E9%85%8D%E4%BB%BB%E4%BD%95%E7%BB%91%E5%AE%9A%E5%AE%9A%E4%BC%9A%E4%B8%A2%E5%BC%83%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20bindingKeyMap.put(%5C%22lazy.orange.male.rabbit%5C%22%2C%20%5C%22%E6%98%AF%E5%9B%9B%E4%B8%AA%E5%8D%95%E8%AF%8D%E4%BD%86%E5%8C%B9%E9%85%8DQ2%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20for%20(Map.Entry%3CString%2C%20String%3E%20bindingKeyEntry%20%3A%20bindingKeyMap.entrySet())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20routingKey%20%3D%20bindingKeyEntry.getKey()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20bindingKeyEntry.getValue()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(EXCHANGE_NAME%2C%20routingKey%2C%20null%2C%20message.getBytes(StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E5%87%BA%E6%B6%88%E6%81%AF%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2256e802f3%22%7D\"></card><p data-lake-id=\"u2545c488\" id=\"u2545c488\"><br></p><p data-lake-id=\"u8f7b2119\" id=\"u8f7b2119\"><span data-lake-id=\"u35993936\" id=\"u35993936\">先启动消费者，再启动生产者。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430253833-e55a9ffe-37a0-4c04-b7b7-093a65480f71.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D540%26id%3Du94f62b22%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D540%26originWidth%3D683%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D63817%26status%3Ddone%26style%3Dnone%26taskId%3Du846aee7e-23e7-429c-8c68-098657667fa%26title%3D%26width%3D683%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A683%2C%22originHeight%22%3A540%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3a41%22%2C%22id%22%3A%22r1tul%22%7D\"></card><span data-lake-id=\"u868c8c5a\" id=\"u868c8c5a\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430292235-0a8fd8ca-fdd9-4f2e-9a52-de2398da4db4.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D548%26id%3Du5b1d2810%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D548%26originWidth%3D649%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D60902%26status%3Ddone%26style%3Dnone%26taskId%3Duf769df3d-232c-4803-866e-9b789b65799%26title%3D%26width%3D649%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A649%2C%22originHeight%22%3A548%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303b42%22%2C%22id%22%3A%22p0vbD%22%7D\"></card><span data-lake-id=\"uc40afe97\" id=\"uc40afe97\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430299720-f401248d-7efc-425f-aff1-59f8cda3349d.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D257%26id%3Du7c6af404%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D257%26originWidth%3D674%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D33728%26status%3Ddone%26style%3Dnone%26taskId%3Du0e4568aa-d243-4696-a1eb-02eebf586cf%26title%3D%26width%3D674%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A674%2C%22originHeight%22%3A257%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23313d44%22%2C%22id%22%3A%22Axrk6%22%7D\"></card></p><p data-lake-id=\"u8c98ba91\" id=\"u8c98ba91\"><br></p><h2 data-lake-id=\"3dead64c\" id=\"3dead64c\"><span data-lake-id=\"u047b4415\" id=\"u047b4415\">死信队列</span></h2><p data-lake-id=\"u1870ddac\" id=\"u1870ddac\"><br></p><p data-lake-id=\"ub7284874\" id=\"ub7284874\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430356782-4196f6b8-209f-489a-a5e5-e61974e711ef.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D299%26id%3Dud95905f1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D299%26originWidth%3D1069%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D430772%26status%3Ddone%26style%3Dnone%26taskId%3Due469e4ea-c3e9-44f2-a5e6-4ac2443deba%26title%3D%26width%3D1069%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1069%2C%22originHeight%22%3A299%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dad7cf%22%2C%22id%22%3A%22ZL2Da%22%7D\"></card><span data-lake-id=\"u8cdb6967\" id=\"u8cdb6967\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430504276-84f3e02c-d80f-4fe9-9b9a-b8d9ac3b8290.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D298%26id%3Du8670c10d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D298%26originWidth%3D643%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D162345%26status%3Ddone%26style%3Dnone%26taskId%3Due72cf50e-a8d2-4f86-8a8f-e35ebf10e89%26title%3D%26width%3D643%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A643%2C%22originHeight%22%3A298%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ddd6c3%22%2C%22id%22%3A%22rBdXQ%22%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638430601814-eb3112b8-d77b-4213-ad2c-df3c394a36b7.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D553%26id%3Dufda1712c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D553%26originWidth%3D1136%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D162361%26status%3Ddone%26style%3Dnone%26taskId%3Du55e88e2a-dc14-44b5-9eb9-8663773f317%26title%3D%26width%3D1136%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1136%2C%22originHeight%22%3A553%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfafa%22%2C%22id%22%3A%22pQqf7%22%7D\"></card></p><p data-lake-id=\"uad6c0443\" id=\"uad6c0443\"><br></p><ul list=\"ub4dba9c5\"><li fid=\"u4ab60c3a\" data-lake-id=\"uc3ccb3d3\" id=\"uc3ccb3d3\"><span data-lake-id=\"u77883d71\" id=\"u77883d71\">消费者 1：</span></li></ul><p data-lake-id=\"u3530fd70\" id=\"u3530fd70\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2015%3A40%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%851%5Cn%20*%2F%5Cnpublic%20class%20Consumer01%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_EXCHANGE%20%3D%20%5C%22dead_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_QUEUE%20%3D%20%5C%22normal_queue%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_QUEUE%20%3D%20%5C%22dead_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%AD%BB%E4%BF%A1%E5%92%8C%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%8C%20%E7%B1%BB%E5%9E%8B%E4%B8%BAdirect%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(NORMAL_EXCHANGE%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20channel.exchangeDeclare(DEAD_EXCHANGE%2C%20BuiltinExchangeType.DIRECT)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%5Cn%2F%2F%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C10000)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%A3%E5%B8%B8%E9%98%9F%E5%88%97%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20DEAD_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1RoutingKey%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22lisi%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%A3%E5%B8%B8%E9%98%9F%E5%88%97%E7%9A%84%E9%95%BF%E5%BA%A6%E7%9A%84%E9%99%90%E5%88%B6%5Cn%2F%2F%20%20%20%20%20%20%20%20arguments.put(%5C%22x-max-length%5C%22%2C%2019)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(NORMAL_QUEUE%2C%20false%2C%20false%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(DEAD_QUEUE%2C%20false%2C%20false%2C%20false%2C%20null)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E9%98%9F%E5%88%97%E7%BB%91%E5%AE%9A%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(NORMAL_QUEUE%2C%20NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20channel.queueBind(DEAD_QUEUE%2C%20DEAD_EXCHANGE%2C%20%5C%22lisi%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.........%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(msg.equals(%5C%22info5%5C%22))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%AD%A4%E6%B6%88%E6%81%AF%E8%A2%ABC1%E6%8B%92%E7%BB%9D%E7%9A%84%5C%22%20%2B%20msg)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8B%92%E7%BB%9D%E6%AD%A4%E6%B6%88%E6%81%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%94%BE%E5%9B%9E%E9%98%9F%E5%88%97%E4%B8%AD%E3%80%82%E5%9B%A0%E6%AD%A4%E6%88%90%E4%B8%BA%E6%AD%BB%E4%BF%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicReject(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Consumer01%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20msg)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E4%B8%8D%E6%89%B9%E9%87%8F%E5%BA%94%E7%AD%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicAck(message.getEnvelope().getDeliveryTag()%2C%20false)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%BC%80%E5%90%AF%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%BC%80%E5%90%AF%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8C%E5%B0%B1%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%8B%92%E7%BB%9D%E4%BA%86%EF%BC%89%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(NORMAL_QUEUE%2C%20false%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%226b32ccf8%22%7D\"></card><p data-lake-id=\"u435ef8b3\" id=\"u435ef8b3\"><br></p><ul list=\"u9833d078\"><li fid=\"uafeaa448\" data-lake-id=\"u991e0c89\" id=\"u991e0c89\"><span data-lake-id=\"u6d37fec1\" id=\"u6d37fec1\">消费者 2：</span></li></ul><p data-lake-id=\"ufa7c436f\" id=\"ufa7c436f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.BuiltinExchangeType%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20com.rabbitmq.client.DeliverCallback%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2015%3A40%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%852%5Cn%20*%2F%5Cnpublic%20class%20Consumer02%20%7B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_QUEUE%20%3D%20%5C%22dead_queue%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.........%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Consumer02%E6%8E%A5%E6%94%B6%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%20%2B%20new%20String(message.getBody()%2C%20StandardCharsets.UTF_8))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(DEAD_QUEUE%2C%20false%2C%20deliverCallback%2C%20consumerTag%20-%3E%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220aee91a1%22%7D\"></card><p data-lake-id=\"ud595d97e\" id=\"ud595d97e\"><br></p><ul list=\"u7a57cbe8\"><li fid=\"u52c405ea\" data-lake-id=\"u2bd56aa9\" id=\"u2bd56aa9\"><span data-lake-id=\"ubce8fc66\" id=\"ubce8fc66\">生产者：</span></li></ul><p data-lake-id=\"u44801151\" id=\"u44801151\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2016%3A13%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97-%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E6%97%B6%E9%97%B4%20%20%E8%AE%BE%E7%BD%AEttl%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().expiration(%5C%2210000%5C%22).build()%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221656143b%22%7D\"></card><p data-lake-id=\"u6e029386\" id=\"u6e029386\"><br></p><p data-lake-id=\"u5a3eb9d2\" id=\"u5a3eb9d2\"><span data-lake-id=\"uea2ed46a\" id=\"uea2ed46a\">测试步骤：</span></p><p data-lake-id=\"uba408812\" id=\"uba408812\"><br></p><ol list=\"u12605c33\"><li fid=\"u8cc5814f\" data-lake-id=\"u835dcc9d\" id=\"u835dcc9d\"><span data-lake-id=\"u643f8ba9\" id=\"u643f8ba9\">运行消费者：会发现普通和死信交换机已经绑定各自的队列。</span></li></ol><p data-lake-id=\"u058f5168\" id=\"u058f5168\"><br></p><p data-lake-id=\"u9ebcebd9\" id=\"u9ebcebd9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638445377947-e4a087d0-b755-4178-aa6d-7ae082107bb0.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D495%26id%3Dud91030e8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D495%26originWidth%3D541%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23775%26status%3Ddone%26style%3Dnone%26taskId%3Du8f85c23d-a811-41b4-a478-a20609fc50a%26title%3D%26width%3D541%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A541%2C%22originHeight%22%3A495%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f6%22%2C%22id%22%3A%22xwjE9%22%7D\"></card><span data-lake-id=\"u20dcc1c0\" id=\"u20dcc1c0\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638445475857-ba40932b-588f-43d3-b3a6-5f2660bcd241.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D498%26id%3Dub28b2410%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D498%26originWidth%3D601%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D25129%26status%3Ddone%26style%3Dnone%26taskId%3Du8de3a461-08ce-49b9-9936-e0cf7fa1363%26title%3D%26width%3D601%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A601%2C%22originHeight%22%3A498%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22Jcymv%22%7D\"></card></p><p data-lake-id=\"u62f48d77\" id=\"u62f48d77\"><br></p><ol list=\"u58c0cf9c\" start=\"2\"><li fid=\"ufe890c6a\" data-lake-id=\"u09f241e0\" id=\"u09f241e0\"><span data-lake-id=\"u80004425\" id=\"u80004425\">测试</span><strong><span data-lake-id=\"u9f91257d\" id=\"u9f91257d\">队列达到最大长度</span></strong><span data-lake-id=\"uec0838b8\" id=\"uec0838b8\">，关闭消费者 1 和 2，开启生产者：消息会积压在队列中，消费者 1 所在的普通队列消息限制有 6 条，剩下的 4 条会进入消费者 2 所在的死信队列。如下图所示：</span></li></ol><p data-lake-id=\"u9dbb6efd\" id=\"u9dbb6efd\"><br></p><p data-lake-id=\"ud3960aab\" id=\"ud3960aab\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638448087379-8c4e5c46-39ca-49fd-8024-4111b0a5d431.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D571%26id%3Du9eb9c88a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D571%26originWidth%3D1083%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D79389%26status%3Ddone%26style%3Dnone%26taskId%3Dua5f78b60-fd26-4cb8-9cf8-f0e0f17270b%26title%3D%26width%3D1083%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1083%2C%22originHeight%22%3A571%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1eeed%22%2C%22id%22%3A%22s5bzi%22%7D\"></card></p><p data-lake-id=\"ue98b05db\" id=\"ue98b05db\"><br></p><ol list=\"u16ba7dae\" start=\"3\"><li fid=\"u3f9d6140\" data-lake-id=\"uc5b05a1e\" id=\"uc5b05a1e\"><span data-lake-id=\"u3d2dd79c\" id=\"u3d2dd79c\">取消普通队列的最大长度限制，测试</span><strong><span data-lake-id=\"u66fe44e1\" id=\"u66fe44e1\">消息 ttl 过期</span></strong><span data-lake-id=\"u0eb10fc6\" id=\"u0eb10fc6\">：关闭消费者 1 和 2，开启生产者发送消息。（消息会因为没人接收，会在 ttl 时间内积压在普通队列中， ttl 过期后，消息会进入死信队列中。）</span></li></ol><p data-lake-id=\"u66bade46\" id=\"u66bade46\"><br></p><p data-lake-id=\"u12585112\" id=\"u12585112\"><span data-lake-id=\"u50a28f4b\" id=\"u50a28f4b\">生产者：</span></p><p data-lake-id=\"u60d2c488\" id=\"u60d2c488\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.eight%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2016%3A13%5Cn%20*%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97-%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20NORMAL_EXCHANGE%20%3D%20%5C%22normal_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E6%97%B6%E9%97%B4%20%20%E8%AE%BE%E7%BD%AEttl%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().expiration(%5C%2210000%5C%22).build()%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(NORMAL_EXCHANGE%2C%20%5C%22zhangsan%5C%22%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%221656143b-1%22%7D\"></card><p data-lake-id=\"ufcc5276d\" id=\"ufcc5276d\"><br></p><ol list=\"u6e510735\" start=\"4\"><li fid=\"ub9db9807\" data-lake-id=\"u3643f27c\" id=\"u3643f27c\"><span data-lake-id=\"ud42e38c6\" id=\"ud42e38c6\">测试</span><strong><span data-lake-id=\"u7a7018e8\" id=\"u7a7018e8\">消息被拒</span></strong><span data-lake-id=\"u3f6dd4c9\" id=\"u3f6dd4c9\">：</span></li></ol><p data-lake-id=\"u1325a418\" id=\"u1325a418\"><br></p><p data-lake-id=\"u1e4cfe0d\" id=\"u1e4cfe0d\"><span data-lake-id=\"u012d5846\" id=\"u012d5846\">开启消费者 1 和 2，再开启生产者。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450659287-e191b69a-07c6-4d5e-8f54-05d22263a235.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D274%26id%3Du03d42d3b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D274%26originWidth%3D642%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D32103%26status%3Ddone%26style%3Dnone%26taskId%3Duf69d66f1-feae-4ff6-83ca-af7f8a83127%26title%3D%26width%3D642%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A274%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232e3b43%22%2C%22id%22%3A%22jR4qW%22%7D\"></card><span data-lake-id=\"u2fc681b9\" id=\"u2fc681b9\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450668535-06aa1842-3563-455e-bb20-6376694fae1f.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D202%26id%3Du33f7f3ac%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D202%26originWidth%3D616%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D23460%26status%3Ddone%26style%3Dnone%26taskId%3Dua7a303f7-25d6-4fc0-8d46-d522a51ded6%26title%3D%26width%3D616%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A616%2C%22originHeight%22%3A202%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232d3a42%22%2C%22id%22%3A%22vAYSS%22%7D\"></card></p><p data-lake-id=\"u56fa6a3a\" id=\"u56fa6a3a\"><br></p><h2 data-lake-id=\"38e2258c\" id=\"38e2258c\"><span data-lake-id=\"ub402faff\" id=\"ub402faff\">延迟队列（基于死信队列）</span></h2><p data-lake-id=\"uaeb50e00\" id=\"uaeb50e00\"><br></p><p data-lake-id=\"uce6f04f4\" id=\"uce6f04f4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638450862631-363c8d24-6a72-463a-b827-201e6f79cb79.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D128%26id%3Du8aa7212b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D128%26originWidth%3D1081%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D190603%26status%3Ddone%26style%3Dnone%26taskId%3Due97c71c8-4947-4c82-be00-e98e36ba920%26title%3D%26width%3D1081%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1081%2C%22originHeight%22%3A128%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e1dfd3%22%2C%22id%22%3A%22xrjpE%22%7D\"></card><span data-lake-id=\"u28d9db40\" id=\"u28d9db40\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638451047144-5f4983f1-3a0e-472b-95f3-26635a911749.png%23clientId%3Du268c19fe-902d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D399%26id%3Dud5620b6f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D399%26originWidth%3D869%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D265988%26status%3Ddone%26style%3Dnone%26taskId%3Dub1f53a1e-1377-4e43-ab1d-13e29cf4118%26title%3D%26width%3D869%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A869%2C%22originHeight%22%3A399%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f2%22%2C%22id%22%3A%22O4W2R%22%7D\"></card></p><p data-lake-id=\"u003e5655\" id=\"u003e5655\"><br></p><h3 data-lake-id=\"5bff6472\" id=\"5bff6472\"><span data-lake-id=\"u69a0df70\" id=\"u69a0df70\">整合 SpringBoot</span></h3><p data-lake-id=\"ua9246d88\" id=\"ua9246d88\"><br></p><p data-lake-id=\"u17c7855e\" id=\"u17c7855e\"><br></p><p data-lake-id=\"u37d8ad14\" id=\"u37d8ad14\"><br></p><h4 data-lake-id=\"73ad366e\" id=\"73ad366e\"><span data-lake-id=\"u0a7e6e9e\" id=\"u0a7e6e9e\">实现延迟队列：</span></h4><p data-lake-id=\"u50e8e4bb\" id=\"u50e8e4bb\"><br></p><ol list=\"u3facdfea\"><li fid=\"u192c3c99\" data-lake-id=\"ue7753788\" id=\"ue7753788\"><span data-lake-id=\"udfd2b47e\" id=\"udfd2b47e\">依赖：</span></li></ol><p data-lake-id=\"u3122c714\" id=\"u3122c714\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cproject%20xmlns%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%5C%22%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%20%20%20%20%20%20%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%20https%3A%2F%2Fmaven.apache.org%2Fxsd%2Fmaven-4.0.0.xsd%5C%22%3E%5Cn%20%20%20%20%3CmodelVersion%3E4.0.0%3C%2FmodelVersion%3E%5Cn%20%20%20%20%3Cparent%3E%5Cn%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-parent%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3CrelativePath%2F%3E%20%3C!--%20lookup%20parent%20from%20repository%20--%3E%5Cn%20%20%20%20%3C%2Fparent%3E%5Cn%20%20%20%20%3CgroupId%3Ecom.atguigu.rabbitmq%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Espringboot-rabbitmq%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E0.0.1-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3Cname%3Espringboot-rabbitmq%3C%2Fname%3E%5Cn%20%20%20%20%3Cdescription%3EDemo%20project%20for%20Spring%20Boot%3C%2Fdescription%3E%5Cn%20%20%20%20%3Cproperties%3E%5Cn%20%20%20%20%20%20%20%20%3Cjava.version%3E1.8%3C%2Fjava.version%3E%5Cn%20%20%20%20%3C%2Fproperties%3E%5Cn%20%20%20%20%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-test%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.boot%2Fspring-boot-starter-amqp%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-amqp%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.boot%2Fspring-boot-starter-web%20--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--web%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%90%AF%E5%8A%A8--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-starter-web%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.6.1%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%E5%BF%AB%E9%80%9F%E8%BF%9B%E8%A1%8Cjson%E8%BD%AC%E6%8D%A2--%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.alibaba%2Ffastjson%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Ecom.alibaba%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Efastjson%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.2.78%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.springfox%2Fspringfox-swagger2%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eio.springfox%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espringfox-swagger2%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.0.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.springfox%2Fspringfox-swagger-ui%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eio.springfox%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espringfox-swagger-ui%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E3.0.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework.amqp%2Fspring-rabbit-test%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.amqp%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-rabbit-test%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E2.4.0%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.projectlombok%2Flombok%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Elombok%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E1.18.22%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cscope%3Eprovided%3C%2Fscope%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%5Cn%5Cn%20%20%20%20%3Cbuild%3E%5Cn%20%20%20%20%20%20%20%20%3Cplugins%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cplugin%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-boot-maven-plugin%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fplugin%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fplugins%3E%5Cn%20%20%20%20%3C%2Fbuild%3E%5Cn%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2273700fd7%22%7D\"></card><p data-lake-id=\"uc2b4899d\" id=\"uc2b4899d\"><br></p><ol list=\"u61a89e08\" start=\"2\"><li fid=\"u69964bea\" data-lake-id=\"u1245e541\" id=\"u1245e541\"><span data-lake-id=\"u9f81332b\" id=\"u9f81332b\">yml 配置文件：</span></li></ol><p data-lake-id=\"u73830d88\" id=\"u73830d88\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22c4ed4d31%22%7D\"></card><p data-lake-id=\"uc99c78c6\" id=\"uc99c78c6\"><br></p><ol list=\"u91eb0172\" start=\"3\"><li fid=\"u49c48c85\" data-lake-id=\"u7aebac69\" id=\"u7aebac69\"><span data-lake-id=\"ua76b3319\" id=\"ua76b3319\">swagger 配置类：</span></li></ol><p data-lake-id=\"u0ccd9e4c\" id=\"u0ccd9e4c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20springfox.documentation.builders.ApiInfoBuilder%3B%5Cnimport%20springfox.documentation.service.ApiInfo%3B%5Cnimport%20springfox.documentation.service.Contact%3B%5Cnimport%20springfox.documentation.spi.DocumentationType%3B%5Cnimport%20springfox.documentation.spring.web.plugins.Docket%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F2%2022%3A34%5Cn%20*%2F%5Cnpublic%20class%20SwaggerConfig%20%7B%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Docket%20webApiConfig()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Docket(DocumentationType.SWAGGER_2)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.groupName(%5C%22webApi%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.apiInfo(webApiInfo())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.select()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20ApiInfo%20webApiInfo()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20ApiInfoBuilder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.title(%5C%22rabbitmq%20%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.description(%5C%22%20%E6%9C%AC%E6%96%87%E6%A1%A3%E6%8F%8F%E8%BF%B0%E4%BA%86%20rabbitmq%20%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.version(%5C%221.0%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.contact(new%20Contact(%5C%22enjoy6288%5C%22%2C%20%5C%22http%3A%2F%2Fatguigu.com%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%221846015350%40qq.com%5C%22))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e6248552%22%7D\"></card><p data-lake-id=\"u5da333d3\" id=\"u5da333d3\"><br></p><p data-lake-id=\"u737ba50b\" id=\"u737ba50b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638490298754-a2b1ced5-676b-4f68-86e0-31f05266088f.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D215%26id%3Du8ba627f6%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D215%26originWidth%3D1100%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D132048%26status%3Ddone%26style%3Dnone%26taskId%3Dud9c3f28a-b8df-44d1-b9df-dc90c70e046%26title%3D%26width%3D1100%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1100%2C%22originHeight%22%3A215%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f8f6%22%2C%22id%22%3A%22Iv7m8%22%7D\"></card></p><p data-lake-id=\"u13d19082\" id=\"u13d19082\"><br></p><ol list=\"u34fa8725\" start=\"4\"><li fid=\"ucf82ec3b\" data-lake-id=\"uce104d61\" id=\"uce104d61\"><span data-lake-id=\"u508e2cbd\" id=\"u508e2cbd\">声明队列配置文件：</span></li></ol><p data-lake-id=\"u0de2ea78\" id=\"u0de2ea78\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%208%3A15%5Cn%20*%20TTL%E9%98%9F%E5%88%97%EF%BC%8C%20%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B1%BB%E4%BB%A3%E7%A0%81%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20TtlQueueConfig%20%7B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20X_EXCHANGE%20%3D%20%5C%22X%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20Y_DEAD_LETTER_EXCHANGE%20%3D%20%5C%22Y%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_A%20%3D%20%5C%22QA%5C%22%3B%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_B%20%3D%20%5C%22QB%5C%22%3B%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20DEAD_LETTER_QUEUE%20%3D%20%5C%22QD%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8ExExchange%20%E5%88%AB%E5%90%8D%5Cn%20%20%20%20%40Bean(%5C%22xExchange%5C%22)%5Cn%20%20%20%20public%20DirectExchange%20xExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(X_EXCHANGE)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean(%5C%22yExchange%5C%22)%5Cn%20%20%20%20public%20DirectExchange%20yExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%20%20ttl%E4%B8%BA10s%5Cn%20%20%20%20%40Bean(%5C%22queueA%5C%22)%5Cn%20%20%20%20public%20Queue%20queueA()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(3)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%20routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AEttl%20%20%E5%8D%95%E4%BD%8D%E4%B8%BAms%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C%2010000)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_A).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%20%20ttl%E4%B8%BA40s%5Cn%20%20%20%20%40Bean(%5C%22queueB%5C%22)%5Cn%20%20%20%20public%20Queue%20queueB()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(3)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%20routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AEttl%20%20%E5%8D%95%E4%BD%8D%E4%B8%BAms%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-message-ttl%5C%22%2C%2040000)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_B).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean(%5C%22queueD%5C%22)%5Cn%20%20%20%20public%20Queue%20queueD()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(DEAD_LETTER_QUEUE).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueABindingX(%40Qualifier(%5C%22queueA%5C%22)%20Queue%20queueA%2C%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueA).to(xExchange).with(%5C%22XA%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBBindingX(%40Qualifier(%5C%22queueB%5C%22)%20Queue%20queueB%2C%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueB).to(xExchange).with(%5C%22XB%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueDBindingY(%40Qualifier(%5C%22queueD%5C%22)%20Queue%20queueD%2C%20%40Qualifier(%5C%22yExchange%5C%22)%20DirectExchange%20yExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueD).to(yExchange).with(%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2234c7bc48%22%7D\"></card><p data-lake-id=\"u7e4c585b\" id=\"u7e4c585b\"><br></p><ol list=\"u5cc5c3b4\" start=\"5\"><li fid=\"u2f0d55b4\" data-lake-id=\"u9edbfaeb\" id=\"u9edbfaeb\"><span data-lake-id=\"u32b3978b\" id=\"u32b3978b\">消费者：接收消息</span></li></ol><p data-lake-id=\"u938e6661\" id=\"u938e6661\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%209%3A01%5Cn%20*%20%E9%98%9F%E5%88%97ttl%20%E6%B6%88%E8%B4%B9%E8%80%85%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20DeadLetterQueueConsumer%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20%5C%22QD%5C%22)%5Cn%20%20%20%20public%20void%20receiveD(Message%20message%2C%20Channel%20channel)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E6%94%B6%E5%88%B0%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222d9d521e%22%7D\"></card><p data-lake-id=\"u5ff8aeb7\" id=\"u5ff8aeb7\"><br></p><ol list=\"ufdf833d6\" start=\"6\"><li fid=\"u698e0874\" data-lake-id=\"uf7ea6cd6\" id=\"uf7ea6cd6\"><span data-lake-id=\"u44854cf1\" id=\"u44854cf1\">发送消息：Controller</span></li></ol><p data-lake-id=\"u4710b98f\" id=\"u4710b98f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20io.swagger.annotations.ApiModelProperty%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%208%3A47%5Cn%20*%20%E5%8F%91%E9%80%81%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%5Cn%20*%20%3Cp%3E%5Cn%20*%20http%3A%2F%2Flocalhost%3A8080%2Fttl%2FsendMsg%2F%E5%98%BB%E5%98%BB%E5%98%BB%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fttl%5C%22)%5Cnpublic%20class%20SendMsgController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMsg%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%A4%E4%B8%AAttl%E9%98%9F%E5%88%97%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XA%5C%22%2C%20%5C%22%E6%B6%88%E6%81%AF%E6%9D%A5%E8%87%AAttl%E4%B8%BA10s%E7%9A%84%E9%98%9F%E5%88%97%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XB%5C%22%2C%20%5C%22%E6%B6%88%E6%81%AF%E6%9D%A5%E8%87%AAttl%E4%B8%BA40s%E7%9A%84%E9%98%9F%E5%88%97%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22acb0bddc%22%7D\"></card><p data-lake-id=\"uca8b3875\" id=\"uca8b3875\"><br></p><p data-lake-id=\"u436ca17c\" id=\"u436ca17c\"><span data-lake-id=\"uab388077\" id=\"uab388077\"><br /></span><span data-lake-id=\"u0771e048\" id=\"u0771e048\">访问：</span><a href=\"http://localhost:8080/ttl/sendMsg/\" target=\"_blank\" data-lake-id=\"ue5bdafdd\" id=\"ue5bdafdd\"><span data-lake-id=\"u0f558b97\" id=\"u0f558b97\">http://localhost:8080/ttl/sendMsg/</span></a><span data-lake-id=\"u1325674b\" id=\"u1325674b\">嘻嘻嘻<br /></span><span data-lake-id=\"udcc8b286\" id=\"udcc8b286\">控制台打印结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638494307481-a59aaddb-4efb-4200-9e05-0e34602ded36.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D202%26id%3Du66541ef9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D202%26originWidth%3D1365%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D62756%26status%3Ddone%26style%3Dnone%26taskId%3Dua128108f-eaa5-47fc-ab0d-e56fe3f57f4%26title%3D%26width%3D1365%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1365%2C%22originHeight%22%3A202%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23333e45%22%2C%22id%22%3A%22tO8el%22%7D\"></card></p><p data-lake-id=\"uafa127ba\" id=\"uafa127ba\"><br></p><h4 data-lake-id=\"5d575387\" id=\"5d575387\"><span data-lake-id=\"uf06e7824\" id=\"uf06e7824\">延迟队列优化：</span></h4><p data-lake-id=\"u6257e7bc\" id=\"u6257e7bc\"><br></p><p data-lake-id=\"uf1945132\" id=\"uf1945132\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638494906968-c2a2e16a-a5b3-4c44-83bc-5846e35977d0.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D333%26id%3Du5def25ea%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D333%26originWidth%3D1070%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D169463%26status%3Ddone%26style%3Dnone%26taskId%3Duede9888d-c22a-46c9-a810-c9c1899d23a%26title%3D%26width%3D1070%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1070%2C%22originHeight%22%3A333%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf9f8%22%2C%22id%22%3A%22PCbH9%22%7D\"></card><span data-lake-id=\"ucf912ccb\" id=\"ucf912ccb\"><br /></span><span data-lake-id=\"uabebb465\" id=\"uabebb465\">增加一个 QC 普通队列声明后并绑定交换机 XC。<br /></span><span data-lake-id=\"u7f39ff3a\" id=\"u7f39ff3a\">队列配置 中添加：</span></p><p data-lake-id=\"u1c33e394\" id=\"u1c33e394\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F--------------------------------%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97-------------------------------------%5Cn%20%20%20%20%2F%2F%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%EF%BC%88%E4%B8%BA%E4%BA%86%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_C%20%3D%20%5C%22QC%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8EQC%5Cn%20%20%20%20%40Bean(%5C%22queueC%5C%22)%5Cn%20%20%20%20public%20Queue%20queueC()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E(2)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-exchange%5C%22%2C%20Y_DEAD_LETTER_EXCHANGE)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E6%AD%BB%E4%BF%A1routing-key%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-dead-letter-routing-key%5C%22%2C%20%5C%22YD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(QUEUE_C).withArguments(arguments).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E6%99%AE%E9%80%9A%E9%98%9F%E5%88%97QC%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueCBindingX(%40Qualifier(%5C%22queueC%5C%22)%20Queue%20queueC%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22xExchange%5C%22)%20DirectExchange%20xExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(queueC).to(xExchange).with(%5C%22XC%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F-----------------------------------%E4%BC%98%E5%8C%96%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97----------------------------------%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22a7ebc7ee%22%7D\"></card><p data-lake-id=\"u9bde3c53\" id=\"u9bde3c53\"><br></p><p data-lake-id=\"u6870970c\" id=\"u6870970c\"><span data-lake-id=\"uc6706f78\" id=\"uc6706f78\">添加 Controller 发消息控制器：</span></p><p data-lake-id=\"u69dff3a4\" id=\"u69dff3a4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E6%B6%88%E6%81%AFttl%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendExpireMsg%2F%7Bmessage%7D%2F%7BttlTime%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message%2C%20%40PathVariable%20String%20ttlTime)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%EF%BC%9A%7B%7D%EF%BC%8C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%97%B6%E9%95%BF%7B%7D%E6%AF%AB%E7%A7%92%EF%BC%8Cttl%E4%BF%A1%E6%81%AF%E7%BB%99%E9%98%9F%E5%88%97QC%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20ttlTime%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(%5C%22X%5C%22%2C%20%5C%22XC%5C%22%2C%20message%2C%20msg%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%97%B6%E5%80%99%20%20%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%95%BF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20msg.getMessageProperties().setExpiration(ttlTime)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20msg%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2237e62688%22%7D\"></card><p data-lake-id=\"uba0c942f\" id=\"uba0c942f\"><br></p><p data-lake-id=\"u44e0ad88\" id=\"u44e0ad88\"><span data-lake-id=\"ud37c99fe\" id=\"ud37c99fe\">测试：</span></p><p data-lake-id=\"u8f450987\" id=\"u8f450987\"><br></p><ol list=\"ueb5e0837\"><li fid=\"u1b4d933a\" data-lake-id=\"ub256f62c\" id=\"ub256f62c\"><span data-lake-id=\"u2294acc6\" id=\"u2294acc6\">http://localhost:8080/ttl/sendExpireMsg/你好 1/20000</span></li></ol><ol list=\"u9ff940f0\" start=\"2\"><li fid=\"ue6b2c004\" data-lake-id=\"u25a98c39\" id=\"u25a98c39\"><span data-lake-id=\"u371386de\" id=\"u371386de\">http://localhost:8080/ttl/sendExpireMsg/你好 2/2000</span></li></ol><p data-lake-id=\"u0b67b6a7\" id=\"u0b67b6a7\"><br></p><p data-lake-id=\"ub6ce48d7\" id=\"ub6ce48d7\"><span data-lake-id=\"u13466df4\" id=\"u13466df4\">结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638517312025-dfbbfd0b-a82c-4432-a395-2e7cc7c6e48f.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D149%26id%3Du18e59259%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D149%26originWidth%3D1285%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D42107%26status%3Ddone%26style%3Dnone%26taskId%3Duff6fb06a-df03-451f-b886-52364055048%26title%3D%26width%3D1285%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1285%2C%22originHeight%22%3A149%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23344049%22%2C%22id%22%3A%22efjYm%22%7D\"></card></p><p data-lake-id=\"u23f2f74f\" id=\"u23f2f74f\"><br></p><h2 data-lake-id=\"d0cad89d\" id=\"d0cad89d\"><span data-lake-id=\"u85be1934\" id=\"u85be1934\">延迟队列（基于插件）</span></h2><p data-lake-id=\"u81531559\" id=\"u81531559\"><br></p><p data-lake-id=\"ufd1c2e21\" id=\"ufd1c2e21\"><span data-lake-id=\"u630fc20d\" id=\"u630fc20d\">进入 rabbitmq 安装目录下的 plugins 目录 ，cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins<br /></span><span data-lake-id=\"u62a50af5\" id=\"u62a50af5\">执行命令让该插件生效：rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br /></span><span data-lake-id=\"u3bface68\" id=\"u3bface68\">然后重启 rabbitmq：systemctl restart rabbitmq-server<br /></span><span data-lake-id=\"u9db1a728\" id=\"u9db1a728\">会发现交换机多了一个新类型，意味着延迟消息将由交换机来完成，而不是队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638519642120-f3258006-3639-4551-805e-26bbd1e67c85.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D530%26id%3Du66b7d498%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D767%26originWidth%3D690%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D56472%26status%3Ddone%26style%3Dnone%26taskId%3Du707609ca-e368-4b6c-9833-ec8cc57ca15%26title%3D%26width%3D477.00006103515625%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A690%2C%22originHeight%22%3A767%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f4f4%22%2C%22id%22%3A%22PD1AH%22%7D\"></card><span data-lake-id=\"u2f8263ea\" id=\"u2f8263ea\"><br /><br /><br /></span><span data-lake-id=\"ud9ab44e0\" id=\"ud9ab44e0\">原来的情况：基于死信<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520455616-cfcde47e-bee3-4ef6-83b6-6630dbe54d9a.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D443%26id%3Dua9957719%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D601%26originWidth%3D1033%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D226301%26status%3Ddone%26style%3Dnone%26taskId%3Dua95f3b09-635a-4782-abfd-57901f34a8b%26title%3D%26width%3D760.9862060546875%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1033%2C%22originHeight%22%3A601%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f8f8%22%2C%22id%22%3A%22UOPGa%22%7D\"></card><span data-lake-id=\"u4f03ca10\" id=\"u4f03ca10\"><br /></span><span data-lake-id=\"u3dd91de7\" id=\"u3dd91de7\">现在：基于延迟插件<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520591056-7591eaf6-b99f-4059-8cbb-6a6ee0ea64f2.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du11577081%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D224%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D94107%26status%3Ddone%26style%3Dnone%26taskId%3Du47b17a31-4f94-4f3c-a75f-2014f181765%26title%3D%26width%3D770.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A976%2C%22originHeight%22%3A224%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22a4gyh%22%7D\"></card><span data-lake-id=\"ud0d616ab\" id=\"ud0d616ab\"><br /></span><span data-lake-id=\"u294d8a9a\" id=\"u294d8a9a\">代码架构：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638520764180-7b9e927e-1166-470d-ac32-dda16bb87ae1.png%23clientId%3Du7522214d-0203-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D188%26id%3Dud9b4ba5b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D188%26originWidth%3D1062%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D84300%26status%3Ddone%26style%3Dnone%26taskId%3Du12c568cb-6151-4b2f-8f49-3f721530b6d%26title%3D%26width%3D1062%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1062%2C%22originHeight%22%3A188%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8faf2%22%2C%22id%22%3A%22cPAio%22%7D\"></card></p><p data-lake-id=\"u2537b866\" id=\"u2537b866\"><br></p><ol list=\"udc24c677\"><li fid=\"u2d0fa43d\" data-lake-id=\"u54cbff16\" id=\"u54cbff16\"><span data-lake-id=\"u497ba1cf\" id=\"u497ba1cf\">配置类</span></li></ol><p data-lake-id=\"ucf6f84e6\" id=\"ucf6f84e6\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2016%3A41%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20DelayedQueueConfig%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_QUEUE_NAME%20%3D%20%5C%22delayed.name%5C%22%3B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_EXCHANGE_NAME%20%3D%20%5C%22delayed.exchange%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20DELAYED_ROUTING_KEY%20%3D%20%5C%22delayed.routingkey%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20delayedQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(DELAYED_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%20%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20CustomExchange%20delayedExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-delayed-type%5C%22%2C%20%5C%22direct%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%8C%81%E4%B9%85%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20*%205.%20%E5%85%B6%E4%BB%96%E7%9A%84%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20return%20new%20CustomExchange(DELAYED_EXCHANGE_NAME%2C%20%5C%22x-delayed-message%5C%22%2C%20true%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20delayedQueueBindingDelayedExchange(%40Qualifier(%5C%22delayedQueue%5C%22)%20Queue%20delayedQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22delayedExchange%5C%22)%20CustomExchange%20delayedExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22576e3b9e%22%7D\"></card><p data-lake-id=\"u88264fd1\" id=\"u88264fd1\"><br></p><ol list=\"ub8ffacac\" start=\"2\"><li fid=\"u680ffbb9\" data-lake-id=\"ue3e31a7b\" id=\"ue3e31a7b\"><span data-lake-id=\"u5b76b6d1\" id=\"u5b76b6d1\">Controller 生产者：</span></li></ol><p data-lake-id=\"u4fdb5ab5\" id=\"u4fdb5ab5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E5%9F%BA%E4%BA%8E%E5%BB%B6%E8%BF%9F%E6%8F%92%E4%BB%B6%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendDelayMsg%2F%7Bmessage%7D%2F%7BdelayTime%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMsg(%40PathVariable%20String%20message%2C%20%40PathVariable%20Integer%20delayTime)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%3A%7B%7D%2C%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%97%B6%E9%95%BF%7B%7D%E6%AF%AB%E7%A7%92%E4%BF%A1%E6%81%AF%E7%BB%99%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97delayed.queue%3A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20delayTime%2C%20message)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME%2C%20DelayedQueueConfig.DELAYED_ROUTING_KEY%2C%20message%2C%20msg%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%97%B6%E5%80%99%20%20%20%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%95%BF%20%20%E5%8D%95%E4%BD%8D%EF%BC%9Ams%5Cn%20%20%20%20%20%20%20%20%20%20%20%20msg.getMessageProperties().setDelay(delayTime)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20msg%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22eb8d3858%22%7D\"></card><p data-lake-id=\"uaa1f405b\" id=\"uaa1f405b\"><br></p><ol list=\"u4c1a94d3\" start=\"3\"><li fid=\"uf67e9227\" data-lake-id=\"u4e37ad14\" id=\"u4e37ad14\"><span data-lake-id=\"uc301cdab\" id=\"uc301cdab\">消费者：</span></li></ol><p data-lake-id=\"u8e368a72\" id=\"u8e368a72\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.DelayedQueueConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.util.Date%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2019%3A36%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20DelayQueueConsumer%20%7B%5Cn%20%20%20%20%2F%2F%E7%9B%91%E5%90%AC%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20DelayedQueueConfig.DELAYED_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveDelayQueue(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%3A%7B%7D%2C%E6%94%B6%E5%88%B0%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20new%20Date().toString()%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2220ede713%22%7D\"></card><p data-lake-id=\"uc629c46a\" id=\"uc629c46a\"><br></p><p data-lake-id=\"u7f843083\" id=\"u7f843083\"><span data-lake-id=\"u7ccea2ef\" id=\"u7ccea2ef\">测试：<br /></span><span data-lake-id=\"ufb9ca283\" id=\"ufb9ca283\">发起请求：</span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" data-lake-id=\"u0ed23d19\" id=\"u0ed23d19\"><span data-lake-id=\"ucce40a65\" id=\"ucce40a65\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span data-lake-id=\"u6e4179e0\" id=\"u6e4179e0\"> on baby1/20000<br /></span><span data-lake-id=\"ub54e37e9\" id=\"ub54e37e9\"> </span><a href=\"http://localhost:8080/ttl/sendDelayMsg/com\" target=\"_blank\" data-lake-id=\"u591aeafc\" id=\"u591aeafc\"><span data-lake-id=\"u41e0134b\" id=\"u41e0134b\">http://localhost:8080/ttl/sendDelayMsg/com</span></a><span data-lake-id=\"u06ea87d6\" id=\"u06ea87d6\"> on baby2/2000<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638532349237-315b969f-d021-4448-8aa8-d5a1d41950a0.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D208%26id%3Duf33e7fe7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D208%26originWidth%3D1432%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D71640%26status%3Ddone%26style%3Dnone%26taskId%3Due722c22b-16d9-40a2-9a28-e95348df5d0%26title%3D%26width%3D1432%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1432%2C%22originHeight%22%3A208%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23333e45%22%2C%22id%22%3A%22P79jF%22%7D\"></card><span data-lake-id=\"u0735baa9\" id=\"u0735baa9\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638532663153-40afab72-d363-4536-94fc-4889e40d764b.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D224%26id%3Du7813c3ed%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D266%26originWidth%3D1121%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D457006%26status%3Ddone%26style%3Dnone%26taskId%3Du0e4002d8-2179-43cc-bcfd-7c69cd127b5%26title%3D%26width%3D941.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1121%2C%22originHeight%22%3A266%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cccac1%22%2C%22id%22%3A%22aEVGf%22%7D\"></card></p><p data-lake-id=\"u816be002\" id=\"u816be002\"><br></p><h2 data-lake-id=\"d338501f\" id=\"d338501f\"><span data-lake-id=\"uf2c90131\" id=\"uf2c90131\">发布确认高级</span></h2><p data-lake-id=\"u78a1b073\" id=\"u78a1b073\"><br></p><p data-lake-id=\"ue1d328fd\" id=\"ue1d328fd\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638533419869-3aa9b7ad-ee4e-4fd8-9e42-fd6af4aafe70.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D225%26id%3Du7ed4e098%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D341%26originWidth%3D945%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D186643%26status%3Ddone%26style%3Dnone%26taskId%3Duc65852ff-c2a9-416e-bef6-2991c80fa8b%26title%3D%26width%3D623.0000610351562%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A945%2C%22originHeight%22%3A341%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8e2d2%22%2C%22id%22%3A%22OAmnb%22%7D\"></card><span data-lake-id=\"u02ce7662\" id=\"u02ce7662\"> <br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638533456413-9ead4e1d-f118-4a55-8d05-bcdd4d5fc47f.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D131%26id%3Du954992f9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D144%26originWidth%3D839%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D73103%26status%3Ddone%26style%3Dnone%26taskId%3Du9819bc42-f398-487a-b319-358e2acd1ba%26title%3D%26width%3D762.9931030273438%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A839%2C%22originHeight%22%3A144%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8e7d7%22%2C%22id%22%3A%22sjopK%22%7D\"></card></p><p data-lake-id=\"ua0b992e2\" id=\"ua0b992e2\"><br></p><h3 data-lake-id=\"3f64dd13\" id=\"3f64dd13\"><span data-lake-id=\"uc55d922c\" id=\"uc55d922c\">回调接口 : (若交换机收不到消息)</span></h3><p data-lake-id=\"uc0c6652d\" id=\"uc0c6652d\"><br></p><ol list=\"u18e7d6f4\"><li fid=\"uf5a85a9a\" data-lake-id=\"uf961977a\" id=\"uf961977a\"><span data-lake-id=\"u663b1458\" id=\"u663b1458\">配置类</span></li></ol><p data-lake-id=\"u1415f6ed\" id=\"u1415f6ed\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A15%5Cn%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%20%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%20%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20ConfirmConfig%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_EXCHANGE_NAME%20%3D%20%5C%22confirm_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_QUEUE_NAME%20%3D%20%5C%22confirm_queue%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_ROUTING_KEY%20%3D%20%5C%22key1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20DirectExchange%20confirmExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20DirectExchange(CONFIRM_EXCHANGE_NAME)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20confirmQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(CONFIRM_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBindingExchange(%40Qualifier(%5C%22confirmQueue%5C%22)%20Queue%20confirmQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22confirmExchange%5C%22)%20DirectExchange%20confirmExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222a45d705%22%7D\"></card><p data-lake-id=\"u4ecde0f6\" id=\"u4ecde0f6\"><br></p><ol list=\"ub54f2c05\" start=\"2\"><li fid=\"u4e3bb631\" data-lake-id=\"ua5227561\" id=\"ua5227561\"><span data-lake-id=\"ued86c520\" id=\"ued86c520\">生产者：发消息</span></li></ol><p data-lake-id=\"ub699d97d\" id=\"ub699d97d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A27%5Cn%20*%20%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fconfirm%5C%22)%5Cnpublic%20class%20ProducerController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMessage%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMessage(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData%20%3D%20new%20CorrelationData(%5C%221%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%20ConfirmConfig.CONFIRM_ROUTING_KEY%2C%20message%2C%20correlationData)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227ba8c971%22%7D\"></card><p data-lake-id=\"ua928c4f5\" id=\"ua928c4f5\"><br></p><ol list=\"u3aa9a4e3\" start=\"3\"><li fid=\"u4732e243\" data-lake-id=\"u7b775a6c\" id=\"u7b775a6c\"><span data-lake-id=\"u0cd0e120\" id=\"u0cd0e120\">消费者：</span></li></ol><p data-lake-id=\"ud61ac3f3\" id=\"ud61ac3f3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A33%5Cn%20*%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20ConfirmConfig.CONFIRM_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveConfirmMessage(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E9%98%9F%E5%88%97confirm.queue%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ee5ae00f%22%7D\"></card><p data-lake-id=\"u04196b83\" id=\"u04196b83\"><br></p><ol list=\"u99465ece\" start=\"4\"><li fid=\"u995125c0\" data-lake-id=\"u60a6d2ac\" id=\"u60a6d2ac\"><span data-lake-id=\"uda277bab\" id=\"uda277bab\">回调接口</span></li></ol><p data-lake-id=\"u706addb6\" id=\"u706addb6\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20javax.annotation.PostConstruct%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A50%5Cn%20*%20%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40Component%5Cnpublic%20class%20MyCallBack%20implements%20RabbitTemplate.ConfirmCallback%20%7B%5Cn%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%40PostConstruct%5Cn%20%20%20%20public%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B3%A8%E5%85%A5%20%EF%BC%88%E9%9C%80%E8%A6%81%E5%B0%86%E5%BD%93%E5%89%8D%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%B3%A8%E5%85%A5%E5%88%B0RabbitTemplate%E7%9A%84ConfirmCallback%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E4%B8%AD%EF%BC%89%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setConfirmCallback(this)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%A1%AE%E8%AE%A4%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%201.%20%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%8E%A5%E6%94%B6%E5%88%B0%E4%BA%86%20%20%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20*%201.1%20correlationData%20%E4%BF%9D%E5%AD%98%E5%9B%9E%E8%B0%83%E6%B6%88%E6%81%AF%E7%9A%84id%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%201.2%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%20%20ack%20%3D%20true%5Cn%20%20%20%20%20*%201.3%20cause%20%20null%5Cn%20%20%20%20%20*%202.%20%E5%8F%91%E6%B6%88%E6%81%AF%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%8E%A5%E6%94%B6%E5%A4%B1%E8%B4%A5%20%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20*%202.1%20correlationData%20%E4%BF%9D%E5%AD%98%E5%9B%9E%E8%B0%83%E6%B6%88%E6%81%AF%E7%9A%84id%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%202.2%20%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%94%B6%E5%88%B0%E6%B6%88%E6%81%AF%20ack%20%3D%20false%5Cn%20%20%20%20%20*%202.3%20cause%20%20%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20correlationData%5Cn%20%20%20%20%20*%20%40param%20ack%5Cn%20%20%20%20%20*%20%40param%20cause%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20confirm(CorrelationData%20correlationData%2C%20boolean%20ack%2C%20String%20cause)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20id%20%3D%20correlationData%20!%3D%20null%20%3F%20correlationData.getId()%20%3A%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20if%20(ack)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%B2%E7%BB%8F%E6%94%B6%E5%88%B0id%E4%B8%BA%EF%BC%9A%7B%7D%E7%9A%84%E6%B6%88%E6%81%AF%5C%22%2C%20id)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.error(%5C%22%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%BF%98%E6%9C%AA%E6%94%B6%E5%88%B0id%E4%B8%BA%3A%7B%7D%E7%9A%84%E6%B6%88%E6%81%AF%EF%BC%8C%E7%94%B1%E4%BA%8E%E5%8E%9F%E5%9B%A0%EF%BC%9A%7B%7D%5C%22%2C%20id%2C%20cause)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22b57f810e%22%7D\"></card><p data-lake-id=\"uef78c20d\" id=\"uef78c20d\"><br></p><p data-lake-id=\"ua5e09f93\" id=\"ua5e09f93\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638537772169-a45dc229-e5ed-410a-8e46-69f3fb39f21e.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D518%26id%3Du396acbb1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D518%26originWidth%3D973%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D369736%26status%3Ddone%26style%3Dnone%26taskId%3Du8a93ee99-1d87-4fd1-880d-a166a5e50f1%26title%3D%26width%3D973%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A973%2C%22originHeight%22%3A518%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22Bk8N5%22%7D\"></card></p><p data-lake-id=\"u67dd6b93\" id=\"u67dd6b93\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%5Cn%20%20%20%20publisher-confirm-type%3A%20correlated%20%20%20%20%23%20%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22ab4a519d%22%7D\"></card><p data-lake-id=\"ub25474b6\" id=\"ub25474b6\"><br></p><ol list=\"u6cb1d6f7\" start=\"5\"><li fid=\"u8a5f17a7\" data-lake-id=\"ud16eafd0\" id=\"ud16eafd0\"><span data-lake-id=\"u14d7f9ca\" id=\"u14d7f9ca\">发送请求 : http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p data-lake-id=\"u38416d74\" id=\"u38416d74\"><br></p><p data-lake-id=\"u78e4294b\" id=\"u78e4294b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638537854600-e11783cd-28be-4b75-8f36-434ecab3f990.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D190%26id%3Due332f12f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D190%26originWidth%3D1135%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D51915%26status%3Ddone%26style%3Dnone%26taskId%3Duba52e997-898f-49e3-9067-645cfb69f68%26title%3D%26width%3D1135%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1135%2C%22originHeight%22%3A190%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323d44%22%2C%22id%22%3A%22Emijw%22%7D\"></card></p><p data-lake-id=\"u7221df5d\" id=\"u7221df5d\"><br></p><ol list=\"u6dde4edd\" start=\"6\"><li fid=\"u496945b0\" data-lake-id=\"u9c66e047\" id=\"u9c66e047\"><span data-lake-id=\"u6641ac44\" id=\"u6641ac44\">测试交换机收不到消息：在发送消息中，将交换机名字后面拼接上&quot;123&quot;，再次启动，发送请求： http://localhost:8080/confirm/sendMessage/大家好 1</span></li></ol><p data-lake-id=\"ubcb758d6\" id=\"ubcb758d6\"><br></p><p data-lake-id=\"u22d07271\" id=\"u22d07271\"><span data-lake-id=\"u70e7d21c\" id=\"u70e7d21c\">会得到：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638538268620-8dcbc2ae-eaa1-4b60-8822-9cd20f509c52.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D222%26id%3Du3e470d69%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D222%26originWidth%3D1872%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D66288%26status%3Ddone%26style%3Dnone%26taskId%3Du7f0330f7-a846-488e-8b25-71c1f3cf0a7%26title%3D%26width%3D1872%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1872%2C%22originHeight%22%3A222%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303c43%22%2C%22id%22%3A%22J3ZRH%22%7D\"></card></p><p data-lake-id=\"uc7e4f269\" id=\"uc7e4f269\"><br></p><ol list=\"ubf8d1f03\" start=\"7\"><li fid=\"ufd84ad2f\" data-lake-id=\"u8c7d1937\" id=\"u8c7d1937\"><span data-lake-id=\"u4796d64a\" id=\"u4796d64a\">测试队列收不到消息</span></li></ol><p data-lake-id=\"u108dd925\" id=\"u108dd925\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.controller%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.rabbit.connection.CorrelationData%3B%5Cnimport%20org.springframework.amqp.rabbit.core.RabbitTemplate%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.PathVariable%3B%5Cnimport%20org.springframework.web.bind.annotation.RequestMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A27%5Cn%20*%20%E5%BC%80%E5%A7%8B%E5%8F%91%E6%B6%88%E6%81%AF%20%20%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20*%2F%5Cn%40Slf4j%5Cn%40RestController%5Cn%40RequestMapping(%5C%22%2Fconfirm%5C%22)%5Cnpublic%20class%20ProducerController%20%7B%5Cn%20%20%20%20%40Autowired%5Cn%20%20%20%20private%20RabbitTemplate%20rabbitTemplate%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40GetMapping(%5C%22%2FsendMessage%2F%7Bmessage%7D%5C%22)%5Cn%20%20%20%20public%20void%20sendMessage(%40PathVariable%20String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData1%20%3D%20new%20CorrelationData(%5C%221%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConfirmConfig.CONFIRM_ROUTING_KEY%2C%20message%2C%20correlationData1)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20CorrelationData%20correlationData2%20%3D%20new%20CorrelationData(%5C%222%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ConfirmConfig.CONFIRM_ROUTING_KEY%2B%5C%222%5C%22%2C%20message%2C%20correlationData2)%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%228e842df0%22%7D\"></card><p data-lake-id=\"u1b20db2a\" id=\"u1b20db2a\"><br></p><p data-lake-id=\"uce701b63\" id=\"uce701b63\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638538743381-bfc4680e-692b-4303-a0f3-87cd9425978d.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D247%26id%3Du241a2996%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D247%26originWidth%3D1157%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D67266%26status%3Ddone%26style%3Dnone%26taskId%3Du3edf7078-e740-4b0a-866c-03de3cfb9db%26title%3D%26width%3D1157%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1157%2C%22originHeight%22%3A247%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23313c43%22%2C%22id%22%3A%22SGy2Z%22%7D\"></card><span data-lake-id=\"u94b8d528\" id=\"u94b8d528\"><br /></span><span data-lake-id=\"u11773354\" id=\"u11773354\">可见，队列没有收到消息，也没有应答和确认。</span></p><p data-lake-id=\"ubbd10bfa\" id=\"ubbd10bfa\"><br></p><h3 data-lake-id=\"9a49228a\" id=\"9a49228a\"><span data-lake-id=\"u69229606\" id=\"u69229606\">若队列收不到消息</span></h3><p data-lake-id=\"uf0412cea\" id=\"uf0412cea\"><br></p><p data-lake-id=\"u17a29e6c\" id=\"u17a29e6c\"><br></p><p data-lake-id=\"u18410005\" id=\"u18410005\"><br></p><h4 data-lake-id=\"7df88dac\" id=\"7df88dac\"><span data-lake-id=\"uacff6e07\" id=\"uacff6e07\">回退消息</span></h4><p data-lake-id=\"u6d37cd3e\" id=\"u6d37cd3e\"><br></p><p data-lake-id=\"u9d159a4e\" id=\"u9d159a4e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638539584832-557a9bbc-89d4-4162-a0d4-599eb7f3df21.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D210%26id%3Du40b5093d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D210%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D298616%26status%3Ddone%26style%3Dnone%26taskId%3Du13a46749-be43-4430-beb2-483ea013efc%26title%3D%26width%3D976%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A976%2C%22originHeight%22%3A210%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23bcbbb7%22%2C%22id%22%3A%22thCkG%22%7D\"></card></p><p data-lake-id=\"uf348cbd9\" id=\"uf348cbd9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22spring%3A%5Cn%20%20rabbitmq%3A%5Cn%20%20%20%20host%3A%2059.110.171.189%5Cn%20%20%20%20port%3A%205672%5Cn%20%20%20%20username%3A%20admin%5Cn%20%20%20%20password%3A%20123%5Cn%20%20%20%20publisher-confirm-type%3A%20correlated%20%20%20%23%20%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20publisher-returns%3A%20true%20%20%20%20%20%20%20%23%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%EF%BC%88%E6%B6%88%E6%81%AF%E5%9C%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%82%A3%E8%8B%A5%E8%B7%AF%E7%94%B1%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%88%99%E4%BC%9A%E5%9B%9E%E9%80%80%E6%B6%88%E6%81%AF%E7%BB%99%E7%94%9F%E4%BA%A7%E8%80%85%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%229bc2e551%22%7D\"></card><p data-lake-id=\"ude0471d2\" id=\"ude0471d2\"><br></p><p data-lake-id=\"u4ecdba54\" id=\"u4ecdba54\"><span data-lake-id=\"u58fdf937\" id=\"u58fdf937\">回退接口：</span></p><p data-lake-id=\"ub365cc32\" id=\"ub365cc32\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%E6%B3%A8%E5%85%A5%5Cn%40PostConstruct%5Cn%20%20%20%20public%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B3%A8%E5%85%A5%20%EF%BC%88%E9%9C%80%E8%A6%81%E5%B0%86%E5%BD%93%E5%89%8D%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%B3%A8%E5%85%A5%E5%88%B0RabbitTemplate%E7%9A%84ConfirmCallback%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E4%B8%AD%EF%BC%89%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setConfirmCallback(this)%3B%5Cn%20%20%20%20%20%20%20%20rabbitTemplate.setReturnsCallback(this)%3B%5Cn%20%20%20%20%7D%5Cn%2F**%5Cn%20%20%20%20%20*%20%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%BD%93%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B8%8D%E5%8F%AF%E8%BE%BE%E7%9B%AE%E7%9A%84%E5%9C%B0%E6%97%B6%E5%B0%86%E6%B6%88%E6%81%AF%E8%BF%94%E5%9B%9E%E7%BB%99%E7%94%9F%E4%BA%A7%E8%80%85%5Cn%20%20%20%20%20*%20%E5%8F%AA%E6%9C%89%E4%B8%8D%E5%8F%AF%E5%88%B0%E7%9B%AE%E7%9A%84%E5%9C%B0%E6%97%B6%EF%BC%8C%E6%89%8D%E8%BF%9B%E8%A1%8C%E5%9B%9E%E9%80%80%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20returnedMessage%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20returnedMessage(ReturnedMessage%20returnedMessage)%20%7B%5Cn%20%20%20%20%20%20%20%20log.error(%5C%22%E6%B6%88%E6%81%AF%7B%7D%EF%BC%8C%E8%A2%AB%E4%BA%A4%E6%8D%A2%E6%9C%BA%7B%7D%E9%80%80%E5%9B%9E%EF%BC%8C%E9%80%80%E5%9B%9E%E5%8E%9F%E5%9B%A0%EF%BC%9A%7B%7D%2C%E8%B7%AF%E7%94%B1key%3A%7B%7D%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20String(returnedMessage.getMessage().getBody())%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getExchange()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getReplyText()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20returnedMessage.getRoutingKey())%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%220cc635d1%22%7D\"></card><p data-lake-id=\"u2654fc7c\" id=\"u2654fc7c\"><br></p><p data-lake-id=\"uf86bf68a\" id=\"uf86bf68a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638542234889-03b41ef6-8fc5-4ffb-9f36-7287d4ff9476.png%23clientId%3Du44e4b0cf-fc9d-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D267%26id%3Duddd5e8ec%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D267%26originWidth%3D1293%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D78730%26status%3Ddone%26style%3Dnone%26taskId%3Du4c513758-cf34-415c-a9f3-845a33faec5%26title%3D%26width%3D1293%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1293%2C%22originHeight%22%3A267%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23303d45%22%2C%22id%22%3A%22tOHQ4%22%7D\"></card></p><p data-lake-id=\"uc53a419f\" id=\"uc53a419f\"><br></p><h4 data-lake-id=\"2d534732\" id=\"2d534732\"><span data-lake-id=\"u10e834ce\" id=\"u10e834ce\">备份交换机</span></h4><p data-lake-id=\"uabcf7a93\" id=\"uabcf7a93\"><br></p><p data-lake-id=\"u73453e3c\" id=\"u73453e3c\"><span data-lake-id=\"ueeed5229\" id=\"ueeed5229\">添加一个交换机和两个队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638578627259-759238ba-aac5-42f9-b645-401c5c9a05d2.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D328%26id%3Dud35a1613%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D328%26originWidth%3D930%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D197049%26status%3Ddone%26style%3Dnone%26taskId%3Du04e4ef45-34c3-49a8-84c0-93d70b4ebb6%26title%3D%26width%3D930%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A930%2C%22originHeight%22%3A328%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7e6d5%22%2C%22id%22%3A%22j2ALj%22%7D\"></card></p><p data-lake-id=\"udb3c78de\" id=\"udb3c78de\"><br></p><ol list=\"u15b76342\"><li fid=\"u4c5a4eb6\" data-lake-id=\"u2c143d03\" id=\"u2c143d03\"><span data-lake-id=\"u8bcff5cb\" id=\"u8bcff5cb\">配置类</span></li></ol><p data-lake-id=\"u7df36999\" id=\"u7df36999\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.config%3B%5Cn%5Cnimport%20org.springframework.amqp.core.*%3B%5Cnimport%20org.springframework.beans.factory.annotation.Qualifier%3B%5Cnimport%20org.springframework.context.annotation.Bean%3B%5Cnimport%20org.springframework.context.annotation.Configuration%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F3%2020%3A15%5Cn%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%20%20%E5%8F%91%E5%B8%83%E7%A1%AE%E8%AE%A4%20%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89%5Cn%20*%2F%5Cn%40Configuration%5Cnpublic%20class%20ConfirmConfig%20%7B%5Cn%20%20%20%20%2F%2F%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_EXCHANGE_NAME%20%3D%20%5C%22confirm_exchange%5C%22%3B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_QUEUE_NAME%20%3D%20%5C%22confirm_queue%5C%22%3B%5Cn%20%20%20%20%2F%2Frouting-key%5Cn%20%20%20%20public%20static%20final%20String%20CONFIRM_ROUTING_KEY%20%3D%20%5C%22key1%5C%22%3B%5Cn%20%20%20%20%2F%2F%20--------------------------%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA---------------------------------%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20public%20static%20final%20String%20BACKUP_EXCHANGE_NAME%20%3D%20%5C%22backup_exchange%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20BACKUP_QUEUE_NAME%20%3D%20%5C%22backup_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%5Cn%20%20%20%20public%20static%20final%20String%20WARNING_QUEUE_NAME%20%3D%20%5C%22warning_queue%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F--------------------------------------------------------------------%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E7%A1%AE%E8%AE%A4%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%88%E8%A6%81%E8%BD%AC%E5%8F%91%E5%88%B0%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20DirectExchange%20confirmExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(true)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.withArgument(%5C%22alternate-exchange%5C%22%2C%20BACKUP_EXCHANGE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20confirmQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(CONFIRM_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20queueBindingExchange(%40Qualifier(%5C%22confirmQueue%5C%22)%20Queue%20confirmQueue%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Qualifier(%5C%22confirmExchange%5C%22)%20DirectExchange%20confirmExchange)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20FanoutExchange%20backupExchange()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20FanoutExchange(BACKUP_EXCHANGE_NAME)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20backupQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(BACKUP_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Queue%20warningQueue()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20QueueBuilder.durable(WARNING_QUEUE_NAME).build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%EF%BC%88%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%A4%87%E4%BB%BD%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20backupQueueBindingBackupExchange(%40Qualifier(%5C%22backupExchange%5C%22)%20FanoutExchange%20backupExchange%2C%20%40Qualifier(%5C%22backupQueue%5C%22)%20Queue%20backupQueue)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(backupQueue).to(backupExchange)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%E7%BB%91%E5%AE%9A%EF%BC%88%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E6%8A%A5%E8%AD%A6%E9%98%9F%E5%88%97%EF%BC%89%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Binding%20warningQueueBindingBackupExchange(%40Qualifier(%5C%22backupExchange%5C%22)%20FanoutExchange%20backupExchange%2C%20%40Qualifier(%5C%22warningQueue%5C%22)%20Queue%20warningQueue)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20BindingBuilder.bind(warningQueue).to(backupExchange)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227e31c035%22%7D\"></card><p data-lake-id=\"u2d96580e\" id=\"u2d96580e\"><br></p><ol list=\"u2e9dedfa\" start=\"2\"><li fid=\"ufdf85b68\" data-lake-id=\"ub0f9ce9a\" id=\"ub0f9ce9a\"><span data-lake-id=\"ua927c9ba\" id=\"ua927c9ba\">消费者（报警消费者）</span></li></ol><p data-lake-id=\"u699010ce\" id=\"u699010ce\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.springbootrabbitmq.consumer%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.springbootrabbitmq.config.ConfirmConfig%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.amqp.core.Message%3B%5Cnimport%20org.springframework.amqp.rabbit.annotation.RabbitListener%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F12%2F4%209%3A10%5Cn%20*%20%E6%8A%A5%E8%AD%A6%E6%B6%88%E8%B4%B9%E8%80%85%5Cn%20*%2F%5Cn%40Component%5Cn%40Slf4j%5Cnpublic%20class%20WarningConsumer%20%7B%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%40RabbitListener(queues%20%3D%20ConfirmConfig.WARNING_QUEUE_NAME)%5Cn%20%20%20%20public%20void%20receiveWarningMsg(Message%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20msg%20%3D%20new%20String(message.getBody())%3B%5Cn%20%20%20%20%20%20%20%20log.error(%5C%22%E6%8A%A5%E8%AD%A6%E5%8F%91%E7%8E%B0%E4%B8%8D%E5%8F%AF%E8%B7%AF%E7%94%B1%E6%B6%88%E6%81%AF%EF%BC%9A%7B%7D%5C%22%2C%20msg)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2235bc7912%22%7D\"></card><p data-lake-id=\"ud84928fa\" id=\"ud84928fa\"><br></p><p data-lake-id=\"ue7878fb1\" id=\"ue7878fb1\"><span data-lake-id=\"ud8e024bd\" id=\"ud8e024bd\">发送请求：http://localhost:8080/confirm/sendMessage/大家好 1<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638581402507-07326d95-5109-4750-b3ab-c4751b23d55d.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D263%26id%3Dudc9907e1%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D263%26originWidth%3D1171%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D75848%26status%3Ddone%26style%3Dnone%26taskId%3Du7fb8b716-7979-4acf-b11c-fe1cb99bebd%26title%3D%26width%3D1171%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1171%2C%22originHeight%22%3A263%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23313d44%22%2C%22id%22%3A%22Lep12%22%7D\"></card></p><p data-lake-id=\"uc9ac1a25\" id=\"uc9ac1a25\"><br></p><blockquote data-lake-id=\"u591724e9\" id=\"u591724e9\"><p data-lake-id=\"ud9d05a36\" id=\"ud9d05a36\"><strong><span data-lake-id=\"u1e4adb4e\" id=\"u1e4adb4e\">备份交换机的优先级高于回退消息、</span></strong></p></blockquote><p data-lake-id=\"ua078c614\" id=\"ua078c614\"><br></p><p data-lake-id=\"uab27aa2a\" id=\"uab27aa2a\"><br></p><p data-lake-id=\"ud02d49fe\" id=\"ud02d49fe\"><br></p><h2 data-lake-id=\"c06ec42e\" id=\"c06ec42e\"><span data-lake-id=\"u7369f8e6\" id=\"u7369f8e6\">其他知识点</span></h2><p data-lake-id=\"u4f098a02\" id=\"u4f098a02\"><br></p><p data-lake-id=\"u3abc395c\" id=\"u3abc395c\"><br></p><p data-lake-id=\"u471eac83\" id=\"u471eac83\"><br></p><h3 data-lake-id=\"71a92fdf\" id=\"71a92fdf\"><span data-lake-id=\"u20dc07dc\" id=\"u20dc07dc\">幂等性</span></h3><p data-lake-id=\"u648dd420\" id=\"u648dd420\"><br></p><p data-lake-id=\"u8e5b1edb\" id=\"u8e5b1edb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638581856478-4611604a-34c1-486b-a3b7-c809f3d94f0e.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D620%26id%3Dua03a1a2a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D620%26originWidth%3D977%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D628166%26status%3Ddone%26style%3Dnone%26taskId%3Du3bbefde1-d01a-481e-b831-abe2598835f%26title%3D%26width%3D977%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A977%2C%22originHeight%22%3A620%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c4c3c0%22%2C%22id%22%3A%22pWlKw%22%7D\"></card><span data-lake-id=\"ude9d2f3b\" id=\"ude9d2f3b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582165848-9189cc73-c68b-4631-b30d-dad30387a032.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D523%26id%3Du37f187c9%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D523%26originWidth%3D1001%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D609037%26status%3Ddone%26style%3Dnone%26taskId%3Dudd6ff171-0753-4d6f-a510-a8761c65fcb%26title%3D%26width%3D1001%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1001%2C%22originHeight%22%3A523%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ccc9c2%22%2C%22id%22%3A%22o6DXP%22%7D\"></card></p><p data-lake-id=\"u2dbfadbc\" id=\"u2dbfadbc\"><br></p><p data-lake-id=\"ubcb1ea0b\" id=\"ubcb1ea0b\"><br></p><p data-lake-id=\"u62eecae6\" id=\"u62eecae6\"><br></p><h3 data-lake-id=\"507580b5\" id=\"507580b5\"><span data-lake-id=\"u3de3316a\" id=\"u3de3316a\">优先级队列</span></h3><p data-lake-id=\"u7da11996\" id=\"u7da11996\"><br></p><p data-lake-id=\"u3cc63c54\" id=\"u3cc63c54\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582363595-025332ba-94e1-4485-b6ab-e0542d69fab7.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D326%26id%3Du83200fbd%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D326%26originWidth%3D987%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D447217%26status%3Ddone%26style%3Dnone%26taskId%3Dueea7db03-7906-4cef-baef-0ebe50a0185%26title%3D%26width%3D987%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A987%2C%22originHeight%22%3A326%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cccbc8%22%2C%22id%22%3A%22h3cca%22%7D\"></card><span data-lake-id=\"u87ffed88\" id=\"u87ffed88\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638582579936-dd221c3d-efc6-4e4b-b854-6667d27682a1.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D343%26id%3Du3930b1c7%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D402%26originWidth%3D1186%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D288467%26status%3Ddone%26style%3Dnone%26taskId%3Du70a2eadf-0b86-470c-a5a8-b7d8f612ad3%26title%3D%26width%3D1010.9896240234375%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1186%2C%22originHeight%22%3A402%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f2f2%22%2C%22id%22%3A%22WVQYU%22%7D\"></card><span data-lake-id=\"u5e870bf4\" id=\"u5e870bf4\"><br /></span><span data-lake-id=\"u54768020\" id=\"u54768020\">实现优先级:</span></p><p data-lake-id=\"u6cc05b3e\" id=\"u6cc05b3e\"><br></p><ol list=\"u3b2bd50a\"><li fid=\"uc81d90cd\" data-lake-id=\"ua6331a27\" id=\"ua6331a27\"><span data-lake-id=\"ue8e9a456\" id=\"ue8e9a456\">生产者：</span></li></ol><p data-lake-id=\"ua01e5a8f\" id=\"ua01e5a8f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.AMQP%3B%5Cnimport%20com.rabbitmq.client.Channel%3B%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F28%2022%3A15%5Cn%20*%20%E7%94%9F%E4%BA%A7%E8%80%85%20%EF%BC%9A%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Producer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%2F%2F%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%8E%82ip%20%20%E8%BF%9E%E6%8E%A5rabbitmq%E7%9A%84%E9%98%9F%E5%88%97%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E6%88%B7%E5%90%8D%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E5%AF%86%E7%A0%81%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%5Cn%2F%2F%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E4%BF%A1%E9%81%93%5Cn%2F%2F%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%EF%BC%9B1.%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%202.%E9%98%9F%E5%88%97%E9%87%8C%E9%9D%A2%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%90%A6%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%A3%81%E7%9B%98%EF%BC%89%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%88%E4%B8%8D%E6%8C%81%E4%B9%85%E5%8C%96false%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%20%20%20%20%20%203.%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E5%8F%AA%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E6%98%AF%E5%90%A6%E6%B6%88%E6%81%AF%E7%8B%AC%E6%9C%89%EF%BC%8Ctrue%E5%8F%AA%E5%85%81%E8%AE%B8%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E8%BF%9B%E8%A1%8C%E6%B6%88%E8%B4%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AFfalse%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%A4%9A%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%204.%20%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%B6%88%E8%B4%B9%E8%80%85%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E5%90%8E%EF%BC%8C%E8%AF%A5%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Ctrue%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8Cfalse%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%205.%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%EF%BC%88%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF......%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20arguments%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%AE%98%E6%96%B9%E5%85%81%E8%AE%B8%E6%98%AF0-255%E4%B9%8B%E9%97%B4%E3%80%82%E6%AD%A4%E5%A4%84%E8%AE%BE%E7%BD%AE10.%20%E5%85%81%E8%AE%B8%E4%BC%98%E5%85%88%E7%BA%A7%E8%8C%83%E5%9B%B4%E4%B8%BA0-10%20%20%20%E4%B8%8D%E8%A6%81%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%A4%A7%20%20%20%E6%B5%AA%E8%B4%B9CPU%E4%B8%8E%E5%86%85%E5%AD%98%5Cn%20%20%20%20%20%20%20%20arguments.put(%5C%22x-max-priority%5C%22%2C%2010)%3B%5Cn%20%20%20%20%20%20%20%20channel.queueDeclare(QUEUE_NAME%2C%20true%2C%20false%2C%20false%2C%20arguments)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%91%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%2011%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20message%20%3D%20%5C%22info%5C%22%20%2B%20i%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%3D%3D%205)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20AMQP.BasicProperties%20properties%20%3D%20new%20AMQP.BasicProperties().builder().priority(5).build()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20properties%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20channel.basicPublish(%5C%22%5C%22%2C%20QUEUE_NAME%2C%20null%2C%20message.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%20%E5%8F%91%E9%80%81%E5%88%B0%E5%93%AA%E4%B8%AA%E4%BA%A4%E6%8D%A2%E6%9C%BA%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E8%B7%AF%E7%94%B1%E7%9A%84key%E5%80%BC%E6%98%AF%E5%93%AA%E4%B8%AA%EF%BC%8C%E6%9C%AC%E6%AC%A1%E6%98%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E5%AE%8C%E6%AF%95%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22e42f278b%22%7D\"></card><p data-lake-id=\"uc6f9bdd8\" id=\"uc6f9bdd8\"><br></p><p data-lake-id=\"ue80f4739\" id=\"ue80f4739\"><span data-lake-id=\"ub89a1ea2\" id=\"ub89a1ea2\">启动生产者：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584428018-a99005d9-2193-463c-9f45-3f72656510ca.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D245%26id%3Du9109bfc5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D245%26originWidth%3D673%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D24479%26status%3Ddone%26style%3Dnone%26taskId%3Du0a4a6f5a-f03f-4ab3-8fcc-d9bdc327aad%26title%3D%26width%3D673%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A673%2C%22originHeight%22%3A245%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232d3940%22%2C%22id%22%3A%22shKB3%22%7D\"></card></p><p data-lake-id=\"u291a7eb3\" id=\"u291a7eb3\"><br></p><h3 data-lake-id=\"07eab7c1\" id=\"07eab7c1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584267331-0bf02c8d-6536-43a8-aa18-ee5f4ed82255.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D500%26id%3DAvLAP%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D500%26originWidth%3D1065%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D74831%26status%3Ddone%26style%3Dnone%26taskId%3Du77c77f80-cfec-453b-bc9f-f82bf26b07c%26title%3D%26width%3D1065%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1065%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f0eeed%22%2C%22id%22%3A%22cIQXz%22%7D\"></card></h3><p data-lake-id=\"ucb9b4527\" id=\"ucb9b4527\"><br></p><ol list=\"ufc7ca6f8\" start=\"2\"><li fid=\"ua7a7b9eb\" data-lake-id=\"u5b439607\" id=\"u5b439607\"><span data-lake-id=\"u556ed9c1\" id=\"u556ed9c1\">消费者 :</span></li></ol><p data-lake-id=\"u293cdbaa\" id=\"u293cdbaa\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.atguigu.rabbitmq.one%3B%5Cn%5Cnimport%20com.atguigu.rabbitmq.utils.RabbitMqUtils%3B%5Cnimport%20com.rabbitmq.client.*%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.util.Arrays%3B%5Cnimport%20java.util.concurrent.TimeoutException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20LiFang%5Cn%20*%20%40version%201.0%5Cn%20*%20%40since%202021%2F11%2F29%2015%3A04%5Cn%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%3A%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20*%2F%5Cnpublic%20class%20Consumer%20%7B%5Cn%20%20%20%20%2F%2F%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20public%20static%20final%20String%20QUEUE_NAME%20%3D%20%5C%22hello1%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20IOException%2C%20TimeoutException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%8E%82%5Cn%2F%2F%20%20%20%20%20%20%20%20ConnectionFactory%20factory%20%3D%20new%20ConnectionFactory()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setHost(%5C%2259.110.171.189%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setUsername(%5C%22admin%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20factory.setPassword(%5C%22123%5C%22)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Connection%20connection%20%3D%20factory.newConnection()%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20connection.createChannel()%3B%5Cn%20%20%20%20%20%20%20%20Channel%20channel%20%3D%20RabbitMqUtils.getChannel()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A3%B0%E6%98%8E%20%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF(%E6%88%90%E5%8A%9F%E5%90%8E%E7%9A%84%E5%9B%9E%E8%B0%83)%5Cn%20%20%20%20%20%20%20%20DeliverCallback%20deliverCallback%20%3D%20(consumerTag%2C%20message)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(new%20String(message.getBody()))%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%8F%96%E6%B6%88%E6%B6%88%E6%81%AF%E6%97%B6%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20CancelCallback%20cancelCallback%20%3D%20consumerTag%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E8%A2%AB%E4%B8%AD%E6%96%AD%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20*%201.%E6%B6%88%E8%B4%B9%E5%93%AA%E4%B8%AA%E9%98%9F%E5%88%97%5Cn%20%20%20%20%20%20%20%20%20*%202.%20%E6%B6%88%E8%B4%B9%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E6%98%AF%E5%90%A6%E8%A6%81%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%EF%BC%8Ctrue%E4%BB%A3%E8%A1%A8%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%2Cfalse%E4%BB%A3%E8%A1%A8%E6%89%8B%E5%8A%A8%E5%BA%94%E7%AD%94%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%203.%20%E6%B6%88%E8%B4%B9%E8%80%85%E6%9C%AA%E6%88%90%E5%8A%9F%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20*%204.%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%96%E6%B6%88%E6%B6%88%E8%B4%B9%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20channel.basicConsume(QUEUE_NAME%2C%20true%2C%20deliverCallback%2C%20cancelCallback)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2281930e95%22%7D\"></card><p data-lake-id=\"u16cfd581\" id=\"u16cfd581\"><br></p><p data-lake-id=\"ud1908c6e\" id=\"ud1908c6e\"><span data-lake-id=\"ucb8356bd\" id=\"ucb8356bd\">启动消费者，<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584610103-d784c402-b9b7-4321-80d9-c4b95990f410.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D346%26id%3Du91a8ee8e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D346%26originWidth%3D652%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D36450%26status%3Ddone%26style%3Dnone%26taskId%3Du90a3da53-d612-4152-b8b6-157c3e789ca%26title%3D%26width%3D652%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A652%2C%22originHeight%22%3A346%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232b373e%22%2C%22id%22%3A%22UEHzd%22%7D\"></card></p><p data-lake-id=\"u87611f1d\" id=\"u87611f1d\"><br></p><h3 data-lake-id=\"8508a884\" id=\"8508a884\"><span data-lake-id=\"u855e9604\" id=\"u855e9604\">惰性队列</span></h3><p data-lake-id=\"uc5f84afb\" id=\"uc5f84afb\"><br></p><p data-lake-id=\"u0b31325e\" id=\"u0b31325e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584657059-9bf42f28-e7a0-4c4f-8a39-c56038bd0071.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D425%26id%3Dud4e3da7e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D425%26originWidth%3D993%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D597255%26status%3Ddone%26style%3Dnone%26taskId%3Du2ff8ea80-3715-4c63-a718-4d71e1b8488%26title%3D%26width%3D993%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A993%2C%22originHeight%22%3A425%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d0cfca%22%2C%22id%22%3A%22wMAkZ%22%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638584904322-348e89b5-e2f2-4df0-ba11-7540a061f849.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D613%26id%3Du9cab5578%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D613%26originWidth%3D1175%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D404748%26status%3Ddone%26style%3Dnone%26taskId%3Duc0905b86-a7ec-4a0f-8a69-356a47ad688%26title%3D%26width%3D1175%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1175%2C%22originHeight%22%3A613%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f3f3%22%2C%22id%22%3A%22NaNR3%22%7D\"></card><span data-lake-id=\"u64172734\" id=\"u64172734\"><br /></span><span data-lake-id=\"uba38271b\" id=\"uba38271b\">惰性队列执行性能不太好，因此默认情况下不使用惰性队列，而使用正常队列。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638585096408-ecb74216-dfa9-41e3-b7bd-bd5236b2c1da.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D431%26id%3Du4ab29e59%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D431%26originWidth%3D967%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D466179%26status%3Ddone%26style%3Dnone%26taskId%3Dub1da4c7a-e46a-44f7-9b2f-e5129f4a839%26title%3D%26width%3D967%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A967%2C%22originHeight%22%3A431%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cdccc9%22%2C%22id%22%3A%22ZtuGu%22%7D\"></card><span data-lake-id=\"u65e4732c\" id=\"u65e4732c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638585305462-e73859d4-5121-406a-b308-57cede7f1bac.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D413%26id%3Duf8c1b8a8%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D413%26originWidth%3D966%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D247424%26status%3Ddone%26style%3Dnone%26taskId%3Dua29dd158-1851-4974-bd9b-3c01a9c0ea5%26title%3D%26width%3D966%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A966%2C%22originHeight%22%3A413%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f4%22%2C%22id%22%3A%22wFSJu%22%7D\"></card></p><p data-lake-id=\"u76b838dd\" id=\"u76b838dd\"><br></p><ul list=\"ud877048a\"><li fid=\"u61f80eea\" data-lake-id=\"u4d99bf08\" id=\"u4d99bf08\"><span data-lake-id=\"u181db35b\" id=\"u181db35b\">惰性队列从</span><strong><span data-lake-id=\"ue23e1779\" id=\"ue23e1779\">磁盘</span></strong><span data-lake-id=\"u40148889\" id=\"u40148889\">上读取消息，因此消费消息比较慢，但是内存消耗较小，在内存中只存储一些索引。一旦需要消费这些消息时，惰性队列会通过内存中的索引，去读取磁盘中相应的消息，到内存，再消费消息。</span></li></ul><ul list=\"u055673c0\"><li fid=\"ud503864a\" data-lake-id=\"u07689e77\" id=\"u07689e77\"><span data-lake-id=\"ue0dc9030\" id=\"ue0dc9030\">正常队列从</span><strong><span data-lake-id=\"u2d44c37e\" id=\"u2d44c37e\">内存</span></strong><span data-lake-id=\"ub2ed9b46\" id=\"ub2ed9b46\">中读取消息，因此消费消息比较快，但是内存消耗较大。</span></li></ul><p data-lake-id=\"u27df5c54\" id=\"u27df5c54\"><br></p><h2 data-lake-id=\"23eaf825\" id=\"23eaf825\"><span data-lake-id=\"u5a936f08\" id=\"u5a936f08\">rabbitmq 集群</span></h2><p data-lake-id=\"u5557a767\" id=\"u5557a767\"><br></p><p data-lake-id=\"u0ad69f32\" id=\"u0ad69f32\"><br></p><p data-lake-id=\"u20e292f4\" id=\"u20e292f4\"><br></p><h3 data-lake-id=\"c0131d2a\" id=\"c0131d2a\"><span data-lake-id=\"u57794d8d\" id=\"u57794d8d\">集群原理</span></h3><p data-lake-id=\"u5c043ed3\" id=\"u5c043ed3\"><br></p><p data-lake-id=\"udb2f051a\" id=\"udb2f051a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638586666884-b99e8e77-81ef-4547-a9cd-1dcd00e86009.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D501%26id%3Du84ce9d05%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D501%26originWidth%3D1025%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D171726%26status%3Ddone%26style%3Dnone%26taskId%3Dud7aa0990-8e0c-4e31-9dd1-c6d20007401%26title%3D%26width%3D1025%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1025%2C%22originHeight%22%3A501%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22hjXVB%22%7D\"></card></p><p data-lake-id=\"u13f38595\" id=\"u13f38595\"><br></p><h3 data-lake-id=\"b80e581a\" id=\"b80e581a\"><span data-lake-id=\"ua8738995\" id=\"ua8738995\">镜像队列（备份）</span></h3><p data-lake-id=\"u18d348a8\" id=\"u18d348a8\"><br></p><p data-lake-id=\"u638524b5\" id=\"u638524b5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638587610363-c97ef89e-768e-4278-a087-89f20e211145.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D348%26id%3Due8695270%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D348%26originWidth%3D981%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D453959%26status%3Ddone%26style%3Dnone%26taskId%3Due9f78068-c45e-4cc9-a3e0-595ae6c7337%26title%3D%26width%3D981%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A981%2C%22originHeight%22%3A348%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c9c8c5%22%2C%22id%22%3A%22FTNYI%22%7D\"></card></p><p data-lake-id=\"ube043d14\" id=\"ube043d14\"><br></p><h3 data-lake-id=\"3702723f\" id=\"3702723f\"><span data-lake-id=\"u6b2b8ea2\" id=\"u6b2b8ea2\">高可用负载均衡</span></h3><p data-lake-id=\"u442f2d09\" id=\"u442f2d09\"><br></p><p data-lake-id=\"u2e5b02e2\" id=\"u2e5b02e2\"><span data-lake-id=\"ufc900772\" id=\"ufc900772\">若节点 1 宕机了，生产者需要连接节点 2 或节点 3。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588031855-ab97c0f3-9861-4222-b593-0a4dbfbf566d.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D754%26id%3Du0c60fb59%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D754%26originWidth%3D1028%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D344345%26status%3Ddone%26style%3Dnone%26taskId%3Duaef85042-099b-42a3-8caf-268a89b7438%26title%3D%26width%3D1028%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1028%2C%22originHeight%22%3A754%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22XmCHx%22%7D\"></card><span data-lake-id=\"u6247fda2\" id=\"u6247fda2\"><br /></span><span data-lake-id=\"uf4b7c837\" id=\"uf4b7c837\">出现问题：生产者无法变更 rabbitmq 的 ip，此时需要借助外力 Haproxy。</span></p><p data-lake-id=\"u7f61765f\" id=\"u7f61765f\"><br></p><h4 data-lake-id=\"ea97af39\" id=\"ea97af39\"><span data-lake-id=\"u8b712db1\" id=\"u8b712db1\">Haproxy 实现高可用 负载均衡（高并发）</span></h4><p data-lake-id=\"ubf6aa704\" id=\"ubf6aa704\"><br></p><p data-lake-id=\"ud147c6a9\" id=\"ud147c6a9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588332155-384a9066-f6ed-434c-bd8d-a08678795b99.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D177%26id%3Du91155287%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D177%26originWidth%3D973%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D240431%26status%3Ddone%26style%3Dnone%26taskId%3Du9a4dff8d-f824-447c-b845-2962ddc0650%26title%3D%26width%3D973%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A973%2C%22originHeight%22%3A177%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dadad7%22%2C%22id%22%3A%22BHuXj%22%7D\"></card><span data-lake-id=\"u550eb749\" id=\"u550eb749\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588403571-837d2496-d169-4b00-aa3c-4459e5dfd616.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D644%26id%3Du63b0c105%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D644%26originWidth%3D740%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D224363%26status%3Ddone%26style%3Dnone%26taskId%3Du400f5630-901e-4db7-8556-6d72a1f206a%26title%3D%26width%3D740%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A740%2C%22originHeight%22%3A644%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22FRrD8%22%7D\"></card><span data-lake-id=\"uc1db626c\" id=\"uc1db626c\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638588495639-57e1823e-e317-48f1-bd99-4a64ab26b8b3.png%23clientId%3Dueb126df1-e3fc-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D711%26id%3Duefaa64c3%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D711%26originWidth%3D860%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D371827%26status%3Ddone%26style%3Dnone%26taskId%3Du8f30ca6f-4949-4c9d-899d-b31600baa56%26title%3D%26width%3D860%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A860%2C%22originHeight%22%3A711%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f5f5%22%2C%22id%22%3A%22K5Fpn%22%7D\"></card></p><p data-lake-id=\"ub8c1111e\" id=\"ub8c1111e\"><br></p><h2 data-lake-id=\"80fc5d12\" id=\"80fc5d12\"><span data-lake-id=\"u0e79ddbd\" id=\"u0e79ddbd\">联合交换机</span></h2><p data-lake-id=\"uf8765abf\" id=\"uf8765abf\"><br></p><p data-lake-id=\"u19f4fde9\" id=\"u19f4fde9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638600972390-f8eabb13-fdba-432b-8b93-c4798757e13e.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D660%26id%3Du1565c7a2%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D660%26originWidth%3D1136%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D882067%26status%3Ddone%26style%3Dnone%26taskId%3Du40ae3ed4-1bbc-4baa-b912-40f55e8b353%26title%3D%26width%3D1136%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1136%2C%22originHeight%22%3A660%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23cecac2%22%2C%22id%22%3A%22FkHCS%22%7D\"></card><span data-lake-id=\"ue7c4b67b\" id=\"ue7c4b67b\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638601768985-91857261-fe17-4687-bc9f-f8d9daf1a364.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D524%26id%3Duafeaba48%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D524%26originWidth%3D1115%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D307899%26status%3Ddone%26style%3Dnone%26taskId%3Du4499a665-a618-4138-a2f2-5bdf1dbaca0%26title%3D%26width%3D1115%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1115%2C%22originHeight%22%3A524%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22FgJli%22%7D\"></card><span data-lake-id=\"u07d151a2\" id=\"u07d151a2\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638601930969-0c445ecb-7e66-43cd-a7d1-3aa8c76f884d.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D581%26id%3Du6d4c749b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D581%26originWidth%3D505%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D221677%26status%3Ddone%26style%3Dnone%26taskId%3Duf8d981fd-837f-4eb6-83f6-a7deba0a018%26title%3D%26width%3D505%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A505%2C%22originHeight%22%3A581%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22NxTl9%22%7D\"></card><span data-lake-id=\"u4f114bbf\" id=\"u4f114bbf\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602088334-f76d8ba1-5c6d-4280-87c8-b7d58d42f902.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D506%26id%3Du4b7146f5%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D506%26originWidth%3D976%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D158537%26status%3Ddone%26style%3Dnone%26taskId%3Du64d80530-7388-4c12-9d3b-48d90765e0b%26title%3D%26width%3D976%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A976%2C%22originHeight%22%3A506%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfbfb%22%2C%22id%22%3A%22oVYwK%22%7D\"></card><span data-lake-id=\"ufecf6f23\" id=\"ufecf6f23\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602110103-8ee2df46-7982-4b08-a6c8-e4d9c701b69f.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D666%26id%3Du65df8122%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D666%26originWidth%3D933%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D302115%26status%3Ddone%26style%3Dnone%26taskId%3Du970ef30c-4b50-4327-928e-6bf0cdbc242%26title%3D%26width%3D933%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A933%2C%22originHeight%22%3A666%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f5f5%22%2C%22id%22%3A%22A9wRm%22%7D\"></card></p><p data-lake-id=\"u6827fec5\" id=\"u6827fec5\"><br></p><h2 data-lake-id=\"997a4ba0\" id=\"997a4ba0\"><span data-lake-id=\"u484fad48\" id=\"u484fad48\">联邦队列</span></h2><p data-lake-id=\"ud2dd89e2\" id=\"ud2dd89e2\"><br></p><p data-lake-id=\"ufbf7e7f8\" id=\"ufbf7e7f8\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638602602857-2efc1842-e9c7-409e-a302-2b4c63e92027.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D833%26id%3Du3d500d40%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D833%26originWidth%3D1312%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D553687%26status%3Ddone%26style%3Dnone%26taskId%3Du77ecfe28-0a6d-4318-bc8e-c80d6183ecc%26title%3D%26width%3D1312%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1312%2C%22originHeight%22%3A833%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f6f6%22%2C%22id%22%3A%22qvMwP%22%7D\"></card><span data-lake-id=\"u2cc42176\" id=\"u2cc42176\"><br /></span><span data-lake-id=\"u43963498\" id=\"u43963498\">两个不同地区数据同步。<br /></span><span data-lake-id=\"ufaa05362\" id=\"ufaa05362\"> </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603240478-ba4a3a39-d3dc-41b3-9ee9-c8d9f2718ff9.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D551%26id%3Du0dc6d91b%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D551%26originWidth%3D1149%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D244288%26status%3Ddone%26style%3Dnone%26taskId%3Du65c1251d-b002-4909-ae1d-f27aa9d85ee%26title%3D%26width%3D1149%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1149%2C%22originHeight%22%3A551%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfaf9%22%2C%22id%22%3A%22Rmak1%22%7D\"></card></p><p data-lake-id=\"u6d139d21\" id=\"u6d139d21\"><br></p><h2 data-lake-id=\"Shovel\" id=\"Shovel\"><span data-lake-id=\"uc6c63b07\" id=\"uc6c63b07\">Shovel</span></h2><p data-lake-id=\"u8914465d\" id=\"u8914465d\"><br></p><p data-lake-id=\"ufcf1b723\" id=\"ufcf1b723\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603352779-28d006e0-d330-4802-935c-040341c1ca8d.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D324%26id%3Duc852da4a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D324%26originWidth%3D1287%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D568699%26status%3Ddone%26style%3Dnone%26taskId%3Du2b770501-53fa-4cbc-a428-000590e2c17%26title%3D%26width%3D1287%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1287%2C%22originHeight%22%3A324%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d1cfc8%22%2C%22id%22%3A%22fxL0i%22%7D\"></card><span data-lake-id=\"udab537c0\" id=\"udab537c0\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603460089-03466d04-df20-4ab2-8968-f1b5ef5905ca.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D409%26id%3Dua502f49e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D409%26originWidth%3D871%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D188661%26status%3Ddone%26style%3Dnone%26taskId%3Du48a08d45-4dad-40e0-9723-55db3e3ef79%26title%3D%26width%3D871%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A871%2C%22originHeight%22%3A409%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f7%22%2C%22id%22%3A%22lh1tz%22%7D\"></card><span data-lake-id=\"ucad6ce11\" id=\"ucad6ce11\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603378352-15aca4d9-af9b-48c1-b796-60a86b637ebd.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D667%26id%3Duec9ad770%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D667%26originWidth%3D864%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D266940%26status%3Ddone%26style%3Dnone%26taskId%3Du8acd6a6e-3ed2-4306-8639-2eeb16612c3%26title%3D%26width%3D864%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A864%2C%22originHeight%22%3A667%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22jpTqS%22%7D\"></card><span data-lake-id=\"u4fdf1f0b\" id=\"u4fdf1f0b\"><br /></span><span data-lake-id=\"uc8cf98b9\" id=\"uc8cf98b9\"> </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603594801-6bd296a5-c23b-418f-a94e-5261833d5605.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D592%26id%3Du903663bb%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D592%26originWidth%3D994%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D194438%26status%3Ddone%26style%3Dnone%26taskId%3Dud10d2c55-8f5b-4b88-b096-8942402c361%26title%3D%26width%3D994%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A994%2C%22originHeight%22%3A592%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfbfb%22%2C%22id%22%3A%22oSJ3T%22%7D\"></card><span data-lake-id=\"u6738e9dc\" id=\"u6738e9dc\"><br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F2324645%2F1638603639753-9ae10564-7bad-4528-afd2-867c58d1f413.png%23clientId%3Du1823549f-f362-4%26crop%3D0%26crop%3D0%26crop%3D1%26crop%3D1%26from%3Dpaste%26height%3D121%26id%3Du71e6fa9c%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D121%26originWidth%3D1169%26originalType%3Dbinary%26ratio%3D1%26rotation%3D0%26showTitle%3Dfalse%26size%3D88867%26status%3Ddone%26style%3Dnone%26taskId%3Du55070310-f786-4b38-98ce-55db2f75ca1%26title%3D%26width%3D1169%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1169%2C%22originHeight%22%3A121%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efefef%22%2C%22id%22%3A%22Gjcgc%22%7D\"></card></p>",
    "public": 1,
    "status": 0,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-12-08T05:18:22.000Z",
    "deleted_at": null,
    "created_at": "2022-11-15T07:25:08.000Z",
    "updated_at": "2022-12-08T05:18:22.000Z",
    "published_at": "2022-11-17T09:02:58.000Z",
    "first_published_at": "2022-11-15T07:25:07.718Z",
    "word_count": 10500,
    "cover": null,
    "description": "---title: RabbitMQ学习笔记categories: 知识updated: 2021-11-05date: 2021-11-05tags: [RabbitMQ, 消息中间件]cover: https://gimg2.baidu.com/image_search/src=http%...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106185875,
    "slug": "ttl45poabauykgvt",
    "title": "npm与pnpm之对比",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "---<br />title: npm与pnpm之对比<br />categories: 知识<br />date: 2022-11-04<br />updated: 2022-11-04<br />tags: [前端工程化]<br />cover: https://img1.baidu.com/it/u=3855543578,1499410100&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=320<br />---\n<a name=\"a9201b98\"></a>\n## pnpm 中的问题\n\n- pnpm 的出现对于 npm 和 yarn 来说是一个比较彻底的改变，解决了很多 npm 安装依赖存在的问题，node_modules 过大、幽灵依赖。\n- pnpm 目前存在的限制在于它修改了文件的相对位置，将包和其依赖放在同一个 node_modules 下，这让一些使用了绝对路径和幽灵依赖的包在使用 pnpm 安装时会存在问题，不过 pnpm 也在解决这个问题，即通过软链接的形式将所有非工程直接依赖的包放在 .pnpm/node_modules 下，这样就解决了找不到包的问题，项目在迁移 pnpm 的话尽量可能会发现 pnpm i 后还有未安装的包，这个时候就要考虑是否引用了幽灵依赖。\n<a name=\"25f9c7fa\"></a>\n## 总结\npnpm 目前对于日常使用完全没问题，目前很多的类库还有框架都已经默认将 pnpm 作为安装工具，目前看来 pnpm 完全可以取代 npm。\n",
    "body_draft": "---<br />title: npm与pnpm之对比<br />categories: 知识<br />date: 2022-11-04<br />updated: 2022-11-04<br />tags: [前端工程化]<br />cover: https://img1.baidu.com/it/u=3855543578,1499410100&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=320<br />---\n<a name=\"a9201b98\"></a>\n## pnpm 中的问题\n\n- pnpm 的出现对于 npm 和 yarn 来说是一个比较彻底的改变，解决了很多 npm 安装依赖存在的问题，node_modules 过大、幽灵依赖。\n- pnpm 目前存在的限制在于它修改了文件的相对位置，将包和其依赖放在同一个 node_modules 下，这让一些使用了绝对路径和幽灵依赖的包在使用 pnpm 安装时会存在问题，不过 pnpm 也在解决这个问题，即通过软链接的形式将所有非工程直接依赖的包放在 .pnpm/node_modules 下，这样就解决了找不到包的问题，项目在迁移 pnpm 的话尽量可能会发现 pnpm i 后还有未安装的包，这个时候就要考虑是否引用了幽灵依赖。\n<a name=\"25f9c7fa\"></a>\n## 总结\npnpm 目前对于日常使用完全没问题，目前很多的类库还有框架都已经默认将 pnpm 作为安装工具，目前看来 pnpm 完全可以取代 npm。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uced5eb9a\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><p id=\"ue6754b5f\" class=\"ne-p\"><span class=\"ne-text\">title: npm与pnpm之对比<br /></span><span class=\"ne-text\">categories: 知识</span></p><p id=\"u11e8f298\" class=\"ne-p\"><span class=\"ne-text\">date: 2022-11-04</span></p><p id=\"ufa28653d\" class=\"ne-p\"><span class=\"ne-text\">updated: 2022-11-04<br /></span><span class=\"ne-text\">tags: [前端工程化]</span></p><p id=\"u46f64f88\" class=\"ne-p\"><span class=\"ne-text\">cover: </span><span class=\"ne-text\">https://img1.baidu.com/it/u=3855543578,1499410100&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=320</span></p><p id=\"u41d33b72\" class=\"ne-p\"><span class=\"ne-text\">---</span></p><h2 id=\"a9201b98\"><span class=\"ne-text\">pnpm 中的问题</span></h2><ul class=\"ne-ul\"><li id=\"u6bad533c\"><span class=\"ne-text\">pnpm 的出现对于 npm 和 yarn 来说是一个比较彻底的改变，解决了很多 npm 安装依赖存在的问题，node_modules 过大、幽灵依赖。</span></li></ul><ul class=\"ne-ul\"><li id=\"u82a5275a\"><span class=\"ne-text\">pnpm 目前存在的限制在于它修改了文件的相对位置，将包和其依赖放在同一个 node_modules 下，这让一些使用了绝对路径和幽灵依赖的包在使用 pnpm 安装时会存在问题，不过 pnpm 也在解决这个问题，即通过软链接的形式将所有非工程直接依赖的包放在 .pnpm/node_modules 下，这样就解决了找不到包的问题，项目在迁移 pnpm 的话尽量可能会发现 pnpm i 后还有未安装的包，这个时候就要考虑是否引用了幽灵依赖。</span></li></ul><h2 id=\"25f9c7fa\"><span class=\"ne-text\">总结</span></h2><p id=\"u01bd3634\" class=\"ne-p\"><span class=\"ne-text\">pnpm 目前对于日常使用完全没问题，目前很多的类库还有框架都已经默认将 pnpm 作为安装工具，目前看来 pnpm 完全可以取代 npm。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"uced5eb9a\" id=\"uced5eb9a\"><span data-lake-id=\"uc1f0ed81\" id=\"uc1f0ed81\">---</span></p><p data-lake-id=\"ue6754b5f\" id=\"ue6754b5f\"><span data-lake-id=\"ub9eccd20\" id=\"ub9eccd20\">title: npm与pnpm之对比<br /></span><span data-lake-id=\"ud3060c7d\" id=\"ud3060c7d\">categories: 知识</span></p><p data-lake-id=\"u11e8f298\" id=\"u11e8f298\"><span data-lake-id=\"ub085f112\" id=\"ub085f112\">date: 2022-11-04</span></p><p data-lake-id=\"ufa28653d\" id=\"ufa28653d\"><span data-lake-id=\"uaa946c43\" id=\"uaa946c43\">updated: 2022-11-04<br /></span><span data-lake-id=\"uc7eeea11\" id=\"uc7eeea11\">tags: [前端工程化]</span></p><p data-lake-id=\"u46f64f88\" id=\"u46f64f88\"><span data-lake-id=\"u70f212f1\" id=\"u70f212f1\">cover: </span><span data-lake-id=\"ua8b52326\" id=\"ua8b52326\">https://img1.baidu.com/it/u=3855543578,1499410100&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=320</span></p><p data-lake-id=\"u41d33b72\" id=\"u41d33b72\"><span data-lake-id=\"u1b220fe9\" id=\"u1b220fe9\">---</span></p><h2 data-lake-id=\"a9201b98\" id=\"a9201b98\"><span data-lake-id=\"udfb5e790\" id=\"udfb5e790\">pnpm 中的问题</span></h2><ul list=\"u61143ce0\"><li fid=\"u1bc8eab2\" data-lake-id=\"u6bad533c\" id=\"u6bad533c\"><span data-lake-id=\"ud07790f4\" id=\"ud07790f4\">pnpm 的出现对于 npm 和 yarn 来说是一个比较彻底的改变，解决了很多 npm 安装依赖存在的问题，node_modules 过大、幽灵依赖。</span></li></ul><ul list=\"u63ea7d71\"><li fid=\"u2e8a223c\" data-lake-id=\"u82a5275a\" id=\"u82a5275a\"><span data-lake-id=\"uead6eb92\" id=\"uead6eb92\">pnpm 目前存在的限制在于它修改了文件的相对位置，将包和其依赖放在同一个 node_modules 下，这让一些使用了绝对路径和幽灵依赖的包在使用 pnpm 安装时会存在问题，不过 pnpm 也在解决这个问题，即通过软链接的形式将所有非工程直接依赖的包放在 .pnpm/node_modules 下，这样就解决了找不到包的问题，项目在迁移 pnpm 的话尽量可能会发现 pnpm i 后还有未安装的包，这个时候就要考虑是否引用了幽灵依赖。</span></li></ul><h2 data-lake-id=\"25f9c7fa\" id=\"25f9c7fa\"><span data-lake-id=\"uafec90bc\" id=\"uafec90bc\">总结</span></h2><p data-lake-id=\"u01bd3634\" id=\"u01bd3634\"><span data-lake-id=\"u9e690dc6\" id=\"u9e690dc6\">pnpm 目前对于日常使用完全没问题，目前很多的类库还有框架都已经默认将 pnpm 作为安装工具，目前看来 pnpm 完全可以取代 npm。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"uced5eb9a\" id=\"uced5eb9a\"><span data-lake-id=\"uc1f0ed81\" id=\"uc1f0ed81\">---</span></p><p data-lake-id=\"ue6754b5f\" id=\"ue6754b5f\"><span data-lake-id=\"ub9eccd20\" id=\"ub9eccd20\">title: npm与pnpm之对比<br /></span><span data-lake-id=\"ud3060c7d\" id=\"ud3060c7d\">categories: 知识</span></p><p data-lake-id=\"u11e8f298\" id=\"u11e8f298\"><span data-lake-id=\"ub085f112\" id=\"ub085f112\">date: 2022-11-04</span></p><p data-lake-id=\"ufa28653d\" id=\"ufa28653d\"><span data-lake-id=\"uaa946c43\" id=\"uaa946c43\">updated: 2022-11-04<br /></span><span data-lake-id=\"uc7eeea11\" id=\"uc7eeea11\">tags: [前端工程化]</span></p><p data-lake-id=\"u46f64f88\" id=\"u46f64f88\"><span data-lake-id=\"u70f212f1\" id=\"u70f212f1\">cover: </span><span data-lake-id=\"ua8b52326\" id=\"ua8b52326\">https://img1.baidu.com/it/u=3855543578,1499410100&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=320</span></p><p data-lake-id=\"u41d33b72\" id=\"u41d33b72\"><span data-lake-id=\"u1b220fe9\" id=\"u1b220fe9\">---</span></p><h2 data-lake-id=\"a9201b98\" id=\"a9201b98\"><span data-lake-id=\"udfb5e790\" id=\"udfb5e790\">pnpm 中的问题</span></h2><ul list=\"u61143ce0\"><li fid=\"u1bc8eab2\" data-lake-id=\"u6bad533c\" id=\"u6bad533c\"><span data-lake-id=\"ud07790f4\" id=\"ud07790f4\">pnpm 的出现对于 npm 和 yarn 来说是一个比较彻底的改变，解决了很多 npm 安装依赖存在的问题，node_modules 过大、幽灵依赖。</span></li></ul><ul list=\"u63ea7d71\"><li fid=\"u2e8a223c\" data-lake-id=\"u82a5275a\" id=\"u82a5275a\"><span data-lake-id=\"uead6eb92\" id=\"uead6eb92\">pnpm 目前存在的限制在于它修改了文件的相对位置，将包和其依赖放在同一个 node_modules 下，这让一些使用了绝对路径和幽灵依赖的包在使用 pnpm 安装时会存在问题，不过 pnpm 也在解决这个问题，即通过软链接的形式将所有非工程直接依赖的包放在 .pnpm/node_modules 下，这样就解决了找不到包的问题，项目在迁移 pnpm 的话尽量可能会发现 pnpm i 后还有未安装的包，这个时候就要考虑是否引用了幽灵依赖。</span></li></ul><h2 data-lake-id=\"25f9c7fa\" id=\"25f9c7fa\"><span data-lake-id=\"uafec90bc\" id=\"uafec90bc\">总结</span></h2><p data-lake-id=\"u01bd3634\" id=\"u01bd3634\"><span data-lake-id=\"u9e690dc6\" id=\"u9e690dc6\">pnpm 目前对于日常使用完全没问题，目前很多的类库还有框架都已经默认将 pnpm 作为安装工具，目前看来 pnpm 完全可以取代 npm。</span></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-17T09:02:53.000Z",
    "deleted_at": null,
    "created_at": "2022-11-15T07:25:02.000Z",
    "updated_at": "2022-11-17T09:02:53.000Z",
    "published_at": "2022-11-17T09:02:53.000Z",
    "first_published_at": "2022-11-15T07:25:02.440Z",
    "word_count": 296,
    "cover": null,
    "description": "---title: npm与pnpm之对比categories: 知识date: 2022-11-04updated: 2022-11-04tags: [前端工程化]cover: https://img1.baidu.com/it/u=3855543578,1499410100&fm=253&...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 106185846,
    "slug": "uxc1tgefb4s1ftvl",
    "title": "hello-world",
    "book_id": 35046022,
    "book": {
      "id": 35046022,
      "type": "Book",
      "slug": "aiudvz",
      "name": "hexo-blog",
      "user_id": 2324645,
      "description": "杉菜酱子の博客",
      "creator_id": 2324645,
      "public": 1,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2022-12-13T01:32:04.380Z",
      "updated_at": "2022-12-13T01:32:04.000Z",
      "created_at": "2022-11-15T07:22:50.000Z",
      "namespace": "lifang-hmj24/aiudvz",
      "user": {
        "id": 2324645,
        "type": "User",
        "login": "lifang-hmj24",
        "name": "李芳",
        "description": "啦啦啦",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
        "books_count": 66,
        "public_books_count": 3,
        "followers_count": 0,
        "following_count": 5,
        "created_at": "2020-08-08T02:59:10.000Z",
        "updated_at": "2022-12-12T08:03:59.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 2324645,
    "creator": {
      "id": 2324645,
      "type": "User",
      "login": "lifang-hmj24",
      "name": "李芳",
      "description": "啦啦啦",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/2324645/1597130535124-avatar/6404390c-c4b2-4ab9-aa65-8728cc4a0ff4.png",
      "books_count": 66,
      "public_books_count": 3,
      "followers_count": 0,
      "following_count": 5,
      "created_at": "2020-08-08T02:59:10.000Z",
      "updated_at": "2022-12-12T08:03:59.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "--- <br />title: Hello World<br />date: 2021-7-21<br />updated: 2021-7-21<br />cover: https://img2.baidu.com/it/u=3458022152,1943714347&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=322<br />--- <br />[Welcome to [Hexo]([https://hexo.io/)!](https://hexo.io/)!) This is your very first post. Check [documentation]([https://hexo.io/docs/)](https://hexo.io/docs/)) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting]([https://hexo.io/docs/troubleshooting.html)](https://hexo.io/docs/troubleshooting.html)) or you can ask me on [GitHub]([https://github.com/hexojs/hexo/issues).](https://github.com/hexojs/hexo/issues).##)\n<a name=\"bEfxJ\"></a>\n## Quick Start\n<a name=\"MdMuP\"></a>\n### Create a new post \n``` <br />bash$ hexo new \"My New Post\" <br />``` <br />More info: [Writing]([https://hexo.io/docs/writing.html)](https://hexo.io/docs/writing.html)###)\n<a name=\"LxY6K\"></a>\n### Run server\n``` <br />bash$ hexo server<br />``` <br />More info: [Server]([https://hexo.io/docs/server.html)](https://hexo.io/docs/server.html)###)\n<a name=\"dRCiA\"></a>\n### Generate static files\n``` <br />bash$ hexo generate <br />``` <br />More info: [Generating]([https://hexo.io/docs/generating.html)###](https://hexo.io/docs/generating.html)###) Deploy to remote sites <br />``` <br />bash$ hexo deploy  <br />``` <br />More info: [Deployment]([https://hexo.io/docs/one-command-deployment.html)](https://hexo.io/docs/one-command-deployment.html))\n",
    "body_draft": "--- <br />title: Hello World<br />date: 2021-7-21<br />updated: 2021-7-21<br />cover: https://img2.baidu.com/it/u=3458022152,1943714347&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=322<br />--- <br />[Welcome to [Hexo]([https://hexo.io/)!](https://hexo.io/)!) This is your very first post. Check [documentation]([https://hexo.io/docs/)](https://hexo.io/docs/)) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting]([https://hexo.io/docs/troubleshooting.html)](https://hexo.io/docs/troubleshooting.html)) or you can ask me on [GitHub]([https://github.com/hexojs/hexo/issues).](https://github.com/hexojs/hexo/issues).##)\n<a name=\"bEfxJ\"></a>\n## Quick Start\n<a name=\"MdMuP\"></a>\n### Create a new post \n``` <br />bash$ hexo new \"My New Post\" <br />``` <br />More info: [Writing]([https://hexo.io/docs/writing.html)](https://hexo.io/docs/writing.html)###)\n<a name=\"LxY6K\"></a>\n### Run server\n``` <br />bash$ hexo server<br />``` <br />More info: [Server]([https://hexo.io/docs/server.html)](https://hexo.io/docs/server.html)###)\n<a name=\"dRCiA\"></a>\n### Generate static files\n``` <br />bash$ hexo generate <br />``` <br />More info: [Generating]([https://hexo.io/docs/generating.html)###](https://hexo.io/docs/generating.html)###) Deploy to remote sites <br />``` <br />bash$ hexo deploy  <br />``` <br />More info: [Deployment]([https://hexo.io/docs/one-command-deployment.html)](https://hexo.io/docs/one-command-deployment.html))\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ub483cecb\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"uc307a430\" class=\"ne-p\"><span class=\"ne-text\">title: Hello World</span></p><p id=\"u5d03c68a\" class=\"ne-p\"><span class=\"ne-text\">date: 2021-7-21</span></p><p id=\"uba824ddf\" class=\"ne-p\"><span class=\"ne-text\">updated: 2021-7-21</span></p><p id=\"uc581a144\" class=\"ne-p\"><span class=\"ne-text\">cover: https://img2.baidu.com/it/u=3458022152,1943714347&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=640&amp;h=322</span></p><p id=\"ufdf08c0c\" class=\"ne-p\"><span class=\"ne-text\">--- </span></p><p id=\"ucaaa8912\" class=\"ne-p\"><span class=\"ne-text\">[Welcome to [Hexo](</span><a href=\"https://hexo.io/)!\" data-href=\"https://hexo.io/)!\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/)!</span></a><span class=\"ne-text\"> This is your very first post. Check [documentation](</span><a href=\"https://hexo.io/docs/)\" data-href=\"https://hexo.io/docs/)\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/)</span></a><span class=\"ne-text\"> for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](</span><a href=\"https://hexo.io/docs/troubleshooting.html)\" data-href=\"https://hexo.io/docs/troubleshooting.html)\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/troubleshooting.html)</span></a><span class=\"ne-text\"> or you can ask me on [GitHub](</span><a href=\"https://github.com/hexojs/hexo/issues).##\" data-href=\"https://github.com/hexojs/hexo/issues).##\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://github.com/hexojs/hexo/issues).</span></a></p><h2 id=\"bEfxJ\"><span class=\"ne-text\">Quick Start</span></h2><h3 id=\"MdMuP\"><span class=\"ne-text\">Create a new post </span></h3><p id=\"u29ebda3b\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"ue1e7d183\" class=\"ne-p\"><span class=\"ne-text\">bash$ hexo new &quot;My New Post&quot; </span></p><p id=\"ufa5f4e80\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"u6d033f2c\" class=\"ne-p\"><span class=\"ne-text\">More info: [Writing](</span><a href=\"https://hexo.io/docs/writing.html)###\" data-href=\"https://hexo.io/docs/writing.html)###\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/writing.html)</span></a></p><h3 id=\"LxY6K\"><span class=\"ne-text\">Run server</span></h3><p id=\"u83e34453\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"udb57ce59\" class=\"ne-p\"><span class=\"ne-text\">bash$ hexo server</span></p><p id=\"u806543ce\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"u3baa257b\" class=\"ne-p\"><span class=\"ne-text\">More info: [Server](</span><a href=\"https://hexo.io/docs/server.html)###\" data-href=\"https://hexo.io/docs/server.html)###\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/server.html)</span></a></p><h3 id=\"dRCiA\"><span class=\"ne-text\">Generate static files</span></h3><p id=\"uafd5cf52\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"u743a3306\" class=\"ne-p\"><span class=\"ne-text\">bash$ hexo generate </span></p><p id=\"u7b1cbc66\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"u6fce54b5\" class=\"ne-p\"><span class=\"ne-text\">More info: [Generating](</span><a href=\"https://hexo.io/docs/generating.html)###\" data-href=\"https://hexo.io/docs/generating.html)###\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/generating.html)###</span></a><span class=\"ne-text\"> Deploy to remote sites </span></p><p id=\"u127a790a\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"u7381b570\" class=\"ne-p\"><span class=\"ne-text\">bash$ hexo deploy  </span></p><p id=\"uacc6ce9d\" class=\"ne-p\"><span class=\"ne-text\">``` </span></p><p id=\"ua163904b\" class=\"ne-p\"><span class=\"ne-text\">More info: [Deployment](</span><a href=\"https://hexo.io/docs/one-command-deployment.html)\" data-href=\"https://hexo.io/docs/one-command-deployment.html)\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://hexo.io/docs/one-command-deployment.html)</span></a></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"ub483cecb\" id=\"ub483cecb\"><span data-lake-id=\"uda1f9ad6\" id=\"uda1f9ad6\">--- </span></p><p data-lake-id=\"uc307a430\" id=\"uc307a430\"><span data-lake-id=\"u7afd244d\" id=\"u7afd244d\">title: Hello World</span></p><p data-lake-id=\"u5d03c68a\" id=\"u5d03c68a\"><span data-lake-id=\"ufd4ba4fc\" id=\"ufd4ba4fc\">date: 2021-7-21</span></p><p data-lake-id=\"uba824ddf\" id=\"uba824ddf\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2021-7-21</span></p><p data-lake-id=\"uc581a144\" id=\"uc581a144\"><span data-lake-id=\"ub551b569\" id=\"ub551b569\">cover: https://img2.baidu.com/it/u=3458022152,1943714347&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=640&amp;h=322</span></p><p data-lake-id=\"ufdf08c0c\" id=\"ufdf08c0c\"><span data-lake-id=\"ua7e68801\" id=\"ua7e68801\">--- </span></p><p data-lake-id=\"ucaaa8912\" id=\"ucaaa8912\"><span data-lake-id=\"u1a4b7e73\" id=\"u1a4b7e73\">[Welcome to [Hexo](</span><a href=\"https://hexo.io/)!\" target=\"_blank\" data-lake-id=\"ue60e2951\" id=\"ue60e2951\"><span data-lake-id=\"u6b270de0\" id=\"u6b270de0\">https://hexo.io/)!</span></a><span data-lake-id=\"u97bf1708\" id=\"u97bf1708\"> This is your very first post. Check [documentation](</span><a href=\"https://hexo.io/docs/)\" target=\"_blank\" data-lake-id=\"uf62b4d55\" id=\"uf62b4d55\"><span data-lake-id=\"uaf1cef76\" id=\"uaf1cef76\">https://hexo.io/docs/)</span></a><span data-lake-id=\"u000b347b\" id=\"u000b347b\"> for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](</span><a href=\"https://hexo.io/docs/troubleshooting.html)\" target=\"_blank\" data-lake-id=\"u210d23c6\" id=\"u210d23c6\"><span data-lake-id=\"u2b41750b\" id=\"u2b41750b\">https://hexo.io/docs/troubleshooting.html)</span></a><span data-lake-id=\"u986a0872\" id=\"u986a0872\"> or you can ask me on [GitHub](</span><a href=\"https://github.com/hexojs/hexo/issues).##\" target=\"_blank\" data-lake-id=\"ue73f193e\" id=\"ue73f193e\"><span data-lake-id=\"u5eb4e1cb\" id=\"u5eb4e1cb\">https://github.com/hexojs/hexo/issues).</span></a></p><h2 data-lake-id=\"bEfxJ\" id=\"bEfxJ\"><span data-lake-id=\"u9f4b1e18\" id=\"u9f4b1e18\">Quick Start</span></h2><h3 data-lake-id=\"MdMuP\" id=\"MdMuP\"><span data-lake-id=\"ud435e77c\" id=\"ud435e77c\">Create a new post </span></h3><p data-lake-id=\"u29ebda3b\" id=\"u29ebda3b\"><span data-lake-id=\"u066ccc71\" id=\"u066ccc71\">``` </span></p><p data-lake-id=\"ue1e7d183\" id=\"ue1e7d183\"><span data-lake-id=\"u6b663bc7\" id=\"u6b663bc7\">bash$ hexo new &quot;My New Post&quot; </span></p><p data-lake-id=\"ufa5f4e80\" id=\"ufa5f4e80\"><span data-lake-id=\"ua81ce352\" id=\"ua81ce352\">``` </span></p><p data-lake-id=\"u6d033f2c\" id=\"u6d033f2c\"><span data-lake-id=\"u14b101e1\" id=\"u14b101e1\">More info: [Writing](</span><a href=\"https://hexo.io/docs/writing.html)###\" target=\"_blank\" data-lake-id=\"u16ee1fc7\" id=\"u16ee1fc7\"><span data-lake-id=\"u6bd79d70\" id=\"u6bd79d70\">https://hexo.io/docs/writing.html)</span></a></p><h3 data-lake-id=\"LxY6K\" id=\"LxY6K\"><span data-lake-id=\"u5eb1d825\" id=\"u5eb1d825\">Run server</span></h3><p data-lake-id=\"u83e34453\" id=\"u83e34453\"><span data-lake-id=\"u28d4e34f\" id=\"u28d4e34f\">``` </span></p><p data-lake-id=\"udb57ce59\" id=\"udb57ce59\"><span data-lake-id=\"u53a8002a\" id=\"u53a8002a\">bash$ hexo server</span></p><p data-lake-id=\"u806543ce\" id=\"u806543ce\"><span data-lake-id=\"uf3818c05\" id=\"uf3818c05\">``` </span></p><p data-lake-id=\"u3baa257b\" id=\"u3baa257b\"><span data-lake-id=\"uc2698810\" id=\"uc2698810\">More info: [Server](</span><a href=\"https://hexo.io/docs/server.html)###\" target=\"_blank\" data-lake-id=\"ubb4dabf1\" id=\"ubb4dabf1\"><span data-lake-id=\"u64e3835a\" id=\"u64e3835a\">https://hexo.io/docs/server.html)</span></a></p><h3 data-lake-id=\"dRCiA\" id=\"dRCiA\"><span data-lake-id=\"u25b255b6\" id=\"u25b255b6\">Generate static files</span></h3><p data-lake-id=\"uafd5cf52\" id=\"uafd5cf52\"><span data-lake-id=\"u9b849da5\" id=\"u9b849da5\">``` </span></p><p data-lake-id=\"u743a3306\" id=\"u743a3306\"><span data-lake-id=\"ue0f950ce\" id=\"ue0f950ce\">bash$ hexo generate </span></p><p data-lake-id=\"u7b1cbc66\" id=\"u7b1cbc66\"><span data-lake-id=\"u71a933db\" id=\"u71a933db\">``` </span></p><p data-lake-id=\"u6fce54b5\" id=\"u6fce54b5\"><span data-lake-id=\"u6bdf4807\" id=\"u6bdf4807\">More info: [Generating](</span><a href=\"https://hexo.io/docs/generating.html)###\" target=\"_blank\" data-lake-id=\"ubc091431\" id=\"ubc091431\"><span data-lake-id=\"ue6f66b01\" id=\"ue6f66b01\">https://hexo.io/docs/generating.html)###</span></a><span data-lake-id=\"uaf6ef406\" id=\"uaf6ef406\"> Deploy to remote sites </span></p><p data-lake-id=\"u127a790a\" id=\"u127a790a\"><span data-lake-id=\"u8a2e914b\" id=\"u8a2e914b\">``` </span></p><p data-lake-id=\"u7381b570\" id=\"u7381b570\"><span data-lake-id=\"u6548d828\" id=\"u6548d828\">bash$ hexo deploy  </span></p><p data-lake-id=\"uacc6ce9d\" id=\"uacc6ce9d\"><span data-lake-id=\"ucfad1f8e\" id=\"ucfad1f8e\">``` </span></p><p data-lake-id=\"ua163904b\" id=\"ua163904b\"><span data-lake-id=\"u22e81fed\" id=\"u22e81fed\">More info: [Deployment](</span><a href=\"https://hexo.io/docs/one-command-deployment.html)\" target=\"_blank\" data-lake-id=\"uc5ea7da5\" id=\"uc5ea7da5\"><span data-lake-id=\"ufc0bc98b\" id=\"ufc0bc98b\">https://hexo.io/docs/one-command-deployment.html)</span></a></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"ub483cecb\" id=\"ub483cecb\"><span data-lake-id=\"uda1f9ad6\" id=\"uda1f9ad6\">--- </span></p><p data-lake-id=\"uc307a430\" id=\"uc307a430\"><span data-lake-id=\"u7afd244d\" id=\"u7afd244d\">title: Hello World</span></p><p data-lake-id=\"u5d03c68a\" id=\"u5d03c68a\"><span data-lake-id=\"ufd4ba4fc\" id=\"ufd4ba4fc\">date: 2021-7-21</span></p><p data-lake-id=\"uba824ddf\" id=\"uba824ddf\"><span data-lake-id=\"u5038de4a\" id=\"u5038de4a\">updated: 2021-7-21</span></p><p data-lake-id=\"uc581a144\" id=\"uc581a144\"><span data-lake-id=\"ub551b569\" id=\"ub551b569\">cover: https://img2.baidu.com/it/u=3458022152,1943714347&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=640&amp;h=322</span></p><p data-lake-id=\"ufdf08c0c\" id=\"ufdf08c0c\"><span data-lake-id=\"ua7e68801\" id=\"ua7e68801\">--- </span></p><p data-lake-id=\"ucaaa8912\" id=\"ucaaa8912\"><span data-lake-id=\"u1a4b7e73\" id=\"u1a4b7e73\">[Welcome to [Hexo](</span><a href=\"https://hexo.io/)!\" target=\"_blank\" data-lake-id=\"ue60e2951\" id=\"ue60e2951\"><span data-lake-id=\"u6b270de0\" id=\"u6b270de0\">https://hexo.io/)!</span></a><span data-lake-id=\"u97bf1708\" id=\"u97bf1708\"> This is your very first post. Check [documentation](</span><a href=\"https://hexo.io/docs/)\" target=\"_blank\" data-lake-id=\"uf62b4d55\" id=\"uf62b4d55\"><span data-lake-id=\"uaf1cef76\" id=\"uaf1cef76\">https://hexo.io/docs/)</span></a><span data-lake-id=\"u000b347b\" id=\"u000b347b\"> for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](</span><a href=\"https://hexo.io/docs/troubleshooting.html)\" target=\"_blank\" data-lake-id=\"u210d23c6\" id=\"u210d23c6\"><span data-lake-id=\"u2b41750b\" id=\"u2b41750b\">https://hexo.io/docs/troubleshooting.html)</span></a><span data-lake-id=\"u986a0872\" id=\"u986a0872\"> or you can ask me on [GitHub](</span><a href=\"https://github.com/hexojs/hexo/issues).##\" target=\"_blank\" data-lake-id=\"ue73f193e\" id=\"ue73f193e\"><span data-lake-id=\"u5eb4e1cb\" id=\"u5eb4e1cb\">https://github.com/hexojs/hexo/issues).</span></a></p><h2 data-lake-id=\"bEfxJ\" id=\"bEfxJ\"><span data-lake-id=\"u9f4b1e18\" id=\"u9f4b1e18\">Quick Start</span></h2><h3 data-lake-id=\"MdMuP\" id=\"MdMuP\"><span data-lake-id=\"ud435e77c\" id=\"ud435e77c\">Create a new post </span></h3><p data-lake-id=\"u29ebda3b\" id=\"u29ebda3b\"><span data-lake-id=\"u066ccc71\" id=\"u066ccc71\">``` </span></p><p data-lake-id=\"ue1e7d183\" id=\"ue1e7d183\"><span data-lake-id=\"u6b663bc7\" id=\"u6b663bc7\">bash$ hexo new &quot;My New Post&quot; </span></p><p data-lake-id=\"ufa5f4e80\" id=\"ufa5f4e80\"><span data-lake-id=\"ua81ce352\" id=\"ua81ce352\">``` </span></p><p data-lake-id=\"u6d033f2c\" id=\"u6d033f2c\"><span data-lake-id=\"u14b101e1\" id=\"u14b101e1\">More info: [Writing](</span><a href=\"https://hexo.io/docs/writing.html)###\" target=\"_blank\" data-lake-id=\"u16ee1fc7\" id=\"u16ee1fc7\"><span data-lake-id=\"u6bd79d70\" id=\"u6bd79d70\">https://hexo.io/docs/writing.html)</span></a></p><h3 data-lake-id=\"LxY6K\" id=\"LxY6K\"><span data-lake-id=\"u5eb1d825\" id=\"u5eb1d825\">Run server</span></h3><p data-lake-id=\"u83e34453\" id=\"u83e34453\"><span data-lake-id=\"u28d4e34f\" id=\"u28d4e34f\">``` </span></p><p data-lake-id=\"udb57ce59\" id=\"udb57ce59\"><span data-lake-id=\"u53a8002a\" id=\"u53a8002a\">bash$ hexo server</span></p><p data-lake-id=\"u806543ce\" id=\"u806543ce\"><span data-lake-id=\"uf3818c05\" id=\"uf3818c05\">``` </span></p><p data-lake-id=\"u3baa257b\" id=\"u3baa257b\"><span data-lake-id=\"uc2698810\" id=\"uc2698810\">More info: [Server](</span><a href=\"https://hexo.io/docs/server.html)###\" target=\"_blank\" data-lake-id=\"ubb4dabf1\" id=\"ubb4dabf1\"><span data-lake-id=\"u64e3835a\" id=\"u64e3835a\">https://hexo.io/docs/server.html)</span></a></p><h3 data-lake-id=\"dRCiA\" id=\"dRCiA\"><span data-lake-id=\"u25b255b6\" id=\"u25b255b6\">Generate static files</span></h3><p data-lake-id=\"uafd5cf52\" id=\"uafd5cf52\"><span data-lake-id=\"u9b849da5\" id=\"u9b849da5\">``` </span></p><p data-lake-id=\"u743a3306\" id=\"u743a3306\"><span data-lake-id=\"ue0f950ce\" id=\"ue0f950ce\">bash$ hexo generate </span></p><p data-lake-id=\"u7b1cbc66\" id=\"u7b1cbc66\"><span data-lake-id=\"u71a933db\" id=\"u71a933db\">``` </span></p><p data-lake-id=\"u6fce54b5\" id=\"u6fce54b5\"><span data-lake-id=\"u6bdf4807\" id=\"u6bdf4807\">More info: [Generating](</span><a href=\"https://hexo.io/docs/generating.html)###\" target=\"_blank\" data-lake-id=\"ubc091431\" id=\"ubc091431\"><span data-lake-id=\"ue6f66b01\" id=\"ue6f66b01\">https://hexo.io/docs/generating.html)###</span></a><span data-lake-id=\"uaf6ef406\" id=\"uaf6ef406\"> Deploy to remote sites </span></p><p data-lake-id=\"u127a790a\" id=\"u127a790a\"><span data-lake-id=\"u8a2e914b\" id=\"u8a2e914b\">``` </span></p><p data-lake-id=\"u7381b570\" id=\"u7381b570\"><span data-lake-id=\"u6548d828\" id=\"u6548d828\">bash$ hexo deploy  </span></p><p data-lake-id=\"uacc6ce9d\" id=\"uacc6ce9d\"><span data-lake-id=\"ucfad1f8e\" id=\"ucfad1f8e\">``` </span></p><p data-lake-id=\"ua163904b\" id=\"ua163904b\"><span data-lake-id=\"u22e81fed\" id=\"u22e81fed\">More info: [Deployment](</span><a href=\"https://hexo.io/docs/one-command-deployment.html)\" target=\"_blank\" data-lake-id=\"uc5ea7da5\" id=\"uc5ea7da5\"><span data-lake-id=\"ufc0bc98b\" id=\"ufc0bc98b\">https://hexo.io/docs/one-command-deployment.html)</span></a></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-11-17T09:09:06.000Z",
    "deleted_at": null,
    "created_at": "2022-11-15T07:24:52.000Z",
    "updated_at": "2022-11-17T09:09:06.000Z",
    "published_at": "2022-11-17T09:09:06.000Z",
    "first_published_at": "2022-11-15T07:24:52.424Z",
    "word_count": 105,
    "cover": null,
    "description": "--- title: Hello Worlddate: 2021-7-21updated: 2021-7-21cover: https://img2.baidu.com/it/u=3458022152,1943714347&fm=253&fmt=auto&app=120&f=JPEG?w=64...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]